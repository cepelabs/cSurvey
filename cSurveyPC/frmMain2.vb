Imports System.ComponentModel
Imports System.Drawing.Drawing2D
Imports System.IO
Imports System.Reflection
Imports System.Xml
Imports BrightIdeasSoftware
Imports cSurveyPC
Imports cSurveyPC.cSurvey
Imports cSurveyPC.cSurvey.Design
Imports cSurveyPC.cSurvey.Design.Items
Imports cSurveyPC.cSurvey.Design.Layers
Imports cSurveyPC.cSurvey.Design.Options
Imports cSurveyPC.cSurvey.Drawings
Imports cSurveyPC.cSurvey.Helper.Editor
Imports cSurveyPC.cSurvey.Net
Imports cSurveyPC.cSurvey.Properties
Imports cSurveyPC.cSurvey.Scripting
Imports DevExpress.XtraBars
Imports DevExpress.XtraGrid.Columns
Imports DevExpress.XtraGrid.Views.Base
Imports HelixToolkit.Wpf
Imports Microsoft.WindowsAPICodePack.Taskbar

Friend Class frmMain2
    Private sZoomDefault As Single = 500
    Private sZoomRatio As Single = 15

    Private sFilename As String
    Private dlastLogEvent As DateTime

    Private WithEvents oSurvey As cSurvey.cSurvey

    Private WithEvents oTools As Helper.Editor.cEditTools
    Private WithEvents oPlanTools As Helper.Editor.cEditDesignTools
    Private WithEvents oProfileTools As Helper.Editor.cEditDesignTools
    Private WithEvents o3DTools As Helper.Editor.cEditDesignTools

    Private WithEvents oVSB As DevExpress.XtraEditors.VScrollBar
    Private WithEvents oHSB As DevExpress.XtraEditors.HScrollBar

    Private WithEvents frmU As frmUndoManager

    'Private WithEvents frmD As frmDisto

    'Private WithEvents frmF As frmFind
    Private WithEvents frmV As frmPreview
    Private WithEvents frmS As frmScriptEditor
    Private WithEvents frmThP As frmTherionPad
    Private WithEvents frmProg As frmProgress

    'Private WithEvents frmMFT As frmMainFloatingToolbar

    Private WithEvents oDelayedRedrawTimer As Timer
    Private WithEvents oObjectPropertyTimer As Timer
    Private oAutosaveThread As Threading.Thread

    Private sObjectsPath As String
    Private sClipartPath As String

    Private sNewHash As String
    Private sLastHash As String

    Private bMousePressed As Boolean

    Private oDefaultOptions As cOptions

    Private oMousePointer As cMousePointer

    Private oFrozenDesktop As Image
    Private WithEvents oCurrentPlanMarkedDesktopPoint As cMarkedDesktopPoint
    Private WithEvents oCurrentProfileMarkedDesktopPoint As cMarkedDesktopPoint

    Private oMultiSelBrush1 As SolidBrush
    Private oMultiSelPen1 As Pen
    Private oMultiSelBrush2 As SolidBrush
    Private oMultiSelPen2 As Pen
    Private oMultiSelBrush3 As SolidBrush
    Private oMultiSelPen3 As Pen

    Private iSnapToPoint As Integer = 0
    Private oSnapToPointPointTojoin As cPoint

    'Private bSnapToGrid As Boolean = False
    'Private sGridSnap As Single = 0.1

    Private Enum DropActionEnum
        None = &H0
        AddImageOrSketch = &H1
        AddText = &H2

        ImportData = &H10
        ImportVTopoData = &H12
        ImportcSurveyData = &H13
        ImportTextData = &H14
        ImportCompassData = &H15

        ImportDesign = &H20
        ImportSVGDesign = &H21

        ImportKMLData = &H30
        ImportGPXData = &H31

        AddAttachment = &H128
    End Enum

    Public Enum HistoryModeEnum
        Folder = 0
        WebStorage = 1
        Both = 2
    End Enum

    Private iGridColorBy As Integer
    Private bLayersShowItemPreview As Boolean

    Private bHistoryBusy As Boolean

    Private bHistory As Boolean
    Private iHistoryMode As HistoryModeEnum
    Private sHistoryWebURL As String
    Private sHistoryWebUsername As String
    Private sHistoryWebPassword As String
    Private sHistoryFolder As String
    Private iHistoryDailyCopies As Integer
    Private iHistoryMaxCopies As Integer
    Private bHistoryCreateOnSave As Boolean
    Private bHistoryWebCreateOnSave As Boolean

    Private bLinkedSurveysSelectOnAdd As Boolean
    Private bLinkedSurveysShowInCaveInfo As Boolean
    Private bLinkedSurveysRecursiveLoad As Boolean
    Private bLinkedSurveysRefreshOnLoad As Boolean
    Private bLinkedSurveysRefreshOnLoadPrioritizeChildren As Boolean

    Private WithEvents oClipboardViewer As clipboardChangeNotifier

    Private oCenterOfRotation As PointF

    Public Enum RulersStyleEnum
        Simple = 0
        Advanced = 1
    End Enum

    Public Enum ImportExportFormatEnum
        Survey = 0
        Track = 1
        Image = 2
        Design = 3
        threedD = 4
    End Enum

    Public Enum ImportExportFormatTypeEnum
        None = 0
        VTopo = 1
        Therion = 2
        CSV = 3
        Text = 4
    End Enum

    Public Enum ViewModeEnum
        Segments = 0
        Trigpoints = 1
    End Enum

    Public Enum DesignQualityLevelEnum
        Base = 0
        MediumQuality = 1
        HighQuality = 2
    End Enum

    Public Enum ZoomTypeEnum
        ZoomFactor = 0
        ScaleFactor = 1
    End Enum

    Private sDefaultClub As String
    Private sDefaultTeam As String
    Private sDefaultDesigner As String
    Private iDefaultCalculateMode As cSurveyPC.cSurvey.cSurvey.CalculateModeEnum
    Private iDefaultCalculateType As cSurveyPC.cSurvey.cSurvey.CalculateTypeEnum
    Private bDefaultShowLegacyPrintAndExportObjects As Boolean
    Private bDefaultArrangePriorityOnImport As Boolean

    Private sDefaultFolder As String

    Private bLogEnabled As Boolean
    Private bUseOnlyAnchorToMove As Boolean
    Private iAdvancedSelectionMode As Integer
    Private sAdvancedSelectionPrecision As Single = 1000.0F
    Private sAdvancedSelectionWide As Single = 4.0F

    Private iZoomType As ZoomTypeEnum = ZoomTypeEnum.ScaleFactor

    Private bGridExportSplayNames As Boolean

    Private bAlwaysUseShellForAttachments As Boolean

    Private iDesignQuality As DesignQualityLevelEnum
    Private bDrawRulers As Boolean
    Private iDrawRulesStyle As RulersStyleEnum
    Private iDrawMetricGrid As Integer

    Private bAllowResizablePanels As Boolean

    Private bDesignBarShowLastUsedTools As Boolean
    Private Enum DesignBarPositionEnum
        [Default] = 0
        TopLeftCorner = 1
        NearCurrentItem = 2
        NearCurrentItemAndPoint = 3
    End Enum
    Private iDesignBarPosition As DesignBarPositionEnum

    Private oCurrentDesign As cDesign
    Private WithEvents oCurrentOptions As cOptionsDesign

    Private bDisableFilterItemEvent As Boolean = True
    Private bDisableSelectItemEvent As Boolean = True
    Private bDisablePaintEvent As Boolean = True
    Private bDisableZoomEvent As Boolean = True
    Private bDisableSegmentsChangeEvent As Boolean = True
    Private bDisableTrigpointsChangeEvent As Boolean = True
    Private bDisabledObjectPropertyEvent As Boolean = True
    Private bDisabledCaveBranchChangeEvent As Boolean = True
    Private bDisabledAutosaveEvent As Boolean = True
    Private bDisabledSurfaceLayersEvent As Boolean = True
    Private bDisablewarpingDetails As Boolean = False

    Private oStartPaintDrawPosition As PointF

    Private bToolsEnabledByLevel As Boolean
    Private bToolsHiddenByLevel As Boolean

    Private iFunctionLanguage As LanguageEnum

    Private bAutoSaveUseHistorySettings As Boolean

    Private Enum MultiSelTypeEnum
        None = 0
        SingleLayer = 1
        MultiLayer = 2
        Zoom = 3
    End Enum

    Private iMultiSelEnabled As MultiSelTypeEnum
    Private oStartMultiselPosition As PointF
    Private oEndMultiselPosition As PointF

    Private bDrawing As Boolean

    Private sWide As Single = 0.001

    Private bAutoZoomToFit As Boolean

    'Private bShowFieldData As Boolean
    'Private bShowDesignArea As Boolean
    'Private bShowObjectProp As Boolean

    Private oOpenHandCursor As Cursor
    Private oClosedHandCursor As Cursor

    Private Enum PaintInfoIndexEnum
        Plan = 0
        Profile = 1
    End Enum

    Friend Structure sPaintInfo
        Public PaintTranslation As PointF
        Public PaintZoom As Single

        Public Sub Backup(ByVal BackupPaintTranslation As PointF, ByVal BackupPaintZoom As Single)
            PaintTranslation = BackupPaintTranslation
            PaintZoom = BackupPaintZoom
        End Sub

        Public Sub Restore(ByRef RestoredPaintTranslation As PointF, ByRef RestoredPaintZoom As Single)
            If Not (PaintZoom = 0 And PaintTranslation.IsEmpty) Then
                RestoredPaintTranslation = PaintTranslation
                RestoredPaintZoom = PaintZoom
            End If
        End Sub

        Public Function IsEmpty() As Boolean
            Return PaintZoom = 0 And PaintTranslation.IsEmpty
        End Function
    End Structure

    Private oPaintInfo(2) As sPaintInfo

    Private oPaintTranslation As PointF = New PointF(0, 0)
    Private sPaintZoom As Single

    Private bBeginEdit As Boolean
    Private bEditPointByPoint As Boolean

    Private bSegmentChanged As Boolean
    Private bTrigpointChanged As Boolean

    Private Sub pMapZoom(ByVal Zoom As Single)
        If sPaintZoom <> Zoom Then
            Dim iNewZoomValue As Integer = Zoom * sZoomRatio
            If iNewZoomValue > trkZoom.Maximum Then
                iNewZoomValue = trkZoom.Maximum
                Zoom = iNewZoomValue / sZoomRatio
            End If
            If iNewZoomValue < trkZoom.Minimum Then
                iNewZoomValue = trkZoom.Minimum
                Zoom = iNewZoomValue / sZoomRatio
            End If

            bDisableZoomEvent = True

            Dim sOldPaintZoom As Single = sPaintZoom
            If sOldPaintZoom = 0 Then sOldPaintZoom = 1
            sPaintZoom = Zoom
            pnlStatusZoomBar.EditValue = iNewZoomValue

            Dim iScale As Integer = 250
            If Not oCurrentOptions Is Nothing Then
                Using oGr As Graphics = picMap.CreateGraphics
                    'oGr.PageUnit = GraphicsUnit.Pixel
                    iScale = modPaint.GetScaleFactor(oGr, sPaintZoom)
                    oCurrentOptions.CurrentScale = iScale
                End Using
            End If

            Dim sZoomText As String = ""
            Select Case iZoomType
                Case ZoomTypeEnum.ScaleFactor
                    sZoomText = "1:" & modNumbers.MathRound(iScale, 0)
                Case ZoomTypeEnum.ZoomFactor
                    sZoomText = Strings.Format(sPaintZoom, "0.00 x")
            End Select
            pnlStatusDesignZoom.Caption = sZoomText

            Try
                Dim oCurrentTranslation As PointF = New PointF(oPaintTranslation.X * sPaintZoom / sOldPaintZoom, oPaintTranslation.Y * sPaintZoom / sOldPaintZoom)
                Dim sX As Single = (picMap.Width - picMap.Width * sPaintZoom / sOldPaintZoom) / 2
                Dim sY As Single = (picMap.Height - picMap.Height * sPaintZoom / sOldPaintZoom) / 2
                oPaintTranslation = New PointF(sX + oCurrentTranslation.X, sY + oCurrentTranslation.Y)
            Catch
            End Try

            bDisableZoomEvent = False

            If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()

            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pConsoleClear()
        If rtfConsole.Visible Then
            Call rtfConsole.Clear()
        End If
    End Sub

    Private Sub pPreviewHide()
        If Not frmV Is Nothing Then
            frmV.Close()
            frmV = Nothing
        End If
    End Sub

    Private Sub pToolsCreate()
        oTools = New Helper.Editor.cEditTools(oSurvey)
        oPlanTools = oTools.PlanTools
        oProfileTools = oTools.ProfileTools
        o3DTools = oTools.ThreeDTools
    End Sub

    Private Sub pSurveyNew(Optional Template As cTemplateEntry = Nothing)
        Call pSurveyEndEdit()

        If pSurveySaveOnExit() Then
            Call modWMSManager.WMSDownloadFileCancelAsync()

            Call pConsoleClear()
            Call pPopupHide()
            Call pPreviewHide()
            Call pScriptEditorHide()

            bDisabledAutosaveEvent = True
            bDisabledObjectPropertyEvent = True

            oCurrentDesign = Nothing

            '---------------------------------------------------------
            oSurvey = New cSurvey.cSurvey
            'template or default template...
            If IsNothing(Template) AndAlso Not IsNothing(oTemplateDefault) Then Template = oTemplateDefault
            If Not IsNothing(Template) Then
                Call oSurvey.Load(Template.File.FullName, cSurvey.cSurvey.LoadOptionsEnum.Update)
                Call oSurvey.NewID()
            End If
            Call pToolsCreate()

            '---------------------------------------------------------
            Call pSegmentClear()
            Call pTrigpointClear()

            oDefaultOptions = oSurvey.Options("_design.plan").DefaultOptions
            Call My.Application.SetCurrent(oSurvey, "")

            'oDesign3D = New cDesign3D(oSurvey)

            sFilename = ""

            With oSurvey.Properties
                .Club = sDefaultClub
                .Team = sDefaultTeam
                .Designer = sDefaultDesigner
                .CalculateMode = iDefaultCalculateMode
                .CalculateType = iDefaultCalculateType

                .ShowLegacyPrintAndExportObjects = bDefaultShowLegacyPrintAndExportObjects
            End With
            'Call pSurveyClear()

            Call pSurveyMainProperties()
            Call pSurveyFillSessionList(True)
            Call pSurveyFillCaveList(True)

            Call pSurveyCaption()

            'oCurrentDesign = Nothing
            'oCurrentOptions = Nothing

            Call pDesignRestoreShowBinding()
            Call pSurveyRestoreCurrentWorkarea()

            If Not IsNothing(oDockClipart) Then oDockClipart.SetSurvey(oSurvey)
            If Not IsNothing(oDockText) Then oDockText.SetSurvey(oSurvey)
            If Not IsNothing(oDockAV) Then oDockAV.SetSurvey(oSurvey)
            If Not IsNothing(oDockIV) Then oDockIV.SetSurvey(oSurvey)
            If Not IsNothing(oDockLS) Then Call oDockLS.SetSurvey(oSurvey)
            If Not IsNothing(oDockTexts) Then Call oDockTexts.SetSurvey(oSurvey)
            If Not IsNothing(oDockLevels) Then
                oDockLevels.SetSurvey(oSurvey)
                Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)
            End If
            If Not IsNothing(frmU) Then frmU.SetSurvey(oSurvey, pGetCurrentTools)

            Call pObjectPropertyInitialize()
            'in new faccio sempre un reset dello zoom e centro l'area di disegno...
            Call pSurveyShowPlan()
            Call pZoomReset()
            Call pMapCenterAndFit()

            Call pSurveySegmentsGridSetup()
            Call pSurveyTrigpointsRefresh()
            Call oTools.SelectSegment(oSurvey.Segments.First)
            Call oTools.SelectTrigpoint(oSurvey.TrigPoints.First)

            Call pSurveyPenTypeRefresh()

            If bHolos Then oHolos.Reset()

            sLastHash = pSurveyGetHash()
            sNewHash = sLastHash

            Call pObjectPropertyDelayedLoad()

            bDisabledAutosaveEvent = False
            bDisabledObjectPropertyEvent = False
        End If
    End Sub

    Private Sub pMapCenterAndFitCaveBranch()
        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        Dim oBounds As RectangleF = oCurrentDesign.GetCaveBounds(oCurrentOptions, sCave, sBranch, True)
        Call pMapCenterAndFit(oBounds)
    End Sub

    Private Sub pMapCenterAndFit()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call oHolos.ZoomExtents()
        Else
            Dim oBounds As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
            Call pMapCenterAndFit(oBounds)
        End If
    End Sub

    Private Sub pMapCenterAndFit(ByVal Bounds As RectangleF)
        Try
            Dim iMapWidth As Integer = picMap.Width
            Dim iMapHeight As Integer = picMap.Height
            Dim sWidth As Single = Bounds.Width * 1.1
            Dim sHeight As Single = Bounds.Height * 1.1
            Dim sdX As Single = iMapWidth / sWidth
            Dim sdY As Single = iMapHeight / sHeight
            Dim sD As Single
            If sdY < sdX Then
                sD = sdY
            Else
                sD = sdX
            End If
            If Single.IsInfinity(sD) OrElse Single.IsNaN(sD) Then sD = 10
            Call pMapZoom(sD)
            Dim sX As Single = -Bounds.Left * sPaintZoom + 0 + (picMap.Width - (Bounds.Width * sPaintZoom)) / 2
            Dim sY As Single = -Bounds.Top * sPaintZoom + 0 + (picMap.Height - (Bounds.Height * sPaintZoom)) / 2
            oPaintTranslation = New PointF(sX, sY)
        Catch
        End Try
        Call pMapInvalidate()
    End Sub

    Private Sub pMapCenter()
        Try
            Dim oBounds As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)
            Dim sX As Single = -oBounds.Left * sPaintZoom + 0 + (picMap.Width - (oBounds.Width * sPaintZoom)) / 2
            Dim sY As Single = -oBounds.Top * sPaintZoom + 0 + (picMap.Height - (oBounds.Height * sPaintZoom)) / 2
            oPaintTranslation = New PointF(sX, sY)
        Catch
        End Try
        Call pMapInvalidate()
    End Sub

    Private Sub pSurveyImport(ByVal ImportFormat As ImportExportFormatEnum, Optional Filename As String = "", Optional FilterIndex As Integer = 0, Optional ByVal Append As Boolean = False)
        Dim bSaveLastUsedFilter As Boolean = False
        Select Case ImportFormat
            Case ImportExportFormatEnum.Survey
                If Filename = "" Then
                    Dim olfd As OpenFileDialog = New OpenFileDialog
                    With olfd
                        .Filter = GetLocalizedString("main.filetypeTRO") & " (*.TRO)|*.TRO|" & GetLocalizedString("main.filetypeCSURVEY") & " (*.CSX;*.CSZ)|*.CSX;*.CSZ|" & GetLocalizedString("main.filetypePOCKETTOPO") & " (*.TXT)|*.TXT|" & GetLocalizedString("main.filetypeCOMPASSDATA") & " (*.DAT)|*.dat|" & GetLocalizedString("main.filetypeCAVEEXPLORER") & " (*.TXT)|*.TXT|" & GetLocalizedString("main.filetypeTEXT") & " (*.CSV;*.TXT)|*.CSV;*.TXT|" & GetLocalizedString("main.filetypeXLSX") & " (*.XLSX)|*.XLSX"
                        If FilterIndex > 0 Then
                            .FilterIndex = FilterIndex
                            bSaveLastUsedFilter = False
                        Else
                            .FilterIndex = modMain.FilterRestoreLast("import.data", 1)
                            bSaveLastUsedFilter = True
                        End If
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Filename = .FileName
                            FilterIndex = .FilterIndex
                            If bSaveLastUsedFilter Then
                                Call modMain.FilterSaveLast("import.data", FilterIndex)
                            End If
                        End If
                    End With
                End If

                If Filename <> "" Then
                    Select Case FilterIndex
                        Case 1
                            'VISUALTOPO
                            Call pSurveyImportVisualTopo(Filename, Append)
                        Case 2
                            'cSurvey
                            Call pSurveyImportcSurvey(Filename, Append)
                        Case 3
                            'POCKETTOPO
                            Call pSurveyImportPocketTopo(Filename, Append)
                        Case 4
                            'COMPASS
                            Call pSurveyImportCompass(Filename, Append)
                        Case 5
                            'CAVEEXPLORER
                            Call pSurveyImportCaveExplorer(Filename, Append)
                        Case 6
                            'FILE DI TESTO GENERICO
                            Call pSurveyImportText(Filename, Append)
                        Case 7
                            'EXCEL FILE
                            Call pSurveyImportXLSX(Filename, Append)
                    End Select
                End If
            Case ImportExportFormatEnum.Track
                If Filename = "" Then
                    Dim olfd As OpenFileDialog = New OpenFileDialog
                    With olfd
                        .Filter = GetLocalizedString("main.filetypeKML") & " (*.KML)|*.KML|" & GetLocalizedString("main.filetypeGPX") & " (*.GPX)|*.GPX"
                        If FilterIndex > 0 Then
                            .FilterIndex = FilterIndex
                            bSaveLastUsedFilter = False
                        Else
                            .FilterIndex = modMain.FilterRestoreLast("import.track", 1)
                            bSaveLastUsedFilter = True
                        End If
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Filename = .FileName
                            FilterIndex = .FilterIndex
                            If bSaveLastUsedFilter Then
                                Call modMain.FilterSaveLast("import.track", .FilterIndex)
                            End If
                        End If
                    End With
                End If

                If Filename <> "" Then
                    Select Case FilterIndex
                        Case 1, 2
                            'TRACCIA GPS
                            Call pSurveyImportTrack(Filename, FilterIndex, Append)
                    End Select
                End If
            Case ImportExportFormatEnum.Design
                If Filename = "" Then
                    Dim olfd As OpenFileDialog = New OpenFileDialog
                    With olfd
                        .Filter = GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeCSURVEY") & " (*.CSX;*.CSZ)|*.CSX;*.CSZ|" & GetLocalizedString("main.filetypeTH") & " (*.TH;*.TH2)|*.TH;*.TH2"
                        If FilterIndex > 0 Then
                            .FilterIndex = FilterIndex
                            bSaveLastUsedFilter = False
                        Else
                            .FilterIndex = modMain.FilterRestoreLast("import.design", 1)
                            bSaveLastUsedFilter = True
                        End If
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Filename = .FileName
                            FilterIndex = .FilterIndex
                            If bSaveLastUsedFilter Then
                                Call modMain.FilterSaveLast("import.design", .FilterIndex)
                            End If
                        End If
                    End With
                End If

                If Filename <> "" Then
                    Select Case FilterIndex
                        Case 1
                            'SVG
                            Call pSurveyImportSVG(Filename, Append)
                        Case 2
                            'cSurvey
                            Call pSurveyImportcSurvey(Filename, Append)
                        Case 3
                            'Therion TH2
                            Call pSurveyImportTherion(Filename, Append)
                    End Select
                End If
        End Select
    End Sub

    Private Delegate Sub pConsoleAddDelegate(ByVal Type As cSurvey.cSurvey.LogEntryType, Text As String)

    Private Sub pConsoleAdd(ByVal Type As cSurvey.cSurvey.LogEntryType, ByVal Text As String)
        If InvokeRequired Then
            Call Me.BeginInvoke(New pConsoleAddDelegate(AddressOf pConsoleAdd), {Type, Text})
        Else
            If Text <> "" Then
                If Type = cSurvey.cSurvey.LogEntryType.Error OrElse (Type = cSurvey.cSurvey.LogEntryType.Unknown AndAlso (Text Like "* error -- *")) Then
                    rtfConsole.SelectionColor = Color.DarkRed
                ElseIf Type = cSurvey.cSurvey.LogEntryType.Warning Then
                    rtfConsole.SelectionColor = Color.Orange
                Else
                    rtfConsole.SelectionColor = SystemColors.WindowText
                End If
                Call rtfConsole.AppendText(Text & vbCrLf)
                Call rtfConsole.ScrollToCaret()
            End If
        End If
    End Sub

    Private Sub pLogAdd(Exception As Exception)
        Call pConsoleAdd(cSurvey.cSurvey.LogEntryType.Error, Exception.Message & vbCrLf & "in" & Exception.StackTrace)
    End Sub

    Private Sub pLogAdd(ByVal Type As cSurvey.cSurvey.LogEntryType, ByVal Text As String, Optional ByVal ShowInConsole As Boolean = False, Optional ByVal ConsoleText As String = "")
        If ShowInConsole AndAlso (Text <> "" OrElse ConsoleText <> "") Then
            If ConsoleText = "" Then ConsoleText = Text
            Call pConsoleAdd(Type, ConsoleText)
        End If
    End Sub

    Private Function pSurveyRecentsLoad() As List(Of String)
        Dim oRecents As List(Of String) = New List(Of String)
        Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey\Recent", Microsoft.Win32.RegistryKeyPermissionCheck.ReadSubTree)
            For Each sValueName As String In oReg.GetValueNames
                Call oRecents.Add(oReg.GetValue(sValueName))
            Next
            Call oReg.Close()
        End Using
        Return oRecents
    End Function

    Private Sub pSurveyRecentsRemoveFrom(Filename As String)
        Dim sFilename As String = Filename.ToLower
        Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey\Recent", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
            Dim oRecents As List(Of String) = New List(Of String)
            For Each sValueName As String In oReg.GetValueNames
                Dim sValue As String = oReg.GetValue(sValueName)
                If sValue.ToLower = Filename.ToLower Then
                    Call oReg.DeleteValue(sValueName)
                End If
            Next
            Call oReg.Close()
        End Using
    End Sub

    Private Sub pSurveyRecentsAppendTo(Filename As String)
        Dim sFilename As String = Filename.ToLower
        Dim oRecents As List(Of String) = New List(Of String)
        Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey\Recent", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
            For Each sValueName As String In oReg.GetValueNames
                Call oRecents.Add(oReg.GetValue(sValueName))
                Call oReg.DeleteValue(sValueName)
            Next
            If oRecents.Contains(sFilename) Then
                Call oRecents.Remove(sFilename)
            End If
            Call oRecents.Insert(0, sFilename)
            Do While oRecents.Count > 10
                Call oRecents.RemoveAt(10)
            Loop
            Dim iValueIndex As Integer = 0
            For Each sRecent As String In oRecents
                Call oReg.SetValue(iValueIndex, sRecent)
                iValueIndex += 1
            Next
            Call oReg.Close()
        End Using
    End Sub

    Private Sub pSurveyEndEdit()
        If Not oCurrentDesign Is Nothing Then
            If pGetCurrentDesignTools.IsInEdit Then
                Call pGetCurrentDesignTools.EndItem()
            End If
            Call grdViewSegments.HideEditor()
            Call pSegmentSave(oTools.CurrentSegment)
            Call pTrigPointSave(oTools.CurrentTrigpoint)
        End If
    End Sub

    Private Function pSurveyLoad(Optional ByVal Filename As String = "", Optional ByVal SaveCurrent As Boolean = True) As Boolean
        Call pSurveyEndEdit()

        Filename = Filename.Trim.Replace(Chr(34), "")
        Dim bSaved As Boolean
        If SaveCurrent Then
            bSaved = pSurveySaveOnExit()
        Else
            bSaved = True
        End If
        If bSaved Then
            If Filename = "" Then
                Using olfd As OpenFileDialog = New OpenFileDialog
                    With olfd
                        .FileName = sFilename
                        .Filter = GetLocalizedString("main.filetypeCSURVEY") & " (*.CSZ;*.CSX)|*.CSZ;*.CSX|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                        .FilterIndex = 1
                        .DefaultExt = ".CSZ"
                        If sDefaultFolder <> "" Then .InitialDirectory = sDefaultFolder
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Filename = .FileName
                        End If
                    End With
                End Using
            End If
            If Filename <> "" Then
                If oSurvey Is Nothing Then
                    oSurvey = New cSurvey.cSurvey
                End If
                Dim oResult As cSurvey.cActionResult = oSurvey.Check(Filename)
                If oResult.Result Then
                    oCurrentDesign = Nothing

                    oSurvey = New cSurveyPC.cSurvey.cSurvey

                    Call pToolsCreate()

                    Call pSegmentClear()
                    Call pTrigpointClear()

                    oDefaultOptions = oSurvey.Options("_design.plan").DefaultOptions
                    Call My.Application.SetCurrent(oSurvey, "")

                    Call oMousePointer.Push(Cursors.WaitCursor)
                    Call modWMSManager.WMSDownloadFileCancelAsync()
                    Call pConsoleClear()
                    Call pPopupHide()
                    Call pPreviewHide()
                    Call pScriptEditorHide()

                    bDisabledAutosaveEvent = True
                    bDisabledObjectPropertyEvent = True

                    Call modOpeningFlags.SetFlags(Me)
                    oResult = oSurvey.Load(Filename)
                    Call modOpeningFlags.ResetFlags()
                    If oResult.Result Then
                        sFilename = Filename

                        Call pSurveyRecentsAppendTo(sFilename)

                        Call pToolsCreate()

                        Call oMousePointer.Pop()

                        Call pSurveyMainProperties()
                        Call pSurveyFillSessionList(True)
                        Call pSurveyFillCaveList(True)

                        Call pSurveyCaption()

                        oCurrentDesign = Nothing
                        oCurrentOptions = Nothing

                        Dim bHavePaintInfo As Boolean

                        Call pDesignRestoreShowBinding()
                        Call pSurveyRestoreCurrentWorkarea(bHavePaintInfo)

                        If Not IsNothing(oDockClipart) Then oDockClipart.SetSurvey(oSurvey)
                        If Not IsNothing(oDockText) Then oDockText.SetSurvey(oSurvey)
                        If Not IsNothing(oDockAV) Then oDockAV.SetSurvey(oSurvey)
                        If Not IsNothing(oDockIV) Then oDockIV.SetSurvey(oSurvey)
                        If Not IsNothing(oDockLS) Then oDockLS.SetSurvey(oSurvey)
                        If Not IsNothing(oDockTexts) Then oDockTexts.SetSurvey(oSurvey)
                        If Not IsNothing(oDockLevels) Then
                            Call oDockLevels.SetSurvey(oSurvey)
                            Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)
                        End If
                        If Not IsNothing(frmU) Then frmU.SetSurvey(oSurvey, pGetCurrentTools)

                        Call pObjectPropertyInitialize()

                        Call pSurveyShowPlan()
                        'in load resetto lo zoom e centro l'area di disegno se il file non ha all'interno i dati di lavoro...
                        'If Not bHavePaintInfo Then
                        '    Call pZoomReset()
                        '    Call pMapCenterAndFit()
                        'End If

                        Call pSurveySegmentsGridSetup()
                        Call pSurveyTrigpointsRefresh()

                        Call oTools.SelectSegment(oSurvey.Segments.First)
                        Call oTools.SelectTrigpoint(oSurvey.TrigPoints.First)

                        Call pSurveyPenTypeRefresh()

                        If bHolos Then Call oHolos.Reset()

                        sLastHash = pSurveyGetHash()
                        'If oSurvey.Calculate.LoadedFromFile Then
                        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                            Call pSurvey3DRedraw(cHolosViewer.InvalidateType.All)
                        Else
                            Call pSurveyRedraw()
                        End If
                        Call pSurveyMainPropertiesPanelsRefresh()
                        'Else
                        '    Call pSurveyCalculate(True)
                        'End If
                        Call pSurveyCheckBezierLineType(oSurvey)
                    Else
                        Call MsgBox(String.Format(GetLocalizedString("main.warning19"), oResult.ErrorMessage), MsgBoxStyle.Critical Or MsgBoxStyle.OkOnly, GetLocalizedString("main.warningtitle"))
                    End If
                    bDisabledObjectPropertyEvent = False
                    bDisabledAutosaveEvent = False
                    If oResult.Result Then
                        Return True
                    Else
                        Return False
                    End If
                Else
                    Call MsgBox(String.Format(GetLocalizedString("main.warning19"), oResult.ErrorMessage), MsgBoxStyle.Critical Or MsgBoxStyle.OkOnly, GetLocalizedString("main.warningtitle"))
                    Return False
                End If
            End If
        Else
            Return False
        End If
    End Function

    Private Delegate Sub pStatusProgressDelegate(Percent As Single, Text As String)

    Private Sub pStatusProgress(ByVal Percent As Single, Optional ByVal Text As String = "")
        Try
            If InvokeRequired Then
                Call Me.BeginInvoke(New pStatusProgressDelegate(AddressOf pStatusProgress), {Percent, Text})
            Else
                If Percent >= 1 OrElse Percent <= 0 Then
                    pnlStatusProgress.Visibility = BarItemVisibility.Never
                    If oCurrentDesign Is Nothing Then
                        pnlStatusZoomBar.Visibility = BarItemVisibility.Never
                    Else
                        pnlStatusZoomBar.Visibility = modControls.VisibleToVisibility(oCurrentDesign.Type <= cIDesign.cDesignTypeEnum.Profile)
                    End If
                Else
                    pnlStatusProgress.Visibility = BarItemVisibility.Always
                    pnlStatusProgress.EditValue = Percent * 100
                    pnlStatusProgress.Refresh()
                    pnlStatusZoomBar.Visibility = BarItemVisibility.Never
                    Text = Text & " " & Strings.Format(Percent, "percent")
                End If
                Call pStatusSet(Text)
            End If
        Catch
        End Try
    End Sub

    Private Sub pStatusSet(ByVal Text As String)
        pnlStatusText.Caption = Text
        pnlStatusText.Refresh()
    End Sub

    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As cCaveInfo, Branch As cCaveInfoBranch, ByVal BindTypeCombo As ComboBox, ByVal CrossSectionsCombo As ComboBox)
        Dim sCave As String = ""
        If Not Cave Is Nothing Then
            sCave = Cave.Name
        End If
        Dim sBranch As String = ""
        If Not Branch Is Nothing Then
            sBranch = Branch.Name
        End If
        Call pSurveyFillCrossSectionsList(sCave, sBranch, BindTypeCombo, CrossSectionsCombo)
    End Sub

    'Private Sub pSurveyFillCrossSectionsList(Reset As Boolean)
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    Dim oCurrentCrossSection As cDesignCrossSection = Nothing
    '    If Not Reset Then oCurrentCrossSection = btnMainBindCrossSections.editvalue
    '    Call cboMainBindCrossSections.Items.Clear()
    '    Call cboMainBindCrossSections.Items.Add(oSurvey.CrossSections.GetEmptyCrossSection)
    '    Call oMousePointer.Pop()
    'End Sub


    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As cCaveInfo, Branch As cCaveInfoBranch, ByVal BindTypeCombo As BarEditItem, ByVal CrossSectionsCombo As BarEditItem)
        Dim sCave As String = ""
        If Not Cave Is Nothing Then
            sCave = Cave.Name
        End If
        Dim sBranch As String = ""
        If Not Branch Is Nothing Then
            sBranch = Branch.Name
        End If
        Call pSurveyFillCrossSectionsList(sCave, sBranch, BindTypeCombo, CrossSectionsCombo)
    End Sub

    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As String, Branch As String, ByVal BindTypeCombo As BarEditItem, ByVal CrossSectionsCombo As BarEditItem)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oCurrentCrossSection As cDesignCrossSection = CrossSectionsCombo.EditValue
        Dim oEditCrossSectionsCombo As DevExpress.XtraEditors.Repository.RepositoryItemLookUpEdit = CrossSectionsCombo.Edit
        If Not IsNothing(oCurrentDesign) AndAlso oCurrentDesign.Type <= cIDesign.cDesignTypeEnum.Profile Then
            Dim oList As List(Of cDesignCrossSection) = New List(Of cDesignCrossSection)({oSurvey.CrossSections.GetEmptyCrossSection})
            oList.AddRange(oSurvey.CrossSections.GetAllItems(oCurrentDesign.Type).Where(Function(oCrossSection) Cave = "" OrElse (oCrossSection.Cave = Cave AndAlso (Branch = "" OrElse oCrossSection.Branch = Branch))).ToList)
            oEditCrossSectionsCombo.DataSource = oList
        Else
            oEditCrossSectionsCombo.DataSource = New List(Of cDesignCrossSection)({oSurvey.CrossSections.GetEmptyCrossSection})
        End If
        If oEditCrossSectionsCombo.DataSource.Count > 0 Then
            Try
                If oCurrentCrossSection Is Nothing Then
                    CrossSectionsCombo.EditValue = oEditCrossSectionsCombo.DataSource(0)
                Else
                    CrossSectionsCombo.EditValue = oCurrentCrossSection
                End If
            Catch
                CrossSectionsCombo.EditValue = oEditCrossSectionsCombo.DataSource(0)
            End Try
            CrossSectionsCombo.Enabled = BindTypeCombo.EditValue > 0
        Else
            CrossSectionsCombo.Enabled = False
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As String, Branch As String, ByVal BindTypeCombo As ComboBox, ByVal CrossSectionsCombo As ComboBox)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oCurrentCrossSection As cDesignCrossSection = CrossSectionsCombo.SelectedItem
        Call CrossSectionsCombo.Items.Clear()
        Call CrossSectionsCombo.Items.Add(oSurvey.CrossSections.GetEmptyCrossSection)
        If Not IsNothing(oCurrentDesign) AndAlso oCurrentDesign.Type <= cIDesign.cDesignTypeEnum.Profile Then
            For Each oCrossSection As cDesignCrossSection In oSurvey.CrossSections.GetAllItems(oCurrentDesign.Type)
                If Cave = "" OrElse (oCrossSection.Cave = Cave AndAlso (Branch = "" OrElse oCrossSection.Branch = Branch)) Then
                    Call CrossSectionsCombo.Items.Add(oCrossSection)
                End If
            Next
        End If
        If CrossSectionsCombo.Items.Count > 0 Then
            Try
                If oCurrentCrossSection Is Nothing Then
                    CrossSectionsCombo.SelectedIndex = 0
                Else
                    CrossSectionsCombo.SelectedItem = oCurrentCrossSection
                End If
            Catch
                CrossSectionsCombo.SelectedIndex = 0
            End Try
            CrossSectionsCombo.Enabled = BindTypeCombo.SelectedIndex > 0
        Else
            CrossSectionsCombo.Enabled = False
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyFillCaveBranchList(ByVal Cave As cCaveInfo, ByVal BranchesCombo As BarEditItem)
        Dim sCave As String = ""
        If Not Cave Is Nothing Then
            sCave = Cave.Name
        End If
        Call pSurveyFillCaveBranchList(sCave, BranchesCombo)
    End Sub

    Private Sub pSurveyFillCaveBranchList(ByVal Cave As String, ByVal BranchesCombo As BarEditItem)
        Call oMousePointer.Push(Cursors.WaitCursor)

        Dim oBranchesComboEdit As DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit = BranchesCombo.Edit

        If Cave = "" Then
            oBranchesComboEdit.DataSource = New List(Of cCaveInfoBranch)({oSurvey.Properties.CaveInfos.GetEmptyCaveInfoBranch(Cave)})
            BranchesCombo.EditValue = oBranchesComboEdit.DataSource(0)
            BranchesCombo.Enabled = False

        Else
            Dim oCurrentBranch As cCaveInfoBranch = BranchesCombo.EditValue
            oBranchesComboEdit.DataSource = oSurvey.Properties.CaveInfos(Cave).Branches.GetAllBranchesWithEmpty.Select(Function(oitem) oitem.Value).ToList
            If oBranchesComboEdit.DataSource.Count > 0 Then
                Try
                    If IsNothing(oCurrentBranch) Then
                        BranchesCombo.EditValue = oBranchesComboEdit.DataSource(0)
                    Else
                        BranchesCombo.EditValue = oCurrentBranch
                    End If
                Catch
                    BranchesCombo.EditValue = oBranchesComboEdit.DataSource(0)
                End Try
                BranchesCombo.Enabled = True
            Else
                BranchesCombo.Enabled = False
            End If
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyFillCaveBranchList(ByVal Cave As cCaveInfo, ByVal BranchesCombo As ComboBox)
        Dim sCave As String = ""
        If Not Cave Is Nothing Then
            sCave = Cave.Name
        End If
        Call pSurveyFillCaveBranchList(sCave, BranchesCombo)
    End Sub

    Private Sub pSurveyFillCaveBranchList(ByVal Cave As String, ByVal BranchesCombo As ComboBox)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oEmptyCaveInfoBranch As cCaveInfoBranch = oSurvey.Properties.CaveInfos.GetEmptyCaveInfoBranch(Cave)
        If Cave = "" Then
            Call BranchesCombo.Items.Clear()
            Call BranchesCombo.Items.Add(oEmptyCaveInfoBranch)
            BranchesCombo.Enabled = False
        Else
            Dim oCurrentBranch As cCaveInfoBranch = BranchesCombo.SelectedItem
            Call BranchesCombo.Items.Clear()
            Call BranchesCombo.Items.Add(oEmptyCaveInfoBranch)
            For Each oBranch As cCaveInfoBranch In oSurvey.Properties.CaveInfos(Cave).Branches.GetAllBranches.Values
                Call BranchesCombo.Items.Add(oBranch)
            Next
            If BranchesCombo.Items.Count > 0 Then
                Try
                    If IsNothing(oCurrentBranch) Then
                        BranchesCombo.SelectedIndex = 0
                    Else
                        BranchesCombo.SelectedItem = oCurrentBranch
                    End If
                Catch
                    BranchesCombo.SelectedIndex = 0
                End Try
                BranchesCombo.Enabled = True
            Else
                BranchesCombo.Enabled = False
            End If
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyFillSessionList(Reset As Boolean)
        Dim oEmptySession As cSession = oSurvey.Properties.Sessions.GetEmptySession

        Dim oPropSession As cSession = Nothing
        If Not Reset Then oPropSession = cboSessionList.SelectedItem
        Call cboSessionList.Items.Clear()
        Call cboSessionList.Items.Add(oEmptySession)

        For Each oSession As cSession In oSurvey.Properties.Sessions
            Call cboSessionList.Items.Add(oSession)
        Next

        Try
            If oPropSession Is Nothing Then
                cboSessionList.SelectedIndex = 0
            Else
                cboSessionList.SelectedItem = oPropSession
            End If
        Catch
            cboSessionList.SelectedIndex = 0
        End Try

        Dim oMainSession As cSession = Nothing
        If Not Reset Then oMainSession = btnMainSessionList.EditValue
        cboMainSessionList.DataSource = oSurvey.Properties.Sessions.GetWithEmpty.Select(Function(oitem) oitem.Value).ToList

        Try
            If oMainSession Is Nothing Then
                btnMainSessionList.EditValue = oSurvey.Properties.Sessions.GetEmptySession
            Else
                btnMainSessionList.EditValue = oMainSession
            End If
        Catch
            btnMainSessionList.EditValue = Nothing
        End Try
    End Sub

    Private Sub pSurveyFillCaveList(Reset As Boolean)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oEmptyCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.GetEmptyCaveInfo

        Call cboPropCaveList.Rebind(oSurvey.Properties.CaveInfos, Reset)
        'Dim oPropCaveList As cCaveInfo = Nothing
        'If Not Reset Then oPropCaveList = cboPropCaveList.SelectedItem
        'Call cboPropCaveList.Items.Clear()
        'Call cboPropCaveList.Items.Add(oEmptyCaveInfo)

        Dim oMainCaveList As cCaveInfo = Nothing
        If Not Reset Then oMainCaveList = btnMainCaveList.EditValue
        cboMainCaveList.DataSource = oSurvey.Properties.CaveInfos.GetWithEmpty.Select(Function(oitem) oitem.Value).ToList

        Call cboSegmentCaveList.Rebind(oSurvey.Properties.CaveInfos, Reset)

        Try
            If oMainCaveList Is Nothing Then
                btnMainCaveList.EditValue = cboMainCaveList.DataSource(0)
            Else
                btnMainCaveList.EditValue = oMainCaveList
            End If
        Catch
            btnMainCaveList.EditValue = cboMainCaveList.DataSource(0)
        End Try
        Call oMousePointer.Pop()

        'Call pSurveyFillCaveBranchList(CType(cboPropCaveList.SelectedItem, cCaveInfo), cboPropBranchList)

        'Call pSurveyFillCaveBranchList(CType(cboSegmentCaveList.SelectedItem, cCaveInfo), cboSegmentCaveBranchList)
        Call pSurveyFillCaveBranchList(CType(btnMainCaveList.EditValue, cCaveInfo), btnMainCaveBranchList)
    End Sub

    Private Function pSurveySave(Optional ByVal Filename As String = "", Optional ByVal SaveAsCopy As Boolean = False, Optional Options As cSurvey.cSurvey.SaveOptionsEnum = cSurvey.cSurvey.SaveOptionsEnum.None) As Boolean
        Call pSurveyEndEdit()

        Dim sSaveFilename As String = Filename
        If sSaveFilename = "" Then
            Using osfd As SaveFileDialog = New SaveFileDialog
                With osfd
                    .FileName = sSaveFilename
                    .Filter = GetLocalizedString("main.filetypeCSZ") & " (*.CSZ)|*.CSZ|" & GetLocalizedString("main.filetypeCSX") & " (*.CSX)|*.CSX|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        sSaveFilename = .FileName
                    End If
                End With
            End Using
        End If
        If sSaveFilename <> "" Then
            bDisabledAutosaveEvent = True
            Call oMousePointer.Push(Cursors.WaitCursor)
            If Not SaveAsCopy Then
                sFilename = sSaveFilename
            End If
            If (Options And cSurvey.cSurvey.SaveOptionsEnum.NoHistory) <> cSurvey.cSurvey.SaveOptionsEnum.NoHistory Then
                Call pSurveyRecentsAppendTo(sFilename)
            End If
            'save current workarea...
            Call pSurveySaveCurrentWorkarea()
            'and the file...
            Call oSurvey.SaveTo(sSaveFilename, Options)
            sLastHash = pSurveyGetHash()

            If bHistory And oSurvey.Properties.HistoryEnabled And (bHistoryCreateOnSave Or bHistoryWebCreateOnSave) Then
                If (Options And cSurvey.cSurvey.SaveOptionsEnum.NoHistory) <> cSurvey.cSurvey.SaveOptionsEnum.NoHistory Then
                    Call pHistorySave(sFilename)
                End If
            End If
            Call pStatusProgress(0, String.Format(GetLocalizedString("main.textpart46"), sSaveFilename))

            Call pSurveyCaption()
            Call oMousePointer.Pop()

            bDisabledAutosaveEvent = False

            Return True
        End If
        Return False
    End Function

    Private Sub pAutosaveThread_callback()
        Try
            Dim sFolder As String
            If bAutoSaveUseHistorySettings Then
                Select Case iHistoryMode
                    Case HistoryModeEnum.Folder, HistoryModeEnum.Both
                        sFolder = Path.GetDirectoryName(sHistoryFolder)
                        Call pSurveySave(Path.Combine(sFolder, Path.GetFileNameWithoutExtension(sFilename) & "_backup" & Path.GetExtension(sFilename)), True, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                End Select
            Else
                sFolder = Path.GetDirectoryName(sFilename)
                Call pSurveySave(Path.Combine(Path.GetDirectoryName(sFilename), Path.GetFileNameWithoutExtension(sFilename) & "_backup" & Path.GetExtension(sFilename)), True, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.NoHistory)
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private Function pHistoryGetFolder(Folder As String, Pattern As String) As SortedList(Of String, FileInfo)
        Dim oFolder As DirectoryInfo = New DirectoryInfo(Folder)
        Dim oFiles() As FileInfo = oFolder.GetFiles(Pattern)
        Dim oSortedFiles As SortedList(Of String, FileInfo) = New SortedList(Of String, FileInfo)
        For Each oFile As FileInfo In oFiles
            Call oSortedFiles.Add(oFile.Name, oFile)
        Next
        Return oSortedFiles
    End Function

    Private Sub pHistorySave(Filename As String)
        Dim oFi As FileInfo = My.Computer.FileSystem.GetFileInfo(Filename)
        If oFi.Exists Then
            If Not bHistoryBusy Then
                Dim oHistoryThread As Threading.Thread = New Threading.Thread(AddressOf oHistorySave_Callback)
                Call oHistoryThread.Start({iHistoryMode, Filename})
            End If
        End If
    End Sub

    Private Delegate Sub pPopupShowDelegate(Type As String, Text As String, Details As String)

    Private Sub pHistorySaveMode1(Filename As String)
        Dim oFi As FileInfo = My.Computer.FileSystem.GetFileInfo(Filename)
        If oFi.Exists Then
            Call pStatusProgress(0, GetLocalizedString("main.progressbegin12"))
            'leggo le info sul file corrente
            Dim dNow As Date = oFi.LastWriteTime
            Dim sHistoryFilename As String = Path.Combine(Path.GetTempPath, Strings.Format(dNow, "yyyyMMddHHmmss") & ".csz")
            'copio il file corrente in temp
            Call My.Computer.FileSystem.CopyFile(Filename, sHistoryFilename, True)
            'lo invio al remoto
            Dim oNetHistory As cNetHistory = New cNetHistory(sHistoryWebURL, iHistoryMaxCopies, iHistoryDailyCopies)
            If oNetHistory.Login(sHistoryWebUsername, sHistoryWebPassword) Then
                Dim iSetID As Integer
                If oNetHistory.CreateSet(oSurvey.ID, oSurvey.Name, iSetID) Then
                    Dim iDataID As Integer
                    Call oNetHistory.Upload(iSetID, 0, IO.Path.GetFileName(sHistoryFilename), sHistoryFilename, "application/octet-stream", dNow, iDataID)
                    'Dim iResult As Integer
                    'Call oNetHistory.Explode(iSetID, iDataID, iResult)
                End If
            End If
            Call pStatusProgress(0, GetLocalizedString("main.progressend12"))
            Try
                Call My.Computer.FileSystem.DeleteFile(sHistoryFilename)
            Catch
            End Try
        End If
    End Sub

    Private Sub pHistorySaveMode0(Filename As String)
        Dim oFi As FileInfo = My.Computer.FileSystem.GetFileInfo(Filename)
        If oFi.Exists Then
            Call pStatusProgress(0, GetLocalizedString("main.progressbegin12"))
            'leggo le info sul file corrente
            Dim dNow As Date = oFi.LastWriteTime
            Dim sHistoryFolderSubPath As String = Path.Combine(sHistoryFolder, oSurvey.ID)
            Dim sHistoryName As String = Strings.Format(dNow, "yyyyMMddHHmmss")
            Dim sHistoryFilename As String = Path.Combine(sHistoryFolderSubPath, sHistoryName & ".csz")
            'copio il file corrente nella cartella di storage
            Call My.Computer.FileSystem.CopyFile(Filename, sHistoryFilename, True)
            'verifico il numero di copie...
            If Not My.Computer.FileSystem.DirectoryExists(sHistoryFolderSubPath) Then
                Call My.Computer.FileSystem.CreateDirectory(sHistoryFolderSubPath)
            End If
            Dim oSortedFiles As SortedList(Of String, FileInfo)
            oSortedFiles = pHistoryGetFolder(sHistoryFolderSubPath, Strings.Format(dNow, "yyyyMMdd") & "*.csz")
            Do While oSortedFiles.Count > iHistoryDailyCopies
                Dim oItem As FileInfo = oSortedFiles.First.Value
                Call oItem.Delete()
                Call oSortedFiles.RemoveAt(0)
            Loop
            oSortedFiles = pHistoryGetFolder(sHistoryFolderSubPath, "*.csz")
            Do While oSortedFiles.Count > iHistoryMaxCopies
                Dim oItem As FileInfo = oSortedFiles.First.Value
                Call oItem.Delete()
                Call oSortedFiles.RemoveAt(0)
            Loop
            'salvo il file delle info aggiuntive
            Dim oXML As XmlDocument = New XmlDocument
            Dim oXMLRoot As XmlElement = oXML.CreateElement("csurvey")
            Dim oXMLHistoryDetails As XmlElement = oXML.CreateElement("historydetails")
            Dim oXMLItem As XmlElement = oXML.CreateElement("item")
            Call oXMLItem.SetAttribute("name", oSurvey.Name)
            Call oXMLItem.SetAttribute("origin", My.Computer.Name)
            Call oXMLItem.SetAttribute("datestamp", Now.ToString("O"))
            Call oXMLItem.SetAttribute("username", My.User.Name)
            Call oXMLHistoryDetails.AppendChild(oXMLItem)
            Call oXMLRoot.AppendChild(oXMLHistoryDetails)
            Call oXML.AppendChild(oXMLRoot)
            Call oXML.Save(Path.Combine(sHistoryFolderSubPath, sHistoryName & ".xml"))

            Call pStatusProgress(0, GetLocalizedString("main.progressend12"))
        End If
    End Sub

    Private Sub oHistorySave_Callback(ByVal State As Object)
        Try
            bHistoryBusy = True
            Dim iHistorySaveMode As HistoryModeEnum = State(0)
            Select Case iHistorySaveMode
                Case HistoryModeEnum.Folder
                    Dim sHistoryFilename As String = State(1)
                    If bHistoryCreateOnSave Then Call pHistorySaveMode0(sHistoryFilename)
                Case HistoryModeEnum.WebStorage
                    Dim sHistoryFilename As String = State(1)
                    If bHistoryWebCreateOnSave Then Call pHistorySaveMode1(sHistoryFilename)
                Case HistoryModeEnum.Both
                    Dim sHistoryFilename As String = State(1)
                    If bHistoryCreateOnSave Then Call pHistorySaveMode0(sHistoryFilename)
                    If bHistoryWebCreateOnSave Then Call pHistorySaveMode1(sHistoryFilename)
            End Select
            bHistoryBusy = False
        Catch ex As Exception
            bHistoryBusy = False
            Call pLogAdd(ex)

            Dim oArgs(2) As Object
            oArgs(0) = "error"
            oArgs(1) = GetLocalizedString("main.textpart47")
            oArgs(2) = String.Format(GetLocalizedString("main.textpart48"), ex.Message, ex.StackTrace)
            Call Me.BeginInvoke(New pPopupShowDelegate(AddressOf pPopupShow), oArgs)
        End Try
    End Sub

    Private Delegate Sub pSurveySegmentsAndTrigpointVisibilityDelegate()

    Private oVisibleStations As List(Of String) = New List(Of String)
    Private oVisibleShots As List(Of cSegment) = New List(Of cSegment)

    Private Sub pSurveySegmentsAndTrigpointVisibility()
        If InvokeRequired Then
            Call Me.BeginInvoke(New pSurveySegmentsAndTrigpointVisibilityDelegate(AddressOf pSurveySegmentsAndTrigpointVisibility))
        Else
            If Not oCurrentOptions Is Nothing Then
                bDisableSegmentsChangeEvent = True
                Call oMousePointer.Push(Cursors.WaitCursor)
                If oCurrentOptions.HighlightCurrentCave AndAlso oCurrentOptions.HighlightSegmentsAndTrigpoints Then
                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = False
                    Call pSurveyProgress("applyfilter", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin14"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageFilter Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
                    Dim iIndex As Integer = 0
                    Dim iCount As Integer = oSurvey.Segments.Count + oSurvey.TrigPoints.Count

                    Call oVisibleShots.Clear()
                    Call oVisibleStations.Clear()

                    For Each oSegment As cSegment In oSurvey.Segments
                        If modDesign.GetIfSegmentMustBeDrawedByCaveAndBranch(oCurrentOptions, oSegment, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch) Then
                            Call oVisibleShots.Add(oSegment)
                            Dim sFrom As String = oSegment.From.ToUpper
                            Dim sTo As String = oSegment.To.ToUpper
                            If Not oVisibleStations.Contains(sFrom) Then Call oVisibleStations.Add(sFrom)
                            If Not oVisibleStations.Contains(sTo) Then Call oVisibleStations.Add(sTo)
                        End If
                        iIndex += 1
                        If iIndex Mod 20 = 0 Then Call oSurvey.RaiseOnProgressEvent("applyfilter", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, GetLocalizedString("main.progress14"), iIndex / iCount)
                    Next
                    '---------------------------------------------------------------
                    Call grdViewSegments.RefreshData()
                    Call grdViewTrigpoints.RefreshData()

                    ''---------------------------------------------------------------
                    'If Not pGetCurrentDesignTools.CurrentItem Is Nothing AndAlso pGetCurrentDesignTools.CurrentItem.Type = cIItem.cItemTypeEnum.Segment Then
                    '    If oVisibleStations.Count > 0 AndAlso Not oTools.CurrentTrigpoint Is Nothing AndAlso Not oVisibleStations.Contains(oTools.CurrentTrigpoint.Name) Then
                    '        Call pTrigPointSelect(oSurvey.TrigPoints(oVisibleStations(0)), False, False)
                    '    End If
                    '    If Not modDesign.GetIfSegmentMustBeDrawedByCaveAndBranch(oCurrentOptions, oTools.CurrentSegment, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch) Then
                    '        If oFirstSegment Is Nothing Then
                    '            Call oTools.SelectSegment(Nothing)
                    '        Else
                    '            Call pSegmentSelect(oFirstSegment, False, False)
                    '        End If
                    '    End If
                    'End If
                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = True
                    Call pSurveyProgress("applyfilter", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend14"))
                    '---------------------------------------------------------------
                Else
                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = False

                    Call oVisibleShots.Clear()
                    Call oVisibleStations.Clear()

                    Call grdViewSegments.RefreshData()
                    Call grdViewTrigpoints.RefreshData()

                    '---------------------------------------------------------------
                    'lvTrigPoints.UseFiltering = False
                    '---------------------------------------------------------------
                    'is not userfull refreshing selected shot cause the selected shot have to be visible here...
                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = True
                    '---------------------------------------------------------------
                End If
                Call oMousePointer.Pop()
                bDisableSegmentsChangeEvent = False
            End If
        End If
    End Sub

    Private Sub pSurveyTrigpointsGridSetup()
        Dim iIndex As Integer = 0
        Dim iImageIndex As Integer
        For Each sItem In cboTrigpointEntrance.Items
            Select Case iIndex
                Case 0
                    iImageIndex = -1
                Case 1, 2, 3
                    iImageIndex = 2
                Case 4
                    iImageIndex = 3
            End Select
            cboTrigpointsListEntrance.Items.Add(sItem, [Enum].GetValues(GetType(cTrigPoint.EntranceTypeEnum))(iIndex), iImageIndex)
            iIndex += 1
        Next

        grdTrigPoints.BeginUpdate()
        grdTrigPoints.DataSource = oSurvey.TrigPoints.ToList
        grdViewTrigpoints.FocusedRowHandle = grdViewTrigpoints.FindRow(oTools.CurrentTrigpoint)
        grdTrigPoints.EndUpdate()
    End Sub

    Private Sub pSurveySegmentsRefresh()
        Call grdSegments.RefreshDataSource()
    End Sub

    Private Sub pSurveySegmentsGridSetup()
        grdSegments.BeginUpdate()
        grdSegments.DataSource = oTools.Segments.BindingList
        grdSegments.EndUpdate()
    End Sub

    'Private Sub pSurveySegmentsRefresh(Optional Reload As Boolean = True)
    '    bDisableSegmentsChangeEvent = True
    '    Call oMousePointer.Push(Cursors.WaitCursor)

    '    If Reload Then

    '    End If

    '    'Dim iLastIndex As Integer = grdSegments.CurrentCellAddress.Y
    '    'Call oTools.SelectSegment(Nothing)
    '    ''Call grdSegments.BeginUpdate()
    '    'Call grdSegments.SuspendLayout()
    '    'If Reload Then
    '    '    Call grdSegments.Rows.Clear()
    '    '    Dim oData(14) As Object
    '    '    For Each oSegment As cSegment In oSurvey.Segments
    '    '        With oSegment
    '    '            oData(2) = .[From]
    '    '            oData(3) = .[To]
    '    '            oData(4) = Strings.Format(.Distance, "0.00")
    '    '            oData(5) = Strings.Format(.Bearing, "0.00")
    '    '            oData(6) = Strings.Format(.Inclination, "0.00")
    '    '            oData(7) = Strings.Format(.Left, "0.00")
    '    '            oData(8) = Strings.Format(.Right, "0.00")
    '    '            oData(9) = Strings.Format(.Up, "0.00")
    '    '            oData(10) = Strings.Format(.Down, "0.00")
    '    '            oData(11) = If(.Direction = cSurvey.cSurvey.DirectionEnum.Right, CheckState.Unchecked, If(.Direction = cSurvey.cSurvey.DirectionEnum.Left, CheckState.Checked, CheckState.Indeterminate))
    '    '            oData(12) = .Exclude
    '    '            If .Note = "" Then
    '    '                oData(13) = Nothing
    '    '            Else
    '    '                oData(13) = My.Resources.note
    '    '            End If
    '    '            If .Attachments.Count > 0 Then
    '    '                oData(14) = My.Resources.attach
    '    '            Else
    '    '                oData(14) = Nothing
    '    '            End If
    '    '        End With
    '    '        Dim iIndex As Integer = grdSegments.Rows.Add(oData)
    '    '        Call pSegmentValidate(iIndex)
    '    '    Next
    '    'Else
    '    '    Dim oData(14) As Object
    '    '    For Each oRow As DataGridViewRow In grdSegments.Rows
    '    '        If Not oRow.IsNewRow Then
    '    '            Dim oSegment As cSegment = oSurvey.Segments(oRow.Index)
    '    '            If Not oSegment Is Nothing Then
    '    '                With oSegment
    '    '                    oData(2) = .[From]
    '    '                    oData(3) = .[To]

    '    '                    oData(4) = Strings.Format(.Distance, "0.00")
    '    '                    oData(5) = Strings.Format(.Bearing, "0.00")
    '    '                    oData(6) = Strings.Format(.Inclination, "0.00")

    '    '                    oData(7) = Strings.Format(.Left, "0.00")
    '    '                    oData(8) = Strings.Format(.Right, "0.00")
    '    '                    oData(9) = Strings.Format(.Up, "0.00")
    '    '                    oData(10) = Strings.Format(.Down, "0.00")

    '    '                    oData(11) = If(.Direction = cSurvey.cSurvey.DirectionEnum.Right, CheckState.Unchecked, If(.Direction = cSurvey.cSurvey.DirectionEnum.Left, CheckState.Checked, CheckState.Indeterminate))
    '    '                    oData(12) = .Exclude
    '    '                    If .Note = "" Then
    '    '                        oData(13) = Nothing
    '    '                    Else
    '    '                        oData(13) = My.Resources.note
    '    '                    End If
    '    '                    If .Attachments.Count > 0 Then
    '    '                        oData(14) = My.Resources.attach
    '    '                    Else
    '    '                        oData(14) = Nothing
    '    '                    End If
    '    '                End With
    '    '                Call oRow.SetValues(oData)
    '    '            End If
    '    '        End If
    '    '    Next
    '    'End If
    '    'Call grdSegments.ResumeLayout()
    '    'Call grdSegments.EndUpdate()

    '    'Dim oRestoreSegment As cSegment = oSurvey.Segments(iLastIndex)
    '    'Call oTools.SelectSegment(oRestoreSegment)
    '    Call oMousePointer.Pop()
    '    bDisableSegmentsChangeEvent = False
    'End Sub

    'Private Sub pSurveySegmentsValidate()
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    For Each oRow As DataGridViewRow In oSurvey.Segments
    '        Call pSegmentValidate(oRow.Index)
    '    Next
    '    Call oMousePointer.Pop()
    'End Sub

    'Private Sub pSurveySetupTrigpoints()
    '    lvTrigPoints.Dock = DockStyle.Fill
    '    'lvTrigPoints.ModelFilter = New ModelFilter(Function(oTrigpoint As cTrigPoint)
    '    '                                               Return Not oTrigpoint.Data.IsSplay
    '    '                                           End Function)
    '    'lvTrigPoints.UseFiltering = True

    '    colTrigpointsStation.AspectGetter = Function(Value As Object)
    '                                            Return DirectCast(Value, cTrigPoint).Name
    '                                        End Function
    '    colTrigpointsX.AspectGetter = Function(Value As Object)
    '                                      Return Strings.Format(DirectCast(Value, cTrigPoint).Data.X, "0.00")
    '                                  End Function
    '    colTrigpointsY.AspectGetter = Function(Value As Object)
    '                                      Return Strings.Format(DirectCast(Value, cTrigPoint).Data.Y, "0.00")
    '                                  End Function
    '    colTrigpointsZ.AspectGetter = Function(Value As Object)
    '                                      Return Strings.Format(DirectCast(Value, cTrigPoint).Data.Z, "0.00")
    '                                  End Function

    '    colTrigpointsNote.ImageGetter = Function(Value As Object)
    '                                        Return If(DirectCast(Value, cTrigPoint).Note <> "", My.Resources.note, Nothing)
    '                                    End Function
    '    colTrigpointsCoordinate.ImageGetter = Function(Value As Object)
    '                                              Dim oTrigpoint As cTrigPoint = DirectCast(Value, cTrigPoint)
    '                                              Return If(oTrigpoint.Coordinate.IsEmpty, Nothing, If(oTrigpoint.Coordinate.IsInError, My.Resources.error2, If(oTrigpoint.Coordinate.Fix = cCoordinate.FixEnum.Default, My.Resources.map_world, My.Resources.map)))
    '                                          End Function
    '    colTrigpointsEntrance.ImageGetter = Function(Value As Object)
    '                                            Return If(DirectCast(Value, cTrigPoint).Entrance = cTrigPoint.EntranceTypeEnum.None, Nothing, My.Resources.weather_sun)
    '                                        End Function
    '    colTrigpointsEntrance.Text = lblTrigpointEntrance.Text
    '    colTrigpointsSpecial.ImageGetter = Function(Value As Object)
    '                                           Return If(DirectCast(Value, cTrigPoint).IsSpecial, My.Resources.asterisk_yellow, Nothing)
    '                                       End Function
    '    colTrigpointsSpecial.Text = chkTrigpointIsSpecial.Text
    '    colTrigpointInExploration.ImageGetter = Function(Value As Object)
    '                                                Return If(DirectCast(Value, cTrigPoint).IsInExploration, My.Resources.check_box, Nothing)
    '                                            End Function
    '    colTrigpointInExploration.Text = chkTrigpointIsInExploration.Text
    '    colTrigpointsLatitude.AspectGetter = Function(Value As Object)
    '                                             Dim oTrigpoint As cTrigPoint = (DirectCast(Value, cTrigPoint))
    '                                             If oSurvey.Calculate.TrigPoints.Contains(oTrigpoint) Then
    '                                                 Return oSurvey.Calculate.TrigPoints(oTrigpoint).Coordinate.Latitude
    '                                             End If
    '                                         End Function
    '    colTrigpointsLongitude.AspectGetter = Function(Value As Object)
    '                                              Dim oTrigpoint As cTrigPoint = (DirectCast(Value, cTrigPoint))
    '                                              If oSurvey.Calculate.TrigPoints.Contains(oTrigpoint) Then
    '                                                  Return oSurvey.Calculate.TrigPoints(oTrigpoint).Coordinate.Longitude
    '                                              End If
    '                                          End Function
    '    colTrigpointsAltitude.AspectGetter = Function(Value As Object)
    '                                             Dim oTrigpoint As cTrigPoint = (DirectCast(Value, cTrigPoint))
    '                                             If oSurvey.Calculate.TrigPoints.Contains(oTrigpoint) Then
    '                                                 Return oSurvey.Calculate.TrigPoints(oTrigpoint).Coordinate.Altitude
    '                                             End If
    '                                         End Function
    '    colTrigpointsConnections.ImageGetter = Function(Value As Object)
    '                                               Dim oTrigpoint As cTrigPoint = (DirectCast(Value, cTrigPoint))
    '                                               If oTrigpoint.Data.IsSplay Then
    '                                                   Return Nothing
    '                                               Else
    '                                                   Select Case oTrigpoint.Connections.Count
    '                                                       Case 0
    '                                                           Return Nothing
    '                                                       Case 1
    '                                                           Return My.Resources.connections_1_0
    '                                                       Case 2
    '                                                           Return My.Resources.connections_1_1
    '                                                       Case 3
    '                                                           Return My.Resources.connections_1_2
    '                                                       Case Else
    '                                                           Return My.Resources.connections_1_3ormore
    '                                                   End Select
    '                                               End If
    '                                           End Function
    '    colTrigpointsConnectionsCount.AspectGetter = Function(Value As Object)
    '                                                     Dim oTrigpoint As cTrigPoint = (DirectCast(Value, cTrigPoint))
    '                                                     If oTrigpoint.Data.IsSplay Then
    '                                                         Return Nothing
    '                                                     Else
    '                                                         Return oTrigpoint.Connections.Count
    '                                                     End If
    '                                                 End Function
    '    colTrigpointsCustomConnections.ImageGetter = Function(Value As Object)
    '                                                     If DirectCast(Value, cTrigPoint).Connections.Count > 0 Then
    '                                                         If DirectCast(Value, cTrigPoint).Connections.IsCustomized Then
    '                                                             Return My.Resources.connections_custom
    '                                                         Else
    '                                                             Return My.Resources.connections_default
    '                                                         End If
    '                                                     End If
    '                                                 End Function

    '    For Each oColumn As OLVColumn In lvTrigPoints.AllColumns
    '        Dim sText As String = oColumn.Text.Trim
    '        'this not suitable for all language but, for now, is good avoiding : at the end of the column header text
    '        If sText.EndsWith(":") Then sText = sText.Substring(0, sText.Length - 1)
    '        oColumn.ToolTipText = sText
    '    Next

    '    Call lvTrigPoints.RebuildColumns()
    'End Sub

    Private Sub pSurveyTrigpointsRefresh(Optional ByVal RemoveOrphans As Boolean = False)
        bDisableTrigpointsChangeEvent = True
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call oSurvey.TrigPoints.Rebind(RemoveOrphans)

        Call pSurveyTrigpointsGridSetup()

        bDisableTrigpointsChangeEvent = False
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSegmentInsert(Index As Integer)
        Try
            grdSegments.BeginUpdate()

            Dim oSegment As cSegment = oSurvey.Segments.Insert(Index)
            If cboMainCaveList.Enabled Then
                Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
            End If
            If cboMainSessionList.Enabled Then
                Call oSegment.SetSession(If(IsNothing(btnMainSessionList.EditValue), "", btnMainSessionList.EditValue))
            End If
            Call oSegment.Save()
            'DirectCast(grdSegments.DataSource, BindingList(Of cSegment)).Insert(Index, oSegment)
            grdViewSegments.FocusedRowHandle = grdViewSegments.FindRow(oSegment)
            grdSegments.EndUpdate()

            Call pSegmentSelect(oSegment, False, False)

            Call pFieldDataShow(True)
            Call pSegmentsShow(True)
        Catch
        End Try
    End Sub

    Private Sub pSegmentAdd()
        Dim oSegment As cSegment = oSurvey.Segments.Append()

        If cboMainCaveList.Enabled Then
            Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
            Call oSegment.Save()
        End If
        If cboMainSessionList.Enabled Then
            Call oSegment.SetSession(If(IsNothing(btnMainSessionList.EditValue), "", btnMainSessionList.EditValue))
            Call oSegment.Save()
        End If

        grdSegments.BeginUpdate()
        grdSegments.RefreshDataSource()
        grdViewSegments.FocusedRowHandle = grdViewSegments.FindRow(oSegment)
        grdSegments.EndUpdate()

        Call pSegmentSelect(oSegment, False, False)

        Call pFieldDataShow(True)
        Call pSegmentsShow(True)
    End Sub

    Private Sub pTrigPointSelect(Trigpoint As cTrigPoint, [Select] As Boolean, BringToTop As Boolean)
        grdViewTrigpoints.FocusedRowHandle = grdViewTrigpoints.FindRow(Trigpoint)
        If BringToTop AndAlso Not grdTrigPoints.Visible Then
            Call btnTrigpoints.PerformClick()
        End If
    End Sub

    Private Sub pSegmentSelect(Segment As cSegment, [Select] As Boolean, BringToTop As Boolean)
        With grdSegments
            If Not Segment Is Nothing Then
                Dim iRowHandle As Integer = grdViewSegments.FindRow(Segment)
                If iRowHandle <> grdViewSegments.FocusedRowHandle Then
                    grdViewSegments.FocusedRowHandle = iRowHandle
                ElseIf Not oTools.CurrentSegment Is Segment Then
                    Call oTools.SelectSegment(Segment)
                    Call pMapInvalidate()
                    Call pSegmentsRefresh()
                End If
            End If
        End With
        If BringToTop AndAlso Not grdSegments.Visible Then
            Call btnSegments.PerformClick()
        End If
    End Sub

    Private Sub pTrigpointsRefresh()
        Call pSurveyDelayedRedraw()
    End Sub

    Private Sub pSegmentsRefresh()
        Call pSurveyDelayedRedraw()
    End Sub

    Private Sub pSegmentDelete()
        Try
            Dim oSegments As cSegmentCollection = pSegmentsFromGridSelection(True)
            If oSegments.Count > 0 Then
                If MsgBox(GetLocalizedString("main.warning20"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = vbYes Then
                    Call oTools.SelectSegment(Nothing)
                    bDisableSegmentsChangeEvent = True
                    bDisableSelectItemEvent = True
                    Dim iLastIndex As Integer
                    For Each oSegment As cSegment In oSegments
                        Dim iIndex As Integer = oSegment.Index
                        Call oTools.DeleteSegment(oSegment)
                        iLastIndex = iIndex
                    Next
                    bDisableSelectItemEvent = False
                    bDisableSegmentsChangeEvent = False
                    Call pSurveyCalculate(False)
                End If
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
            bDisableSelectItemEvent = False
            bDisableSegmentsChangeEvent = False
        End Try
    End Sub

    Private Sub pSegmentClear()
        Call oMousePointer.Push(Cursors.AppStarting)
        pnlSegment.Enabled = False

        cboSessionList.SelectedIndex = -1
        cboSegmentCaveList.Text = ""
        cboSegmentCaveBranchList.Text = ""

        cboSegmentFrom.Text = ""
        cboSegmentTo.Text = ""

        txtSegmentDistance.Text = ""
        txtSegmentBearing.Text = ""
        txtSegmentInclination.Text = ""

        txtSegmentLeft.Text = ""
        txtSegmentRight.Text = ""
        txtSegmentUp.Text = ""
        txtSegmentDown.Text = ""

        'Select Case oSurvey.Properties.InversionMode
        '    Case cSurvey.cSurvey.InversioneModeEnum.Absolute
        cboSegmentDirection.SelectedIndex = 0
        cboSegmentDirection.Enabled = False
        '    Case cSurvey.cSurvey.InversioneModeEnum.Relative
        '        chkSegmentInverted.Checked = False
        '        chkSegmentInverted.Enabled = False
        'End Select

        chkSegmentExclude.Checked = False
        chkSegmentSplay.Checked = False
        chkSegmentDuplicate.Checked = False
        chkSegmentSurface.Checked = False
        chkSegmentCalibration.Checked = False
        chkSegmentCutSplay.Checked = False

        chkSegmentZSurvey.Checked = False

        chkSegmentUnbindable.Checked = False

        picSegmentColor.BackColor = Nothing

        txtSegmentNote.Text = ""

        grdSegmentAttachments.DataSource = Nothing

        btnSegmentDelete.Enabled = False

        Call pGetCurrentTools.SelectSegment(Nothing)

        Call oMousePointer.Pop()
    End Sub

    Private Sub pSegmentLoad(Segment As cSegment)
        Call oMousePointer.Push(Cursors.AppStarting)
        If Segment Is Nothing Then
            Segment = oSurvey.Segments.GetEmptySegment
        End If
        If Segment Is Nothing Then
            pnlSegment.Enabled = False
        Else
            Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(Segment)
            Dim bUnlocked As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
            pnlSegment.Enabled = bUnlocked
            'pnlSegment.Enabled = True
            With Segment
                Try
                    cboSessionList.SelectedItem = oSurvey.Properties.Sessions(.Session)
                Catch
                    cboSessionList.SelectedIndex = 0
                End Try
                If bUnlocked Then
                    cboSegmentCaveList.Workmode = cCaveInfoCombobox.WorkmodeEnum.Edit
                    cboSegmentCaveBranchList.Workmode = cCaveInfoCombobox.WorkmodeEnum.Edit
                Else
                    cboSegmentCaveList.Workmode = cCaveInfoCombobox.WorkmodeEnum.View
                    cboSegmentCaveBranchList.Workmode = cCaveInfoCombobox.WorkmodeEnum.View
                End If
                cboSegmentCaveList.Text = .Cave
                cboSegmentCaveBranchList.Text = .Branch

                cboSegmentFrom.Text = .From
                cboSegmentTo.Text = .To

                Dim bEnabledEdit As Boolean = Not .IsBinded
                cboSegmentFrom.Enabled = bEnabledEdit
                cboSegmentTo.Enabled = bEnabledEdit

                txtSegmentDistance.Text = .Distance
                txtSegmentBearing.Text = .Bearing
                txtSegmentInclination.Text = .Inclination

                txtSegmentLeft.Text = .Left
                txtSegmentRight.Text = .Right
                txtSegmentUp.Text = .Up
                txtSegmentDown.Text = .Down

                Dim bEnabledProfileEdit As Boolean = Not .IsProfileBinded
                If .Splay Then
                    lblSegmentDirection.Enabled = False
                    cboSegmentDirection.Enabled = False
                    'chkSegmentInverted.Enabled = False
                    chkSegmentUnbindable.Enabled = False
                    chkSegmentZSurvey.Enabled = False
                Else
                    cboSegmentDirection.SelectedIndex = Segment.Direction
                    lblSegmentDirection.Enabled = bEnabledProfileEdit
                    cboSegmentDirection.Enabled = bEnabledProfileEdit
                    'chkSegmentInverted.Enabled = bEnabled
                    chkSegmentUnbindable.Enabled = True
                    chkSegmentZSurvey.Enabled = True
                End If

                chkSegmentExclude.Checked = .Exclude
                chkSegmentSplay.Checked = .Splay
                chkSegmentDuplicate.Checked = .Duplicate
                chkSegmentSurface.Checked = .Surface
                chkSegmentCalibration.Checked = .Calibration
                chkSegmentCutSplay.Checked = .Cut
                chkSegmentZSurvey.Checked = .ZSurvey

                chkSegmentUnbindable.Checked = .Unbindable

                picSegmentColor.BackColor = .Color

                txtSegmentNote.Text = .Note

                grdSegmentAttachments.BeginUpdate()
                grdSegmentAttachments.DataSource = New UIHelpers.cAttachmentsBindingList(.Attachments)
                grdSegmentAttachments.EndUpdate()

                btnSegmentDelete.Enabled = bEnabledEdit

                chkSegmentVirtual.Checked = .Virtual

                Call pSegmentCheckFlags()

                '-----------------------------------------------------------------------------------------
                Dim sDistance As String = GetMeasureName(Segment, MeasureEnum.Distance)
                Dim sBearing As String = GetMeasureName(Segment, MeasureEnum.Bearing)
                Dim sInclination As String = GetMeasureName(Segment, MeasureEnum.Inclination)
                colSegmentsListDistance.Caption = sDistance
                colSegmentsListBearing.Caption = sBearing
                colSegmentsListInclination.Caption = sInclination
                lblSegmentDistance.Text = sDistance
                lblSegmentBearing.Text = sBearing
                lblSegmentInclination.Text = sInclination

                pnlSegmentSurfaceProfile.Visible = oSurvey.Properties.SurfaceProfile
                cboSegmentSurfaceProfileShow.SelectedIndex = .SurfaceProfileShow
                '-----------------------------------------------------------------------------------------
                prpSegmentDataProperties.BeginUpdate()
                prpSegmentDataProperties.SelectedObject = Nothing
                prpSegmentDataProperties.SelectedObject = .DataProperties.GetClass
                prpSegmentDataProperties.EndUpdate()
            End With
        End If
        Call pObjectPropertyDelayedLoad()
        Call oMousePointer.Pop()
    End Sub

    Private Sub pTrigpointClear()
        Call oMousePointer.Push(Cursors.AppStarting)
        pnlTrigPoint.Enabled = False

        bDisableTrigpointsChangeEvent = True

        txtTrigPointName.Text = ""

        'txtTrigPointX.Text = ""
        'txtTrigPointY.Text = ""
        'txtTrigPointZ.Text = ""

        cboTrigpointEntrance.SelectedIndex = 0
        cboTrigPointType.SelectedIndex = 0

        chkTrigpointShowEntrance.Checked = False
        chkTrigpointIsSpecial.Checked = False

        txtTrigpointNote.Text = ""

        cboTrigPointLabelPosition.SelectedIndex = 0
        txtTrigPointLabelDistance.Text = 0
        cboTrigPointLabelSymbol.SelectedIndex = 0

        cboTrigpointCoordinateGeo.Text = "WGS84"
        txtTrigpointCoordinateX.Text = ""
        txtTrigpointCoordinateY.Text = ""
        cboTrigpointCoordinateBand.Text = ""
        cboTrigpointCoordinateZone.Text = ""
        txtTrigpointCoordinateLat.Text = ""
        txtTrigpointCoordinateLong.Text = ""
        cboTrigpointCoordinateFormat.Text = ""
        txtTrigpointCoordinateAlt.Text = ""

        chkTrigpointIsInExploration.Checked = False
        chkTrigpointZTurn.Checked = False

        grdTrigPointAliases.DataSource = Nothing
        grdTrigpointConnections.DataSource = Nothing

        prpTrigpointDataProperties.SelectedObject = Nothing

        bDisableTrigpointsChangeEvent = False

        Call pGetCurrentTools.SelectTrigpoint(Nothing)

        Call oMousePointer.Pop()
    End Sub

    Private Sub pTrigpointCoordinateLoad(ByVal Trigpoint As cTrigPoint)
        If Not Trigpoint Is Nothing Then
            With Trigpoint
                cboTrigpointCoordinateGeo.Text = .Coordinate.System
                Select Case .Coordinate.System
                    Case "WGS84/UTM"
                        txtTrigpointCoordinateX.Text = .Coordinate.X
                        txtTrigpointCoordinateY.Text = .Coordinate.Y
                        cboTrigpointCoordinateBand.Text = .Coordinate.Band
                        cboTrigpointCoordinateZone.Text = .Coordinate.Zone
                    Case Else
                        txtTrigpointCoordinateLat.Text = .Coordinate.Latitude
                        txtTrigpointCoordinateLong.Text = .Coordinate.Longitude
                        cboTrigpointCoordinateFormat.Text = .Coordinate.Format
                End Select
                txtTrigpointCoordinateAlt.Text = .Coordinate.Altitude
                cboTrigpointCoordinateFix.SelectedIndex = .Coordinate.Fix
            End With
        End If
    End Sub

    Private Sub pTrigpointLoad(ByVal Trigpoint As cTrigPoint)
        Call oMousePointer.Push(Cursors.AppStarting)
        If Trigpoint Is Nothing Then
            pnlTrigPoint.Enabled = False
        Else
            bDisableTrigpointsChangeEvent = True
            pnlTrigPoint.Enabled = Not Trigpoint.IsSystem And Not Trigpoint.Data.IsSplay
            With Trigpoint
                txtTrigPointName.Text = .Name

                Dim bEnabledEdit As Boolean = Not .IsProfileBinded

                cboTrigpointEntrance.SelectedIndex = .Entrance
                cboTrigPointType.SelectedIndex = .Type

                chkTrigpointShowEntrance.Checked = .ShowEntrance
                chkTrigpointIsSpecial.Checked = .IsSpecial

                txtTrigpointNote.Text = .Note

                cboTrigPointLabelPosition.SelectedIndex = .LabelPosition
                txtTrigPointLabelDistance.Text = .LabelDistance
                cboTrigPointLabelSymbol.SelectedIndex = .LabelSymbol

                chkTrigpointDrawTranslationsLine.Checked = .DrawTranslationsLine

                Call pTrigpointCoordinateLoad(Trigpoint)

                chkTrigpointIsInExploration.Checked = .IsInExploration
                chkTrigpointZTurn.Checked = .ZTurn

                grdTrigPointAliases.DataSource = New UIHelpers.cAliasBindingList(Trigpoint.Aliases)
                grdTrigpointConnections.DataSource = New UIHelpers.cConnectionsBindingList(Trigpoint.Connections)

                prpTrigpointDataProperties.SelectedObject = .DataProperties.GetClass
            End With
            Call pTrigPointSelect(Trigpoint, True, False)
            bDisableTrigpointsChangeEvent = False
            Call pGetCurrentTools.SelectTrigpoint(Trigpoint)
        End If
        Call pObjectPropertyDelayedLoad()
        Call oMousePointer.Pop()
    End Sub

    Private Sub pTrigPointSave(Trigpoint As cTrigPoint)
        If Not oCurrentDesign Is Nothing Then
            If Not Trigpoint Is Nothing Then
                If bTrigpointChanged Then
                    If Not Trigpoint.IsSystem And Not Trigpoint.Data.IsSplay Then
                        Call oMousePointer.Push(Cursors.AppStarting)
                        With Trigpoint
                            .Entrance = cboTrigpointEntrance.SelectedIndex
                            .Type = cboTrigPointType.SelectedIndex

                            .ShowEntrance = chkTrigpointShowEntrance.Checked
                            .IsSpecial = chkTrigpointIsSpecial.Checked

                            .Note = txtTrigpointNote.Text

                            .LabelPosition = cboTrigPointLabelPosition.SelectedIndex
                            .LabelDistance = txtTrigPointLabelDistance.Text
                            .LabelSymbol = cboTrigPointLabelSymbol.SelectedIndex

                            .DrawTranslationsLine = chkTrigpointDrawTranslationsLine.Checked

                            .Coordinate.System = cboTrigpointCoordinateGeo.Text
                            Select Case .Coordinate.System
                                Case "WGS84/UTM"
                                    .Coordinate.X = txtTrigpointCoordinateX.Text
                                    .Coordinate.Y = txtTrigpointCoordinateY.Text
                                    .Coordinate.Band = cboTrigpointCoordinateBand.Text
                                    .Coordinate.Zone = cboTrigpointCoordinateZone.Text
                                Case Else
                                    .Coordinate.Format = cboTrigpointCoordinateFormat.Text
                                    .Coordinate.Latitude = txtTrigpointCoordinateLat.Text
                                    .Coordinate.Longitude = txtTrigpointCoordinateLong.Text
                            End Select
                            .Coordinate.Altitude = txtTrigpointCoordinateAlt.Text
                            .Coordinate.Fix = cboTrigpointCoordinateFix.SelectedIndex

                            .IsInExploration = chkTrigpointIsInExploration.Checked
                            .ZTurn = chkTrigpointZTurn.Checked

                            grdViewTrigPointAliases.CloseEditor()
                            DirectCast(grdTrigPointAliases.DataSource, UIHelpers.cAliasBindingList).Save(.Aliases)
                            grdViewTrigpointConnections.CloseEditor()
                            DirectCast(grdTrigpointConnections.DataSource, UIHelpers.cConnectionsBindingList).Save(.Connections)

                            Call .Save()

                            Call pStatusSet(String.Format(GetLocalizedString("main.textpart49"), .ToString))

                            Call pTrigPointUpdate(Trigpoint)
                        End With
                        Call oMousePointer.Pop()

                        bTrigpointChanged = False
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub pSegmentSave(Segment As cSegment)
        If Not oCurrentDesign Is Nothing Then
            If Not Segment Is Nothing Then
                If bSegmentChanged Then
                    Call oMousePointer.Push(Cursors.AppStarting)
                    With Segment
                        .From = cboSegmentFrom.Text.Trim.ToUpper
                        .To = cboSegmentTo.Text.Trim.ToUpper
                        .Distance = modNumbers.FormatFromEdit(txtSegmentDistance.Text, 2)
                        .Bearing = modNumbers.FormatFromEdit(txtSegmentBearing.Text, 2)
                        .Inclination = modNumbers.FormatFromEdit(txtSegmentInclination.Text, 2)

                        .Left = modNumbers.FormatFromEdit(txtSegmentLeft.Text, 2)
                        .Right = modNumbers.FormatFromEdit(txtSegmentRight.Text, 2)
                        .Up = modNumbers.FormatFromEdit(txtSegmentUp.Text, 2)
                        .Down = modNumbers.FormatFromEdit(txtSegmentDown.Text, 2)

                        .Direction = cboSegmentDirection.SelectedIndex

                        .Splay = chkSegmentSplay.Checked
                        .Cut = chkSegmentCutSplay.Checked
                        .Duplicate = chkSegmentDuplicate.Checked
                        .Exclude = chkSegmentExclude.Checked
                        .Surface = chkSegmentSurface.Checked
                        .Calibration = chkSegmentCalibration.Checked
                        .ZSurvey = chkSegmentZSurvey.Checked

                        .Unbindable = chkSegmentUnbindable.Checked

                        .Color = picSegmentColor.BackColor
                        .Note = txtSegmentNote.Text

                        .Virtual = chkSegmentVirtual.Checked

                        .SurfaceProfileShow = cboSegmentSurfaceProfileShow.SelectedIndex

                        Call .SetSession(If(IsNothing(cboSessionList.SelectedItem), "", cboSessionList.SelectedItem))
                        Call .SetCave(cboSegmentCaveList.Text, cboSegmentCaveBranchList.Text)

                        Call .Save(False)

                        Call pStatusSet(String.Format(GetLocalizedString("main.textpart50"), .ToString))

                        Call pSegmentUpdate(Segment)

                        If oTools.CurrentSegment Is Segment Then
                            Call pObjectPropertyDelayedLoad()
                        End If

                        If bAutoZoomToFit Then
                            Call pMapCenterAndFit()
                        End If
                    End With
                    Call oMousePointer.Pop()

                    bSegmentChanged = False
                End If
            End If
        End If
    End Sub

    Private Sub pTrigPointValidate(TrigPoint As cTrigPoint)
        'MOVED TO ASPECTGETTER OF COORDINATE COLUMN...
        'Dim sErrorText As String = ""
        'Dim sTrigPoint As String = grdTrigPoints.Rows(Index).Cells(0).Value
        'Dim oTrigpoint As cTrigPoint = oSurvey.TrigPoints(sTrigPoint)
        'If Not oTrigpoint Is Nothing Then
        '    With grdTrigPoints.Rows(Index)
        '        If oTrigpoint.Coordinate.IsInError Then
        '            If sErrorText <> "" Then sErrorText = sErrorText & vbCrLf
        '            sErrorText = sErrorText & oTrigpoint.Coordinate.LastError
        '        End If
        '        .ErrorText = sErrorText
        '    End With
        'End If
        'Call lvTrigPoints.RefreshObject(TrigPoint)
        grdViewTrigpoints.RefreshRow(grdViewTrigpoints.FindRow(TrigPoint))
    End Sub

    Private Function pSurveyCheckOrigin() As Boolean
        Dim oOrigin As cTrigPoint = oSurvey.TrigPoints.GetOrigin
        If oOrigin Is Nothing Then
            Call oSurvey.TrigPoints.Rebind()

            Dim sOrigin As String = ""
            Dim oOriginSegment As cSegment = oSurvey.Segments.ToArray.FirstOrDefault(Function(segment) segment.IsSelfDefined And segment.IsValid)
            If oOriginSegment Is Nothing Then
                Dim oOriginTrigpoint As cTrigPoint = oSurvey.TrigPoints.ToArray.FirstOrDefault(Function(trigpoint) Not trigpoint.Data.IsSplay)
                If Not oOriginTrigpoint Is Nothing Then
                    sOrigin = oOriginTrigpoint.Name
                End If
            Else
                sOrigin = oOriginSegment.From
            End If
            If sOrigin <> "" Then
                If MsgBox(String.Format(GetLocalizedString("main.warning24"), sOrigin), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
                    oSurvey.Properties.Origin = sOrigin
                    Return True
                End If
            End If
        Else
            Return True
        End If
    End Function

    Private Sub pSegmentValidate(ByVal Segment As cSegment)
        Dim sErrorText As String = ""
        If Not Segment Is Nothing Then
            'Dim oSessionColor As Color
            'Dim oCaveBranchColor As Color
            If Segment.Session = "" Then
                If Not Segment.IsEquate Then
                    If sErrorText <> "" Then sErrorText = sErrorText & vbCrLf
                    sErrorText = sErrorText & GetLocalizedString("main.textpart153")
                End If
                'oSessionColor = grdSegments.BackgroundColor
                'Else
                '    Dim oColor As Color = oSurvey.Properties.Sessions.GetColor(oSegment, Color.Transparent)
                '    If Not (oColor = Color.Transparent) Then
                '        oSessionColor = oColor
                '    Else
                '        oSessionColor = grdSegments.BackgroundColor
                '    End If
            End If
            '.Cells(0).Style.BackColor = oSessionColor

            If Segment.Cave = "" Then
                If sErrorText <> "" Then sErrorText = sErrorText & vbCrLf
                sErrorText = sErrorText & GetLocalizedString("main.textpart53")
                'oCaveBranchColor = grdSegments.BackgroundColor
                'Else
                '    Dim oColor As Color = oSurvey.Properties.CaveInfos.GetColor(oSegment, Color.Transparent)
                '    If Not (oColor = Color.Transparent) Then
                '        oCaveBranchColor = oColor
                '    Else
                '        oCaveBranchColor = grdSegments.BackgroundColor
                '    End If
            End If
            '.Cells(1).Style.BackColor = oCaveBranchColor

            If Segment.From = "" Or Segment.To = "" Then
                If sErrorText <> "" Then sErrorText = sErrorText & vbCrLf
                sErrorText = sErrorText & GetLocalizedString("main.textpart52")
            End If

            '.ErrorText = sErrorText
            'If Segment.IsEquate Then
            '    If Segment.IsSelfDefined Then
            '        .HeaderCell.Value = "≡"
            '    Else
            '        .HeaderCell.Value = "="
            '    End If
            'Else
            '    .HeaderCell.Value = ""
            'End If
            Call Segment.Save()
        End If
    End Sub

    Private Sub pTrigPointUpdate(TrigPoint As cTrigPoint)
        'Dim iIndex As Integer = TrigPoint.Index
        'With grdTrigPoints.Rows(iIndex)
        '    .Cells(0).Value = TrigPoint.Name
        '    .Cells(1).Value = Strings.Format(TrigPoint.Data.X, "0.00")
        '    .Cells(2).Value = Strings.Format(TrigPoint.Data.Y, "0.00")
        '    .Cells(3).Value = Strings.Format(TrigPoint.Data.Z, "0.00")
        '    If TrigPoint.Coordinate.IsEmpty Then
        '        .Cells(4).Value = Nothing
        '    Else
        '        If TrigPoint.Coordinate.Fix = cCoordinate.FixEnum.Default Then
        '            .Cells(4).Value = My.Resources.map_world
        '        Else
        '            .Cells(4).Value = My.Resources.map
        '        End If
        '    End If

        '    .Cells(5).Value = if(TrigPoint.Note = "", Nothing, My.Resources.note)
        Call pTrigPointValidate(TrigPoint)
        'End With
    End Sub

    Private Sub pSegmentUpdate(ByVal Segment As cSegment)
        Call grdViewSegments.RefreshRow(grdViewSegments.FindRow(Segment))
        Call pSegmentValidate(Segment)
    End Sub

    Private Function pSurveyGetHash() As String
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim sHash As String = ""
        Try
            Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.DontSaveBinary)
                Call oSurvey.SaveTo(oFile, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                Using oMs As System.IO.MemoryStream = New System.IO.MemoryStream
                    Call oFile.Document.Save(oMs)
                    sHash = modMain.CalculateHash(oMs)
                End Using
            End Using
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
        Call oMousePointer.Pop()
        Return sHash
    End Function

    Private Function pSurveySaveOnExit() As Boolean
        If oSurvey Is Nothing Then
            Return True
        Else
            Dim sHash As String = pSurveyGetHash()
            If sLastHash <> sHash Then
                Select Case MsgBox(GetLocalizedString("main.warning23"), MsgBoxStyle.YesNoCancel Or MsgBoxStyle.Question, GetLocalizedString("main.warningtitle"))
                    Case MsgBoxResult.Yes
                        If pSurveySave(sFilename) Then
                            sLastHash = sHash
                            Return True
                        Else
                            Return False
                        End If
                    Case MsgBoxResult.No
                        Return True
                    Case MsgBoxResult.Cancel
                        Return False
                End Select
            Else
                Return True
            End If
        End If
    End Function

    Private Sub frmMain_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        e.Cancel = Not pSurveySaveOnExit()
        Call pSettingsSave()
    End Sub

    Private Sub pSurveyCleanUp()
        Using frmSCUP As frmSurveyCleanUp = New frmSurveyCleanUp
            If frmSCUP.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                With frmSCUP
                    If .chkPlotSegments.Checked Then
                        Call oSurvey.Segments.CleanUp()
                    End If
                    If .chkSplayNames.Checked Then
                        Call oSurvey.Segments.RefreshSplayNames()
                    End If
                    If .chkSplayFlagsAndNames.Checked Then
                        Call oSurvey.Segments.CheckSplayFlags()
                    End If
                    If .chkDesignClipart.Checked Then
                        Call oSurvey.Cliparts.Cliparts.CleanUp()
                    End If
                    If .chkDesignSign.Checked Then
                        Call oSurvey.Signs.Cliparts.CleanUp()
                    End If
                    Dim oFlags As cDesign.CleanUpFlagsEnum
                    If .chkDesignPointReduction.Checked Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.PointsReduction
                    If .chkDesignPointsCleanUp.Checked Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.PointsCleanUp
                    If .chkDesignCaveBranchCheck.Checked Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.CaveBranchCheck
                    'If .chkDesignConnectToCheck.Checked And .chkDesignConnectToCheck.Enabled Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.ConnectToCheck
                    Select Case .cboDesignContext.SelectedIndex
                        Case 0
                            Dim oUndefinedCave As Dictionary(Of String, cDesign.cCleanUpUndefinedCaveAndBranchItem) = New Dictionary(Of String, cDesign.cCleanUpUndefinedCaveAndBranchItem)
                            Call oSurvey.Plan.CleanUp(oFlags, .txtDesignPointReductionFactor.Value, oUndefinedCave)
                            Call oSurvey.Profile.CleanUp(oFlags, .txtDesignPointReductionFactor.Value, oUndefinedCave)
                        Case 1
                            Call oSurvey.Plan.CleanUp(oFlags, .txtDesignPointReductionFactor.Value)
                        Case 2
                            Call oSurvey.Profile.CleanUp(oFlags, .txtDesignPointReductionFactor.Value)
                    End Select
                    If .chkDesignRemoveInvalidItem.Checked Then
                        'delete item in wrong level...(some topodroid version create file with problem like this...)
                        For Each oItem As cItem In oSurvey.GetAllDesignItems(cIItem.cItemTypeEnum.CrossSection)
                            If oItem.Layer.Type <> cLayers.LayerTypeEnum.Signs Then
                                Call oItem.Layer.Items.Remove(oItem)
                            End If
                        Next
                    End If
                    Call pSurveySegmentsRefresh()
                    Call pMapInvalidate()
                End With
            End If
        End Using
    End Sub

    Private Sub pDesignPointsUnjoin(Optional All As Boolean = False)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Call .CurrentItemPoint.Unjoin(All)
                Call .TakeUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignPointsJoin(Connect As Boolean)
        Call pJoinPointsShow(True)
        Call oDockJoinPoints.AppendPoint()
        If Connect Then
            Call oDockJoinPoints.JoinPoints()
        End If
    End Sub

    Private bHolos As Boolean 'indica se il 3d è attivo...
    Private WithEvents oHolos As cHolosViewer

    Private Sub oHolos_OnDoubleClick(Sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnDoubleClick
        Call pObjectPropShow(True)
        'Call tabObjectProp.SelectTab(tabObjectPropMain)
    End Sub

    Private Sub oHolos_OnInvalidate(sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnInvalidate
        Call pHolosResize()
    End Sub

    Private Sub oHolos_OnItemSelect(Sender As cHolosViewer, Args As cHolosViewer.cItemSelectEventArgs) Handles oHolos.OnItemSelect
        If Args.SelectedItem Is Nothing Then
            Call pGetCurrentDesignTools.SelectItem(Nothing)
        Else
            If TypeOf Args.SelectedItem Is cTrigPoint Then
                Dim oTrigpoint As cTrigPoint = Args.SelectedItem
                Call pTrigPointSelect(oTrigpoint, True, True)
                Call pTrigpointItemSelect()
            End If
            If TypeOf Args.SelectedItem Is cSegment Then
                Dim oSegment As cSegment = Args.SelectedItem
                Call pSegmentSelect(oSegment, True, True)
                Call pSegmentItemSelect()
            End If
        End If
    End Sub

    Private Sub oHolos_OnRedrawComplete(Sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnRedrawComplete
        Call pHolosResize()
    End Sub

    Private Sub pHolosResize()
        If Not oHolos Is Nothing Then
            oHolos.Height = pnl3D.Height '/ DPIRatio
            oHolos.Width = pnl3D.Width '/ DPIRatio
        End If
    End Sub

    Private Sub frmMain_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles MyBase.KeyDown
        Select Case e.KeyCode
            Case Keys.L
                If e.Control And e.Alt Then
                    Call pLevelsShow()
                End If
            Case Keys.G
                If e.Control Then
                    Call pDesignSnapToGrid(Not btnAlignToGrid.Checked)
                End If
            Case Keys.I
                If e.Control And e.Alt Then
                    Call oHolos.Import()
                End If
            Case Keys.E
                If e.Control And e.Alt Then
                    Using frmE As frmExceptionManager = New frmExceptionManager(oSurvey, "", New Exception("PROVA"))
                        Call frmE.ShowDialog(Me)
                    End Using
                End If
            Case Keys.F
                If e.Control And e.Alt Then
                    Using frmCR As frmCaveRegister = New frmCaveRegister(oSurvey, oSurvey.CaveRegister)
                        frmCR.ShowDialog(Me)
                    End Using
                End If
            'Case Keys.D
            '    If e.Control And e.Alt Then
            '        If frmD Is Nothing Then
            '            frmD = New frmDisto
            '        End If
            '        Call frmD.Show(Me)
            '    End If
            Case Keys.T
                If e.Control And e.Alt Then
                    Dim frmTs As frmMasterSlaveManager = New frmMasterSlaveManager(oSurvey)
                    Call frmTs.Show(Me)
                End If
            'Case Keys.M
            '    If e.Control And e.Alt Then
            '        If pGetCurrentDesignTools.CurrentItem.Type = cIItem.cItemTypeEnum.Clipart Then
            '            Dim oClipart As cItemClipart = DirectCast(pGetCurrentDesignTools.CurrentItem, cItemClipart)
            '            Dim sScale As Single
            '            Dim sAngle As String
            '            Call oClipart.GetScaleAndRotateFactors(oCurrentOptions, sScale, sAngle)
            '            Debug.Print("SCALE:" & sScale)
            '            Debug.Print("ANGLE:" & sAngle)
            '            'Call modMetapost.ClipartToMetapostFile(oSurvey, oClipart.Clipart, "d:\clipart.th2", "clip")
            '        End If
            '    End If
            Case Keys.F5
                If Not e.Control And Not e.Alt And Not e.Shift Then
                    If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                        Call pSurvey3DRedraw(cHolosViewer.InvalidateType.All)
                    Else
                        Call pSurveyRedraw()
                    End If
                End If
                If e.Control Then
                    Call pSurveyCalculate(True)
                End If
            'Case Keys.F3
            '    If Not frmF Is Nothing Then
            '        Call frmF.cmdOk.PerformClick()
            '    End If
            Case Keys.PageUp
                If picMap.Focused Then
                    If e.Control Then
                        Call pItemBringAhead()
                    ElseIf e.Shift Then
                        Call pItemBringToTop()
                    End If
                End If
            Case Keys.PageDown
                If picMap.Focused Then
                    If e.Control Then
                        Call pItemSendBehind()
                    ElseIf e.Shift Then
                        Call pItemSendToBottom()
                    End If
                End If
            Case Keys.Escape
                With pGetCurrentDesignTools()

                    If .IsInEdit Then
                        Try
                            Call .CurrentItem.Points.Remove(.CurrentItem.Points.Last)
                        Catch
                        End Try
                        Call .EndItem()
                        Call pMapInvalidate()
                    End If
                    If .IsInCombine Then
                        Call .EndAndSelectItem()
                        Call pMapInvalidate()
                    End If
                End With
                Call modWMSManager.WMSDownloadFileReset()
            Case Keys.Shift, Keys.ControlKey, Keys.Alt, Keys.Menu
                If picMap.Focused Then
                    Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down
                    Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
                    Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down
                    Call pMapSetCursor(bCtrl, bShift, bAlt, Control.MouseButtons)
                End If
        End Select
    End Sub

    Private Sub pSurveyCaption()
        Text = "cSurvey - " & oSurvey.Name & " [" & sFilename & "]" & If(modMain.bIsInDebug, " DEBUG - " & modMain.GetReleaseVersion(), "") & If(Environment.Is64BitProcess, " - 64bit", " - 32bit")
        Call My.Application.SetCurrent(oSurvey, sFilename)
    End Sub

    Private Sub pZoomReset()
        Dim bBackupDisableZoomEvent As Boolean = bDisableZoomEvent
        bDisableZoomEvent = True
        Call pMapZoom(sZoomDefault / sZoomRatio)
        bDisableZoomEvent = bBackupDisableZoomEvent
    End Sub

    Private Sub frmMain_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles MyBase.KeyUp
        Select Case e.KeyCode
            Case Keys.Shift, Keys.ControlKey, Keys.Alt, Keys.Menu
                If picMap.Focused Then
                    Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down
                    Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
                    Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down
                    Call pMapSetCursor(bCtrl, bShift, bAlt, Control.MouseButtons)
                End If
            Case Keys.Z
                If e.Control And e.Shift Then
                    Call pUndoManager()
                End If
            Case Keys.Add Or Keys.Oemplus
                If pGetCurrentDesignTools.IsNewItem Then

                End If
        End Select
    End Sub

    Private Sub pUndoManager()
        If Not frmU.Visible Then
            Call frmU.Show(Me)
        End If
    End Sub

    Private WithEvents oDockClipart As cDockClipart
    Private WithEvents oDockText As cDockText
    Private WithEvents oDockJoinPoints As cDockJoinPoints

    Private WithEvents oDockLevels As cDockLevels

    Private WithEvents oDockAV As cDockAudioViewer
    Private WithEvents oDockIV As cDockImageViewer

    Private WithEvents oDockLS As cDockLinkedSurveys

    Private WithEvents oDockTexts As cDockTexts

    Private Sub frmMain_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        Call pSurveySetupPopupGrid()
        Call pWorkspacesMenuAndToolbarUpdate()

        If oCommandLine.Count = 1 Then
            If oCommandLine(0).Key <> "" AndAlso oCommandLine(0).Value = "" Then
                Call pSurveyLoad(oCommandLine(0).Key, False)
            Else
                Dim sFilename As String = oCommandLine.GetValue("filename", "")
                If sFilename <> "" Then
                    Call pSurveyLoad(sFilename, False)
                Else
                    Call pSurveyNew()
                End If
            End If
        Else
            Call pSurveyNew()
        End If
    End Sub

    Private Sub pSurveySetupPopupGrid()
        cboMainSessionListView.OptionsBehavior.AutoPopulateColumns = False
        'cboMainSessionListView.OptionsView.ColumnAutoWidth = False
        Dim oSessionColorColumn As GridColumn = cboMainSessionListView.Columns.Add()
        oSessionColorColumn.Name = "cboMainSessionListColor"
        oSessionColorColumn.VisibleIndex = 0
        oSessionColorColumn.Width = 24
        oSessionColorColumn.OptionsColumn.FixedWidth = True
        Dim oSessionDateColumn As GridColumn = cboMainSessionListView.Columns.AddField("Date")
        oSessionDateColumn.Name = "cboMainSessionListDate"
        oSessionDateColumn.VisibleIndex = 1
        oSessionDateColumn.Caption = "Date"
        oSessionDateColumn.Width = 100
        oSessionDateColumn.OptionsColumn.FixedWidth = True
        Dim oSessionDescriptionColumn As GridColumn = cboMainSessionListView.Columns.AddField("Description")
        oSessionDescriptionColumn.Name = "cboMainSessionListDescription"
        oSessionDescriptionColumn.VisibleIndex = 2
        oSessionDescriptionColumn.Caption = "Description"
        'oSessionDescriptionColumn.Width = 150

        cboMainCaveListView.OptionsBehavior.AutoPopulateColumns = False
        cboMainCaveListView.OptionsView.ColumnAutoWidth = False
        Dim oCaveColorColumn As GridColumn = cboMainCaveListView.Columns.Add()
        oCaveColorColumn.Name = "cboMainCaveListColor"
        oCaveColorColumn.VisibleIndex = 0
        oCaveColorColumn.Width = 24
        oCaveColorColumn.OptionsColumn.FixedWidth = True
        Dim oCaveNameColumn As GridColumn = cboMainCaveListView.Columns.AddField("Name")
        oCaveNameColumn.Name = "cboMainCaveListName"
        oCaveNameColumn.VisibleIndex = 1
        oCaveNameColumn.Caption = "Name"
        'oCaveNameColumn.Width = 120

        cboMainCaveBranchListView.OptionsBehavior.AutoPopulateColumns = False
        'cboMainCaveBranchListView.OptionsView.ColumnAutoWidth = False
        Dim oBranchColorColumn As GridColumn = cboMainCaveBranchListView.Columns.Add()
        oBranchColorColumn.Name = "cboMainBranchListColor"
        oBranchColorColumn.VisibleIndex = 0
        oBranchColorColumn.Width = 24
        oBranchColorColumn.OptionsColumn.FixedWidth = True
        Dim oBranchPathColumn As GridColumn = cboMainCaveBranchListView.Columns.AddField("Path")
        oBranchPathColumn.Name = "cboMainBranchListPath"
        oBranchPathColumn.VisibleIndex = 1
        oBranchPathColumn.Caption = "Name"
        oBranchPathColumn.UnboundType = DevExpress.Data.UnboundColumnType.String
        'oBranchPathColumn.Width = 240
    End Sub

    Private Sub cboMainCaveBranchListView_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles cboMainCaveBranchListView.CustomUnboundColumnData
        If e.IsGetData Then
            If e.Column.Name = "cboMainBranchListPath" Then
                Dim oGridView As DevExpress.XtraGrid.Views.Grid.GridView = sender
                Dim oBranch As cCaveInfoBranch = e.Row
                If Not oBranch Is Nothing Then
                    e.Value = oBranch.Path
                End If
            End If
        End If
    End Sub

    Private Sub cboMainCaveListView_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles cboMainCaveListView.RowCellStyle
        If e.Column.Name = "cboMainCaveListColor" Then
            Dim oGridView As DevExpress.XtraGrid.Views.Grid.GridView = sender
            Dim oCave As cCaveInfo = oGridView.GetRow(e.RowHandle)
            If Not oCave Is Nothing Then
                e.Appearance.BackColor = oCave.GetColor(Color.LightGray)
            End If
        End If
    End Sub

    Private Sub cboMainCaveBranchListView_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles cboMainCaveBranchListView.RowCellStyle
        If e.Column.Name = "cboMainBranchListColor" Then
            Dim oGridView As DevExpress.XtraGrid.Views.Grid.GridView = sender
            Dim oBranch As cCaveInfoBranch = oGridView.GetRow(e.RowHandle)
            If Not oBranch Is Nothing Then
                e.Appearance.BackColor = oBranch.GetColor(Color.LightGray)
            End If
        End If
    End Sub

    Private Sub cboMainSessionListView_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles cboMainSessionListView.RowCellStyle
        If e.Column.Name = "cboMainSessionListColor" Then
            Dim oGridView As DevExpress.XtraGrid.Views.Grid.GridView = sender
            Dim oSession As cSession = oGridView.GetRow(e.RowHandle)
            If Not oSession Is Nothing Then
                e.Appearance.BackColor = oSession.Color
            End If
        End If
    End Sub

    Private Sub pJumplistCreate()
        Try
            Dim oJL As JumpList = JumpList.CreateJumpList()
            oJL.KnownCategoryToDisplay = JumpListKnownCategoryType.Neither

            Dim oJumpLink As JumpListLink
            Dim oRecent As List(Of String) = pSurveyRecentsLoad()
            For Each sRecent As String In oRecent
                oJumpLink = New JumpListLink(Assembly.GetEntryAssembly().Location, IO.Path.GetFileName(sRecent))
                oJumpLink.WorkingDirectory = IO.Path.GetDirectoryName(oJumpLink.Path)
                oJumpLink.Arguments = Chr(34) & sRecent & Chr(34)
                Call oJL.AddUserTasks(oJumpLink)
            Next
            Call oJL.AddUserTasks(New JumpListSeparator)
            oJumpLink = New JumpListLink("http://www.csurvey.it", "www.csurvey.it")
            Call oJL.AddUserTasks(oJumpLink)

            Call oJL.Refresh()
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private bFirstRun As Boolean

    Private Sub pFirstRun()
        Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
            bFirstRun = oReg.ValueCount = 0
            If bFirstRun Then
                Call pAutoSettings()
            End If
            Dim sMachineID As String = oReg.GetValue("debug.machineid", "")
            If sMachineID = "" Then
                sMachineID = Guid.NewGuid.ToString
                Call oReg.SetValue("debug.machineid", sMachineID)
            End If
            modMain.sMachineID = sMachineID
            Call oReg.Close()
        End Using
    End Sub

    Private Sub pSettingsLoad()
        Call SuspendLayout()

        Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
            Dim sSkinName As String = "" & oReg.GetValue("theme.name")
            If sSkinName <> "" Then
                DevExpress.LookAndFeel.UserLookAndFeel.Default.SetSkinStyle(oReg.GetValue("theme.name"), oReg.GetValue("theme.palette"))
                If DevExpress.Utils.Frames.FrameHelper.IsDarkSkin(DevExpress.LookAndFeel.UserLookAndFeel.Default) Then
                    picMap.BackColor = Color.DimGray
                End If
            End If

            Dim iFieldDataViewMode As Integer = oReg.GetValue("user.fieldDataviewmode", 0)
            Select Case iFieldDataViewMode
                Case 0
                    btnSegments.Down = True
                    Call pSegmentsShow(True)
                Case 1
                    btnTrigpoints.Down = True
                    Call pTrigpointsShow(True)
                Case 2
                    btnSegmentsAndTrigPoints.Down = True
                    Call pSegmentsAndTrigPointsShow(True)
            End Select

            'spSegments.Panel2MinSize = 245 '* DPIRatio
            'spTrigPoints.Panel2MinSize = 245 '* DPIRatio
            Try
                'bAllowResizablePanels = oReg.GetValue("environment.allowresizablemainpanels", 0)
                'If bAllowResizablePanels Then
                '    spSegments.IsSplitterFixed = False
                '    spSegments.FixedPanel = Nothing
                '    spTrigPoints.IsSplitterFixed = False
                '    spTrigPoints.FixedPanel = Nothing

                '    'spSegments.SplitterPosition = oReg.GetValue("user.segmentssplitter", spSegments.Width * 2 / 3)
                '    'spTrigPoints.SplitterPosition = oReg.GetValue("user.trigpointssplitter", spTrigPoints.Width * 2 / 3)
                'Else
                '    'this line force minsize to be applied
                '    spSegments.SplitterPosition = pnlData.Width
                '    'this line force minsize to be applied
                '    spTrigPoints.SplitterPosition = pnlData.Width
                '    'this line force minsize to be applied
                '    'spMainDesigner.SplitterDistance = spMainDesigner.Width
                'End If
                'spMainDetails.SplitterDistance = oReg.GetValue("user.maindetailssplitter", spMainDetails.Width / 3)
                spSegmentsAndTrigpoints.SplitterPosition = oReg.GetValue("user.segmentsandtrigpointssplitter", spSegmentsAndTrigpoints.Height / 2)
            Catch
            End Try

            iDesignQuality = oReg.GetValue("design.quality", 0)
            Call pSettingsSetDesignQuality(iDesignQuality, True)
            Call pRulersSetVisible(oReg.GetValue("design.rulers", 1))
            iDrawRulesStyle = oReg.GetValue("design.rulers.style", RulersStyleEnum.Simple)
            iDrawMetricGrid = oReg.GetValue("design.metricgrid", 0)

            bDesignBarShowLastUsedTools = oReg.GetValue("design.designbar.showlastusedtools", 1)
            iDesignBarPosition = oReg.GetValue("design.designbar.defaultposition", 0)

            modMain.iMaxDrawItemCount = oReg.GetValue("design.maxdrawitemcount", 20)

            btnAlignToGrid.Checked = oReg.GetValue("snaptogrid", 0)
            btnAlignToGridSize.EditValue = modNumbers.StringToSingle(oReg.GetValue("snaptogrid.size", "0.1"))

            'tbMain.Visible = oReg.GetValue("user.viewmainbar", 1)
            'tbView.Visible = oReg.GetValue("user.viewviewbar", 1)
            'tbLayers.Visible = oReg.GetValue("user.viewlayerbar", 1)
            'tbPens.Visible = oReg.GetValue("user.viewpensbar", 0)
            'oDockConsole.Visible = oReg.GetValue("user.viewlogbar", 0)
            'tbWorkspaces.Visible = oReg.GetValue("user.viewworkspacesbar", 0)

            'Call modToolbars.LoadToolbarPosition(tsMain, tbMain, oReg.GetValue("user.viewmainbar.position", ""))
            'Call modToolbars.LoadToolbarPosition(tsMain, tbView, oReg.GetValue("user.viewviewbar.position", ""))
            'Call modToolbars.LoadToolbarPosition(tsMain, tbLayers, oReg.GetValue("user.viewlayerbar.position", ""))
            'Call modToolbars.LoadToolbarPosition(tsMain, tbPens, oReg.GetValue("user.viewpensbar.position", ""))
            'Call modToolbars.LoadToolbarPosition(tsMain, tbWorkspaces, oReg.GetValue("user.viewworkspacesbar.position", ""))
            Dim oLayout As Byte() = oReg.GetValue("survey.workspaces.default", Nothing)
            If Not oLayout Is Nothing AndAlso oLayout.Length > 0 Then
                Using oMs As MemoryStream = New MemoryStream(oLayout)
                    Call WorkspaceManager.LoadWorkspace("default", oMs)
                    Call WorkspaceManager.ApplyWorkspace("default")
                End Using
            End If

            bEditPointByPoint = oReg.GetValue("user.editpointtopoint", 0)
            btnEditDrawing.Down = Not bEditPointByPoint
            btnEditPointToPoint.Down = bEditPointByPoint

            'Try : Call modWindow.StringToWindowSettings(oReg.GetValue("user.gallerypopupposition"), frmCP) : Catch : End Try
            'Try : Call modWindow.StringToWindowSettings(oReg.GetValue("user.textpopupposition"), frmTP) : Catch : End Try

            'Try : Call modWindow.StringToWindowSettings(oReg.GetValue("user.pointsjoinpopupposition"), frmJ) : Catch : End Try

            btnLoch.Visibility = modControls.VisibleToVisibility(oReg.GetValue("therion.loch.enabled", 1))

            sDefaultClub = oReg.GetValue("default.club", "")
            sDefaultTeam = oReg.GetValue("default.team", "")
            sDefaultDesigner = oReg.GetValue("default.designer", "")

            'defaultfolder (if not set...create it)
            sDefaultFolder = oReg.GetValue("default.folder", "")
            If sDefaultFolder = "" Then
                Call pDefaultFolderSetup()
            End If
            'templates (if not set...create it)
            oTemplates = New List(Of cTemplateEntry)
            If pTemplatesSetup() Then
                btnLoad.ButtonStyle = If(pTemplatesEnumerate(), BarButtonStyle.DropDown, BarButtonStyle.Default)
            End If

            iDefaultCalculateMode = oReg.GetValue("default.calculatemode", 0)
            iDefaultCalculateType = oReg.GetValue("default.calculatetype", cSurvey.cSurvey.CalculateTypeEnum.Therion)

            bDefaultShowLegacyPrintAndExportObjects = oReg.GetValue("default.showlegacyextraprintandexportobjects", Not bFirstRun)

            bDefaultArrangePriorityOnImport = oReg.GetValue("default.arrangepriorityonimport", True)

            iZoomType = oReg.GetValue("zoom.type", 1)

            bGridExportSplayNames = oReg.GetValue("grid.shotsgrid.exportsplaynames", 1)

            bLogEnabled = oReg.GetValue("debug.log", 0)

            bToolsEnabledByLevel = oReg.GetValue("environment.setdesigntoolsenabledbylevel", 1)
            bToolsHiddenByLevel = oReg.GetValue("environment.setdesigntoolshiddenbylevel", 0)
            iFunctionLanguage = oReg.GetValue("environment.functionlanguage", 0)

            bAlwaysUseShellForAttachments = oReg.GetValue("environment.alwaysuseshellforattachments", 0)

            tmrAutosave.Enabled = oReg.GetValue("debug.autosave", 0)
            bAutoSaveUseHistorySettings = oReg.GetValue("debug.autosave.usehistorysettings", 0)

            'modMain.bMultiThreading = oReg.GetValue("debug.multithreading", 0) And Environment.ProcessorCount > 1

            Dim sPointPrecision As Single = modNumbers.StringToSingle(oReg.GetValue("pens.smooth", "0.05"))
            If sPointPrecision < 0.01 Then sPointPrecision = 0.01
            btnPenSmooting.Checked = oReg.GetValue("pens.smooting", 0)
            btnPenSmootingFactor.EditValue = Math.Round(sPointPrecision, 2)

            Dim sToolsPrecision As Single = modNumbers.StringToSingle(oReg.GetValue("tools.smooth", "0.05"))
            If sToolsPrecision < 0.01 Then sToolsPrecision = 0.01
            btnCurrentItemGenericReducePointFactor.EditValue = Math.Round(sToolsPrecision, 2)

            bUseOnlyAnchorToMove = oReg.GetValue("design.useonlyanchortomove", 1)
            iAdvancedSelectionMode = oReg.GetValue("design.selectionmode", 0)
            sAdvancedSelectionPrecision = modNumbers.StringToSingle(oReg.GetValue("design.selectionmode.precision", 1000.0F))
            sAdvancedSelectionWide = modNumbers.StringToSingle(oReg.GetValue("design.selectionmode.wide", 4.0F))

            modPaint.AnchorsScale = modNumbers.StringToSingle(oReg.GetValue("design.anchorscale", 1))

            'Call pLayerTools_RestoreAll()
            'For Each oLayerItem As ToolStripItem In tbLayers.Items
            '    If TypeOf oLayerItem Is ToolStripButton Then
            '        Dim oLayerButton As ToolStripButton = oLayerItem
            '        If oLayerButton.Checked Then
            '            Call oLayerButton.PerformClick()
            '            Exit For
            '        End If
            '    End If
            'Next

            'Dim oLayersVisibleColumns As List(Of String) = New List(Of String)(oReg.GetValue("layers.visiblecolumns", "cavebranchcolor,type,hiddenindesign,name").ToString.Split(","))
            'colLayersCaveBranchColor.IsVisible = oLayersVisibleColumns.Contains("cavebranchcolor")
            'colLayersType.IsVisible = oLayersVisibleColumns.Contains("type")
            'colLayersType.Width = oReg.GetValue("layers.columns.type.width", colLayersType.Width)
            'colLayersHiddenInDesign.IsVisible = oLayersVisibleColumns.Contains("hiddenindesign")
            'colLayersHiddenInPreview.IsVisible = oLayersVisibleColumns.Contains("hiddeninpreview")
            'colLayersName.IsVisible = oLayersVisibleColumns.Contains("name")
            'colLayersName.Width = oReg.GetValue("layers.columns.name.width", colLayersName.Width)
            'bLayersShowItemPreview = oReg.GetValue("layers.showitempreview", 0)
            'colLayersPreview.IsVisible = bLayersShowItemPreview And oLayersVisibleColumns.Contains("preview")
            'colLayersCave.IsVisible = oLayersVisibleColumns.Contains("cave")
            'colLayersCave.Width = oReg.GetValue("layers.columns.cave.width", colLayersCave.Width)
            'colLayersBranch.IsVisible = oLayersVisibleColumns.Contains("branch")
            'colLayersBranch.Width = oReg.GetValue("layers.columns.branch.width", colLayersBranch.Width)
            'Call tvLayers2.RebuildColumns()

            bHistory = oReg.GetValue("history.enabled", 0)
            iHistoryMode = oReg.GetValue("history.mode", 0)
            sHistoryWebURL = oReg.GetValue("history.web.url", "")
            sHistoryWebUsername = oReg.GetValue("history.web.username", "")
            sHistoryWebPassword = oReg.GetValue("history.web.password", "")
            If sHistoryWebPassword <> "" Then
                sHistoryWebPassword = New cLocalSecurity("csurvey").DecryptData(sHistoryWebPassword)
            End If
            sHistoryFolder = oReg.GetValue("history.folder", "")
            iHistoryDailyCopies = oReg.GetValue("history.maxdailycopies", 4)
            iHistoryMaxCopies = oReg.GetValue("history.maxcopies", 20)
            bHistoryCreateOnSave = oReg.GetValue("history.createonsave", 0)
            bHistoryWebCreateOnSave = oReg.GetValue("history.web.createonsave", 0)

            bLinkedSurveysSelectOnAdd = oReg.GetValue("linkedsurveys.selectonadd", "0")
            bLinkedSurveysShowInCaveInfo = oReg.GetValue("linkedsurveys.showincaveinfo", "0")
            bLinkedSurveysRecursiveLoad = oReg.GetValue("linkedsurveys.recursiveload", "0")
            bLinkedSurveysRefreshOnLoadPrioritizeChildren = oReg.GetValue("linkedsurveys.recursiveload.prioritizechildren", "0")
            bLinkedSurveysRefreshOnLoad = oReg.GetValue("linkedsurveys.refreshonload", "0")

            'bugfix...to be removed in future...
            Dim sCurrentVersion As String = "" & oReg.GetValue("currentversion", "")
            If sCurrentVersion <> "1.04" Then
                Dim iLineType As Items.cIItemLine.LineTypeEnum = oReg.GetValue("design.linetype", Items.cIItemLine.LineTypeEnum.Lines)
                Dim iNewLineType As Items.cIItemLine.LineTypeEnum = cIItemLine.LineTypeEnum.Lines
                If iLineType = 2 Or iLineType = 1 Then iNewLineType = cIItemLine.LineTypeEnum.Splines
                If iNewLineType <> iLineType Then
                    Call oReg.SetValue("design.linetype", iNewLineType.ToString("D"))
                End If
                Call oReg.SetValue("currentversion", "1.04")
                Call oReg.Flush()
            End If

            ''se il tipo linea è impostato su bezier avviso l'utente e imposto spline come predefinito
            'Call pSurveyCheckBezierLineType()

            If oReg.GetValue("wms.cache.enabled", 0) Then
                modWMSManager.MaxCacheSize = oReg.GetValue("wms.cache.maxsize", 0) * 1048576
            End If

            bCheckNewVersion = oReg.GetValue("debug.checknewversion", 0)

            'bDockState = oReg.GetValue("user.dockstate", Nothing)

            Call oReg.Close()
        End Using

        Call ResumeLayout()
    End Sub

    Private Sub pSurveyCheckBezierLineType(Optional Survey As cSurvey.cSurvey = Nothing)
        If Survey Is Nothing Then
            Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
                Dim iLineType As Items.cIItemLine.LineTypeEnum = oReg.GetValue("design.linetype", Items.cIItemLine.LineTypeEnum.Splines)
                If iLineType = cIItemLine.LineTypeEnum.Beziers Then
                    If oReg.GetValue("design.warning.beziers", 0) = 0 Then
                        If MsgBox(modMain.GetLocalizedString("main.warning27"), MsgBoxStyle.YesNo Or MsgBoxStyle.Critical, modMain.GetLocalizedString("main.warningtitle")) = vbYes Then
                            iLineType = cIItemLine.LineTypeEnum.Splines
                            Call oReg.SetValue("design.linetype", iLineType.ToString("D"))
                            Call oReg.SetValue("design.warning.beziers", 1)
                        End If
                    End If
                End If
                Call oReg.Close()
            End Using
        Else
            Dim iLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", oSurvey.GetGlobalSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
            If iLineType = cIItemLine.LineTypeEnum.Beziers Then
                If oSurvey.Properties.DesignProperties.GetValue("design.warning.beziers", 0) = 0 Then
                    If MsgBox(modMain.GetLocalizedString("main.warning28"), MsgBoxStyle.YesNo Or MsgBoxStyle.Critical, modMain.GetLocalizedString("main.warningtitle")) = vbYes Then
                        iLineType = cIItemLine.LineTypeEnum.Splines
                        Call oSurvey.Properties.DesignProperties.SetValue("LineType", iLineType)
                        Call oSurvey.Properties.DesignProperties.SetValue("design.warning.beziers", 1)
                        Call pPropDefaultPenStyle()
                    End If
                End If
            End If
        End If
    End Sub

    Private sNewVersion As String = ""
    Private bCheckNewVersion As Boolean
    Private WithEvents tmrCheckNewVersion As Timer

    Private Sub tmrCheckNewVersion_Tick(sender As Object, e As System.EventArgs) Handles tmrCheckNewVersion.Tick
        Call tmrCheckNewVersion.Stop()
        Call tmrCheckNewVersion.Dispose()
        tmrCheckNewVersion = Nothing

        If bCheckNewVersion Then
            Call bwMain.RunWorkerAsync("pCheckNewVersion")
        Else
            Dim iAskToCheckNewVersion As Integer
            'se arrivo qui l'invio delle segnalazioni è spento...
            Dim oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
            iAskToCheckNewVersion = oReg.GetValue("debug.asktochecknewversion", 0)
            iAskToCheckNewVersion += 1
            Call oReg.SetValue("debug.asktochecknewversion", iAskToCheckNewVersion)
            Call oReg.Close()

            If iAskToCheckNewVersion < 3 Then
                If MsgBox(String.Format(GetLocalizedString("main.warning22"), sNewVersion), MsgBoxStyle.Question Or MsgBoxStyle.YesNo, "Attenzione: ") = MsgBoxResult.Yes Then
                    Try
                        oReg = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
                        Call oReg.SetValue("debug.checknewversion", 1)
                        Call oReg.Close()
                        Call oReg.Dispose()
                    Catch
                    End Try
                    Call pCheckNewVersion()
                End If
            End If
        End If
    End Sub

    Private Sub pSurveyCheckNewVersion()
        If Not pCheckNewVersion() Then
            Call MsgBox(modMain.GetLocalizedString("main.warning26"), vbOKOnly Or vbInformation, modMain.GetLocalizedString("main.warningtitle"))
        End If
    End Sub

    Private Function pCheckNewVersion(Optional NightBuild As Boolean = False) As Boolean
        Try
            Call oMousePointer.Push(Cursors.AppStarting)

            Dim sCurrentVersion As String = ""
            Try
                Dim sURL As String
                If NightBuild Then
                    sURL = "http://www.csurvey.it/download/nightbuild/version.xml"
                Else
                    sURL = "http://www.csurvey.it/download/version.xml"
                End If
                Dim oWeb As System.Net.WebClient = New System.Net.WebClient
                Dim oXML As XmlDocument = New XmlDocument
                Call oXML.LoadXml(oWeb.DownloadString(sURL))
                sNewVersion = oXML.Item("csurvey").GetAttribute("version")
                sCurrentVersion = modMain.GetPackageVersion
            Catch ex As Exception
                Call pLogAdd(ex)
            End Try

            Call oMousePointer.Pop()

            If modMain.CompareVersion(sNewVersion, sCurrentVersion) Then
                'la versione online è piu recente...avviso che esiste un aggiornamento
                Using frmNU As frmNotifyUpdate = New frmNotifyUpdate(NightBuild)
                    frmNU.lblMessage.Text = String.Format(GetLocalizedString("main.warning21"), sNewVersion)
                    Call frmNU.ShowDialog(Me)
                End Using
            End If
            Return True
        Catch ex As Exception
            'for now no warning in this case
            Call pLogAdd(ex)
        End Try
        Return False
    End Function

    Private Sub pSettingsSave()
        Try
            Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
                Call oReg.SetValue("theme.name", DevExpress.LookAndFeel.UserLookAndFeel.Default.SkinName)
                Call oReg.SetValue("theme.palette", DevExpress.LookAndFeel.UserLookAndFeel.Default.ActiveSvgPaletteName)

                Dim iFieldDataViewMode As Integer
                If btnSegments.Down Then
                    iFieldDataViewMode = 0
                ElseIf btnTrigpoints.Down Then
                    iFieldDataViewMode = 1
                ElseIf btnSegmentsAndTrigPoints.Down Then
                    iFieldDataViewMode = 2
                End If

                Call oReg.SetValue("user.fielddataviewmode", iFieldDataViewMode)

                'Call oReg.SetValue("user.viewfielddata", if(bShowFieldData, 1, 0))
                'Call oReg.SetValue("user.viewdesignarea", if(bShowDesignArea, 1, 0))
                'Call oReg.SetValue("user.viewobjectprop", if(bShowObjectProp, 1, 0))

                Call oReg.SetValue("user.segmentsandtrigpointssplitter", spSegmentsAndTrigpoints.SplitterPosition)
                'Call oReg.SetValue("user.maindetailssplitter", spMainDetails.SplitterDistance)
                'If bAllowResizablePanels Then
                '    'Call oReg.SetValue("user.maindesignersplitter", spMainDesigner.SplitterDistance)
                '    Call oReg.SetValue("user.segmentssplitter", spSegments.SplitterPosition)
                '    Call oReg.SetValue("user.trigpointssplitter", spTrigPoints.SplitterPosition)
                'End If

                Call oReg.SetValue("design.quality", Integer.Parse(iDesignQuality))
                Call oReg.SetValue("design.rulers", If(bDrawRulers, 1, 0))
                Call oReg.SetValue("design.metricgrid", iDrawMetricGrid)

                'Call oReg.SetValue("design.multithreading", if(bDrawMultithreading, 1, 0))

                'Dim oLayersVisibleColumns As List(Of String) = New List(Of String)
                'For Each oColumn As OLVColumn In tvLayers2.AllColumns
                '    If oColumn.IsVisible Then
                '        Call oLayersVisibleColumns.Add(oColumn.Tag.ToLower.Replace("collayers", ""))
                '    End If
                'Next
                'Dim sLayersVisibleColumns As String = String.Join(",", oLayersVisibleColumns)
                'If sLayersVisibleColumns <> "cavebranchcolor,type,hiddenindesign,name" Then
                '    Call oReg.SetValue("layers.visiblecolumns", sLayersVisibleColumns)
                'End If
                'If colLayersType.IsVisible Then Call oReg.SetValue("layers.columns.type.width", colLayersType.Width)
                'If colLayersName.IsVisible Then Call oReg.SetValue("layers.columns.name.width", colLayersName.Width)
                'If colLayersCave.IsVisible Then Call oReg.SetValue("layers.columns.cave.width", colLayersCave.Width)
                'If colLayersBranch.IsVisible Then Call oReg.SetValue("layers.columns.branch.width", colLayersBranch.Width)

                Using oMs As MemoryStream = New MemoryStream
                    Call WorkspaceManager.CaptureWorkspace("default", True)
                    Call WorkspaceManager.SaveWorkspace("default", oMs, True)
                    Call oReg.SetValue("survey.workspaces.default", oMs.ToArray, Microsoft.Win32.RegistryValueKind.Binary)
                End Using
                'Call oReg.SetValue("user.viewmainbar", if(tbMain.Visible, 1, 0))
                'Call oReg.SetValue("user.viewviewbar", if(tbView.Visible, 1, 0))
                'Call oReg.SetValue("user.viewlayerbar", if(tbLayers.Visible, 1, 0))
                'Call oReg.SetValue("user.viewpensbar", if(tbPens.Visible, 1, 0))
                'Call oReg.SetValue("user.viewlogbar", if(oDockConsole.Visible, 1, 0))
                'Call oReg.SetValue("user.viewworkspacesbar", if(tbWorkspaces.Visible, 1, 0))
                'Call oReg.SetValue("user.viewpenbar", If(bShowPenBar, 1, 0))

                'Call oReg.SetValue("user.viewmainbar.position", modToolbars.SaveToolbarPosition(tbMain))
                'Call oReg.SetValue("user.viewviewbar.position", modToolbars.SaveToolbarPosition(tbView))
                'Call oReg.SetValue("user.viewlayerbar.position", modToolbars.SaveToolbarPosition(tbLayers))
                'Call oReg.SetValue("user.viewpensbar.position", modToolbars.SaveToolbarPosition(tbPens))
                'Call oReg.SetValue("user.viewworkspacesbar.position", modToolbars.SaveToolbarPosition(tbWorkspaces))

                'Using oMS As MemoryStream = New MemoryStream
                '    Call oDockPanel.SaveAsXml(oMS, System.Text.Encoding.UTF8)
                '    Call oReg.SetValue("user.dockstate", oMS.ToArray, Microsoft.Win32.RegistryValueKind.Binary)
                'End Using

                oReg.SetValue("snaptogrid", If(btnAlignToGrid.Checked, "1", "0"))
                oReg.SetValue("snaptogrid.size", modNumbers.NumberToString(btnAlignToGridSize.EditValue))

                Call oReg.SetValue("pens.smooth", modNumbers.NumberToString(btnPenSmootingFactor.EditValue))
                Call oReg.SetValue("pens.smooting", If(btnPenSmooting.Checked, "1", "0"))
                Call oReg.SetValue("tools.smooth", modNumbers.NumberToString(btnCurrentItemGenericReducePointFactor.EditValue))
                Call oReg.SetValue("user.editpointtopoint", If(bEditPointByPoint, 1, 0))

                Call oReg.Close()
            End Using
        Catch
        End Try
    End Sub

    'Private Sub grdSegments_CellValidating(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellValidatingEventArgs)
    '    If bBeginEdit Then
    '        Try
    '            Dim oValue As Object = e.FormattedValue
    '            Select Case e.ColumnIndex
    '                Case 2
    '                    cboSegmentFrom.Text = oValue
    '                Case 3
    '                    cboSegmentTo.Text = oValue
    '                Case 4
    '                    txtSegmentDistance.Text = oValue
    '                Case 5
    '                    txtSegmentBearing.Text = oValue
    '                Case 6
    '                    txtSegmentInclination.Text = oValue
    '                Case 7
    '                    txtSegmentLeft.Text = oValue
    '                Case 8
    '                    txtSegmentRight.Text = oValue
    '                Case 9
    '                    txtSegmentUp.Text = oValue
    '                Case 10
    '                    txtSegmentDown.Text = oValue
    '                Case 11  'inverti
    '                    'chkSegmentInverted.Checked = oValue
    '                    cboSegmentDirection.SelectedIndex = If(oValue = CheckState.Checked, 1, If(oValue = CheckState.Unchecked, 0, 2))
    '                Case 12 'escludi
    '                    chkSegmentExclude.Checked = oValue
    '            End Select
    '            bBeginEdit = False
    '        Catch ex As Exception
    '            e.Cancel = True
    '        End Try
    '    End If
    'End Sub

    'Private Function pSegmentsAddNewRow() As cSegment
    '    Dim oCurrentCell As Point = grdSegments.CurrentCellAddress
    '    Dim oSelection As List(Of Point) = New List(Of Point)
    '    For Each ocell As DataGridViewCell In grdSegments.SelectedCells
    '        Call oSelection.Add(New Point(ocell.RowIndex, ocell.ColumnIndex))
    '    Next

    '    bDisableSegmentsChangeEvent = True
    '    Dim oSegment As cSegment = oSurvey.Segments.Append
    '    Dim oData(14) As Object
    '    With oSegment
    '        If cboMainCaveList.Enabled Then
    '            Call .SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
    '            Call .Save()
    '        End If
    '        If cboMainSessionList.Enabled Then
    '            Call .SetSession(If(IsNothing(btnMainSessionList.EditValue), "", btnMainSessionList.EditValue))
    '            Call .Save()
    '        End If

    '        oData(2) = .[From]
    '        oData(3) = .[To]

    '        oData(4) = Strings.Format(.Distance, "0.00")
    '        oData(5) = Strings.Format(.Bearing, "0.00")
    '        oData(6) = Strings.Format(.Inclination, "0.00")

    '        oData(7) = Strings.Format(.Left, "0.00")
    '        oData(8) = Strings.Format(.Right, "0.00")
    '        oData(9) = Strings.Format(.Up, "0.00")
    '        oData(10) = Strings.Format(.Down, "0.00")

    '        oData(11) = If(.Direction = cSurvey.cSurvey.DirectionEnum.Right, CheckState.Unchecked, If(.Direction = cSurvey.cSurvey.DirectionEnum.Left, CheckState.Checked, CheckState.Indeterminate))
    '        oData(12) = .Exclude
    '        If .Note = "" Then
    '            oData(13) = Nothing
    '        Else
    '            oData(13) = My.Resources.note
    '        End If
    '        If .Attachments.Count > 0 Then
    '            oData(14) = My.Resources.attach
    '        Else
    '            oData(14) = Nothing
    '        End If
    '    End With

    '    Call grdSegments.Rows.Add(oData)

    '    Call grdSegments.ClearSelection()
    '    For Each oCell As Point In oSelection
    '        grdSegments.Rows(oCell.X).Cells(oCell.Y).Selected = True
    '    Next
    '    grdSegments.CurrentCell = grdSegments.Rows(oCurrentCell.Y).Cells(oCurrentCell.X)
    '    bDisableSegmentsChangeEvent = False

    '    Return oSegment
    'End Function

    'Private Sub grdSegments_RowEnter(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs)
    '    If Not bDisableSegmentsChangeEvent Then
    '        bDisableSegmentsChangeEvent = True
    '        Dim iIndex As Integer = e.RowIndex
    '        Dim oSegment As cSegment
    '        If iIndex >= oSurvey.Segments.Count Then
    '            oSegment = oSurvey.Segments.Append()
    '            Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
    '            Call oSegment.SetSession(DirectCast(btnMainSessionList.EditValue, cSession))
    '            Call oSegment.Save()
    '        Else
    '            oSegment = oSurvey.Segments(iIndex)
    '        End If
    '        Call oTools.SelectSegment(oSegment)
    '        Call pSegmentsRefresh()
    '        bDisableSegmentsChangeEvent = False
    '    End If
    'End Sub

    Private Sub picMap_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles picMap.DoubleClick
        If My.Computer.Keyboard.ShiftKeyDown Then
            If My.Computer.Keyboard.CtrlKeyDown Then
                Call pCurrentMarkedDesktopPointUnset()
            Else
                Call pCurrentMarkedDesktopPointSet(modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
                Dim oItemMarker As cItemMarker = New cItemMarker(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentMarkedDesktopPoint)
                Call pGetCurrentDesignTools.SelectItem(oItemMarker)
            End If
        Else
            If Not pToolsEnd() Then
                Call pObjectPropertyLoad()
                Call pObjectPropShow(True)
                'Call tabObjectProp.SelectTab(tabObjectPropMain)
                If pGetCurrentDesignTools.IsInPointEdit AndAlso Not IsNothing(pGetCurrentDesignTools.CurrentItemPoint) Then
                    Call pGetCurrentDesignTools.SelectLastPoint(pGetCurrentDesignTools.CurrentItemPoint)
                End If
            End If
        End If
    End Sub

    Private Sub picMap_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseDown
        Call picMap.Focus()

        Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down Or (e.Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle
        Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
        Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down

        iSnapToPoint = If(System.Windows.Input.Keyboard.IsKeyDown(Windows.Input.Key.A) OrElse btnSnapToPoint0.Down, 1, iSnapToPoint)
        If iSnapToPoint = 0 Then iSnapToPoint = If(System.Windows.Input.Keyboard.IsKeyDown(Windows.Input.Key.S) OrElse btnSnapToPoint1.Down, 2, iSnapToPoint)
        If iSnapToPoint = 0 Then iSnapToPoint = If(System.Windows.Input.Keyboard.IsKeyDown(Windows.Input.Key.D) OrElse btnSnapToPoint2.Down, 3, iSnapToPoint)
        Debug.Print("snaptopoint:" & iSnapToPoint)

        Call pMapSetCursor(bCtrl, bShift, bAlt, e.Button)

        bMousePressed = True

        Dim oPoint As PointF = e.Location
        Dim oMousePoint As PointF = modPaint.FromPaintPoint(oPoint, sPaintZoom, oPaintTranslation)

        Dim bUndo As Boolean = False
        Dim bInvalidate As Boolean = False
        If bShift AndAlso Not pGetCurrentDesignTools.IsInEdit Then
            If bCtrl Then
                iMultiSelEnabled = MultiSelTypeEnum.Zoom
                oStartMultiselPosition = oPoint
                oEndMultiselPosition = oPoint
            Else
                'sto facendo una selezione multipla...
                If bAlt Then
                    iMultiSelEnabled = MultiSelTypeEnum.MultiLayer
                Else
                    iMultiSelEnabled = MultiSelTypeEnum.SingleLayer
                End If
                oStartMultiselPosition = oPoint
                oEndMultiselPosition = oPoint
            End If
            bInvalidate = True
        Else
            If bAlt And Not bCtrl Then
                If (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                    With oCurrentDesign
                        'controllo se c'è un marker e se sono li vicino...
                        If pGetCurrentDesignTools.CurrentMarkedDesktopPoint.IsSet AndAlso modPaint.DistancePointToPoint(pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Point, oMousePoint) < 10 / sPaintZoom Then
                            Dim oItemMarker As cItemMarker = New cItemMarker(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentMarkedDesktopPoint)
                            Call pGetCurrentDesignTools.SelectItem(oItemMarker)
                        Else
                            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                                Dim oItem As cPlot.cPlotHitTestResult = oSurvey.Plan.Plot.HitTest(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, oMousePoint)
                                With oItem
                                    If Not .Segment Is Nothing Then
                                        Call pSegmentSelect(.Segment, True, True)
                                        Call pSegmentItemSelect()
                                    ElseIf Not .TrigPoint Is Nothing Then
                                        Call pTrigPointSelect(.TrigPoint, True, True)
                                        Call pTrigpointItemSelect()
                                    End If
                                End With
                            Else
                                Dim oItem As cPlot.cPlotHitTestResult = oSurvey.Profile.Plot.HitTest(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, oMousePoint)
                                With oItem
                                    If Not .Segment Is Nothing Then
                                        Call pSegmentSelect(.Segment, True, True)
                                        Call pSegmentItemSelect()
                                    ElseIf Not .TrigPoint Is Nothing Then
                                        Call pTrigPointSelect(.TrigPoint, True, True)
                                        Call pTrigpointItemSelect()
                                    End If
                                End With
                            End If
                        End If
                    End With
                    bInvalidate = True
                End If
            Else
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    iMultiSelEnabled = MultiSelTypeEnum.None
                    bInvalidate = True
                End If
                If (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                    With oCurrentDesign
                        If pGetCurrentDesignTools.IsInEdit Then
                            'ho un tool attivo...imposto il punto
                            With pGetCurrentDesignTools()
                                Call .StartEditItem()
                                If (Not bEditPointByPoint) Or (bEditPointByPoint And .CurrentItem.Points.Count = 0) Then
                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                    If iSnapToPoint > 0 Then
                                        Call modPaint.PointSnap(oMousePoint, pGetCurrentDesignTools, iSnapToPoint, oSnapToPointPointTojoin, sPaintZoom, oPaintTranslation)
                                        btnSnapToPointNone.Down = True
                                        btnSnapToPoint0.Down = False
                                        btnSnapToPoint1.Down = False
                                        btnSnapToPoint2.Down = False
                                    End If
                                    Select Case .CurrentItem.Type
                                        Case cIItem.cItemTypeEnum.CrossSection
                                            Dim oItem As cItemCrossSection = .CurrentItem
                                            If oItem.Points.Count < oItem.MaxPointsCount Then
                                                Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                                Call .EndAndSelectItem()
                                                Call oItem.Calculate(False)
                                            Else
                                                Call oItem.Points.Last.MoveTo(oMousePoint)
                                                Call oItem.Calculate(False)
                                            End If

                                        Case cIItem.cItemTypeEnum.FreeHandLine, cIItem.cItemTypeEnum.FreeHandArea, cIItem.cItemTypeEnum.InvertedFreeHandArea
                                            Dim oItem As cItem = .CurrentItem
                                            Call oItem.Points.StartSequence()
                                            Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                        Case cIItem.cItemTypeEnum.Quota
                                            Dim oItem As cItem = .CurrentItem
                                            If oItem.Points.Count < oItem.MaxPointsCount Then
                                                Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                                Dim oNewPoint As PointF = oMousePoint
                                                Do While oItem.Points.Count < oItem.MaxPointsCount
                                                    oNewPoint = New PointF(oNewPoint.X + 0.1F, oNewPoint.Y + 0.1F)
                                                    Call oItem.Points.AddFromPaintPoint(oNewPoint)
                                                Loop
                                            Else
                                                If oItem.MaxPointsCount = 2 Then
                                                    If oItem.Points.First.Point <> oMousePoint Then
                                                        Call oItem.Points.Last.MoveTo(oMousePoint)
                                                    End If
                                                Else
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                End If
                                            End If
                                        Case cIItem.cItemTypeEnum.Text, cIItem.cItemTypeEnum.Sign, cIItem.cItemTypeEnum.Clipart, cIItem.cItemTypeEnum.Image, cIItem.cItemTypeEnum.Attachment, cIItem.cItemTypeEnum.Legend, cIItem.cItemTypeEnum.Scale, cIItem.cItemTypeEnum.Compass, cIItem.cItemTypeEnum.InformationBoxText
                                            Dim oItem As cItem = .CurrentItem
                                            If oItem.Points.Count < oItem.MaxPointsCount Then
                                                Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                            Else
                                                Call oItem.Points.Last.MoveTo(oMousePoint)
                                            End If
                                    End Select
                                    .LastPoint = oPoint
                                    bInvalidate = True
                                    bUndo = True
                                End If
                            End With
                        ElseIf pGetCurrentDesignTools.IsInCombine Then
                            Dim oCombineItem As cItem = .HitTest(oCurrentOptions, pGetCurrentDesignTools, oMousePoint, sWide / sPaintZoom, True).FirstOrDefault()
                            If oCombineItem Is Nothing Then
                                Call pGetCurrentDesignTools.EndAndSelectItem()
                                picMap.Cursor = Cursors.Default
                            Else
                                Call oCombineItem.Combine(pGetCurrentDesignTools.CurrentItem)
                                Call pGetCurrentDesignTools.EndItem()
                                Call pGetCurrentDesignTools.SelectItem(oCombineItem)
                                Call oCombineItem.Points.ReorderSequences()
                            End If
                            bInvalidate = True
                        Else
                            'altrimento seleziono un oggetto (a meno che non ci sia CTRL premuto, nel qual caso...faccio solo il pan)
                            Dim oSelectedItem As cItem = Nothing
                            Dim bLocked As Boolean = False

                            If Not bCtrl Or (bCtrl And bAlt) Then
                                'verifico se ho cliccato su un anchorpoint dell'oggetto selezionato (se esiste...)
                                Dim bNotClickedOnAnchor As Boolean
                                Try
                                    Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                    If oHitTestResult.ObjectAnchorRectangleType = AnchorRectangleTypeEnum.None Then
                                        bNotClickedOnAnchor = True
                                    Else
                                        oSelectedItem = pGetCurrentDesignTools.CurrentItem
                                    End If
                                Catch
                                    bNotClickedOnAnchor = True
                                End Try

                                'nel caso non abbia cliccato un anchorpoint...allora seleziono un eventuale oggetto
                                If bNotClickedOnAnchor Then
                                    oSelectedItem = pHitTest(oCurrentDesign, oMousePoint)
                                End If

                                If Not oSelectedItem Is Nothing Then
                                    bLocked = oSelectedItem.Locked Or Not oSelectedItem.CanBeMoved
                                End If
                            End If

                            If oSelectedItem Is Nothing Or (bCtrl And Not bAlt) Then
                                Call pGetCurrentDesignTools.EndItem()
                                bInvalidate = True
                                oStartPaintDrawPosition = New PointF(-oPaintTranslation.X + e.X, -oPaintTranslation.Y + e.Y)
                            Else
                                If pGetCurrentDesignTools.CurrentItem Is oSelectedItem Then
                                    'se ho cliccato su un area sensibile..inizio una modifica...
                                    With pGetCurrentDesignTools()
                                        .LastPoint = oPoint
                                        Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                        If Not bLocked Then
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.AnchorRectangle
                                                    .LastAnchor = oHitTestResult.ObjectAnchorRectangleType
                                                    Select Case oHitTestResult.ObjectAnchorRectangleType
                                                        Case AnchorRectangleTypeEnum.TopLeftCorner
                                                            picMap.Cursor = Cursors.SizeNWSE
                                                        Case AnchorRectangleTypeEnum.TopRightCorner
                                                            picMap.Cursor = Cursors.SizeNESW
                                                        Case AnchorRectangleTypeEnum.BottomLeftCorner
                                                            picMap.Cursor = Cursors.SizeNESW
                                                        Case AnchorRectangleTypeEnum.BottomRightCorner
                                                            picMap.Cursor = Cursors.SizeNWSE
                                                        Case AnchorRectangleTypeEnum.Rotator
                                                            picMap.Cursor = Cursors.Cross
                                                            .LastCenterPoint = .CurrentItem.GetCenterPoint()
                                                    End Select
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    .LastAnchor = AnchorRectangleTypeEnum.GenericPoint
                                                    picMap.Cursor = Cursors.Cross
                                                    Call .EditPoint(oHitTestResult.Object)
                                                    bInvalidate = True
                                                Case cHitTestResult.ObjectTypeEnum.None
                                                    If .IsInPointEdit Then
                                                        If pGetCurrentDesignTools.CurrentItem.HaveEditablePoints And pGetCurrentDesignTools.CurrentItem.HaveLineType Then
                                                            picMap.Cursor = Cursors.AppStarting
                                                            Dim oNearestPaintPoint As cPoint
                                                            Dim oRelativePoint As cPoint
                                                            Dim oSequence As cSequence = pGetCurrentDesignTools.CurrentItem.Points.GetSequence(pGetCurrentDesignTools.CurrentItem.Points.GetNearestPoint(oMousePoint))
                                                            If oSequence.GetNearestPaintPoint(oMousePoint, DirectCast(pGetCurrentDesignTools.CurrentItem, cIItemLine).LineType, False, 0.1 * sPaintZoom, oNearestPaintPoint, oRelativePoint) Then
                                                                If oNearestPaintPoint Is oRelativePoint Then
                                                                    Call .EditPoint(oNearestPaintPoint)
                                                                Else
                                                                    'If bShift Then
                                                                    '    pGetCurrentDesignTools.SelectPoint(oNearestPaintPoint, True, oRelativePoint)
                                                                    '    .LastAnchor = AnchorRectangleTypeEnum.NewPoint
                                                                    'End If
                                                                End If
                                                                picMap.Cursor = Cursors.Default
                                                                bInvalidate = True
                                                            Else
                                                                If Not bUseOnlyAnchorToMove Then
                                                                    .LastAnchor = AnchorRectangleTypeEnum.TopLeftCorner
                                                                End If
                                                                picMap.Cursor = Cursors.Default
                                                                Call .SelectItem(oSelectedItem)
                                                                If Not .IsInPointEdit Then
                                                                    Call .EndPoint()
                                                                End If
                                                            End If
                                                        End If
                                                    Else
                                                        If Not bUseOnlyAnchorToMove Then
                                                            .LastAnchor = AnchorRectangleTypeEnum.TopLeftCorner
                                                        End If
                                                        picMap.Cursor = Cursors.Default
                                                        Call .SelectItem(oSelectedItem)
                                                        If Not .IsInPointEdit Then
                                                            Call .EndPoint()
                                                        End If
                                                    End If
                                                    bInvalidate = True
                                                Case Else
                                                    picMap.Cursor = Cursors.Default
                                                    Call .EndPoint()
                                                    bInvalidate = True
                                            End Select
                                        Else
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    .LastAnchor = AnchorRectangleTypeEnum.GenericPoint
                                                    picMap.Cursor = Cursors.Cross
                                                    Call .EditPoint(oHitTestResult.Object)
                                                    bInvalidate = True
                                                Case cHitTestResult.ObjectTypeEnum.None
                                                    If .IsInPointEdit Then
                                                        If pGetCurrentDesignTools.CurrentItem.HaveEditablePoints And pGetCurrentDesignTools.CurrentItem.HaveLineType Then
                                                            picMap.Cursor = Cursors.AppStarting
                                                            Dim oNearestPaintPoint As cPoint
                                                            Dim oRelativePoint As cPoint
                                                            Dim oSequence As cSequence = pGetCurrentDesignTools.CurrentItem.Points.GetSequence(pGetCurrentDesignTools.CurrentItem.Points.GetNearestPoint(oMousePoint))
                                                            If oSequence.GetNearestPaintPoint(oMousePoint, DirectCast(pGetCurrentDesignTools.CurrentItem, cIItemLine).LineType, False, 0.1 * sPaintZoom, oNearestPaintPoint, oRelativePoint) Then
                                                                If oNearestPaintPoint Is oRelativePoint Then
                                                                    Call .EditPoint(oNearestPaintPoint)
                                                                Else
                                                                    'If bShift Then
                                                                    '    pGetCurrentDesignTools.SelectPoint(oNearestPaintPoint, True, oRelativePoint)
                                                                    '    .LastAnchor = AnchorRectangleTypeEnum.NewPoint
                                                                    'End If
                                                                End If
                                                                picMap.Cursor = Cursors.Default
                                                                bInvalidate = True
                                                            Else
                                                                .LastAnchor = AnchorRectangleTypeEnum.None
                                                                picMap.Cursor = Cursors.Default
                                                                Call .SelectItem(oSelectedItem)
                                                                If Not .IsInPointEdit Then
                                                                    Call .EndPoint()
                                                                End If
                                                            End If
                                                        End If
                                                    Else
                                                        .LastAnchor = AnchorRectangleTypeEnum.None
                                                        picMap.Cursor = Cursors.Default
                                                        Call .SelectItem(oSelectedItem)
                                                        If Not .IsInPointEdit Then
                                                            Call .EndPoint()
                                                        End If
                                                    End If
                                                    bInvalidate = True
                                                Case Else
                                                    picMap.Cursor = Cursors.Default
                                                    Call .EndPoint()
                                                    bInvalidate = True
                                            End Select
                                        End If
                                    End With
                                    bUndo = True
                                Else
                                    'seleziono l'oggetto
                                    If bCtrl AndAlso bAlt AndAlso Not IsNothing(oSelectedItem) Then
                                        If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemItems Then
                                            Dim oNewItem As cItemItems = DirectCast(pGetCurrentDesignTools.CurrentItem, cItemItems)
                                            If oNewItem.Contains(oSelectedItem) Then
                                                Call oNewItem.Remove(oSelectedItem)
                                                If oNewItem.Count = 0 Then
                                                    Call pGetCurrentDesignTools.SelectItem(Nothing)
                                                End If
                                            Else
                                                Call oNewItem.Add(oSelectedItem)
                                            End If
                                        Else
                                            If IsNothing(pGetCurrentDesignTools.CurrentItem) Then
                                                Call pGetCurrentDesignTools.SelectItem(oSelectedItem)
                                            Else
                                                Dim oNewItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                                                Call oNewItem.Add(pGetCurrentDesignTools.CurrentItem)
                                                Call oNewItem.Add(oSelectedItem)
                                                Call pGetCurrentDesignTools.SelectItem(oNewItem)
                                            End If
                                        End If
                                    Else
                                        Call pGetCurrentDesignTools.SelectItem(oSelectedItem)
                                    End If
                                    If bLocked Then
                                        oStartPaintDrawPosition = New PointF(-oPaintTranslation.X + e.X, -oPaintTranslation.Y + e.Y)
                                    End If
                                    bInvalidate = True
                                End If
                            End If
                        End If
                    End With
                ElseIf (e.Button And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                    With oCurrentDesign
                        If pGetCurrentDesignTools.IsInEdit Then
                            Call pGetCurrentDesignTools.EndAndSelectItem()
                            bInvalidate = True
                        Else
                            With pGetCurrentDesignTools()
                                .LastPoint = oPoint
                                Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                Select Case oHitTestResult.ObjectType
                                    Case cHitTestResult.ObjectTypeEnum.AnchorRectangle
                                        .LastAnchor = oHitTestResult.ObjectAnchorRectangleType
                                        Select Case oHitTestResult.ObjectAnchorRectangleType
                                            Case AnchorRectangleTypeEnum.TopLeftCorner
                                                picMap.Cursor = Cursors.SizeNWSE
                                            Case AnchorRectangleTypeEnum.TopRightCorner
                                                picMap.Cursor = Cursors.SizeNESW
                                            Case AnchorRectangleTypeEnum.BottomLeftCorner
                                                picMap.Cursor = Cursors.SizeNESW
                                            Case AnchorRectangleTypeEnum.BottomRightCorner
                                                picMap.Cursor = Cursors.SizeNWSE
                                        End Select
                                    Case cHitTestResult.ObjectTypeEnum.Point
                                        .LastAnchor = oHitTestResult.ObjectAnchorRectangleType
                                        picMap.Cursor = Cursors.Cross
                                        Call .EditPoint(oHitTestResult.Object)
                                        bInvalidate = True
                                    Case Else
                                        picMap.Cursor = Cursors.Default
                                End Select
                            End With
                        End If
                    End With
                ElseIf (e.Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle Then
                    With oCurrentDesign
                        If bCtrl Then
                            'If pGetCurrentDesignTools.IsInEdit Then
                            'Call pGetCurrentDesignTools.EndItem()
                            'End If
                            bInvalidate = True
                            oStartPaintDrawPosition = New PointF(-oPaintTranslation.X + e.X, -oPaintTranslation.Y + e.Y)
                        End If
                    End With
                End If
            End If
        End If
        If bUndo And Not pGetCurrentDesignTools.IsNewItem Then
            Call pGetCurrentDesignTools.TakeUndoSnapshot()
        End If
        If bInvalidate Then
            Call pMapInvalidate()
        End If
    End Sub

    Private Function pHitTest(CurrentDesign As cDesign, Point As PointF) As cItem
        Dim oSelectedItem As cItem
        If iAdvancedSelectionMode > 0 Then
            Dim oHitTestResults As List(Of cItem) = CurrentDesign.HitTest(oCurrentOptions, pGetCurrentDesignTools, Point, sWide / sPaintZoom, False)
            For Each oHitTestResult As cItem In oHitTestResults
                If TypeOf oHitTestResult Is cItemImage OrElse TypeOf oHitTestResult Is cItemSketch OrElse TypeOf oHitTestResult Is cItemText Then
                    Return oHitTestResult
                    Exit For
                Else
                    Using oGraphics As Graphics = picMap.CreateGraphics
                        If oHitTestResult.Caches.Item(oCurrentOptions).Hittest(oGraphics, Point, sPaintZoom, sAdvancedSelectionPrecision, sAdvancedSelectionWide) Then
                            oSelectedItem = oHitTestResult
                            Exit For
                        End If
                    End Using
                End If
            Next
            If iAdvancedSelectionMode > 1 AndAlso IsNothing(oSelectedItem) Then
                oSelectedItem = oHitTestResults.FirstOrDefault()
            End If
        Else
            oSelectedItem = CurrentDesign.HitTest(oCurrentOptions, pGetCurrentDesignTools, Point, sWide / sPaintZoom, True).FirstOrDefault()
        End If
        Return oSelectedItem
    End Function

    Private Sub pMapSetCursor(ByVal Ctrl As Boolean, ByVal Shift As Boolean, ByVal Alt As Boolean, ByVal Button As MouseButtons)
        If Ctrl And Not Alt And Not Shift Then
            If (Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Or (Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle Then
                picMap.Cursor = oClosedHandCursor
            Else
                picMap.Cursor = oOpenHandCursor
            End If
        Else
            If Alt And Not Shift Then
                picMap.Cursor = Cursors.Hand
            Else
                If Ctrl And Alt Then
                    picMap.Cursor = Cursors.Help
                Else
                    If Ctrl And Shift Then
                        picMap.Cursor = Cursors.Cross
                    Else
                        If pGetCurrentDesignTools.IsInEdit Then
                            picMap.Cursor = Cursors.Cross
                        Else
                            picMap.Cursor = Cursors.Default
                        End If
                    End If
                End If
            End If
        End If
    End Sub

    Private Function pDefaultFolderSetup() As Boolean
        sDefaultFolder = IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "cSurvey")
        Try
            If My.Computer.FileSystem.DirectoryExists(sDefaultFolder) Then
                Return True
            Else
                Call My.Computer.FileSystem.CreateDirectory(sDefaultFolder)
                Return True
            End If
        Catch ex As Exception
            Return False
        End Try
    End Function

    Private sTemplatesPath As String
    Private oTemplates As List(Of cTemplateEntry)
    Private oTemplateDefault As cTemplateEntry
    Private bTemplates As Boolean

    Private Function pTemplatesSetup() As Boolean
        sTemplatesPath = IO.Path.Combine(sDefaultFolder, "Templates")
        Try
            If My.Computer.FileSystem.DirectoryExists(sTemplatesPath) Then
                Return True
            Else
                Call My.Computer.FileSystem.CreateDirectory(sTemplatesPath)
                Return True
            End If
        Catch ex As Exception
            Return False
        End Try
    End Function

    Private Function pTemplatesEnumerate() As Boolean
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call oTemplates.Clear()
        Dim oIndex As List(Of String) = New List(Of String)
        For Each oFile As FileInfo In My.Computer.FileSystem.GetDirectoryInfo(sTemplatesPath).GetFiles("*.csz")
            If Not oIndex.Contains(oFile.Name.ToLower) Then
                Dim oTemplate As cTemplateEntry = New cTemplateEntry(oFile)
                If oTemplate.Default Then
                    oTemplateDefault = oTemplate
                End If
                Call oTemplates.Add(oTemplate)
                Call oIndex.Add(oFile.Name.ToLower)
            End If
        Next
        For Each oFile As FileInfo In My.Computer.FileSystem.GetDirectoryInfo(sTemplatesPath).GetFiles("*.csx")
            If Not oIndex.Contains(oFile.Name.ToLower) Then
                Dim oTemplate As cTemplateEntry = New cTemplateEntry(oFile)
                If oTemplate.Default Then
                    oTemplateDefault = oTemplate
                End If
                Call oTemplates.Add(oTemplate)
                Call oIndex.Add(oFile.Name.ToLower)
            End If
        Next
        Call oMousePointer.Push(Cursors.Default)
        Return oTemplates.Count > 0
    End Function

    Private Sub picMap_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseMove
        Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down Or (e.Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle
        Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
        Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down

        If pGetCurrentDesignTools.IsInCombine Then
            picMap.Cursor = Cursors.Help
        Else
            Call pMapSetCursor(bCtrl, bShift, bAlt, e.Button)
        End If

        If e.Button <> Windows.Forms.MouseButtons.None Then
            bMousePressed = True
        End If

        Dim oPoint As PointF = e.Location
        Dim oMousePoint As PointF = modPaint.FromPaintPoint(oPoint, sPaintZoom, oPaintTranslation)

        pnlStatusDesignInfo.Caption = "x: " & Strings.Format(oMousePoint.X, "0.00") & " m - y: " & Strings.Format(-1 * oMousePoint.Y, "0.00") & " m"

        Dim bInvalidate As Boolean = False
        If iMultiSelEnabled <> MultiSelTypeEnum.None And bShift And (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
            If bCtrl Then
                iMultiSelEnabled = MultiSelTypeEnum.Zoom
                oEndMultiselPosition = oPoint
            Else
                If bAlt Then
                    iMultiSelEnabled = MultiSelTypeEnum.MultiLayer
                Else
                    iMultiSelEnabled = MultiSelTypeEnum.SingleLayer
                End If
                oEndMultiselPosition = oPoint
            End If
            bInvalidate = True
        Else
            If bAlt Then
            Else
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    iMultiSelEnabled = MultiSelTypeEnum.None
                    bInvalidate = True
                End If
                With oCurrentDesign
                    If pGetCurrentDesignTools.IsInEdit Then
                        If (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Or bEditPointByPoint Then
                            With pGetCurrentDesignTools()
                                'If Not bEditPointByPoint Then
                                If .Started Then
                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                    'If bSnapToPoint Then modPaint.PointSnap(oMousePoint, oCurrentDesign, sGridSnap)
                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                    If oMousePoint <> oLastPoint Then
                                        Select Case .CurrentItem.Type
                                            Case cIItem.cItemTypeEnum.CrossSection
                                                Dim oItem As cItemCrossSection = .CurrentItem
                                                If oItem.Points.Count < oItem.MaxPointsCount Then
                                                    Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                                Else
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                End If

                                            Case cIItem.cItemTypeEnum.FreeHandLine, cIItem.cItemTypeEnum.FreeHandArea, cIItem.cItemTypeEnum.InvertedFreeHandArea
                                                Dim oItem As cItem = .CurrentItem
                                                If bEditPointByPoint Then
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                Else
                                                    Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                                End If

                                            Case cIItem.cItemTypeEnum.Text, cIItem.cItemTypeEnum.Sign, cIItem.cItemTypeEnum.Clipart, cIItem.cItemTypeEnum.Image, cIItem.cItemTypeEnum.Attachment, cIItem.cItemTypeEnum.Quota, cIItem.cItemTypeEnum.Legend, cIItem.cItemTypeEnum.Scale, cIItem.cItemTypeEnum.Compass, cIItem.cItemTypeEnum.InformationBoxText
                                                Dim oItem As cItem = .CurrentItem
                                                If oItem.Points.Count < oItem.MaxPointsCount Then
                                                    Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                                    'If oItem.Points.Count >= oItem.MaxPointsCount Then Call .EndAndSelectItem()
                                                Else
                                                    If oItem.Points.Count = oItem.MaxPointsCount Then
                                                        If oItem.Points.First.Point <> oMousePoint Then
                                                            Call oItem.Points.Last.MoveTo(oMousePoint)
                                                        End If
                                                    End If
                                                    'If oItem.MaxPointsCount = 2 Then
                                                    '    If oItem.Points.First.Point <> oMousePoint Then
                                                    '        Call oItem.Points.Last.MoveTo(oMousePoint)
                                                    '    End If
                                                    'Else
                                                    '    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                    'End If
                                                End If
                                        End Select
                                        .LastPoint = oPoint
                                        bInvalidate = True
                                    End If
                                End If
                            End With
                        ElseIf ((e.Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle) Then
                            Dim oOldPaintTranslation As PointF = oPaintTranslation
                            oPaintTranslation = New PointF(e.X - oStartPaintDrawPosition.X, e.Y - oStartPaintDrawPosition.Y)
                            If oOldPaintTranslation <> oPaintTranslation Then
                                If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()
                                bInvalidate = True
                            End If
                        End If
                    Else
                        With pGetCurrentDesignTools()
                            'l'oggetto è selezionato
                            If Not bCtrl Then
                                Dim bLocked As Boolean = False
                                If Not .CurrentItem Is Nothing Then
                                    bLocked = .CurrentItem.Locked Or Not .CurrentItem.CanBeMoved
                                End If
                                If Not .CurrentItem Is Nothing Then
                                    If (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                                        If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                        'If bSnapToPoint Then modPaint.PointSnap(oMousePoint, oCurrentDesign, sGridSnap)
                                        If bLocked Then
                                            Select Case .LastAnchor
                                                Case AnchorRectangleTypeEnum.GenericPoint
                                                    'punto del tracciato...
                                                    Call .CurrentItemPoint.MoveTo(oMousePoint)
                                                    Call .RefreshTools()
                                            End Select
                                        Else
                                            Select Case .LastAnchor
                                                Case AnchorRectangleTypeEnum.GenericPoint
                                                    'punto del tracciato...
                                                    If Not .CurrentItemPoint Is Nothing Then
                                                        Call .CurrentItemPoint.MoveTo(oMousePoint)
                                                        Call .RefreshTools()
                                                    End If
                                                Case AnchorRectangleTypeEnum.TopLeftCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Call .CurrentItem.MoveBy(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.TopRightCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width + oSize.Width
                                                    oSize.Height = oOldSize.Height - oSize.Height
                                                    Dim sDiffY As Single = oOldSize.Height - oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(0, sDiffY)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.BottomLeftCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width - oSize.Width
                                                    oSize.Height = oOldSize.Height + oSize.Height
                                                    Dim sDiffX As Single = oOldSize.Width - oSize.Width
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(sDiffX, 0)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.BottomRightCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width + oSize.Width
                                                    oSize.Height = oOldSize.Height + oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.TopMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width
                                                    oSize.Height = oOldSize.Height - oSize.Height
                                                    Dim sDiffY As Single = oOldSize.Height - oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(0, sDiffY)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.RightMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width + oSize.Width
                                                    oSize.Height = oOldSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.LeftMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width - oSize.Width
                                                    oSize.Height = oOldSize.Height
                                                    Dim sDiffX As Single = oOldSize.Width - oSize.Width
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(sDiffX, 0)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.BottomMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width
                                                    oSize.Height = oOldSize.Height + oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.Rotator
                                                    Dim sAngle As Single = modPaint.GetBearing(.LastCenterPoint, oMousePoint)
                                                    Call .CurrentItem.RotateAt(.LastCenterPoint, sAngle - .LastAngle)
                                                    Call pStatusSet(String.Format(GetLocalizedString("main.textpart51"), Strings.Format(sAngle, "0.00")) & "°")
                                                    .LastAngle = sAngle
                                            End Select
                                        End If
                                        If .LastAnchor <> AnchorRectangleTypeEnum.None Then
                                            If oSurvey.Properties.DesignBindingMode = cSurvey.cSurvey.DesignBindingModeEnum.Automatic Then
                                                Call .CurrentItem.BindSegments()
                                            End If

                                            If .CurrentItemPoint Is Nothing Then
                                                Call pPropertyItemBounds()
                                            Else
                                                Call pPropertyItemPointBounds()
                                            End If
                                            Call pFloatingToolbarUpdate()

                                            bInvalidate = True
                                        End If
                                        .LastPoint = oPoint
                                    Else
                                        Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                        If Not bLocked Then
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    picMap.Cursor = Cursors.Cross
                                                Case cHitTestResult.ObjectTypeEnum.AnchorRectangle
                                                    Select Case oHitTestResult.ObjectAnchorRectangleType
                                                        Case AnchorRectangleTypeEnum.Rotator
                                                            picMap.Cursor = Cursors.Cross
                                                        Case AnchorRectangleTypeEnum.TopLeftCorner
                                                            picMap.Cursor = Cursors.SizeAll
                                                        Case AnchorRectangleTypeEnum.BottomRightCorner
                                                            picMap.Cursor = Cursors.SizeNWSE
                                                        Case AnchorRectangleTypeEnum.TopRightCorner, AnchorRectangleTypeEnum.BottomLeftCorner
                                                            picMap.Cursor = Cursors.SizeNESW
                                                        Case AnchorRectangleTypeEnum.TopMiddle, AnchorRectangleTypeEnum.BottomMiddle
                                                            picMap.Cursor = Cursors.SizeNS
                                                        Case AnchorRectangleTypeEnum.RightMiddle, AnchorRectangleTypeEnum.LeftMiddle
                                                            picMap.Cursor = Cursors.SizeWE
                                                    End Select
                                            End Select
                                        Else
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    picMap.Cursor = Cursors.Cross
                                            End Select
                                        End If
                                    End If
                                End If
                            End If
                            If (((e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left) And .CurrentItem Is Nothing) Or ((e.Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle) Then
                                Dim oOldPaintTranslation As PointF = oPaintTranslation
                                oPaintTranslation = New PointF(e.X - oStartPaintDrawPosition.X, e.Y - oStartPaintDrawPosition.Y)
                                If oOldPaintTranslation <> oPaintTranslation Then
                                    bInvalidate = True
                                End If
                            End If
                        End With
                    End If
                End With
            End If
        End If
        If bInvalidate Then
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub picMap_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseUp
        Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down Or (e.Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle
        Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
        Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down

        Call pMapSetCursor(bCtrl, bShift, bAlt, e.Button)

        bMousePressed = False

        Dim oPoint As PointF = e.Location
        Dim oMousePoint As PointF = modPaint.FromPaintPoint(oPoint, sPaintZoom, oPaintTranslation)

        Dim bInvalidate As Boolean = False
        If iMultiSelEnabled <> MultiSelTypeEnum.None And bShift And (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
            If bCtrl Then
                'zoom al rettangolo...
                Dim oZoomRect As RectangleF = pGetMultiSelRect()
                oZoomRect = modPaint.FromPaintRectangle(oZoomRect, sPaintZoom, oPaintTranslation)
                Call pMapCenterAndFit(oZoomRect)
                iMultiSelEnabled = MultiSelTypeEnum.None
            Else
                If bAlt Then
                    iMultiSelEnabled = MultiSelTypeEnum.MultiLayer
                Else
                    iMultiSelEnabled = MultiSelTypeEnum.SingleLayer
                End If
                Dim oMultiSelRect As RectangleF = pGetMultiSelRect()
                Dim oItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Select Case iMultiSelEnabled
                    Case MultiSelTypeEnum.SingleLayer
                        Call oItems.AddRange(pGetCurrentDesignTools.CurrentLayer.GetItemsByRectangle(modPaint.FromPaintRectangle(oMultiSelRect, sPaintZoom, oPaintTranslation), oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch))
                    Case MultiSelTypeEnum.MultiLayer
                        'con alt premuto seleziono oggetti su piu livelli...
                        Call oItems.AddRange(oCurrentDesign.GetItemsByRectangle(modPaint.FromPaintRectangle(oMultiSelRect, sPaintZoom, oPaintTranslation), oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch))
                End Select
                iMultiSelEnabled = MultiSelTypeEnum.None
                If oItems.Count > 0 Then
                    If oItems.Count = 1 Then
                        Call pGetCurrentDesignTools.SelectItem(oItems.Item(0))
                    Else
                        Call pGetCurrentDesignTools.SelectItem(oItems)
                    End If
                End If
            End If
            bInvalidate = True
        Else
            If bAlt Then
                'If (e.Button And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                '    Call mnuDesignSegment.Show(picMap, e.Location)
                'End If
            Else
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    iMultiSelEnabled = MultiSelTypeEnum.None
                    bInvalidate = True
                End If

                'Dim bUndoSnapshot As Boolean = False
                With oCurrentDesign
                    If pGetCurrentDesignTools.IsInEdit Then
                        If (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                            With pGetCurrentDesignTools()
                                If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                'If bSnapToPoint Then modPaint.PointSnap(oMousePoint, oCurrentDesign, sGridSnap)
                                Select Case .CurrentItem.Type
                                    Case cIItem.cItemTypeEnum.InvertedFreeHandArea, cIItem.cItemTypeEnum.FreeHandLine, cIItem.cItemTypeEnum.FreeHandArea
                                        Dim oItem As cItem = .CurrentItem
                                        If bEditPointByPoint And bShift Then oItem.Points.StartSequence()
                                        If bEditPointByPoint Then
                                            Call .SelectLastPoint(oItem.Points.Last)
                                            Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                        Else
                                            Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                        End If
                                        If bEditPointByPoint And oItem.Points.Count = 1 Then Call oItem.Points.AddFromPaintPoint(oMousePoint)

                                    Case cIItem.cItemTypeEnum.Text, cIItem.cItemTypeEnum.Sign, cIItem.cItemTypeEnum.Clipart, cIItem.cItemTypeEnum.Image, cIItem.cItemTypeEnum.Attachment, cIItem.cItemTypeEnum.Quota, cIItem.cItemTypeEnum.Legend, cIItem.cItemTypeEnum.Scale, cIItem.cItemTypeEnum.Compass, cIItem.cItemTypeEnum.InformationBoxText
                                        Dim oItem As cItem = .CurrentItem
                                        'If oItem.Points.Count < oItem.MaxPointsCount Then
                                        '    Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                        'Else
                                        '    If oItem.MaxPointsCount = 2 Then
                                        '        If oItem.Points.First.Point <> oMousePoint Then
                                        '            Call oItem.Points.Last.MoveTo(oMousePoint)
                                        '        End If
                                        '    Else
                                        '        Call oItem.Points.Last.MoveTo(oMousePoint)
                                        '    End If
                                        'End If
                                        If oItem.Points.Count < oItem.MaxPointsCount Then
                                            Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                            'If oItem.Points.Count >= oItem.MaxPointsCount Then Call .EndAndSelectItem()
                                        Else
                                            If oItem.Points.Count = oItem.MaxPointsCount Then
                                                If oItem.Points.First.Point <> oMousePoint Then
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                End If
                                            End If
                                            'If oItem.MaxPointsCount = 2 Then
                                            '    If oItem.Points.First.Point <> oMousePoint Then
                                            '        Call oItem.Points.Last.MoveTo(oMousePoint)
                                            '    End If
                                            'Else
                                            '    Call oItem.Points.Last.MoveTo(oMousePoint)
                                            'End If
                                        End If
                                End Select
                                bInvalidate = True
                                'Call pObjectPropertyDelayedLoad()
                                Call pPropertyItemBounds()
                                Call pFloatingToolbarUpdate()

                                .LastPoint = oPoint
                                If iSnapToPoint = 2 Then
                                    Dim oSequence As cSequence = .CurrentItem.Points.GetSequence(.LastItemPoint)
                                    If Not IsNothing(oSnapToPointPointTojoin) AndAlso Not (oSequence.Contains(.LastItemPoint) AndAlso oSequence.Contains(oSnapToPointPointTojoin)) Then
                                        .CurrentItem.Points.GetSequence(.LastItemPoint).First.Join(oSnapToPointPointTojoin)
                                    End If
                                ElseIf iSnapToPoint = 3 Then
                                    Dim oLastItem As cItem = oSnapToPointPointTojoin.Item
                                    If oLastItem Is .LastItemPoint.Item Then
                                        Dim oFirstPoint As cPoint = .CurrentItem.Points.GetSequence(.LastItemPoint).First
                                        If Not oFirstPoint Is .CurrentItem.Points.First Then
                                            'the snap is in the same object
                                            'oFirstPoint.BeginSequence = False
                                            Call .CurrentItem.Points.Remove(oFirstPoint)
                                        End If
                                    Else
                                        If oLastItem.Type = .LastItemPoint.Item.Type Then
                                            'same object type...merge
                                            'if different object type...only snap, just done in mousedown, so nothing to do
                                            .LastItemPoint.Item.Combine(oLastItem)
                                        End If
                                    End If
                                End If
                                iSnapToPoint = 0
                            End With
                        ElseIf (e.Button And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                            Call pMapInfoMenu(e.Location)
                            Call mnuDesignItem.ShowPopup(picMap.PointToScreen(e.Location))
                        ElseIf (e.Button = 0) Then
                            With pGetCurrentDesignTools()
                                If .Started Then
                                    .LastPoint = oPoint
                                    Select Case .CurrentItem.Type
                                        Case cIItem.cItemTypeEnum.FreeHandLine
                                            Dim oItem As cItemFreeHandLine = .CurrentItem
                                            Call oItem.Points.Last.MoveTo(oMousePoint)
                                        Case cIItem.cItemTypeEnum.FreeHandArea
                                            Dim oItem As cItemFreeHandArea = .CurrentItem
                                            Call oItem.Points.Last.MoveTo(oMousePoint)
                                    End Select
                                    'bUndoSnapshot = True
                                    bInvalidate = True
                                    Call pPropertyItemBounds()
                                    Call pFloatingToolbarUpdate()

                                End If
                            End With
                        End If
                    Else
                        With pGetCurrentDesignTools()
                            If (e.Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                                .LastAnchor = AnchorRectangleTypeEnum.None
                                'bUndoSnapshot = True
                            ElseIf (e.Button And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                                If .CurrentItem Is Nothing Then
                                    Call pMapInfoMenu(e.Location)
                                    Call mnuDesignNone.ShowPopup(picMap.PointToScreen(e.Location))
                                Else
                                    If .LastAnchor = AnchorRectangleTypeEnum.GenericPoint OrElse .LastAnchor = AnchorRectangleTypeEnum.NewPoint Then
                                        Call pMapInfoMenu(e.Location)
                                        Call mnuDesignItemPoint.ShowPopup(picMap.PointToScreen(e.Location))
                                    Else
                                        Call pMapInfoMenu(e.Location)
                                        Call mnuDesignItem.ShowPopup(picMap.PointToScreen(e.Location))
                                    End If
                                    .LastAnchor = AnchorRectangleTypeEnum.None
                                End If
                            ElseIf (e.Button = 0) Then
                            End If
                        End With
                    End If
                    'If bUndoSnapshot Then
                    '    Call pGetCurrentDesignTools.TakeUndoSnapshot()
                    'End If
                End With
            End If
        End If
        'Call pStatusSet("")
        If bInvalidate Then
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pMapBindScrollbars()
        Dim oSize As Size = oCurrentDesign.GetVisibleBounds(oCurrentOptions).Size.ToSize
        If oSize.IsEmpty Then
            oSize = pnlDesigner.ClientSize
        End If
        Dim iWidth As Integer = oSize.Width * sPaintZoom * 2
        Dim iHeight As Integer = oSize.Height * sPaintZoom * 2
        Dim iCurrentX As Integer = oPaintTranslation.X
        Dim iCurrentY As Integer = oPaintTranslation.Y
        If iWidth < Math.Abs(iCurrentX) Then
            iWidth = Math.Abs(iCurrentX)
        End If
        If iHeight < Math.Abs(iCurrentY) Then
            iHeight = Math.Abs(iCurrentY)
        End If
        oVSB.Minimum = -iHeight
        oVSB.Maximum = iHeight
        oHSB.Minimum = -iWidth
        oHSB.Maximum = iWidth
        oVSB.Value = -iCurrentY
        oHSB.Value = -iCurrentX
    End Sub

    Private Sub picMap_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles picMap.Paint
        If Not oCurrentDesign Is Nothing Then
            Call pMapBindScrollbars()
            Call pSurveyDraw(e.Graphics)
        End If
    End Sub

    Private Function pGetMultiSelRect() As RectangleF
        Dim sLeft As Single = oStartMultiselPosition.X
        Dim [sTop] As Single = oStartMultiselPosition.Y
        Dim sWidth As Single = oEndMultiselPosition.X - oStartMultiselPosition.X
        Dim sHeight As Single = oEndMultiselPosition.Y - oStartMultiselPosition.Y
        If sWidth < 0 Then
            sWidth = -1 * sWidth
            sLeft = sLeft - sWidth
        End If
        If sHeight < 0 Then
            sHeight = -1 * sHeight
            [sTop] = [sTop] - sHeight
        End If
        Return New RectangleF(sLeft, [sTop], sWidth, sHeight)
    End Function

    Private Sub pMapZoomOut()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call oHolos.Zoom(0.1)
        Else
            If pnlStatusZoomBar.EditValue - 20 >= trkZoom.Minimum Then
                pnlStatusZoomBar.EditValue -= 20
            End If
        End If
    End Sub

    Private Sub pMapZoomIn()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call oHolos.Zoom(-0.1)
        Else
            If pnlStatusZoomBar.EditValue + 20 <= trkZoom.Maximum Then
                pnlStatusZoomBar.EditValue += 20
            End If
        End If
    End Sub

    Private Sub pMapRepaint(Optional ByVal ZoomCenter As Boolean = False)
        'adjusting real zoom ratio from actual zoom value...
        sZoomRatio = 1 / Math.Log(pnlStatusZoomBar.EditValue) * 50
        'If trkZoom.Value < 100 Then
        '    sZoomRatio = 50
        'ElseIf trkZoom.Value >= 100 And trkZoom.Value > 500 Then
        '    sZoomRatio = 25
        'Else
        '    sZoomRatio = 15
        'End If
        Call pMapZoom(pnlStatusZoomBar.EditValue / sZoomRatio)
        If ZoomCenter Then
            Call pMapCenter()
        End If
    End Sub

    Private Sub cboSegmentFrom_DropDown(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboSegmentFrom.DropDown
        With cboSegmentFrom.Items
            Call .Clear()
            Call .AddRange(oSurvey.Segments.GetTrigPointsNames.ToArray)
        End With
    End Sub

    Private Sub cboSegmentTo_DropDown(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboSegmentTo.DropDown
        With cboSegmentTo.Items
            Call .Clear()
            Call .AddRange(oSurvey.Segments.GetTrigPointsNames.ToArray)
        End With
    End Sub

    Private Sub pSurveyDelayedRedraw()
        Call oDelayedRedrawTimer.Stop()
        Call oDelayedRedrawTimer.Start()

        'If Not oDelayedRedrawThread Is Nothing Then
        '    oDelayedRedrawThread.Change(Threading.Timeout.Infinite, Threading.Timeout.Infinite)
        '    Call oDelayedRedrawThread.Dispose()
        '    oDelayedRedrawThread = Nothing
        'End If
        'oDelayedRedrawThread = New Threading.Timer(AddressOf pSurveyDelayedRedraw_Callback, Nothing, 1000, Threading.Timeout.Infinite)
    End Sub

    Private Sub oDelayedRedrawTimer_Tick(Sender As Object, e As EventArgs) Handles oDelayedRedrawTimer.Tick
        Call oDelayedRedrawTimer.Stop()
        'If InvokeRequired Then
        '    Call Me.BeginInvoke(New MethodInvoker(AddressOf pMapInvalidate))
        'Else
        Call pMapInvalidate()
        'End If
    End Sub

    Private Sub pPropertyItemSegment()
        If Not oCurrentDesign Is Nothing Then
            Dim oCurrentItem As cItemSegment = pGetCurrentDesignTools.CurrentItem
            If Not oCurrentItem Is Nothing Then
                Dim oSegment As cSegment = oCurrentItem.Segment
                If Not oCurrentItem Is Nothing AndAlso Not oSegment Is Nothing Then
                    Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(oSegment)
                    dockProperties.Enabled = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked

                    Call lvSegmentInfo.BeginUpdate()
                    Call lvSegmentInfo.Items.Clear()

                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart11"), oSegment.Cave)
                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart12"), oSegment.Branch)

                    Dim oSession As cSession = oSurvey.Properties.Sessions(oSegment.Session)
                    If oSession Is Nothing Then
                        Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart13"), "N/D")
                        Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart14"), "N/D")
                    Else
                        Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart13"), oSession.Description)
                        Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart14"), Strings.Format(oSession.Date, "dd/MM/yyyy"))
                    End If

                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart15"), oSegment.From)
                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart16"), oSegment.To)

                    Dim dCalculatedDistance As Decimal = modNumbers.MathRound(oSegment.Data.Data.Distance, 2)
                    Dim dCalculatedBearing As Decimal = modNumbers.MathRound(oSegment.Data.Data.Bearing, 2)
                    Dim dCalculatedInclination As Decimal = modNumbers.MathRound(oSegment.Data.Data.Inclination, 2)
                    Select Case oSegment.GetDataFormat
                        Case cSegment.DataFormatEnum.Normal
                            Call pSegmentAddDetailInfo(GetMeasureName(oSegment, MeasureEnum.Distance), Strings.Format(oSegment.Distance, "0.00") & " " & cSegment.GetDistanceSimbol(oSegment.GetDistanceType) & " " & If(oSegment.Distance <> dCalculatedDistance, " (" & Strings.Format(dCalculatedDistance, "0.00") & " m" & ")", ""))
                            Call pSegmentAddDetailInfo(GetMeasureName(oSegment, MeasureEnum.Bearing), Strings.Format(oSegment.Bearing, "0.00") & " " & cSegment.GetBearingSimbol(oSegment.GetBearingType) & " " & If(oSegment.Bearing <> dCalculatedBearing, " (" & Strings.Format(dCalculatedBearing, "0.00") & "° " & ")", ""))
                            Call pSegmentAddDetailInfo(GetMeasureName(oSegment, MeasureEnum.Inclination), Strings.Format(oSegment.Inclination, "0.00") & " " & cSegment.GetInclinationSimbol(oSegment.GetInclinationType) & " " & If(oSegment.Inclination <> dCalculatedInclination, " (" & Strings.Format(dCalculatedInclination, "0.00") & "° " & ")", ""))

                            Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart17"), modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Plan.FromPoint, oSegment.Data.Plan.ToPoint), 3) & " m")
                            Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart18"), modNumbers.MathRound(oSegment.Data.Profile.FromPoint.Y - oSegment.Data.Profile.ToPoint.Y, 3) & " m")
                        Case cSegment.DataFormatEnum.Cartesian
                            Call pSegmentAddDetailInfo(GetMeasureName(oSegment, MeasureEnum.Distance), Strings.Format(oSegment.Distance, "0.00") & " " & cSegment.GetDistanceSimbol(oSegment.GetDistanceType) & " " & If(oSegment.Distance <> dCalculatedDistance, " (" & Strings.Format(dCalculatedDistance, "0.00") & " m" & ")", ""))
                            Call pSegmentAddDetailInfo(GetMeasureName(oSegment, MeasureEnum.Bearing), Strings.Format(oSegment.Bearing, "0.00") & " " & cSegment.GetDistanceSimbol(oSegment.GetDistanceType) & " " & If(oSegment.Bearing <> dCalculatedBearing, " (" & Strings.Format(dCalculatedBearing, "0.00") & "° " & ")", ""))
                            Call pSegmentAddDetailInfo(GetMeasureName(oSegment, MeasureEnum.Inclination), Strings.Format(oSegment.Inclination, "0.00") & " " & cSegment.GetDistanceSimbol(oSegment.GetDistanceType) & " " & If(oSegment.Inclination <> dCalculatedInclination, " (" & Strings.Format(dCalculatedInclination, "0.00") & "° " & ")", ""))

                            Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart17"), modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Plan.FromPoint, oSegment.Data.Plan.ToPoint), 3) & " m")
                    End Select

                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart19"), If(oSegment.Data.Data.Reversed, GetLocalizedString("main.textpart19a"), GetLocalizedString("main.textpart19b")))
                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart20"), If(oSegment.Data.Data.Direction = cSurvey.cSurvey.DirectionEnum.Left, GetLocalizedString("main.textpart20a"), If(oSegment.Data.Data.Direction = cSurvey.cSurvey.DirectionEnum.Right, GetLocalizedString("main.textpart20b"), GetLocalizedString("main.textpart20e"))))
                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart21"), If(oSegment.Exclude, GetLocalizedString("main.textpart22"), GetLocalizedString("main.textpart23")))
                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart24"), If(oSegment.Splay, GetLocalizedString("main.textpart22"), GetLocalizedString("main.textpart23")))
                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart102"), If(oSegment.Calibration, GetLocalizedString("main.textpart22"), GetLocalizedString("main.textpart23")))
                    Call pSegmentAddDetailInfo(GetLocalizedString("main.textpart91"), If(oSegment.Data.IsInRing, GetLocalizedString("main.textpart22"), GetLocalizedString("main.textpart23")))

                    For Each oItem As ListViewItem In lvSegmentInfo.Items
                        oItem.ToolTipText = oItem.SubItems(1).Text
                    Next

                    Dim iHeight As Integer = 4
                    For Each oitem As ListViewItem In lvSegmentInfo.Items
                        iHeight += oitem.GetBounds(ItemBoundsPortion.Entire).Height
                    Next
                    lvSegmentInfo.Height = iHeight
                    pnlPropSegmentInfo.Height = lvSegmentInfo.Top + 4 + iHeight

                    Call lvSegmentInfo.EndUpdate()

                    With oCurrentItem
                        grpCurrentItemLocation.Visible = False
                        grpCurrentItemSize.Visible = False
                        btnItemsLayouts.Enabled = False
                        btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
                        grpCurrentItemRotate.Visible = False
                        grpCurrentItemAlign.Visible = False

                        cPropName.Visible = False
                        cPropTransparency.Visible = False
                        cPropLineType.Visible = False
                        cPropPointLineType.Visible = False
                        pnlPropInfo.Visible = False
                        pnlPropProp.Visible = False

                        pnlPropPen.Visible = False
                        pnlPropBrush.Visible = False
                        pnlPropImage.Visible = False
                        pnlPropTrigpointInfo.Visible = False
                        pnlPropSegmentBinding.Visible = False
                        pnlPropSegmentsBinding.Visible = False
                        pnlPropSign.Visible = False
                        pnlPropText.Visible = False
                        pnlPropClipping.Visible = False
                        btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
                        pnlPropCrossSection.Visible = False
                        pnlPropQuota.Visible = False
                        pnlPropSketch.Visible = False
                        pnlPropMergeMode.Visible = False
                        pnlPropObjectsBinding.Visible = False
                        pnlPropTrigpointsDistances.Visible = False

                        pnlPropCrossSectionSplayBorder.Visible = False
                        pnlPropDataProperties.Visible = False
                        pnlPropCrossSectionMarker.Visible = False
                        pnlPropAttachment.Visible = False
                        pnlPropLegend.Visible = False
                        pnlPropScale.Visible = False
                        cPropCompassItems.Visible = False

                        grpCurrentItemShot.Visible = True
                        grpCurrentItemStation.Visible = False
                        With btnCurrentItemSegmentFromProperty
                            .Enabled = True
                            .Caption = oSegment.From
                        End With
                        With btnCurrentItemSegmentToProperty
                            .Enabled = True
                            .Caption = oSegment.To
                        End With
                        If oCurrentItem.Design.Type = cIDesign.cDesignTypeEnum.Profile Then
                            btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Always
                            btnCurrentItemSegmentDirection.Enabled = Not oSegment.IsProfileBinded AndAlso oSegment.Direction <> cSurvey.cSurvey.DirectionEnum.Vertical
                            btnCurrentItemSegmentDirection0.Enabled = btnCurrentItemSegmentDirection.Enabled
                        Else
                            btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
                        End If

                        Call cPropVisibility.Rebind(oCurrentItem)

                        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile Then
                            cmdPropSegmentInvert.Visible = True ' oSurvey.Properties.InversionMode = cSurvey.cSurvey.InversioneModeEnum.Absolute
                            cmdPropSegmentInvert.Enabled = Not oSegment.IsProfileBinded
                        Else
                            cmdPropSegmentInvert.Visible = False
                        End If

                        pnlPropSegmentInfo.Visible = True
                        pnlPropTrigpointInfo.Visible = False

                        If .HaveSplayBorder And oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                            Dim oItemSplayBorder As cIItemPlanSplayBorder = oSegment 'pGetCurrentDesignTools.CurrentItem
                            Try
                                cboPropPlanSplayPlanProjectionType.SelectedIndex = oItemSplayBorder.SplayBorderProjectionType
                                If cboPropPlanSplayPlanProjectionType.SelectedIndex > 0 Then
                                    lblPropPlanSplayPlanDeltaZ.Enabled = True
                                    txtPropPlanSplayPlanDeltaZ.Enabled = True
                                    lblPropPlanSplayMaxVariationDelta.Enabled = True
                                    txtPropPlanSplayMaxVariationDelta.Enabled = True
                                Else
                                    lblPropPlanSplayPlanDeltaZ.Enabled = False
                                    txtPropPlanSplayPlanDeltaZ.Enabled = False
                                    lblPropPlanSplayMaxVariationDelta.Enabled = False
                                    txtPropPlanSplayMaxVariationDelta.Enabled = False
                                End If
                                txtPropPlanSplayPlanDeltaZ.Value = oItemSplayBorder.SplayBorderProjectionDeltaZ
                                txtPropPlanSplayMaxVariationDelta.Value = oItemSplayBorder.SplayBorderMaxDeltaVariation
                                txtPropPlanSplayInclinationRangeMin.Value = oItemSplayBorder.SplayBorderInclinationRange.Width
                                txtPropPlanSplayInclinationRangeMax.Value = oItemSplayBorder.SplayBorderInclinationRange.Height
                            Catch
                            End Try
                            Call pObjectPropertyPlanDrawProjectionSchema()
                            pnlPropPlanSplayBorder.Visible = True
                        Else
                            pnlPropPlanSplayBorder.Visible = False
                        End If

                        If .HaveSplayBorder And oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile Then
                            Dim oItemSplayBorder As cIItemProfileSplayBorder = oSegment
                            Try
                                txtPropProfileSplayProjectionAngle.Value = oItemSplayBorder.SplayBorderProjectionAngle
                                txtPropProfileSplayMaxVariationAngle.Value = oItemSplayBorder.SplayBorderMaxAngleVariation
                                txtPropProfileSplayPosInclinationRangeMin.Value = oItemSplayBorder.SplayBorderPosInclinationRange.Width
                                txtPropProfileSplayPosInclinationRangeMax.Value = oItemSplayBorder.SplayBorderPosInclinationRange.Height
                                txtPropProfileSplayNegInclinationRangeMin.Value = oItemSplayBorder.SplayBorderNegInclinationRange.Width
                                txtPropProfileSplayNegInclinationRangeMax.Value = oItemSplayBorder.SplayBorderNegInclinationRange.Height
                            Catch ex As Exception
                                Call pLogAdd(ex)
                            End Try
                            Call pObjectPropertyProfileDrawProjectionSchema()
                            pnlPropProfileSplayBorder.Visible = True
                        Else
                            pnlPropProfileSplayBorder.Visible = False
                        End If
                        pnlPropCrossSectionSplayBorder.Visible = False

                        pnlPropObjectsBinding.Visible = Not oSegment.Splay AndAlso (oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Or oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile) AndAlso "" & oSegment.Cave <> ""
                        Call lvPropObjectsBinded.Items.Clear()
                        btnPropObjectsSelect.Enabled = False
                    End With
                Else
                    dockProperties.Enabled = False
                    Call lvSegmentInfo.BeginUpdate()
                    Call lvSegmentInfo.Items.Clear()
                    Call lvSegmentInfo.EndUpdate()
                End If
            End If
        End If
        Call pPropPopupHide()
    End Sub

    Private Sub pPropertyItemMarker()
        Dim bPropPopupShowed As Boolean

        If Not oCurrentDesign Is Nothing Then
            Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
            Dim oCurrentMarkedDesktopPoint As cMarkedDesktopPoint = pGetCurrentDesignTools.CurrentMarkedDesktopPoint
            If Not oCurrentItem Is Nothing AndAlso oCurrentMarkedDesktopPoint.IsSet Then
                dockProperties.Enabled = True

                Call lvTrigpointInfo.BeginUpdate()
                Call lvTrigpointInfo.Items.Clear()

                Dim oForecolor As Color
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart26"), Strings.Format(modNumbers.MathRound(oCurrentMarkedDesktopPoint.Point.X, 3), "0.00") & " m", oForecolor)
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart27"), Strings.Format(modNumbers.MathRound(oCurrentMarkedDesktopPoint.Point.Y, 3), "0.00") & " m", oForecolor)
                Else
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart26"), Strings.Format(modNumbers.MathRound(oCurrentMarkedDesktopPoint.Point.X, 3), "0.00") & " m", oForecolor)
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart27"), Strings.Format(modNumbers.MathRound(oCurrentMarkedDesktopPoint.Point.Y, 3), "0.00") & " m", oForecolor)
                End If

                If Not oCurrentMarkedDesktopPoint.Coordinate Is Nothing Then
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart31"), modNumbers.NumberToCoordinate(oCurrentMarkedDesktopPoint.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S"), oForecolor)
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart32"), modNumbers.NumberToCoordinate(oCurrentMarkedDesktopPoint.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W"), oForecolor)
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart33"), modNumbers.MathRound(oCurrentMarkedDesktopPoint.Coordinate.Altitude, 0), oForecolor)
                End If

                For Each oItem As ListViewItem In lvTrigpointInfo.Items
                    oItem.ToolTipText = oItem.SubItems(1).Text
                Next

                Dim iHeight As Integer = 4
                For Each oitem As ListViewItem In lvTrigpointInfo.Items
                    iHeight += oitem.GetBounds(ItemBoundsPortion.Entire).Height
                Next
                pnlPropTrigpointInfo.Height = lvTrigpointInfo.Top + 4 + iHeight
                lvTrigpointInfo.Height = iHeight

                Call lvTrigpointInfo.EndUpdate()

                With oCurrentItem
                    grpCurrentItemLocation.Visible = False
                    grpCurrentItemSize.Visible = False
                    btnItemsLayouts.Enabled = False
                    btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
                    grpCurrentItemRotate.Visible = False
                    grpCurrentItemAlign.Visible = False
                    grpCurrentItemShot.Visible = False
                    btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
                    grpCurrentItemStation.Visible = False

                    cPropName.Visible = False
                    cPropTransparency.Visible = False
                    pnlPropInfo.Visible = False
                    pnlPropProp.Visible = False
                    pnlPropPen.Visible = False
                    pnlPropBrush.Visible = False
                    pnlPropImage.Visible = False
                    pnlPropSegmentInfo.Visible = False
                    pnlPropSegmentBinding.Visible = False
                    pnlPropSegmentsBinding.Visible = False
                    pnlPropSign.Visible = False
                    pnlPropText.Visible = False
                    pnlPropClipping.Visible = False
                    btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
                    pnlPropCrossSection.Visible = False
                    pnlPropQuota.Visible = False
                    pnlPropSketch.Visible = False
                    pnlPropMergeMode.Visible = False
                    pnlPropObjectsBinding.Visible = False
                    pnlPropTrigpointsDistances.Visible = False

                    pnlPropPlanSplayBorder.Visible = False
                    pnlPropProfileSplayBorder.Visible = False
                    pnlPropCrossSectionSplayBorder.Visible = False
                    pnlPropDataProperties.Visible = False
                    pnlPropCrossSectionMarker.Visible = False

                    cPropVisibility.Visible = False
                    cPropLineType.Visible = False
                    cPropPointLineType.Visible = False

                    Dim oBounds As RectangleF = .GetBounds
                    Dim oLocation As PointF = oBounds.Location
                    Call pPropertyItemBounds(bPropPopupShowed)
                    'txtPropLeft.Text = Strings.Format(modNumbers.MathRound(oLocation.X, 3), DefaultPointFormat)
                    'txtPropTop.Text = Strings.Format(modNumbers.MathRound(-1 * oLocation.Y, 3), DefaultPointFormat)
                    btnCurrentItemLock.Visibility = BarItemVisibility.Never
                    btnItemsLayouts.Enabled = False
                    btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never

                    grpCurrentItemSize.Visible = False
                    grpCurrentItemRotate.Visible = False

                    'pnlPropShapeSequences.Visible = False

                    pnlPropSegmentInfo.Visible = False
                    pnlPropTrigpointInfo.Visible = True
                    cmdPropTrigpointFix.Enabled = False
                    cmdPropTrigpointFixToMarker.Enabled = False
                    pnlPropObjectsBinding.Visible = False
                    pnlPropTrigpointsDistances.Visible = False
                End With
            Else
                dockProperties.Enabled = False
                Call lvTrigpointInfo.BeginUpdate()
                Call lvTrigpointInfo.Items.Clear()
                Call lvTrigpointInfo.EndUpdate()
            End If
        End If

        If Not bPropPopupShowed Then pPropPopupHide()
    End Sub

    Private Sub pPropertyItemTrigpoint()
        If Not oCurrentDesign Is Nothing Then
            Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
            Dim oTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
            If Not oCurrentItem Is Nothing AndAlso Not oTrigpoint Is Nothing Then
                dockProperties.Enabled = True

                Call lvTrigpointInfo.BeginUpdate()
                Call lvTrigpointInfo.Items.Clear()

                Dim oForecolor As Color
                If oTrigpoint.Data.IsSplay Then
                    oForecolor = SystemColors.GrayText
                Else
                    oForecolor = Nothing
                End If
                Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart25"), oTrigpoint.Name, oForecolor)
                Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart26"), Strings.Format(modNumbers.MathRound(oTrigpoint.Data.X, 3), "0.00") & " m", oForecolor)
                Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart27"), Strings.Format(modNumbers.MathRound(oTrigpoint.Data.Y, 3), "0.00") & " m", oForecolor)
                Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart28"), Strings.Format(modNumbers.MathRound(oTrigpoint.Data.Z, 3), "0.00") & " m", oForecolor)
                If oTrigpoint.Data.IsCalibration Then
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart103"), GetLocalizedString("main.textpart22"), oForecolor)
                End If
                If oTrigpoint.IsEntrance Then
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart29"), oTrigpoint.Entrance.ToString, oForecolor)
                End If
                If oTrigpoint.IsOutside Then
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart30"), GetLocalizedString("main.textpart22"), oForecolor)
                Else
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart30"), GetLocalizedString("main.textpart23"), oForecolor)
                End If
                If oSurvey.Calculate.TrigPoints.Contains(oTrigpoint.Name) Then
                    Dim oCalculatedTrigpointFrom As Calculate.cTrigPoint = oSurvey.Calculate.TrigPoints(oTrigpoint.Name)
                    If Not oCalculatedTrigpointFrom Is Nothing AndAlso Not oCalculatedTrigpointFrom.Coordinate Is Nothing Then
                        Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart31"), modNumbers.NumberToCoordinate(oCalculatedTrigpointFrom.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S"), oForecolor)
                        Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart32"), modNumbers.NumberToCoordinate(oCalculatedTrigpointFrom.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W"), oForecolor)
                        Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart33"), modNumbers.MathRound(oCalculatedTrigpointFrom.Coordinate.Altitude, 0) & " m", oForecolor)
                        If Not oSurvey.Properties.SurfaceProfileElevation Is Nothing Then
                            Dim sValue As Single? = modPaint.GetSurfaceElevation(oSurvey, oTrigpoint)
                            If sValue.HasValue Then
                                Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart88"), modNumbers.MathRound(sValue.Value, 0) & " m", oForecolor)
                                Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart87"), modNumbers.MathRound(sValue.Value - oCalculatedTrigpointFrom.Coordinate.Altitude, 0) & " m", oForecolor)
                            End If
                        End If
                    End If
                End If

                If oTrigpoint.Note <> "" Then
                    Call pTrigpointAddDetailInfo(GetLocalizedString("main.textpart93"), oTrigpoint.Note, oForecolor)
                End If

                For Each oItem As ListViewItem In lvTrigpointInfo.Items
                    oItem.ToolTipText = oItem.SubItems(1).Text
                Next

                Dim iHeight As Integer = 4
                For Each oitem As ListViewItem In lvTrigpointInfo.Items
                    iHeight += oitem.GetBounds(ItemBoundsPortion.Entire).Height
                Next
                pnlPropTrigpointInfo.Height = lvTrigpointInfo.Top + 4 + iHeight
                lvTrigpointInfo.Height = iHeight

                Call lvTrigpointInfo.EndUpdate()

                With oCurrentItem
                    grpCurrentItemLocation.Visible = False
                    grpCurrentItemSize.Visible = False
                    btnItemsLayouts.Enabled = False
                    btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
                    grpCurrentItemRotate.Visible = False
                    grpCurrentItemAlign.Visible = False
                    grpCurrentItemShot.Visible = False
                    btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
                    grpCurrentItemStation.Visible = True

                    cPropName.Visible = False
                    cPropTransparency.Visible = False
                    pnlPropInfo.Visible = False
                    pnlPropProp.Visible = False
                    pnlPropPen.Visible = False
                    pnlPropBrush.Visible = False
                    pnlPropImage.Visible = False
                    pnlPropSegmentInfo.Visible = False
                    pnlPropSegmentBinding.Visible = False
                    pnlPropSegmentsBinding.Visible = False
                    pnlPropSign.Visible = False
                    pnlPropText.Visible = False
                    pnlPropClipping.Visible = False
                    btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
                    pnlPropCrossSection.Visible = False
                    pnlPropQuota.Visible = False
                    pnlPropSketch.Visible = False
                    pnlPropMergeMode.Visible = False

                    pnlPropPlanSplayBorder.Visible = False
                    pnlPropProfileSplayBorder.Visible = False
                    pnlPropCrossSectionSplayBorder.Visible = False
                    pnlPropDataProperties.Visible = False
                    pnlPropCrossSectionMarker.Visible = False
                    pnlPropAttachment.Visible = False
                    pnlPropLegend.Visible = False
                    pnlPropScale.Visible = False
                    cPropCompassItems.Visible = False

                    cPropVisibility.Visible = False
                    cPropLineType.Visible = False
                    cPropPointLineType.Visible = False

                    cmdPropSegmentInvert.Visible = False

                    pnlPropTrigpointInfo.Visible = True
                    If oCurrentItem.Design.Type = cIDesign.cDesignTypeEnum.Plan Then
                        If oSurvey.Properties.GPS.Enabled AndAlso Not oTrigpoint.Data.IsSplay Then
                            btnCurrentItemStationSetCoordinate.Enabled = True
                            cmdPropTrigpointFix.Enabled = True
                            If pGetCurrentDesignTools.CurrentMarkedDesktopPoint.IsSet Then
                                cmdPropTrigpointFixToMarker.Enabled = True
                                btnCurrentItemStationSetCoordinateCP.Enabled = True
                            Else
                                cmdPropTrigpointFixToMarker.Enabled = False
                                btnCurrentItemStationSetCoordinateCP.Enabled = False
                            End If
                        Else
                            btnCurrentItemStationSetCoordinate.Enabled = False
                            cmdPropTrigpointFix.Enabled = False
                            cmdPropTrigpointFixToMarker.Enabled = False
                        End If
                    Else
                        btnCurrentItemStationSetCoordinate.Enabled = False
                        btnCurrentItemStationSetCoordinateCP.Enabled = False
                    End If
                    pnlPropObjectsBinding.Visible = False
                End With

                pnlPropTrigpointsDistances.Visible = True
                lvPropTrigpointDistances.Enabled = False
                lvPropTrigpointDistances.Items.Clear()

                'pnlProperties.Visible = True
            Else
                dockProperties.Enabled = False
                Call lvTrigpointInfo.BeginUpdate()
                Call lvTrigpointInfo.Items.Clear()
                Call lvTrigpointInfo.EndUpdate()
            End If
        End If
        Call pPropPopupHide()
    End Sub

    Private Sub pObjectPropertyDelayedLoad()
        If InvokeRequired Then
            Call Me.BeginInvoke(New MethodInvoker(AddressOf pObjectPropertyDelayedLoad))
        Else
            tbl3DProp.Enabled = False
            tblDesignProp.Enabled = False
            tblObjectProp.Enabled = False

            Call oObjectPropertyTimer.Stop()
            Call oObjectPropertyTimer.Start()
        End If
    End Sub

    Private Sub oObjectPropertyTimer_Tick(sender As Object, e As EventArgs) Handles oObjectPropertyTimer.Tick
        Call oObjectPropertyTimer.Stop()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub pObjectDrawSplayProjectionSchemaForPlan(Picture As PictureBox, FromPoint As PointF, ToPoint As PointF, Type As cSurvey.Design.Items.cIItemPlanSplayBorder.PlanSplayBorderProjectionTypeEnum, Plan As Single, Variation As Single)
        'Dim oRect As Rectangle = Picture.DisplayRectangle
        'Dim oImage As Bitmap = New Bitmap(oRect.Width, oRect.Height)
        'Dim oGr As Graphics = Graphics.FromImage(oImage)
        'oGr.CompositingQuality = CompositingQuality.HighQuality
        'oGr.SmoothingMode = SmoothingMode.AntiAlias
        'Call oGr.Clear(Color.White)

        'If Type <> cIItemPlanSplayBorder.PlanSplayBorderProjectionTypeEnum.All Then
        '    If (FromPoint.IsEmpty And ToPoint.IsEmpty) Or FromPoint = ToPoint Then
        '        FromPoint.X = -(Plan + Variation)
        '        ToPoint.X = (Plan + Variation)
        '    End If

        '    If Type = cIItemPlanSplayBorder.PlanSplayBorderProjectionTypeEnum.ToAltitude Then
        '        Plan = -Plan
        '    Else
        '        Plan = Math.Max(FromPoint.Y, ToPoint.Y) - Math.Min(FromPoint.Y, ToPoint.Y) - Plan
        '    End If

        '    Dim oPath As GraphicsPath = New GraphicsPath
        '    Dim oTrianglePath As GraphicsPath = New GraphicsPath
        '    Dim oTrianglePoints As PointF() = {FromPoint, ToPoint, New PointF(FromPoint.X, ToPoint.Y)}
        '    Call oTrianglePath.AddPolygon(oTrianglePoints)
        '    Call oPath.AddPath(oTrianglePath, False)
        '    Dim oPlanPath As GraphicsPath = New GraphicsPath
        '    Call oPlanPath.AddLine(FromPoint.X, Plan, ToPoint.X, Plan)
        '    Call oPath.AddPath(oPlanPath, False)
        '    Dim oDeltaPath As GraphicsPath = New GraphicsPath
        '    Dim oDeltaRect As RectangleF = New RectangleF(FromPoint.X, Plan - Variation, ToPoint.X - FromPoint.X, Variation * 2)
        '    Call oDeltaPath.AddRectangle(oDeltaRect)
        '    Call oPath.AddPath(oDeltaPath, False)

        '    Dim oBounds As RectangleF = oPath.GetBounds
        '    Dim sScale As Single = modPaint.ScaleToFit(oRect, oBounds)
        '    Dim oMatrix As Matrix = New Matrix
        '    Call oMatrix.Scale(sScale, sScale, MatrixOrder.Append)
        '    Call oMatrix.Translate(oRect.Width / 2, oRect.Height / 2, MatrixOrder.Append)
        '    oGr.Transform = oMatrix

        '    Dim oSegmentBrush As Brush = New SolidBrush(Color.FromArgb(220, Color.DimGray))
        '    Dim oSegmentPen As Pen = New Pen(Color.DimGray, -1)
        '    Dim oPlanPen As Pen = New Pen(Color.FromArgb(180, Color.Red), -1)
        '    Dim oVariationBrush As Brush = New SolidBrush(Color.FromArgb(120, Color.Red))

        '    Call oGr.FillPath(oSegmentBrush, oTrianglePath)
        '    Call oGr.DrawPath(oSegmentPen, oTrianglePath)
        '    If Variation > 0 Then
        '        Call oGr.FillPath(oVariationBrush, oDeltaPath)
        '    End If
        '    Call oGr.DrawPath(oPlanPen, oPlanPath)

        '    Call oSegmentBrush.Dispose()
        '    Call oSegmentPen.Dispose()
        '    Call oPlanPen.Dispose()
        '    Call oVariationBrush.Dispose()

        '    Call oDeltaPath.Dispose()
        '    Call oPlanPath.Dispose()
        '    Call oTrianglePath.Dispose()
        '    Call oPath.Dispose()

        '    Call oMatrix.Dispose()
        'End If

        'Picture.Image = oImage
        'Call oGr.Dispose()
    End Sub

    Private Sub pObjectDrawSplayProjectionSchemaForProfile(Picture As PictureBox, Bearing As Decimal, ProjectionAngle As Integer, Variation As Integer, FullRange As Boolean)
        Dim iProjectionAngle As Integer = Bearing + ProjectionAngle
        Dim oRect As Rectangle = Picture.DisplayRectangle
        Dim oImage As Bitmap = New Bitmap(oRect.Width, oRect.Height)
        Using oGr As Graphics = Graphics.FromImage(oImage)
            oGr.CompositingQuality = CompositingQuality.HighQuality
            oGr.SmoothingMode = SmoothingMode.AntiAlias
            Call oGr.Clear(Color.White)
            iProjectionAngle += 90
            Call oRect.Inflate(-2, -2)
            Dim oRect1 As Rectangle = New Rectangle(oRect.Left - oRect.Width \ 2, oRect.Top, oRect.Width, oRect.Height)
            Dim oRect2 As Rectangle = New Rectangle(oRect.Left + oRect.Width \ 2, oRect.Top, oRect.Width, oRect.Height)
            Using oMatrix As Matrix = New Matrix
                Call oMatrix.RotateAt(Bearing + 90, modPaint.GetCenterPoint(oRect))
                oGr.Transform = oMatrix
                Using oSegmentPen As Pen = New Pen(Color.FromArgb(220, Color.DimGray), 1)
                    Using oSegmentBrush As Brush = New SolidBrush(Color.FromArgb(180, Color.DimGray))
                        Call oGr.DrawPie(oSegmentPen, oRect1, -2, 4)
                        Call oGr.FillPie(oSegmentBrush, oRect1, -2, 4)
                        Call oGr.DrawPie(oSegmentPen, oRect2, 180 - 2, 4)
                        Call oGr.FillPie(oSegmentBrush, oRect2, 180 - 2, 4)
                    End Using
                End Using
            End Using
            Using oMatrix As Matrix = New Matrix
                Call oMatrix.RotateAt(iProjectionAngle, modPaint.GetCenterPoint(oRect))
                oGr.Transform = oMatrix
                Using oOtherPen As Pen = New Pen(Color.FromArgb(220, Color.Red), 1)
                    Using oOtherBrush As Brush = New SolidBrush(Color.FromArgb(180, Color.Red))
                        Using oOtherLightBrush As Brush = New SolidBrush(Color.FromArgb(80, Color.Red))
                            If Variation > 0 Then
                                Call oGr.FillPie(oOtherLightBrush, oRect1, 0 - Variation, Variation * 2)
                            End If
                            Call oGr.DrawPie(oOtherPen, oRect1, 0 - 2, 4)
                            Call oGr.FillPie(oOtherBrush, oRect1, 0 - 2, 4)

                            Call oGr.FillPie(oOtherBrush, oRect, 88, 4)

                            If Variation > 0 Then
                                Call oGr.FillPie(oOtherLightBrush, oRect2, 180 - Variation, Variation * 2)
                            End If
                            Call oGr.DrawPie(oOtherPen, oRect2, 180 - 2, 4)
                            Call oGr.FillPie(oOtherBrush, oRect2, 180 - 2, 4)
                        End Using
                    End Using
                End Using
                Picture.Image = oImage
            End Using
        End Using
    End Sub

    Private Sub pObjectDrawSplayProjectionSchemaForCrossSection(Picture As PictureBox, Bearing As Decimal, ProjectionAngle As Integer, Variation As Integer, VerticalProjectionAngle As Integer, FullRange As Boolean)
        Dim iProjectionAngle As Integer = Bearing + ProjectionAngle
        Dim oRect As Rectangle = Picture.DisplayRectangle
        Dim oImage As Bitmap = New Bitmap(oRect.Width, oRect.Height)
        Using oGr As Graphics = Graphics.FromImage(oImage)
            oGr.CompositingQuality = CompositingQuality.HighQuality
            oGr.SmoothingMode = SmoothingMode.AntiAlias
            Call oGr.Clear(Color.White)
            Call oRect.Inflate(-2, -2)
            Dim oRect1 As Rectangle = New Rectangle(oRect.Left - oRect.Width \ 2, oRect.Top, oRect.Width, oRect.Height)
            Dim oRect2 As Rectangle = New Rectangle(oRect.Left + oRect.Width \ 2, oRect.Top, oRect.Width, oRect.Height)

            Using oMatrix As Matrix = New Matrix
                Call oMatrix.RotateAt(Bearing + 90, modPaint.GetCenterPoint(oRect))
                oGr.Transform = oMatrix
                Using oSegmentPen As Pen = New Pen(Color.FromArgb(220, Color.DimGray), 1)
                    Using oSegmentBrush As Brush = New SolidBrush(Color.FromArgb(180, Color.DimGray))
                        Call oGr.DrawPie(oSegmentPen, oRect1, -2, 4)
                        Call oGr.FillPie(oSegmentBrush, oRect1, -2, 4)
                        Call oGr.DrawPie(oSegmentPen, oRect2, 180 - 2, 4)
                        Call oGr.FillPie(oSegmentBrush, oRect2, 180 - 2, 4)
                    End Using
                End Using
            End Using
            Using oMatrix As Matrix = New Matrix
                Call oMatrix.RotateAt(iProjectionAngle, modPaint.GetCenterPoint(oRect))
                oGr.Transform = oMatrix
                'Dim oOtherPen As Pen = New Pen(Color.FromArgb(220, Color.DimGray), 1)
                'Dim oOtherBrush As Brush = New SolidBrush(Color.FromArgb(180, Color.Red))
                'Dim oOtherLightBrush As Brush = New SolidBrush(Color.FromArgb(80, Color.Red))
                'If Variation > 0 Then
                '    Call oGr.FillPie(oOtherLightBrush, oRect, iProjectionAngle - 90 - Variation, Variation * 2)
                '    If FullRange Then
                '        Call oGr.FillPie(oOtherLightBrush, oRect, iProjectionAngle + 90 - Variation, Variation * 2)
                '    End If
                'End If
                'Call oGr.DrawPie(oOtherPen, oRect, iProjectionAngle - 90 - 2, 4)
                'Call oGr.FillPie(oOtherBrush, oRect, iProjectionAngle - 90 - 2, 4)
                'If FullRange Then
                '    Call oGr.FillPie(oOtherBrush, oRect, iProjectionAngle + 90 - 2, 4)
                'End If
                'Call oOtherPen.Dispose()
                'Call oOtherBrush.Dispose()
                'Call oOtherLightBrush.Dispose()
                Using oOtherPen As Pen = New Pen(Color.FromArgb(220, Color.Red), 1)
                    Using oOtherBrush As Brush = New SolidBrush(Color.FromArgb(180, Color.Red))
                        Using oOtherLightBrush As Brush = New SolidBrush(Color.FromArgb(80, Color.Red))
                            If Variation > 0 Then
                                Call oGr.FillPie(oOtherLightBrush, oRect, 180 - Variation, Variation * 2)
                            End If
                            Call oGr.DrawPie(oOtherPen, oRect1, -2, 4)
                            Call oGr.FillPie(oOtherBrush, oRect1, -2, 4)

                            Call oGr.FillPie(oOtherBrush, oRect, 88, 4)

                            If Variation > 0 Then
                                Call oGr.FillPie(oOtherLightBrush, oRect, 0 - Variation, Variation * 2)
                            End If
                            Call oGr.DrawPie(oOtherPen, oRect2, 180 - 2, 4)
                            Call oGr.FillPie(oOtherBrush, oRect2, 180 - 2, 4)
                        End Using
                    End Using
                End Using
                Picture.Image = oImage
            End Using
        End Using
    End Sub

    Private Sub pObjectPropertyPlanDrawProjectionSchema()
        If Not oCurrentDesign Is Nothing Then
            Dim oItem As cItemSegment = pGetCurrentDesignTools.CurrentItem
            If Not oItem Is Nothing Then
                If Not oItem.Segment Is Nothing Then
                    Dim oFromPoint As PointF = oItem.Segment.Data.Profile.FromPoint
                    Dim oToPoint As PointF = oItem.Segment.Data.Profile.ToPoint
                    Dim iType As cSurvey.Design.Items.cIItemPlanSplayBorder.PlanSplayBorderProjectionTypeEnum = oItem.Segment.PlanSplayBorderProjectionType
                    Dim sPlan As Single = oItem.Segment.PlanSplayBorderProjectionDeltaZ
                    Dim sVariation As Single = oItem.Segment.PlanSplayBorderMaxDeltaVariation
                    Call pObjectDrawSplayProjectionSchemaForPlan(picPropPlanProjectionSchema, oFromPoint, oToPoint, iType, sPlan, sVariation)
                End If
            End If
        End If
    End Sub

    Private Sub pObjectPropertyProfileDrawProjectionSchema()
        If Not oCurrentDesign Is Nothing Then
            Dim oItem As cItemSegment = pGetCurrentDesignTools.CurrentItem
            If Not oItem Is Nothing Then
                If Not oItem.Segment Is Nothing Then
                    Dim dBearing As Decimal = oItem.Segment.Data.Data.Bearing
                    Dim iAngle As Integer = oItem.ProfileSplayBorderProjectionAngle
                    Dim iVariation As Integer = oItem.ProfileSplayBorderMaxAngleVariation
                    Call pObjectDrawSplayProjectionSchemaForProfile(picPropProfileProjectionSchema, dBearing, iAngle, iVariation, False)
                End If
            End If
        End If
    End Sub

    Private Sub pObjectPropertyCrossSectionDrawProjectionSchema()
        If Not oCurrentDesign Is Nothing Then
            Dim oItem As cItemCrossSection = pGetCurrentDesignTools.CurrentItem
            If Not oItem Is Nothing Then
                If Not oItem.Segment Is Nothing Then
                    Dim dBearing As Decimal = oItem.Segment.Data.Data.Bearing
                    If oItem.Direction = cIItemCrossSection.DirectionEnum.Inverted Then
                        dBearing -= 180
                    End If
                    Dim iAngle As Integer = oItem.SplayBorderProjectionAngle
                    Dim iVAngle As Integer = oItem.SplayBorderProjectionVerticalAngle
                    Dim iVariation As Integer = oItem.SplayBorderMaxAngleVariation
                    Call pObjectDrawSplayProjectionSchemaForCrossSection(picPropCrossSectionProjectionSchema, dBearing, iAngle, iVariation, iVAngle, True)
                End If
            End If
        End If
    End Sub

    Private Sub pProperty3D()
        dockProperties.Enabled = True

        Call c3DAltitudeAmplification.Rebind(oCurrentDesign, oCurrentOptions)
        Call c3DLinkedSurveys.Rebind(oCurrentDesign, oCurrentOptions)
        Call c3DDesignSurface.Rebind(oCurrentDesign, oCurrentOptions)
        Call c3DDesignModel.Rebind(oCurrentDesign, oCurrentOptions)
    End Sub

    Private Sub pPropertyDesign()
        'RibbonControl.SelectedPage = pageCurrentItem
        'pageCurrentItem.Visible = True

        Dim bHasItems As Boolean = oCurrentDesign.HasItems

        cPropVisibility.Visible = False
        cPropLineType.Visible = False
        cPropPointLineType.Visible = False
        grpCurrentItemLocation.Visible = bHasItems
        btnCurrentItemLock.Visibility = BarItemVisibility.Never
        grpCurrentItemSize.Visible = bHasItems
        btnItemsLayouts.Enabled = False
        btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
        grpCurrentItemRotate.Visible = False
        grpCurrentItemAlign.Visible = False
        grpCurrentItemShot.Visible = False
        btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
        grpCurrentItemStation.Visible = False

        grpCurrentItemLegend.Visible = False
        grpCurrentItemSign.Visible = False
        grpCurrentItemClipart.Visible = False
        grpCurrentItemSketch.Visible = False
        grpcurrentitemimage.visible = False
        grpCurrentItemShape.Visible = False
        grpCurrentItemItems.Visible = False

        grpCurrentItemSequence.Visible = False
        grpCurrentItemPoint.Visible = False
        grpCurrentItemBindings.Visible = False

        dockProperties.Enabled = True

        If bHasItems Then Call pPropertyItemBounds(False)

        Call cDesignLinkedSurveys.Rebind(oCurrentDesign, oCurrentOptions)
        Call cDesignPrintOrExportArea.Rebind(oCurrentDesign, oCurrentOptions)
        Call cDesignCenterline.Rebind(oCurrentDesign, oCurrentOptions)
        Call cDesignSurfaceProfile.Rebind(oCurrentDesign, oCurrentOptions)
        Call cDesignStyle.Rebind(oCurrentDesign, oCurrentOptions)
        Call cDesignSurface.Rebind(oCurrentDesign, oCurrentOptions)

        'pnlProperties.Visible = True
    End Sub

    Private Sub pPropertyItemPointBounds()
        With pGetCurrentDesignTools.CurrentItemPoint
            btnCurrentItemX.EditValue = modNumbers.MathRound(.X, 2)
            btnCurrentItemY.EditValue = modNumbers.MathRound(- .Y, 2)
        End With
    End Sub

    Private Sub pPropertyItemPoint()
        Dim bPropPopupShowed As Boolean
        With pGetCurrentDesignTools.CurrentItemPoint
            dockProperties.Enabled = True

            grpCurrentItemLocation.Visible = True
            grpCurrentItemSize.Visible = False
            btnItemsLayouts.Enabled = False
            btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
            grpCurrentItemRotate.Visible = False
            grpCurrentItemAlign.Visible = False
            grpCurrentItemShot.Visible = False
            btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
            grpCurrentItemStation.Visible = False

            optPropObjectSequence.Checked = True
            cmdPropParent.Visible = True

            cPropName.Visible = False
            cPropTransparency.Visible = False
            pnlPropInfo.Visible = True
            pnlPropProp.Visible = False

            pnlPropBrush.Visible = False
            pnlPropSegmentInfo.Visible = False
            pnlPropTrigpointInfo.Visible = False
            pnlPropSegmentBinding.Visible = True
            pnlPropSegmentsBinding.Visible = False
            pnlPropSign.Visible = False
            pnlPropText.Visible = False
            pnlPropClipping.Visible = False
            btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
            pnlPropCrossSection.Visible = False
            pnlPropQuota.Visible = False
            pnlPropSketch.Visible = False
            pnlPropMergeMode.Visible = False
            pnlPropObjectsBinding.Visible = False
            pnlPropTrigpointsDistances.Visible = False

            pnlPropPlanSplayBorder.Visible = False
            pnlPropProfileSplayBorder.Visible = False
            pnlPropCrossSectionSplayBorder.Visible = False
            pnlPropDataProperties.Visible = False
            pnlPropCrossSectionMarker.Visible = False
            pnlPropAttachment.Visible = False
            pnlPropLegend.Visible = False
            pnlPropScale.Visible = False
            cPropCompassItems.Visible = False

            cPropVisibility.Visible = False
            cPropLineType.Visible = False
            'RibbonControl.SelectedPage = pageCurrentItemPoint

            grpCurrentItemLegend.Visible = False
            grpCurrentItemSign.Visible = False
            grpCurrentItemClipart.Visible = False
            grpCurrentItemSketch.Visible = False
            grpcurrentitemimage.visible = False
            grpCurrentItemShape.Visible = False
            grpCurrentItemItems.Visible = False

            grpCurrentItemSequence.Visible = True
            grpCurrentItemPoint.Visible = True

            Dim iType As cPoint.PointTypeEnum = .Type

            Dim bItemPointConvertVisible As Boolean = bIsInDebug And pGetCurrentDesignTools.CurrentItem.HaveLineType
            If pGetCurrentDesignTools.IsNewPoint Then
                btnCurrentItemPointDelete.Visibility = BarItemVisibility.Never

                btnCurrentItemPointSequenceDivide.Visibility = BarItemVisibility.Never            'to be enabled in future
                btnCurrentItemPointSequenceDivideAndJoin.Visibility = BarItemVisibility.Never   'to be enabled in future
                btnCurrentItemPointSequenceCombine.Visibility = BarItemVisibility.Never
                btnCurrentItemPointDeleteSequence.Visibility = BarItemVisibility.Never
                btnCurrentItemPointCloseSequence.Visibility = BarItemVisibility.Never
                btnCurrentItemPointRevertSequence.Visibility = BarItemVisibility.Never

                btnCurrentItemPointNewFromSequence0.Visibility = BarItemVisibility.Never
                btnCurrentItemPointNewFromSequence1.Visibility = BarItemVisibility.Never

                grpCurrentItemBindings.Visible = False
            Else
                btnCurrentItemPointDelete.Visibility = BarItemVisibility.Always

                btnCurrentItemPointAdd.Enabled = Not cPoint.IsControlPoint(iType)
                btnCurrentItemPointDelete.Enabled = Not cPoint.IsControlPoint(iType)

                btnCurrentItemPointSequenceDivide.Visibility = BarItemVisibility.Always
                btnCurrentItemPointSequenceDivideAndJoin.Visibility = BarItemVisibility.Always
                btnCurrentItemPointSequenceCombine.Visibility = BarItemVisibility.Always
                btnCurrentItemPointSequenceCombine.Enabled = Not (cPoint.IsFirstOfAll(iType) Or cPoint.IsLastOfAll(iType)) And (cPoint.IsFirst(iType) Or cPoint.IsLast(iType))
                btnCurrentItemPointDeleteSequence.Visibility = BarItemVisibility.Always
                btnCurrentItemPointCloseSequence.Visibility = BarItemVisibility.Always
                btnCurrentItemPointRevertSequence.Visibility = BarItemVisibility.Always

                btnCurrentItemPointSequenceDivide.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)
                btnCurrentItemPointSequenceDivideAndJoin.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)

                'mnuDesignItemPointConvert.Visible = bItemPointConvertVisible

                'Dim bAreaFromSequenceVisible As Boolean = pGetCurrentDesignTools.CurrentItem.HaveLineType And pGetCurrentDesignTools.CurrentItem.HaveEditablePoints And pGetCurrentDesignTools.CurrentItem.Layer.Type > cLayers.LayerTypeEnum.Soil
                'btnCurrentItemAreaFromSequence.Visible = bAreaFromSequenceVisible

                btnCurrentItemPointNewFromSequence0.Visibility = BarItemVisibility.Always
                btnCurrentItemPointNewFromSequence1.Visibility = BarItemVisibility.Always

                grpCurrentItemBindings.Visible = False 'True
            End If

            cmdPropNext.Enabled = pGetCurrentDesignTools.CurrentItem.Points.Count > 1
            cmdPropPrev.Enabled = cmdPropNext.Enabled

            cmdPropSetCurrentCaveBranch.Visible = False

            Dim sCave As String = "" & pGetCurrentDesignTools.CurrentItem.Cave
            Dim sBranch As String = "" & pGetCurrentDesignTools.CurrentItem.Branch
            Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(sCave, sBranch)
            Dim bUnlocked As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
            dockProperties.Enabled = bUnlocked
            If bUnlocked Then
                cboPropCaveList.Workmode = cCaveInfoCombobox.WorkmodeEnum.Edit
                cboPropCaveBranchList.Workmode = cCaveInfoCombobox.WorkmodeEnum.Edit
            Else
                cboPropCaveList.Workmode = cCaveInfoCombobox.WorkmodeEnum.View
                cboPropCaveBranchList.Workmode = cCaveInfoCombobox.WorkmodeEnum.View
            End If
            cboPropCaveList.Text = sCave
            Call cboPropCaveBranchList.Rebind(CType(cboPropCaveList.SelectedItem, cICaveInfoBranches), False)
            cboPropCaveBranchList.Text = sBranch

            pnlPropCaveBranches.Enabled = False
            lblPropBindDesignType.Enabled = False
            cboPropBindDesignType.Enabled = False
            lblPropBindCrossSections.Enabled = False
            cboPropBindCrossSections.Enabled = False

            txtPropPointType.Text = .Type.ToString

            Call pPropertyItemPointBounds()
            btnCurrentItemLock.Visibility = BarItemVisibility.Never

            cPropPointLineType.Rebind(pGetCurrentDesignTools.CurrentItemPoint, AddressOf pPointSequencesTo)
            cPropPointLineType.Visible = True

            Dim oPen As cPen
            If .BeginSequence Then
                oPen = .Pen
                If oPen Is Nothing Then
                    oPen = pGetCurrentDesignTools.CurrentItem.Pen
                End If
            Else
                Dim oSequence As cSequence = pGetCurrentDesignTools.CurrentItem.Points.GetSequence(pGetCurrentDesignTools.CurrentItemPoint)
                If oSequence Is Nothing Then
                    oPen = pGetCurrentDesignTools.CurrentItem.Pen
                Else
                    With oSequence.First
                        oPen = .Pen
                    End With
                    If oPen Is Nothing Then
                        oPen = pGetCurrentDesignTools.CurrentItem.Pen
                    End If
                End If
            End If

            If oPen.Type = cPen.PenTypeEnum.Custom Then
                cboPropPenPattern.SelectedIndex = cboPropPenPattern.Items.Count - 1
                pnlPropPenCustom.Enabled = True
                pnlPropPen.Height = pnlPropPenGeneric.Height + pnlPropPenCustom.Height
            Else
                For Each oPenItem As cPen In cboPropPenPattern.Items
                    If oPenItem.Type = oPen.Type Then
                        cboPropPenPattern.SelectedItem = oPenItem
                        Exit For
                    End If
                Next
                pnlPropPenCustom.Enabled = False
                pnlPropPen.Height = pnlPropPenGeneric.Height
            End If
            txtPropPenWidth.Value = oPen.Width
            picPropPenColor.BackColor = oPen.Color
            cboPropPenStyle.SelectedIndex = oPen.Style
            cboPropPenDecoration.SelectedIndex = oPen.DecorationStyle 'if(oPen.DecorationStyle = cPen.DecorationStylesEnum.Custom, cboPropPenDecoration.Items.Count - 1, oPen.DecorationStyle)
            cboPropPenDecorationAlignment.SelectedIndex = oPen.DecorationAlignment
            txtPropPenDecorationSpacePercentage.Value = oPen.DecorationSpacePercentage
            txtPropPenDecorationScale.Value = oPen.DecorationScale
            pnlPropPen.Enabled = True

            pnlPropBrush.Visible = False

            If .BindedSegment Is Nothing Then
                pnlPropSegmentBinding.Enabled = False
                txtPropSegmentBinded.Text = ""
            Else
                pnlPropSegmentBinding.Enabled = True
                txtPropSegmentBinded.Text = .BindedSegment.ToString
                chkPropSegmentLocked.Checked = .SegmentLocked
                cmdPropSegmentRebind.Enabled = Not .SegmentLocked
            End If

            btnCurrentItemPointDeleteSequence.Enabled = True
            btnCurrentItemPointCloseSequence.Enabled = True
            btnCurrentItemPointSequenceCombine.Enabled = Not (cPoint.IsFirstOfAll(iType) Or cPoint.IsLastOfAll(iType)) And (cPoint.IsFirst(iType) Or cPoint.IsLast(iType))
            btnCurrentItemPointSequenceDivide.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)
            btnCurrentItemPointSequenceDivideAndJoin.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)

            If cPoint.IsControlPoint(iType) Then
                btnCurrentItemPointsJoin.Enabled = False
                btnCurrentItemPointsJoinAndConnect.Enabled = False
                btnCurrentItemPointsUnjoin.Enabled = False
                btnCurrentItemPointsUnjoinAll.Enabled = False
            Else
                Dim bNotIsInList As Boolean = Not oDockJoinPoints.IsPointInList(pGetCurrentDesignTools.CurrentItemPoint)
                If .IsJoined Then
                    btnCurrentItemPointsJoin.Enabled = bNotIsInList
                    btnCurrentItemPointsJoinAndConnect.Enabled = bNotIsInList AndAlso oDockJoinPoints.GetPointsCount > 0
                    btnCurrentItemPointsUnjoin.Enabled = True
                    btnCurrentItemPointsUnjoinAll.Enabled = True
                Else
                    btnCurrentItemPointsJoin.Enabled = bNotIsInList
                    btnCurrentItemPointsJoinAndConnect.Enabled = bNotIsInList AndAlso oDockJoinPoints.GetPointsCount > 0
                    btnCurrentItemPointsUnjoin.Enabled = False
                    btnCurrentItemPointsUnjoinAll.Enabled = False
                End If
            End If
        End With
        If Not bPropPopupShowed Then pPropPopupHide()
    End Sub

    Private Sub pPropertyItemBounds(Optional ByRef PropPopupShowed As Boolean = False)
        Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
        If oCurrentItem Is Nothing Then
            Dim oBounds As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)

            Dim oLocation As PointF = oBounds.Location
            btnCurrentItemX.EditValue = modNumbers.MathRound(oLocation.X, 2)
            btnCurrentItemY.EditValue = modNumbers.MathRound(-oLocation.Y, 2)

            Dim oSize As SizeF = oBounds.Size
            btnCurrentItemW.EditValue = modNumbers.MathRound(oSize.Width, 2)
            btnCurrentItemH.EditValue = modNumbers.MathRound(oSize.Height, 2)

            'Call pPropPopupShow("warning", modMain.GetLocalizedString("main.textpart54"))
            'PropPopupShowed = PropPopupShowed Or True

            'btnCurrentItemX.EditValue = 0
            'btnCurrentItemY.EditValue = 0
            'btnCurrentItemW.EditValue = 0
            'btnCurrentItemH.EditValue = 0
        Else
            With oCurrentItem
                Dim oBounds As RectangleF = .GetBounds
                If modPaint.IsRectangleEmpty(oBounds) Then
                    Call pPropPopupShow("warning", modMain.GetLocalizedString("main.textpart54"))
                    PropPopupShowed = PropPopupShowed Or True
                End If

                Dim oLocation As PointF = oBounds.Location
                btnCurrentItemX.EditValue = modNumbers.MathRound(oLocation.X, 2)
                btnCurrentItemY.EditValue = modNumbers.MathRound(-oLocation.Y, 2)

                Dim oSize As SizeF = oBounds.Size
                btnCurrentItemW.EditValue = modNumbers.MathRound(oSize.Width, 2)
                btnCurrentItemH.EditValue = modNumbers.MathRound(oSize.Height, 2)
            End With
        End If
    End Sub

    Private Sub pPropertyItem()
        optPropObject.Checked = True
        cmdPropParent.Visible = False

        Dim bPropPopupShowed As Boolean

        Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
        With oCurrentItem
            If .Type = cIItem.cItemTypeEnum.Segment Then
                Call pPropertyItemSegment()
            ElseIf .Type = cIItem.cItemTypeEnum.Trigpoint Then
                Call pPropertyItemTrigpoint()
            ElseIf .Type = cIItem.cItemTypeEnum.Marker Then
                Call pPropertyItemMarker()
            Else
                'RibbonControl.SelectedPage = pageCurrentItem
                'pageCurrentItem.Visible = True
                grpCurrentItemClipart.Visible = TypeOf oCurrentDesign Is cIItemClipart
                grpCurrentItemSign.Visible = TypeOf oCurrentItem Is cIItemSign
                grpCurrentItemShape.Visible = .HaveEditablePoints
                btnCurrentItemGenericCombine.Visibility = .HaveEditablePoints

                btnCurrentItemSendCopyTo.Caption = If(oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan, modMain.GetLocalizedString("main.sendcopytoprofile"), modMain.GetLocalizedString("main.sendcopytoplan"))
                btnCurrentItemSendCopyTo.Visibility = modControls.VisibleToVisibility(.CanBeSendedToOtherDesign)

                grpCurrentItemLegend.Visible = oCurrentItem.Type <> cIItem.cItemTypeEnum.Legend AndAlso oCurrentDesign.Layers.Item(cLayers.LayerTypeEnum.Signs).Items.Where(Function(item) item.Type = cIItem.cItemTypeEnum.Legend).Count > 0

                grpCurrentItemSequence.Visible = False
                grpCurrentItemPoint.Visible = False
                grpCurrentItemBindings.Visible = False
                grpCurrentItemShot.Visible = False
                btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
                grpCurrentItemStation.Visible = False

                cmdPropNext.Enabled = .Layer.Items.Count > 1
                cmdPropPrev.Enabled = cmdPropNext.Enabled
                cmdPropSetCurrentCaveBranch.Visible = True

                Dim sCave As String = "" & .Cave
                Dim sBranch As String = "" & .Branch
                Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(sCave, sBranch)
                Dim bUnlocked As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
                dockProperties.Enabled = bUnlocked
                If bUnlocked Then
                    cboPropCaveList.Workmode = cCaveInfoCombobox.WorkmodeEnum.Edit
                    cboPropCaveBranchList.Workmode = cCaveInfoCombobox.WorkmodeEnum.Edit
                Else
                    cboPropCaveList.Workmode = cCaveInfoCombobox.WorkmodeEnum.View
                    cboPropCaveBranchList.Workmode = cCaveInfoCombobox.WorkmodeEnum.View
                End If
                cboPropCaveList.Text = sCave
                Call cboPropCaveBranchList.Rebind(CType(cboPropCaveList.SelectedItem, cICaveInfoBranches), False)
                cboPropCaveBranchList.Text = sBranch
                If sCave = "" And sBranch = "" Then
                    Call pPropPopupShow("warning", modMain.GetLocalizedString("main.textpart55"))
                    bPropPopupShowed = True
                End If

                pnlPropCaveBranches.Enabled = True

                cboPropCaveList.Enabled = True ' bHaveNameAndCaveBranch
                cboPropCaveBranchList.Enabled = True 'bHaveNameAndCaveBranch
                cmdPropSetCaveBranch.Enabled = True 'bHaveNameAndCaveBranch
                pPropSetCaveBranchesColor()

                cboPropCategories.SelectedIndex = Array.IndexOf([Enum].GetValues(GetType(cIItem.cItemCategoryEnum)), .Category)
                pnlPropDataProperties.Visible = True
                'da verificare perché a volte va in errore in uscita...
                Try
                    prpPropDesignDataProperties.SelectedObject = .DataProperties.GetClass
                Catch
                End Try

                If .CanBeBinded And oCurrentDesign.Type <= cIDesign.cDesignTypeEnum.Profile Then
                    Call pSurveyFillCrossSectionsList(sCave, sBranch, cboPropBindDesignType, cboPropBindCrossSections)
                    cboPropBindDesignType.SelectedIndex = .BindDesignType
                    lblPropBindDesignType.Enabled = True 'And bHaveNameAndCaveBranch
                    cboPropBindDesignType.Enabled = True 'And bHaveNameAndCaveBranch
                    Dim bCrossSectionEnabled As Boolean = .BindDesignType = cItem.BindDesignTypeEnum.CrossSections
                    'lblPropBindCrossSections.Visible = True
                    'cboPropBindCrossSections.Visible = True
                    lblPropBindCrossSections.Enabled = bCrossSectionEnabled
                    cboPropBindCrossSections.Enabled = bCrossSectionEnabled
                    cboPropBindCrossSections.SelectedItem = oSurvey.CrossSections.GetBindItem(.CrossSection)
                Else
                    lblPropBindDesignType.Enabled = False
                    cboPropBindDesignType.Enabled = False
                    lblPropBindCrossSections.Enabled = False
                    cboPropBindCrossSections.Enabled = False
                End If
                txtPropPointType.Text = .Type.ToString

                Call cPropName.Rebind(oCurrentItem)
                cPropName.Visible = True

                Call pPropertyItemBounds(bPropPopupShowed)

                Dim bCanBeRaised As Boolean = pGetCurrentDesignTools.CurrentLayer.Items.Contains(oCurrentItem)
                btnItemsLayouts.Enabled = bCanBeRaised

                grpCurrentItemSize.Visible = .CanBeResized
                grpCurrentItemLocation.Visible = .CanBeMoved

                btnCurrentItemLock.Visibility = BarItemVisibility.Always
                btnCurrentItemLock.Enabled = .CanBeMoved
                btnCurrentItemLock.Checked = .Locked

                pnlPropInfo.Visible = True
                pnlPropProp.Visible = True

                cPropVisibility.Rebind(oCurrentItem)
                cPropVisibility.Visible = True

                grpCurrentItemRotate.Visible = .CanBeRotated

                'pnlPropShapeSequences.Visible = .HaveEditablePoints
                'cmdPropShapeCombineAllSequences.Enabled = .HaveEditablePoints
                'cmdPropShapeCloseAllSequences.Enabled = .HaveEditablePoints
                'cmdPropShapeReorderSequence.Enabled = .HaveEditablePoints

                If .HaveTransparency Then
                    cPropTransparency.Rebind(oCurrentItem)
                    cPropTransparency.Visible = True
                Else
                    cPropTransparency.Visible = False
                End If

                If .HavePen Then
                    If .Pen.Type = cPen.PenTypeEnum.Custom Then
                        cboPropPenPattern.SelectedIndex = cboPropPenPattern.Items.Count - 1
                        pnlPropPenCustom.Enabled = True
                        pnlPropPen.Height = pnlPropPenGeneric.Height + pnlPropPenCustom.Height
                    Else
                        For Each oPenItem As cPen In cboPropPenPattern.Items
                            If oPenItem.Type = .Pen.Type Then
                                cboPropPenPattern.SelectedItem = oPenItem
                                Exit For
                            End If
                        Next
                        pnlPropPenCustom.Enabled = False
                        pnlPropPen.Height = pnlPropPenGeneric.Height
                    End If
                    txtPropPenWidth.Value = .Pen.Width
                    picPropPenColor.BackColor = .Pen.Color
                    cboPropPenStyle.SelectedIndex = .Pen.Style
                    cboPropPenDecoration.SelectedIndex = .Pen.DecorationStyle 'if(.Pen.DecorationStyle = cPen.DecorationStylesEnum.Custom, cboPropPenDecoration.Items.Count - 1, .Pen.DecorationStyle)
                    cboPropPenDecorationAlignment.SelectedIndex = .Pen.DecorationAlignment
                    Try : txtPropPenDecorationSpacePercentage.Value = .Pen.DecorationSpacePercentage : Catch : End Try
                    Try : txtPropPenDecorationScale.Value = .Pen.DecorationScale : Catch : End Try
                    pnlPropPen.Enabled = True
                    pnlPropPen.Visible = True
                    'Call pPenToolbarEnabled(True)
                Else
                    pnlPropPen.Visible = False
                    'Call pPenToolbarEnabled(False)
                End If

                If .HaveBrush Then
                    If .Brush.Type = cBrush.BrushTypeEnum.Custom Then
                        cboPropBrushPattern.SelectedIndex = cboPropBrushPattern.Items.Count - 1
                        pnlPropBrushCustom.Enabled = True
                        pnlPropBrush.Height = pnlPropBrushGeneric.Height + pnlPropBrushCustom.Height
                        cmdPropBrushBrowseClipart.Enabled = True
                        cmdPropBrushReseed.Enabled = True
                        txtPropBrushClipartDensity.Enabled = True
                        txtPropBrushClipartZoomFactor.Enabled = True
                        Select Case cboPropBrushHatch.SelectedIndex
                            Case cBrush.HatchTypeEnum.Clipart
                                If .Brush.Clipart Is Nothing Then
                                    picPropBrushClipartImage.Image = Nothing
                                Else
                                    picPropBrushClipartImage.Image = .Brush.Clipart.GetThumbnailImage(picPropBrushClipartImage.Width, picPropBrushClipartImage.Height)
                                End If
                            Case cBrush.HatchTypeEnum.Texture
                                If .Brush.Texture Is Nothing Then
                                    picPropBrushClipartImage.Image = Nothing
                                Else
                                    picPropBrushClipartImage.Image = .Brush.Texture
                                End If
                        End Select
                    Else
                        For Each oBrushItem As cBrush In cboPropBrushPattern.Items
                            If oBrushItem.Type = .Brush.Type Then
                                cboPropBrushPattern.SelectedItem = oBrushItem
                                Exit For
                            End If
                        Next
                        pnlPropBrushCustom.Enabled = False
                        pnlPropBrush.Height = pnlPropBrushGeneric.Height
                    End If
                    cboPropBrushHatch.SelectedIndex = .Brush.HatchType
                    Select Case .Brush.HatchType
                        Case cBrush.HatchTypeEnum.Texture
                            cmdPropBrushBrowseClipart.Visible = True
                            lblPropBrushClipartImage.Visible = True
                            picPropBrushClipartImage.Visible = True
                            cboPropBrushPatternType.Visible = False
                            lblPropBrushPatternType.Visible = False
                            cboPropBrushPatternPen.Visible = False
                            lblPropBrushPatternPen.Visible = False
                            lblPropBrushClipartZoomFactor.Visible = False
                            txtPropBrushClipartZoomFactor.Visible = False
                            lblPropBrushClipartCrop.Visible = False
                            cboPropBrushClipartCrop.Visible = False
                            lblPropBrushClipartDensity.Visible = False
                            txtPropBrushClipartDensity.Visible = False
                            lblPropBrushClipartAngleMode.Visible = False
                            cboPropBrushClipartAngleMode.Visible = False
                            txtPropBrushClipartAngle.Visible = False
                            lblPropBrushClipartAngle.Visible = False
                            lblPropBrushAlternativeBrushColor.Visible = True
                            picPropBrushAlternativeBrushColor.Visible = True
                            cmdPropBrushAlternativeBrushColor.Visible = True
                            picPropBrushColor.Visible = False
                            lblpropbrushcolor.Visible = False
                            cmdPropBrushColor.Visible = False
                            lblPropBrushClipartPosition.Visible = False
                            cboPropBrushClipartPosition.Visible = False

                            cmdPropBrushBrowseClipart.Enabled = True
                            txtPropBrushClipartDensity.Enabled = False
                            txtPropBrushClipartZoomFactor.Enabled = False
                            cboPropBrushClipartAngleMode.Enabled = False
                            txtPropBrushClipartAngle.Enabled = False
                            picPropBrushAlternativeBrushColor.Enabled = True
                            cmdPropBrushAlternativeBrushColor.Enabled = True
                            cboPropBrushClipartCrop.Enabled = False

                        Case cBrush.HatchTypeEnum.Pattern
                            cmdPropBrushBrowseClipart.Visible = False
                            lblPropBrushClipartImage.Visible = False
                            picPropBrushClipartImage.Visible = False
                            lblPropBrushClipartZoomFactor.Visible = False
                            txtPropBrushClipartZoomFactor.Visible = False
                            cboPropBrushPatternType.Visible = True
                            lblPropBrushPatternType.Visible = True
                            cboPropBrushPatternPen.Visible = True
                            lblPropBrushPatternPen.Visible = True
                            lblPropBrushClipartCrop.Visible = False
                            cboPropBrushClipartCrop.Visible = False
                            lblPropBrushClipartDensity.Visible = True
                            txtPropBrushClipartDensity.Visible = True
                            lblPropBrushClipartAngleMode.Visible = False
                            cboPropBrushClipartAngleMode.Visible = False
                            txtPropBrushClipartAngle.Visible = True
                            lblPropBrushClipartAngle.Visible = True
                            lblPropBrushAlternativeBrushColor.Visible = True
                            picPropBrushAlternativeBrushColor.Visible = True
                            cmdPropBrushAlternativeBrushColor.Visible = True
                            picPropBrushColor.Visible = True
                            lblpropbrushcolor.Visible = True
                            cmdPropBrushColor.Visible = True
                            lblPropBrushClipartPosition.Visible = False
                            cboPropBrushClipartPosition.Visible = False

                            txtPropBrushClipartDensity.Enabled = True
                            cboPropBrushClipartAngleMode.Enabled = True
                            txtPropBrushClipartAngle.Enabled = True

                            txtPropBrushClipartDensity.Value = .Brush.ClipartDensity * 100
                            cboPropBrushClipartAngleMode.SelectedIndex = .Brush.ClipartAngleMode
                            txtPropBrushClipartAngle.Enabled = .Brush.ClipartAngleMode = cBrush.ClipartAngleModeEnum.Fixed
                            txtPropBrushClipartAngle.Value = .Brush.ClipartAngle
                            cboPropBrushPatternType.SelectedIndex = .Brush.PatternType
                            cboPropBrushPatternPen.SelectedIndex = .Brush.PatternPenStyle
                            picPropBrushAlternativeBrushColor.BackColor = .Brush.ClipartAlternativeColor
                        Case cBrush.HatchTypeEnum.Clipart
                            cmdPropBrushBrowseClipart.Visible = True
                            lblPropBrushClipartImage.Visible = True
                            picPropBrushClipartImage.Visible = True
                            cboPropBrushPatternType.Visible = False
                            lblPropBrushPatternType.Visible = False
                            cboPropBrushPatternPen.Visible = False
                            lblPropBrushPatternPen.Visible = False
                            lblPropBrushClipartZoomFactor.Visible = True
                            txtPropBrushClipartZoomFactor.Visible = True
                            lblPropBrushClipartCrop.Visible = True
                            cboPropBrushClipartCrop.Visible = True
                            lblPropBrushClipartDensity.Visible = True
                            txtPropBrushClipartDensity.Visible = True
                            lblPropBrushClipartAngleMode.Visible = True
                            cboPropBrushClipartAngleMode.Visible = True
                            txtPropBrushClipartAngle.Visible = True
                            lblPropBrushClipartAngle.Visible = True
                            lblPropBrushAlternativeBrushColor.Visible = True
                            picPropBrushAlternativeBrushColor.Visible = True
                            cmdPropBrushAlternativeBrushColor.Visible = True
                            picPropBrushColor.Visible = True
                            lblpropbrushcolor.Visible = True
                            cmdPropBrushColor.Visible = True
                            lblPropBrushClipartPosition.Visible = True
                            cboPropBrushClipartPosition.Visible = True

                            cmdPropBrushBrowseClipart.Enabled = True
                            txtPropBrushClipartDensity.Enabled = True
                            txtPropBrushClipartZoomFactor.Enabled = True
                            cboPropBrushClipartAngleMode.Enabled = True
                            txtPropBrushClipartAngle.Enabled = True
                            picPropBrushAlternativeBrushColor.Enabled = True
                            cmdPropBrushAlternativeBrushColor.Enabled = True
                            cboPropBrushClipartCrop.Enabled = True

                            cmdPropBrushReseed.Enabled = .Brush.HatchType = cBrush.HatchTypeEnum.Clipart
                            txtPropBrushClipartDensity.Value = .Brush.ClipartDensity * 100
                            txtPropBrushClipartZoomFactor.Value = .Brush.ClipartZoomFactor * 1000
                            cboPropBrushClipartAngleMode.SelectedIndex = .Brush.ClipartAngleMode
                            txtPropBrushClipartAngle.Enabled = .Brush.ClipartAngleMode = cBrush.ClipartAngleModeEnum.Fixed
                            txtPropBrushClipartAngle.Value = .Brush.ClipartAngle
                            cboPropBrushClipartPosition.SelectedIndex = .Brush.ClipartPosition
                            picPropBrushAlternativeBrushColor.BackColor = .Brush.ClipartAlternativeColor
                            cboPropBrushClipartCrop.SelectedIndex = .Brush.ClipartCrop
                        Case cBrush.HatchTypeEnum.Solid
                            cmdPropBrushBrowseClipart.Visible = False
                            lblPropBrushClipartImage.Visible = False
                            picPropBrushClipartImage.Visible = False
                            cboPropBrushPatternType.Visible = False
                            lblPropBrushPatternType.Visible = False
                            cboPropBrushPatternPen.Visible = False
                            lblPropBrushPatternPen.Visible = False
                            lblPropBrushClipartZoomFactor.Visible = False
                            txtPropBrushClipartZoomFactor.Visible = False
                            lblPropBrushClipartCrop.Visible = False
                            cboPropBrushClipartCrop.Visible = False
                            lblPropBrushClipartDensity.Visible = False
                            txtPropBrushClipartDensity.Visible = False
                            lblPropBrushClipartAngleMode.Visible = False
                            cboPropBrushClipartAngleMode.Visible = False
                            txtPropBrushClipartAngle.Visible = False
                            lblPropBrushClipartAngle.Visible = False
                            lblPropBrushAlternativeBrushColor.Visible = False
                            picPropBrushAlternativeBrushColor.Visible = False
                            cmdPropBrushAlternativeBrushColor.Visible = False
                            picPropBrushColor.Visible = True
                            lblpropbrushcolor.Visible = True
                            cmdPropBrushColor.Visible = True
                            lblPropBrushClipartPosition.Visible = False
                            cboPropBrushClipartPosition.Visible = False
                        Case Else
                            cmdPropBrushBrowseClipart.Visible = False
                            lblPropBrushClipartImage.Visible = False
                            picPropBrushClipartImage.Visible = False
                            cboPropBrushPatternType.Visible = False
                            lblPropBrushPatternType.Visible = False
                            cboPropBrushPatternPen.Visible = False
                            lblPropBrushPatternPen.Visible = False
                            lblPropBrushClipartZoomFactor.Visible = False
                            txtPropBrushClipartZoomFactor.Visible = False
                            lblPropBrushClipartCrop.Visible = False
                            cboPropBrushClipartCrop.Visible = False
                            lblPropBrushClipartDensity.Visible = False
                            txtPropBrushClipartDensity.Visible = False
                            lblPropBrushClipartAngleMode.Visible = False
                            cboPropBrushClipartAngleMode.Visible = False
                            txtPropBrushClipartAngle.Visible = False
                            lblPropBrushClipartAngle.Visible = False
                            lblPropBrushAlternativeBrushColor.Visible = False
                            picPropBrushAlternativeBrushColor.Visible = False
                            cmdPropBrushAlternativeBrushColor.Visible = False
                            picPropBrushColor.Visible = False
                            lblpropbrushcolor.Visible = False
                            cmdPropBrushColor.Visible = False
                            lblPropBrushClipartPosition.Visible = False
                            cboPropBrushClipartPosition.Visible = False

                            cmdPropBrushBrowseClipart.Enabled = False
                            txtPropBrushClipartDensity.Enabled = False
                            txtPropBrushClipartZoomFactor.Enabled = False
                            cboPropBrushClipartAngleMode.Enabled = False
                            txtPropBrushClipartAngle.Enabled = False
                            picPropBrushAlternativeBrushColor.Enabled = False
                            cmdPropBrushAlternativeBrushColor.Enabled = False
                            cboPropBrushClipartCrop.Enabled = False
                    End Select
                    picPropBrushColor.BackColor = .Brush.Color
                    pnlPropBrush.Enabled = True
                    pnlPropBrush.Visible = True
                Else
                    pnlPropBrush.Visible = False
                End If

                If .HaveImage Then
                    Dim oItemImage As cIItemImage = oCurrentItem
                    picPropImage.Image = oItemImage.Image
                    cboPropImageResizeMode.SelectedIndex = oItemImage.ImageResizeMode
                    txtPropImageResolution.Text = oItemImage.ImageSize.Width & "x" & oItemImage.ImageSize.Height & "px " & oItemImage.ImageResolution.X & "x" & oItemImage.ImageResolution.Y & " dpi"
                    txtPropImageRotateAngle.Value = oItemImage.RotateBy
                    pnlPropImage.Visible = True
                    grpcurrentitemimage.visible = True
                Else
                    picPropImage.Image = Nothing
                    pnlPropImage.Visible = False
                    grpcurrentitemimage.visible = False
                End If

                If .HaveSign Then
                    Dim oItemSign As cIItemSign = oCurrentItem
                    cboPropSignSize.SelectedIndex = DirectCast(oItemSign, cIItemSizable).Size
                    cboPropSignRotateMode.SelectedIndex = DirectCast(oItemSign, cIItemRotable).RotateMode
                    cboPropSignFlip.SelectedIndex = oItemSign.SignFlip
                    cboPropSign.SelectedIndex = New List(Of Items.cIItemSign.SignEnum)(System.Enum.GetValues(GetType(Items.cIItemSign.SignEnum))).IndexOf(oItemSign.Sign)

                    pnlPropSign.Visible = True
                Else
                    pnlPropSign.Visible = False
                End If

                If .HaveText Then
                    Dim oItemText As cIItemText = oCurrentItem
                    txtPropText.Text = oItemText.Text
                    If oItemText.Font.Type = cItemFont.FontTypeEnum.Custom Then
                        cboPropTextStyle.SelectedIndex = cboPropTextStyle.Items.Count - 1
                        If oItemText.Font.FontName = "" Then
                            cboPropTextFontChar.SelectedIndex = 0
                        Else
                            cboPropTextFontChar.Text = oItemText.Font.FontName
                        End If
                        If oItemText.Font.FontSize = 0 Then
                            cboPropTextFontSize.SelectedIndex = 0
                        Else
                            cboPropTextFontSize.Text = oItemText.Font.FontSize
                        End If
                        chkPropTextFontBold.Checked = oItemText.Font.FontBold
                        chkPropTextFontItalic.Checked = oItemText.Font.FontItalic
                        chkPropTextFontUnderline.Checked = oItemText.Font.FontUnderline
                        picPropFontColor.BackColor = oItemText.Font.Color
                        pnlPropText.Height = pnlPropTextStyle.Height + pnlPropTextFont.Height
                        pnlPropTextFont.Visible = True
                    Else
                        cboPropTextStyle.SelectedIndex = oItemText.Font.Type
                        pnlPropText.Height = pnlPropTextStyle.Height
                        pnlPropTextFont.Visible = False
                    End If
                    cboPropTextSize.SelectedIndex = DirectCast(oItemText, cIItemSizable).Size
                    If (oItemText.AvaiableTextProperties And cIItemText.AvaiableTextPropertiesEnum.Rotable) Then
                        cboPropTextRotateMode.SelectedIndex = DirectCast(oItemText, cIItemRotable).RotateMode
                        cboPropTextRotateMode.Enabled = True
                    Else
                        cboPropTextRotateMode.Enabled = False
                    End If
                    If (oItemText.AvaiableTextProperties And cIItemText.AvaiableTextPropertiesEnum.Lineable) Then
                        Dim oItemLineableText As cIItemLineableText = oItemText
                        optPropTextAlignLeft.Enabled = True
                        optPropTextAlignCenter.Enabled = True
                        optPropTextAlignRight.Enabled = True
                        Select Case oItemLineableText.TextAlignment
                            Case cIItemLineableText.TextAlignmentEnum.Left
                                Debug.Print(oCurrentItem.Name & ">LEFT")
                                optPropTextAlignLeft.Checked = True
                                optPropTextAlignCenter.Checked = False
                                optPropTextAlignRight.Checked = False
                            Case cIItemLineableText.TextAlignmentEnum.Center
                                Debug.Print(oCurrentItem.Name & ">CENTER")
                                optPropTextAlignLeft.Checked = False
                                optPropTextAlignCenter.Checked = True
                                optPropTextAlignRight.Checked = False
                            Case cIItemLineableText.TextAlignmentEnum.Right
                                Debug.Print(oCurrentItem.Name & ">RIGHT")
                                optPropTextAlignLeft.Checked = False
                                optPropTextAlignCenter.Checked = False
                                optPropTextAlignRight.Checked = True
                        End Select
                    Else
                        optPropTextAlignLeft.Checked = False
                        optPropTextAlignCenter.Checked = False
                        optPropTextAlignRight.Checked = False
                        optPropTextAlignLeft.Enabled = False
                        optPropTextAlignCenter.Enabled = False
                        optPropTextAlignRight.Enabled = False
                    End If
                    If (oItemText.AvaiableTextProperties And cIItemText.AvaiableTextPropertiesEnum.VerticalLineable) Then
                        Dim oItemVerticalLineableText As cIItemVerticalLineableText = oItemText
                        optPropTextVAlignTop.Enabled = True
                        optPropTextVAlignCenter.Enabled = True
                        optPropTextVAlignBottom.Enabled = True
                        Select Case oItemVerticalLineableText.TextVerticalAlignment
                            Case cIItemVerticalLineableText.TextVerticalAlignmentEnum.Top
                                Debug.Print(oCurrentItem.Name & ">TOP")
                                optPropTextVAlignTop.Checked = True
                                optPropTextVAlignCenter.Checked = False
                                optPropTextVAlignBottom.Checked = False
                            Case cIItemVerticalLineableText.TextVerticalAlignmentEnum.Middle
                                Debug.Print(oCurrentItem.Name & ">MIDDLE")
                                optPropTextVAlignTop.Checked = False
                                optPropTextVAlignCenter.Checked = True
                                optPropTextVAlignBottom.Checked = False
                            Case cIItemVerticalLineableText.TextVerticalAlignmentEnum.Bottom
                                Debug.Print(oCurrentItem.Name & ">BOTTOM")
                                optPropTextVAlignTop.Checked = False
                                optPropTextVAlignCenter.Checked = False
                                optPropTextVAlignBottom.Checked = True
                        End Select
                    Else
                        optPropTextVAlignTop.Checked = False
                        optPropTextVAlignCenter.Checked = False
                        optPropTextVAlignBottom.Checked = False
                        optPropTextVAlignTop.Enabled = False
                        optPropTextVAlignCenter.Enabled = False
                        optPropTextVAlignBottom.Enabled = False
                    End If
                    pnlPropText.Visible = True
                Else
                    pnlPropText.Visible = False
                End If

                If TypeOf oCurrentItem Is cIItemAttachment Then
                    Dim oItemAttachment As cIItemAttachment = oCurrentItem
                    Dim oAttachment As cAttachment = oItemAttachment.Attachment.Attachment
                    If oAttachment.GetCategory = FTTLib.FileCategory.Image Then
                        picPropAttachmentPreview.SizeMode = PictureBoxSizeMode.Zoom
                        picPropAttachmentPreview.Image = modPaint.ImageExifRotate(New Bitmap(New MemoryStream(oAttachment.Data)))
                    Else
                        picPropAttachmentPreview.SizeMode = PictureBoxSizeMode.CenterImage
                        picPropAttachmentPreview.Image = oAttachment.GetThumbnail
                    End If
                    txtPropAttachmentName.Text = oItemAttachment.Attachment.Attachment.Name
                    txtPropAttachmentNote.Text = oItemAttachment.Attachment.Attachment.Note
                    pnlPropAttachment.Visible = True
                Else
                    pnlPropAttachment.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemCompass Then
                    Dim oItemCompass As cItemCompass = oCurrentItem
                    Call cPropCompassItems.Rebind(oItemCompass)
                    cPropCompassItems.Visible = True
                Else
                    cPropCompassItems.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemLegend Then
                    Dim oItemLegend As cItemLegend = oCurrentItem
                    Call cPropLegendItems.Rebind(oItemLegend)
                    pnlPropLegend.Visible = True
                Else
                    pnlPropLegend.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemScale Then
                    Dim oItemScale As cItemScale = oCurrentItem
                    Call cPropScaleItems.Rebind(oItemScale)
                    pnlPropScale.Visible = True
                Else
                    pnlPropScale.Visible = False
                End If

                pnlPropSegmentInfo.Visible = False
                pnlPropTrigpointInfo.Visible = False
                pnlPropObjectsBinding.Visible = False
                pnlPropTrigpointsDistances.Visible = False

                pnlPropPlanSplayBorder.Visible = False
                pnlPropProfileSplayBorder.Visible = False

                If .CanBeBinded Then
                    pnlPropSegmentsBinding.Enabled = (cboPropCaveList.Text <> "")
                    Dim oSegments As SortedList(Of String, cISegment) = New SortedList(Of String, cISegment)
                    For Each oPoint As cPoint In .Points
                        Dim oSegment As cISegment = oPoint.BindedSegment
                        If Not oSegment Is Nothing Then
                            If Not oSegments.ContainsKey(oSegment.ID) Then
                                Call oSegments.Add(oSegment.ID, oSegment)
                            End If
                        End If
                    Next
                    Call lvPropSegmentsBinded.Items.Clear()
                    For Each oSegment As cISegment In oSegments.Values
                        Dim oItem As ListViewItem = lvPropSegmentsBinded.Items.Add(oSegment.ToString)
                        oItem.Tag = oSegment
                    Next
                    pnlPropSegmentBinding.Visible = False
                    pnlPropSegmentsBinding.Visible = True
                Else
                    pnlPropSegmentBinding.Visible = False
                    pnlPropSegmentsBinding.Visible = False
                End If

                If .HaveLineType Then
                    cPropLineType.Rebind(oCurrentItem, AddressOf pSequencesTo)
                    'Dim oItemLine As cIItemLine = oCurrentItem
                    'Select Case oItemLine.LineType
                    '    Case cIItemLine.LineTypeEnum.Lines
                    '        chkPropLineType0.Checked = True
                    '        chkPropLineType1.Checked = False
                    '        chkPropLineType2.Checked = False
                    '    Case cIItemLine.LineTypeEnum.Splines
                    '        chkPropLineType0.Checked = False
                    '        chkPropLineType1.Checked = True
                    '        chkPropLineType2.Checked = False
                    '    Case cIItemLine.LineTypeEnum.Beziers
                    '        chkPropLineType0.Checked = False
                    '        chkPropLineType1.Checked = False
                    '        chkPropLineType2.Checked = True
                    'End Select

                    Dim bEnabled As Boolean = .Points.Count > 2
                    btnCurrentItemGenericReducePointFactor.Visibility = modControls.VisibleToVisibility(bEnabled)
                    btnCurrentItemGenericReducePoint.Visibility = modControls.VisibleToVisibility(bEnabled)
                    'cmdPropLinePointReduction.Enabled = bEnabled
                    'lblPropLinePointReduction.Enabled = bEnabled
                    'txtPropLinePointReductionFactor.Enabled = bEnabled
                    'lblPropLinePointReductionUM.Enabled = bEnabled

                    cPropLineType.Visible = True
                    'pnlPropLineType.Visible = True
                Else
                    cPropLineType.Visible = False
                    'pnlPropLineType.Visible = False
                End If
                cPropPointLineType.Visible = False

                If .CanBeClipped Then
                    cboPropClipping.SelectedIndex = .ClippingType
                    pnlPropClipping.Visible = True
                Else
                    pnlPropClipping.Visible = False
                End If

                If .HaveCrossSection Then
                    Dim oitemCrossSection As cItemCrossSection = oCurrentItem
                    cboPropCrossSectionRefStation.SelectedIndex = oitemCrossSection.RefStation
                    txtPropCrossSectionWidth.Value = oitemCrossSection.CrossWidth
                    txtPropCrossSectionHeight.Value = oitemCrossSection.CrossHeight
                    cboPropProfileTextPosition.SelectedIndex = oitemCrossSection.TextPosition
                    txtPropProfileTextDistance.Value = oitemCrossSection.TextDistance
                    cboPropProfileDirection.SelectedIndex = oitemCrossSection.Direction
                    If oitemCrossSection.Segment Is Nothing Then
                        txtPropCrossSectionSegment.Text = ""
                    Else
                        txtPropCrossSectionSegment.Text = oitemCrossSection.Segment.ToString
                    End If

                    Dim oCrossSection As cDesignCrossSection = oitemCrossSection.DesignCrossSection
                    If oCrossSection Is Nothing Then
                        chkPropCrossSectionPlanMarker.Enabled = False
                        chkPropCrossSectionProfileMarker.Enabled = False
                        cmdPropCrossSectionPlanMarker.Enabled = False
                        cmdPropCrossSectionProfileMarker.Enabled = False
                    Else
                        chkPropCrossSectionPlanMarker.Enabled = True
                        chkPropCrossSectionPlanMarker.Checked = oCrossSection.HavePlanMarker
                        cmdPropCrossSectionPlanMarker.Enabled = chkPropCrossSectionPlanMarker.Checked
                        chkPropCrossSectionProfileMarker.Enabled = True
                        chkPropCrossSectionProfileMarker.Checked = oCrossSection.HaveProfileMarker
                        cmdPropCrossSectionProfileMarker.Enabled = chkPropCrossSectionProfileMarker.Checked
                    End If
                    pnlPropCrossSection.Visible = True
                Else
                    pnlPropCrossSection.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemPlanCrossSectionMarker Then
                    Dim oItemPlanCrossSectionMarker As cItemPlanCrossSectionMarker = oCurrentItem
                    pnlPropCrossSectionMarker.Visible = True

                    txtPropCrossSectionMarkerPosition.Value = oItemPlanCrossSectionMarker.Position * 100

                    txtPropCrossSectionMarkerL.Enabled = True
                    txtPropCrossSectionMarkerL.Value = oItemPlanCrossSectionMarker.Left
                    chkPropCrossSectionMarkerLW.Enabled = True
                    chkPropCrossSectionMarkerLW.Checked = oItemPlanCrossSectionMarker.AutoLeftWidth
                    txtPropCrossSectionMarkerLW.Enabled = Not chkPropCrossSectionMarkerLW.Checked
                    txtPropCrossSectionMarkerLW.Value = oItemPlanCrossSectionMarker.LeftWidth

                    txtPropCrossSectionMarkerR.Enabled = True
                    txtPropCrossSectionMarkerR.Value = oItemPlanCrossSectionMarker.Right
                    chkPropCrossSectionMarkerRW.Enabled = True
                    chkPropCrossSectionMarkerRW.Checked = oItemPlanCrossSectionMarker.AutoRightWidth
                    txtPropCrossSectionMarkerRW.Enabled = Not chkPropCrossSectionMarkerRW.Checked
                    txtPropCrossSectionMarkerRW.Value = oItemPlanCrossSectionMarker.RightWidth

                    txtPropCrossSectionMarkerU.Enabled = False
                    chkPropCrossSectionMarkerUH.Enabled = False
                    txtPropCrossSectionMarkerUH.Enabled = False
                    txtPropCrossSectionMarkerD.Enabled = False
                    chkPropCrossSectionMarkerDH.Enabled = False
                    txtPropCrossSectionMarkerDH.Enabled = False

                    lblPropCrossSectionMarkerAlign.Enabled = True
                    cboPropCrossSectionMarkerAlign.Enabled = True
                    cboPropCrossSectionMarkerAlign.SelectedIndex = oItemPlanCrossSectionMarker.PlanAlignment
                    cboPropCrossSectionMarkerAlign.Visible = True

                    lblPropCrossSectionMarkerArrowSize.Enabled = True
                    chkPropCrossSectionMarkerArrowSizeEnabled.Checked = oItemPlanCrossSectionMarker.ArrowSizeEnabled
                    cboPropCrossSectionMarkerArrowSize.Enabled = chkPropCrossSectionMarkerArrowSizeEnabled.Checked
                    cboPropCrossSectionMarkerArrowSize.SelectedIndex = oItemPlanCrossSectionMarker.ArrowSize

                    lblPropCrossSectionMarkerDeltaAngle.Enabled = True
                    chkPropCrossSectionMarkerDeltaAngleEnabled.Checked = oItemPlanCrossSectionMarker.PlanDeltaAngleEnabled
                    'txtPropCrossSectionMarkerDeltaAngle.Enabled = chkPropCrossSectionMarkerDeltaAngleEnabled.Checked
                    txtPropCrossSectionMarkerDeltaAngle.Value = oItemPlanCrossSectionMarker.PlanDeltaAngle

                    cboPropCrossSectionMarkerProfileAlign.Enabled = False
                    cboPropCrossSectionMarkerProfileAlign.Visible = False

                    cmdPropCrossSectionMarkerLRFromDesign.Enabled = True
                    cmdPropCrossSectionMarkerUDFromDesign.Enabled = False

                    cboPropCrossSectionMarkerLabelRotation.SelectedIndex = oItemPlanCrossSectionMarker.TextRotateMode
                    cboPropCrossSectionMarkerLabelRotation.Enabled = True

                    chkPropCrossSectionMarkerLabel.Checked = oItemPlanCrossSectionMarker.TextShow
                    cboPropCrossSectionMarkerLabelPosition.SelectedIndex = oItemPlanCrossSectionMarker.TextPosition
                    txtPropCrossSectionMarkerLabelDistance.Value = oItemPlanCrossSectionMarker.TextDistance
                    cboPropCrossSectionMarkerDirection.SelectedIndex = oItemPlanCrossSectionMarker.CrossSectionItem.Direction
                    chkPropCrossSectionMarkerScaleEnabled.Checked = oItemPlanCrossSectionMarker.TextSizeEnabled
                    cboPropCrossSectionMarkerScale.Enabled = chkPropCrossSectionMarkerScaleEnabled.Checked
                    cboPropCrossSectionMarkerScale.SelectedIndex = oItemPlanCrossSectionMarker.TextSize
                ElseIf TypeOf oCurrentItem Is cItemProfileCrossSectionMarker Then
                    Dim oItemProfileCrossSectionMarker As cItemProfileCrossSectionMarker = oCurrentItem
                    pnlPropCrossSectionMarker.Visible = True

                    txtPropCrossSectionMarkerPosition.Value = oItemProfileCrossSectionMarker.Position * 100

                    txtPropCrossSectionMarkerL.Enabled = False
                    chkPropCrossSectionMarkerLW.Enabled = False
                    txtPropCrossSectionMarkerLW.Enabled = False
                    txtPropCrossSectionMarkerR.Enabled = False
                    chkPropCrossSectionMarkerRW.Enabled = False
                    txtPropCrossSectionMarkerRW.Enabled = False

                    txtPropCrossSectionMarkerU.Enabled = True
                    txtPropCrossSectionMarkerU.Value = oItemProfileCrossSectionMarker.Up
                    chkPropCrossSectionMarkerUH.Enabled = True
                    chkPropCrossSectionMarkerUH.Checked = oItemProfileCrossSectionMarker.AutoUpHeight
                    txtPropCrossSectionMarkerUH.Enabled = Not chkPropCrossSectionMarkerUH.Checked
                    txtPropCrossSectionMarkerUH.Value = oItemProfileCrossSectionMarker.UpHeight

                    txtPropCrossSectionMarkerD.Enabled = True
                    txtPropCrossSectionMarkerD.Value = oItemProfileCrossSectionMarker.Down
                    chkPropCrossSectionMarkerDH.Enabled = True
                    chkPropCrossSectionMarkerDH.Checked = oItemProfileCrossSectionMarker.AutoDownHeight
                    txtPropCrossSectionMarkerDH.Enabled = Not chkPropCrossSectionMarkerDH.Checked
                    txtPropCrossSectionMarkerDH.Value = oItemProfileCrossSectionMarker.DownHeight

                    lblPropCrossSectionMarkerAlign.Enabled = True
                    cboPropCrossSectionMarkerAlign.Enabled = False
                    cboPropCrossSectionMarkerAlign.Visible = False

                    lblPropCrossSectionMarkerArrowSize.Enabled = True
                    chkPropCrossSectionMarkerArrowSizeEnabled.Checked = oItemProfileCrossSectionMarker.ArrowSizeEnabled
                    cboPropCrossSectionMarkerArrowSize.Enabled = chkPropCrossSectionMarkerArrowSizeEnabled.Checked
                    cboPropCrossSectionMarkerArrowSize.SelectedIndex = oItemProfileCrossSectionMarker.ArrowSize

                    lblPropCrossSectionMarkerDeltaAngle.Enabled = True
                    chkPropCrossSectionMarkerDeltaAngleEnabled.Checked = oItemProfileCrossSectionMarker.ProfileDeltaAngleEnabled
                    'txtPropCrossSectionMarkerDeltaAngle.Enabled = chkPropCrossSectionMarkerDeltaAngleEnabled.Checked
                    txtPropCrossSectionMarkerDeltaAngle.Value = oItemProfileCrossSectionMarker.ProfileDeltaAngle

                    cboPropCrossSectionMarkerProfileAlign.Enabled = True
                    cboPropCrossSectionMarkerProfileAlign.SelectedIndex = oItemProfileCrossSectionMarker.ProfileAlignment
                    cboPropCrossSectionMarkerProfileAlign.Visible = True

                    cmdPropCrossSectionMarkerLRFromDesign.Enabled = False
                    cmdPropCrossSectionMarkerUDFromDesign.Enabled = True

                    cboPropCrossSectionMarkerLabelRotation.SelectedIndex = oItemProfileCrossSectionMarker.TextRotateMode
                    cboPropCrossSectionMarkerLabelRotation.Enabled = True

                    chkPropCrossSectionMarkerLabel.Checked = oItemProfileCrossSectionMarker.TextShow
                    cboPropCrossSectionMarkerLabelPosition.SelectedIndex = oItemProfileCrossSectionMarker.TextPosition
                    txtPropCrossSectionMarkerLabelDistance.Value = oItemProfileCrossSectionMarker.TextDistance
                    cboPropCrossSectionMarkerDirection.SelectedIndex = oItemProfileCrossSectionMarker.CrossSectionItem.Direction
                    cboPropCrossSectionMarkerScale.SelectedIndex = oItemProfileCrossSectionMarker.TextSize
                Else
                    pnlPropCrossSectionMarker.Visible = False
                End If

                If .HaveSplayBorder Then
                    If .Type = cIItem.cItemTypeEnum.CrossSection Then
                        Dim oItemSplayBorder As cIItemCrossSectionSplayBorder = oCurrentItem
                        chkPropCrossSectionShowSplayBorder.Checked = oItemSplayBorder.ShowSplayBorder
                        chkPropCrossSectionShowOnlyCutSplay.Checked = oItemSplayBorder.ShowOnlyCutSplay
                        chkPropCrossSectionSplayText.Checked = oItemSplayBorder.ShowSplayText
                        Try
                            txtPropCrossSectionSplayProjectionAngle.Value = oItemSplayBorder.SplayBorderProjectionAngle
                            txtPropCrossSectionSplayProjectionVerticalAngle.Value = oItemSplayBorder.SplayBorderProjectionVerticalAngle
                            txtPropCrossSectionSplayMaxVariationAngle.Value = oItemSplayBorder.SplayBorderMaxAngleVariation
                            cboPropCrossSectionSplayLineStyle.SelectedIndex = oItemSplayBorder.SplayBorderLineStyle
                        Catch
                        End Try
                        Call pObjectPropertyCrossSectionDrawProjectionSchema()
                        pnlPropCrossSectionSplayBorder.Visible = True
                    End If
                Else
                    pnlPropCrossSectionSplayBorder.Visible = False
                End If

                btnCurrentItemConvertTo.Visibility = modControls.VisibleToVisibility(.CanBeConverted)

                If .HaveQuota Then
                    Dim oItemQuota As cItemQuota = oCurrentItem
                    cboPropQuotaType.SelectedIndex = oItemQuota.QuotaType
                    cboPropQuotaAlign.SelectedIndex = oItemQuota.QuotaAlign
                    cboPropQuotaValue.SelectedIndex = oItemQuota.QuotaValue
                    cboPropQuotaValueType.SelectedIndex = oItemQuota.QuotaValueType
                    cboPropQuotaTextPosition.SelectedIndex = oItemQuota.QuotaTextPosition
                    txtPropQuotaRelativeTrigpoint.Text = oItemQuota.QuotaRelativeTrigpoint

                    Select Case oItemQuota.QuotaType
                        Case cIItemQuota.QuotaTypeEnum.Drop
                            lblPropQuotaAlign.Enabled = False
                            cboPropQuotaAlign.Enabled = False
                            lblPropQuotaRelativeTrigpoint.Enabled = True
                            txtPropQuotaRelativeTrigpoint.Enabled = True
                            cmdPropQuotaTrigpoint.Enabled = True
                            cmdPropQuotaOtherOptions.Enabled = False
                            lblPropQuotaValue.Enabled = True
                            cboPropQuotaValue.Enabled = True
                            lblPropQuotaValueType.Enabled = True
                            cboPropQuotaValueType.Enabled = True
                            lblPropQuotaTextPosition.Enabled = False
                            cboPropQuotaTextPosition.Enabled = False
                            lblPropQuotaFormat.Enabled = False
                            cboPropQuotaFormat.Enabled = False
                        Case cIItemQuota.QuotaTypeEnum.VerticalScale, cIItemQuota.QuotaTypeEnum.HorizontalScale
                            lblPropQuotaAlign.Enabled = True
                            cboPropQuotaAlign.Enabled = True
                            lblPropQuotaRelativeTrigpoint.Enabled = True
                            txtPropQuotaRelativeTrigpoint.Enabled = True
                            cmdPropQuotaTrigpoint.Enabled = True
                            cmdPropQuotaOtherOptions.Enabled = True
                            lblPropQuotaValue.Enabled = False
                            cboPropQuotaValue.Enabled = False
                            lblPropQuotaValueType.Enabled = False
                            cboPropQuotaValueType.Enabled = False
                            lblPropQuotaTextPosition.Enabled = True
                            cboPropQuotaTextPosition.Enabled = True
                            lblPropQuotaFormat.Enabled = False
                            cboPropQuotaFormat.Enabled = False
                        Case cIItemQuota.QuotaTypeEnum.GridScale
                            lblPropQuotaAlign.Enabled = False
                            cboPropQuotaAlign.Enabled = False
                            lblPropQuotaRelativeTrigpoint.Enabled = True
                            txtPropQuotaRelativeTrigpoint.Enabled = True
                            cmdPropQuotaTrigpoint.Enabled = True
                            cmdPropQuotaOtherOptions.Enabled = True
                            lblPropQuotaValue.Enabled = False
                            cboPropQuotaValue.Enabled = False
                            lblPropQuotaValueType.Enabled = False
                            cboPropQuotaValueType.Enabled = False
                            lblPropQuotaTextPosition.Enabled = True
                            cboPropQuotaTextPosition.Enabled = True
                            lblPropQuotaFormat.Enabled = False
                            cboPropQuotaFormat.Enabled = False
                        Case cIItemQuota.QuotaTypeEnum.Altitude
                            lblPropQuotaAlign.Enabled = False
                            lblPropQuotaRelativeTrigpoint.Enabled = False
                            txtPropQuotaRelativeTrigpoint.Enabled = False
                            cmdPropQuotaTrigpoint.Enabled = False
                            cmdPropQuotaOtherOptions.Enabled = False
                            lblPropQuotaValue.Enabled = True
                            cboPropQuotaValue.Enabled = True
                            lblPropQuotaValueType.Enabled = True
                            cboPropQuotaValueType.Enabled = True
                            lblPropQuotaTextPosition.Enabled = False
                            cboPropQuotaTextPosition.Enabled = False
                            lblPropQuotaFormat.Enabled = False
                            cboPropQuotaFormat.Enabled = False
                        Case cIItemQuota.QuotaTypeEnum.Horizontal, cIItemQuota.QuotaTypeEnum.Vertical
                            lblPropQuotaAlign.Enabled = True
                            cboPropQuotaAlign.Enabled = True
                            lblPropQuotaRelativeTrigpoint.Enabled = False
                            txtPropQuotaRelativeTrigpoint.Enabled = False
                            cmdPropQuotaTrigpoint.Enabled = False
                            cmdPropQuotaOtherOptions.Enabled = True
                            lblPropQuotaValue.Enabled = True
                            cboPropQuotaValue.Enabled = True
                            lblPropQuotaValueType.Enabled = True
                            cboPropQuotaValueType.Enabled = True
                            lblPropQuotaTextPosition.Enabled = False
                            cboPropQuotaTextPosition.Enabled = False
                            lblPropQuotaFormat.Enabled = True
                            cboPropQuotaFormat.Enabled = True
                        Case cIItemQuota.QuotaTypeEnum.Oblique
                            lblPropQuotaAlign.Enabled = False
                            cboPropQuotaAlign.Enabled = False
                            lblPropQuotaRelativeTrigpoint.Enabled = False
                            txtPropQuotaRelativeTrigpoint.Enabled = False
                            cmdPropQuotaTrigpoint.Enabled = False
                            cmdPropQuotaOtherOptions.Enabled = False
                            lblPropQuotaValue.Enabled = True
                            cboPropQuotaValue.Enabled = True
                            lblPropQuotaValueType.Enabled = True
                            cboPropQuotaValueType.Enabled = True
                            lblPropQuotaTextPosition.Enabled = False
                            cboPropQuotaTextPosition.Enabled = False
                            lblPropQuotaFormat.Enabled = True
                            cboPropQuotaFormat.Enabled = True
                        Case Else
                            lblPropQuotaAlign.Enabled = True
                            cboPropQuotaAlign.Enabled = True
                            lblPropQuotaRelativeTrigpoint.Enabled = False
                            txtPropQuotaRelativeTrigpoint.Enabled = False
                            cmdPropQuotaTrigpoint.Enabled = False
                            cmdPropQuotaOtherOptions.Enabled = False
                            lblPropQuotaValue.Enabled = True
                            cboPropQuotaValue.Enabled = True
                            lblPropQuotaValueType.Enabled = True
                            cboPropQuotaValueType.Enabled = True
                            lblPropQuotaTextPosition.Enabled = False
                            cboPropQuotaTextPosition.Enabled = False
                            lblPropQuotaFormat.Enabled = False
                            cboPropQuotaFormat.Enabled = False
                    End Select
                    pnlPropQuota.Visible = True
                Else
                    pnlPropQuota.Visible = False
                End If

                If .HaveSketch Then
                    Dim oItemSketch As cItemSketch = oCurrentItem
                    picPropSketch.Image = oItemSketch.Image
                    txtPropSketchResolution.Text = oItemSketch.ImageSize.Width & "x" & oItemSketch.ImageSize.Height & "px " & oItemSketch.ImageResolution.X & "x" & oItemSketch.ImageResolution.Y & " dpi"
                    chkPropSketchManualAdjust.Checked = oItemSketch.ManualAdjust
                    chkPropSketchMorphingDisabled.Checked = oItemSketch.MorphingDisabled
                    pnlPropSketch.Visible = True

                    grpCurrentItemSketch.Visible = True
                Else
                    picPropSketch.Image = Nothing
                    pnlPropSketch.Visible = False

                    grpCurrentItemSketch.Visible = False
                End If

                If .Type = cIItem.cItemTypeEnum.InvertedFreeHandArea Then
                    Dim oItemArea As cIItemMergeableArea = oCurrentItem
                    cboPropMergeMode.SelectedIndex = oItemArea.MergeMode
                    pnlPropMergeMode.Visible = True
                Else
                    pnlPropMergeMode.Visible = False
                End If

                If .Type = cIItem.cItemTypeEnum.Items Then
                    grpCurrentItemAlign.Visible = True
                    grpCurrentItemItems.Visible = True

                    Dim oItemItems As cItemItems = oCurrentItem
                    btnCurrentItemItemsCombine.Visibility = modControls.VisibleToVisibility(oItemItems.IsSelfCombinable)

                    btnCurrentItemItemsCombine.Enabled = oItemItems.IsSelfCombinable
                    btnCurrentItemItemsCombineConcretionClipart.Enabled = oItemItems.IsConvertibleToConcretion
                    btnCurrentItemItemsCombineRockClipart.Enabled = oItemItems.IsConvertibleToRock
                    btnCurrentItemItemsCombineSignClipart.Enabled = oItemItems.IsConvertibleToSign
                Else
                    grpCurrentItemItems.Visible = False
                    grpCurrentItemAlign.Visible = False
                    btnCurrentItemItemsCombine.Visibility = BarItemVisibility.Never
                End If

                'pnlProperties.Visible = True
            End If
        End With
        If Not bPropPopupShowed Then pPropPopupHide()
    End Sub

    Private Sub pPropertyNull()
        grpCurrentItemLocation.Visible = False
        grpCurrentItemSize.Visible = False
        btnItemsLayouts.Enabled = False
        btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
        grpCurrentItemRotate.Visible = False
        grpCurrentItemAlign.Visible = False

        cPropName.Visible = False
        pnlPropInfo.Visible = False
        pnlPropProp.Visible = False
        pnlPropPen.Visible = False
        pnlPropBrush.Visible = False
        pnlPropImage.Visible = False
        pnlPropSegmentInfo.Visible = False
        pnlPropTrigpointInfo.Visible = False
        pnlPropSegmentBinding.Visible = False
        pnlPropSegmentsBinding.Visible = False
        pnlPropSign.Visible = False
        pnlPropText.Visible = False
        pnlPropClipping.Visible = False
        btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
        pnlPropCrossSection.Visible = False
        pnlPropQuota.Visible = False
        pnlPropSketch.Visible = False
        grpCurrentItemSketch.Visible = False
        grpcurrentitemimage.visible = False
        pnlPropMergeMode.Visible = False
        pnlPropObjectsBinding.Visible = False
        pnlPropTrigpointsDistances.Visible = False

        pnlPropPlanSplayBorder.Visible = False
        pnlPropProfileSplayBorder.Visible = False
        pnlPropCrossSectionSplayBorder.Visible = False
        pnlPropDataProperties.Visible = False
        pnlPropCrossSectionMarker.Visible = False
        pnlPropAttachment.Visible = False
        pnlPropLegend.Visible = False
        pnlPropScale.Visible = False
        cPropCompassItems.Visible = False

        cPropVisibility.Visible = False
        cPropLineType.Visible = False
        cPropPointLineType.Visible = False

        grpCurrentItemLegend.Visible = False
        grpCurrentItemSign.Visible = False
        grpCurrentItemClipart.Visible = False
        grpCurrentItemShape.Visible = False
        grpCurrentItemItems.Visible = False

        grpCurrentItemSequence.Visible = False
        grpCurrentItemPoint.Visible = False
        grpCurrentItemBindings.Visible = False

        'Call pPenToolbarEnabled(False)

        Call pPropPopupHide()
    End Sub

    Private Sub pObjectPropertyLoad()
        If InvokeRequired Then
            Call Me.BeginInvoke(New MethodInvoker(AddressOf pObjectPropertyLoad))
        Else
            If Not bDisabledObjectPropertyEvent Then
                bDisabledObjectPropertyEvent = True
                Try
                    Dim bThereIsDesign As Boolean = oCurrentDesign IsNot Nothing
                    If bThereIsDesign Then
                        Dim bThereIsItem As Boolean
                        Dim bThereIsItemPoint As Boolean
                        If bThereIsDesign Then
                            bThereIsItem = pGetCurrentDesignTools.CurrentItem IsNot Nothing
                            bThereIsItemPoint = bThereIsItem AndAlso pGetCurrentDesignTools.CurrentItemPoint IsNot Nothing
                        End If
                        If bThereIsItem Then
                            Try
                                If bThereIsItemPoint Then
                                    Call pPropertyItemPoint()
                                Else
                                    Call pPropertyItem()
                                End If
                            Catch ex As Exception
                                Call pLogAdd(ex)
                            End Try
                            Call pFloatingToolbarShow()
                            tbl3DProp.Visible = False
                            tblDesignProp.Visible = False
                            tblObjectProp.Visible = True
                            tblObjectProp.Enabled = True
                        Else
                            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                                Try
                                    Call pProperty3D()
                                Catch ex As Exception
                                    Call pLogAdd(ex)
                                End Try
                                Call pFloatingToolbarHide()
                                tbl3DProp.Visible = True
                                tbl3DProp.Enabled = True
                                tblDesignProp.Visible = False
                                tblObjectProp.Visible = False
                            Else
                                Try
                                    Call pPropertyDesign()
                                Catch ex As Exception
                                    Call pLogAdd(ex)
                                End Try
                                Call pFloatingToolbarHide()
                                tbl3DProp.Visible = False
                                tblDesignProp.Visible = True
                                tblDesignProp.Enabled = True
                                tblObjectProp.Visible = False
                            End If
                        End If
                    Else
                        Try
                            Call pPropertyNull()
                        Catch ex As Exception
                            Call pLogAdd(ex)
                        End Try
                        tbl3DProp.Visible = False
                        tblDesignProp.Visible = False
                        tblObjectProp.Visible = False
                    End If
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bDisabledObjectPropertyEvent = False
            End If
        End If
    End Sub

    Private Sub cmdColorChange_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSegmentColorChange.Click
        Using oCD As ColorDialog = New ColorDialog
            With oCD
                .FullOpen = True
                .AnyColor = True
                .Color = picSegmentColor.BackColor
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    picSegmentColor.BackColor = .Color
                End If
            End With
        End Using
    End Sub

    Private Sub cmdColorReset_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSegmentColorReset.Click
        picSegmentColor.BackColor = Color.Transparent
    End Sub

    Private Sub btnZooms_ButtonClick(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pMapCenter()
    End Sub

    'Private Sub pSurveyTrigpointsBehaviour()
    '    'Select Case oSurvey.Properties.CalculateType
    '    '    Case cSurvey.cSurvey.CalculateTypeEnum.Therion
    '    grdTrigPoints.Columns("colX").Visible = True
    '    grdTrigPoints.Columns("colY").Visible = True
    '    grdTrigPoints.Columns("colZ").Visible = True
    '    grdTrigPoints.Columns("colX").ReadOnly = True
    '    grdTrigPoints.Columns("colY").ReadOnly = True
    '    grdTrigPoints.Columns("colZ").ReadOnly = True
    '    txtTrigPointX.Enabled = False
    '    txtTrigPointY.Enabled = False
    '    txtTrigPointZ.Enabled = False
    '    '    Case cSurvey.cSurvey.CalculateTypeEnum.Internal
    '    '        grdTrigPoints.Columns("colX").Visible = False
    '    '        grdTrigPoints.Columns("colY").Visible = False
    '    '        grdTrigPoints.Columns("colZ").Visible = False
    '    '        grdTrigPoints.Columns("colX").ReadOnly = True
    '    '        grdTrigPoints.Columns("colY").ReadOnly = True
    '    '        grdTrigPoints.Columns("colZ").ReadOnly = True
    '    '        txtTrigPointX.Enabled = False
    '    '        txtTrigPointY.Enabled = False
    '    '        txtTrigPointZ.Enabled = False
    '    '    Case cSurvey.cSurvey.CalculateTypeEnum.None
    '    '        grdTrigPoints.Columns("colX").Visible = True
    '    '        grdTrigPoints.Columns("colY").Visible = True
    '    '        grdTrigPoints.Columns("colZ").Visible = True
    '    '        grdTrigPoints.Columns("colX").ReadOnly = False
    '    '        grdTrigPoints.Columns("colY").ReadOnly = False
    '    '        grdTrigPoints.Columns("colZ").ReadOnly = False
    '    '        txtTrigPointX.Enabled = True
    '    '        txtTrigPointY.Enabled = True
    '    '        txtTrigPointZ.Enabled = True
    '    'End Select
    'End Sub

    Private Sub pSurveyMainProperties()
        'lblSegmentDirection.Visible = True
        'cboSegmentDirection.Visible = True
        'grdSegments.Columns(11).HeaderText = "Dx/sx"
        Call pSurveyMainPropertiesPanelsRefresh()
    End Sub

    'Private Sub pPenToolbarEnabled(Enabled As Boolean)
    '    btnPenStyles.Enabled = Enabled
    'End Sub

    Private Sub frmProperties_OnSegmentSelect(ByVal Sender As frmProperties, Segment As cSegment)
        Call oTools.SelectSegment(Segment)
    End Sub

    Private Sub frmProperties_OnApply(ByVal Sender As frmProperties)
        Call pSurveyUpdateProperty()
    End Sub

    Private Sub pSurveyUpdateProperty()
        Call pSurveyMainProperties()
        Call pSurveyFillSessionList(False)
        Call pSurveyFillCaveList(False)

        Call pSurveyInvalidate()
        Call grdViewSegments.RefreshData()
        Call grdViewTrigpoints.RefreshData()

        Call pSurveyDelayedRedraw()
        Call pSurveyMainPropertiesPanelsRefresh()
        Call pSurveyPenTypeRefresh()

        Call oHolos.Invalidate()

        Call pObjectPropertyLoad()
    End Sub

    Private Sub pSurveyPenTypeRefresh()
        Dim iLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", oSurvey.GetGlobalSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
        Select Case iLineType
            Case cIItemLine.LineTypeEnum.Beziers
                btnPenLine.Down = False
                btnPenSpline.Down = False
                btnPenBezier.Down = True
            Case cIItemLine.LineTypeEnum.Splines
                btnPenLine.Down = False
                btnPenSpline.Down = True
                btnPenBezier.Down = False
            Case Else
                btnPenLine.Down = True
                btnPenSpline.Down = False
                btnPenBezier.Down = False
        End Select
    End Sub

    Private Sub pSurveyProperty(Optional SelectedTabIndex As Integer? = Nothing)
        Using frmP As frmProperties = New frmProperties(oSurvey, SelectedTabIndex, iFunctionLanguage)
            AddHandler frmP.OnApply, AddressOf frmProperties_OnApply
            AddHandler frmP.OnSegmentSelect, AddressOf frmProperties_OnSegmentSelect
            If frmP.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pSurveyUpdateProperty()
            End If
        End Using
    End Sub

    Private Function pToolsEnd() As Boolean
        If oCurrentDesign Is Nothing Then
            Return False
        Else
            If pGetCurrentDesignTools.IsInEdit Then
                Call pGetCurrentDesignTools.EndAndSelectItem()
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End If
    End Function

    Private Delegate Sub oSurvey_OnBeforePropertiesChangedDelegate(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs)
    Private Sub oSurvey_OnBeforePropertiesChanged(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs) Handles oSurvey.OnBeforePropertiesChange
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnBeforePropertiesChangedDelegate(AddressOf oSurvey_OnBeforePropertiesChanged), {Sender, Args})
        Else
            Call oMousePointer.Push(Cursors.WaitCursor)
            If Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.Scale Then
                Call pStatusSet(modMain.GetLocalizedString("main.textpart104"))
            End If
        End If
    End Sub

    Private Delegate Sub oSurvey_OnFileConversionRequestDelegate(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.cFileConversionEventArgs)
    Private Sub oSurvey_OnFileConversionRequest(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.cFileConversionEventArgs) Handles oSurvey.OnFileConversionRequest
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnFileConversionRequestDelegate(AddressOf oSurvey_OnFileConversionRequest), {Sender, Args})
        Else
            Args.Cancel = (MessageBox.Show(Me, String.Format(modMain.GetLocalizedString("main.warning32"), Args.CurrentVersion, Args.RequestedVersion), "Attenzione:", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.No)
        End If
    End Sub

    Private Delegate Sub pSurveyProgressDelegate(Task As String, Action As cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum, Progress As Single, Text As String, Options As cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum)
    Private Sub pSurveyProgress(Task As String, Action As cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum, Progress As Single, Text As String, Optional Options As cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum = cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.None)
        If InvokeRequired Then
            Call BeginInvoke(New pSurveyProgressDelegate(AddressOf pSurveyProgress), {Task, Action, Progress, Text, Options})
        Else
            Select Case Action
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin
                    If frmProg Is Nothing Then
                        frmProg = New frmProgress()
                    End If
                    Dim sImage As String = ""
                    Select Case Options And cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageMask
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageLoad
                            sImage = "open"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageSave
                            sImage = "save"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageWarping
                            sImage = "warping"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageCalculate
                            sImage = "calculate"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageExport
                            sImage = "export"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImagePaint
                            sImage = "paint"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageConvert
                            sImage = "convert"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport
                            sImage = "import"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageDownload
                            sImage = "download"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageFilter
                            sImage = "filter"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.Image3D
                            sImage = "3d"
                    End Select
                    Dim bShow As Boolean = (Options And cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow) <> 0
                    Call frmProg.BeginProgress(Task, sImage, Text, bShow)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        Call Microsoft.WindowsAPICodePack.Taskbar.TaskbarManager.Instance.SetProgressValue(0, 100)
                    End If
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Reset
                    If Not frmProg Is Nothing Then
                        Call frmProg.ResetProgress()
                        frmProg = Nothing
                    End If
                    Call pStatusProgress(Progress, Text)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        Call Microsoft.WindowsAPICodePack.Taskbar.TaskbarManager.Instance.SetProgressState(Microsoft.WindowsAPICodePack.Taskbar.TaskbarProgressBarState.NoProgress)
                    End If
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End
                    If Not frmProg Is Nothing Then
                        If frmProg.EndProgress(Task) Then
                            frmProg = Nothing
                        End If
                    End If
                    Call pStatusProgress(Progress, Text)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        Call Microsoft.WindowsAPICodePack.Taskbar.TaskbarManager.Instance.SetProgressState(Microsoft.WindowsAPICodePack.Taskbar.TaskbarProgressBarState.NoProgress)
                    End If
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress
                    If Not frmProg Is Nothing Then
                        frmProg.StatusProgress(Task, Progress, Text)
                    End If
                    Call pStatusProgress(Progress, Text)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        Call Microsoft.WindowsAPICodePack.Taskbar.TaskbarManager.Instance.SetProgressValue(Progress * 100, 100)
                    End If
            End Select
        End If
    End Sub

    Private Delegate Sub oSurvey_OnProgressDelegate(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnProgressEventArgs)
    Private Sub oSurvey_OnProgress(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnProgressEventArgs) Handles oSurvey.OnProgress
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnProgressDelegate(AddressOf oSurvey_OnProgress), {Sender, Args})
        Else
            Call pSurveyProgress(Args.Task, Args.Action, Args.Progress, Args.Text, Args.Options)
        End If
    End Sub

    Private Delegate Sub oSurvey_OnLogDelegate(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnLogEventArgs)
    Private Sub oSurvey_OnLog(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnLogEventArgs) Handles oSurvey.OnLog
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnLogDelegate(AddressOf oSurvey_OnLog), {Sender, Args})
        Else
            Call pLogAdd(Args.Type, Args.Text, Args.ShowInConsole, Args.ConsoleText)
        End If
    End Sub

    Private Delegate Sub oSurvey_OnPropertiesChangedDelegate(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs)
    Private Sub oSurvey_OnPropertiesChanged(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs) Handles oSurvey.OnPropertiesChanged
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnPropertiesChangedDelegate(AddressOf oSurvey_OnPropertiesChanged), {Sender, Args})
        Else
            If Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.Scale Then
                Dim iScale As Integer = oCurrentOptions.GetCurrentScale
                If iScale = 0 Then
                    pnlStatusCurrentRule.Caption = modMain.GetLocalizedString("main.textpart56")
                Else
                    pnlStatusCurrentRule.Caption = modMain.GetLocalizedString("main.textpart57") & Strings.Format(iScale, "#,##0")
                End If
                Call pStatusSet(modMain.GetLocalizedString("main.textpart58"))
            ElseIf Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.DesignWarpingState Then
                Call pSurveyMainPropertiesPanelsRefresh()
            ElseIf Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.MainProperties Then
                Call modWMSManager.WMSDownloadFileReset()
            ElseIf Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.MasterSlaveSettings Then
                Call pSurveyMainPropertiesPanelsRefresh()
            End If
            'show/hide surface profile panel in segment...
            pnlSegmentSurfaceProfile.Visible = oSurvey.Properties.SurfaceProfile
            Call oMousePointer.Pop()    'push in beforepropertieschange
        End If
    End Sub

    Private Delegate Sub oSurvey_OnSegmentsChangeDelegate(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnSegmentChangeEventArgs)
    Private Sub oSurvey_OnSegmentsChange(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnSegmentChangeEventArgs) Handles oSurvey.OnSegmentsChange
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnSegmentsChangeDelegate(AddressOf oSurvey_OnSegmentsChange), {Sender, Args})
        Else
            If Not bDisableSegmentsChangeEvent Then
                Select Case Args.Action
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.BeforeAdd
                        Call Args.Segment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Add, cSurvey.cSurvey.SegmentsChangeActionEnum.Change
                        Call pSurveyCalculate(False)
                        Call pGetCurrentTools.SelectSegment(Args.Segment)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Clear, cSurvey.cSurvey.SegmentsChangeActionEnum.Remove
                        Call pSurveyCalculate(False)
                        Call pPropertyNull()
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Splay
                        Call pSurveyCalculate(False)
                        Call pGetCurrentTools.SelectSegment(Args.Segment)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Reassigned
                        Call pSegmentUpdate(Args.Segment)
                End Select
            End If
        End If
    End Sub

    Private Delegate Sub oSurvey_OnTrigpointsChangeDelegate(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnTrigpointChangeEventArgs)
    Private Sub oSurvey_OnTrigpointsChange(ByVal Sender As cSurvey.cSurvey, ByVal Args As cSurvey.cSurvey.OnTrigpointChangeEventArgs) Handles oSurvey.OnTrigpointsChange
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnTrigpointsChangeDelegate(AddressOf oSurvey_OnTrigpointsChange), {Sender, Args})
        Else
            If Not bDisableTrigpointsChangeEvent Then
                Select Case Args.Action
                    Case cSurvey.cSurvey.TrigpointsChangeActionEnum.Change
                        'Call pSurveyCalculate(False)
                        Call pPropertyItemTrigpoint()
                    Case cSurvey.cSurvey.TrigpointsChangeActionEnum.Rebind
                        Call pSurveyTrigpointsGridSetup()
                End Select
            End If
        End If
    End Sub

    Private Sub pSurveyInvalidate()
        Call oSurvey.Invalidate()
        Call pSurveyCalculate(False)
    End Sub

    Private Sub pSurveyCalculate(ByVal Force As Boolean)
        If oSurvey.Properties.CalculateMode = cSurvey.cSurvey.CalculateModeEnum.Automatic Or Force Then ' Or oSurvey.Invalidated Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            Call pSurveyCheckOrigin()
            Call pStatusSet(GetLocalizedString("main.textpart44"))
            If Force Then
                Call oSurvey.Invalidate()
            End If
            Dim oResult As cActionResult = oSurvey.Calculate.Calculate(True)
            If oResult.Result Then
                Call pPopupHide()
            Else
                Call pPopupShow("error", oResult.ErrorMessage)
                Call pLogAdd(cSurvey.cSurvey.LogEntryType.Error, "calculate error: " & oResult.ErrorMessage)
            End If
            Call pStatusSet(GetLocalizedString("main.textpart45"))
            Call oMousePointer.Pop()
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                Call pSurvey3DRedraw(cHolosViewer.InvalidateType.All)
            Else
                Call pSurveyRedraw()
            End If
            Call pSurveyMainPropertiesPanelsRefresh()
        Else
            Call pMapInvalidate()
        End If
    End Sub

    'Private Sub grdSegments_RowValidated(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellEventArgs)
    '    If Not oSurvey Is Nothing Then
    '        Try
    '            Dim oSegment As cSegment
    '            If e.RowIndex >= oSurvey.Segments.Count Then
    '                oSegment = oSurvey.Segments.Append()
    '                Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
    '            Else
    '                oSegment = oSurvey.Segments(e.RowIndex)
    '            End If
    '            If bSegmentChanged Then
    '                If grdSegments.IsCurrentCellInEditMode Then
    '                    Dim oCell As DataGridViewCell = grdSegments.CurrentCell
    '                    grdSegments.CurrentCell = Nothing
    '                    grdSegments.CurrentCell = oCell
    '                End If
    '                Call pSegmentSave(oSegment)
    '                Call pSegmentLoad(oSegment)
    '            End If
    '        Catch
    '        End Try
    '    End If
    'End Sub

    Private Sub pLayerTools_RestoreAll()
        For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
            oItem.Item.Visibility = BarItemVisibility.Always
            oItem.Item.Enabled = True
        Next
    End Sub

    Private Sub pLayerTools_EnabledByLevel(ByVal Prefix As String)
        If bToolsEnabledByLevel Then
            Dim sPattern As String = Prefix.ToLower & "*"
            For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
                Try
                    Dim bValue As Boolean
                    If Not oItem.Item.Tag Is Nothing Then
                        If oItem.Item.Tag.name.ToLower Like sPattern Then
                            bValue = True
                        Else
                            bValue = False
                        End If
                        If bToolsHiddenByLevel Then
                            oItem.Item.Visibility = modControls.VisibleToVisibility(bValue)
                            oItem.Item.Enabled = bValue
                        Else
                            oItem.Item.Enabled = bValue
                        End If
                    End If
                Catch
                End Try
            Next
        End If
    End Sub

    Private Sub picMap_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picMap.Click
        Call picMap.Focus()
    End Sub

    Private Sub btnPrint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyPrint()
    End Sub

    Private Sub pSurveyExport(ByVal ExportFormat As ImportExportFormatEnum)
        Select Case ExportFormat
            Case ImportExportFormatEnum.threedD
                Call oHolos.Export()
            Case ImportExportFormatEnum.Survey
                Using oSFD As SaveFileDialog = New SaveFileDialog
                    With oSFD
                        .Title = GetLocalizedString("main.exportdatadialog")
                        .Filter = GetLocalizedString("main.filetypeTRO") & " (*.TRO)|*.TRO|" & GetLocalizedString("main.filetypeTH") & " (*.TH)|*.TH|" & GetLocalizedString("main.filetypeXLSX") & " (*.XLSX)|*.XLSX|" & GetLocalizedString("main.filetypeHOLOS") & " (*.XML)|*.XML"
                        .FilterIndex = modMain.FilterRestoreLast("export.data", 1)
                        .OverwritePrompt = True
                        .CheckPathExists = True
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Call modMain.FilterSaveLast("export.data", .FilterIndex)
                            Select Case .FilterIndex
                                Case 1
                                    Dim iVTopoOptions As modExport.VTopoExportOptionsEnum = VTopoExportOptionsEnum.Default
                                    Call modExport.VTopoTroExportTo(oSurvey, .FileName, Nothing, iVTopoOptions)
                                Case 2
                                    Using frmET As frmExportTherion = New frmExportTherion
                                        If frmET.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                            Dim bThSegmentForceDirection As Boolean = oSurvey.GetGlobalSetting("therion.segmentforcedirection", 1)
                                            Dim bThSegmentForcePath As Boolean = oSurvey.GetGlobalSetting("therion.segmentforcepath", 1)
                                            Dim iThOptions As modExport.TherionExportOptionsEnum = If(bThSegmentForceDirection, modExport.TherionExportOptionsEnum.SegmentForceDirection, 0) Or If(bThSegmentForcePath, modExport.TherionExportOptionsEnum.SegmentForcePath, 0)
                                            'If oSurvey.Properties.ThreeDLochUseCaveBorder Then iThOptions = iThOptions Or TherionExportOptionsEnum.Scrap
                                            If frmET.chkExportDesign.Checked Then iThOptions = iThOptions Or TherionExportOptionsEnum.Scrap
                                            iThOptions = iThOptions Or TherionExportOptionsEnum.CalculateSplay
                                            Dim oTherionSaveNameDictionary As Dictionary(Of String, String) = modExport.TherionGetSavenameDictionary(oSurvey)
                                            Call modExport.TherionThExportTo(oSurvey, .FileName, oTherionSaveNameDictionary, iThOptions)
                                            If frmET.chkExportThconfig.Checked Then
                                                Dim sConfigFilename As String = IO.Path.Combine(IO.Path.GetDirectoryName(.FileName), IO.Path.GetFileNameWithoutExtension(.FileName) & ".thconfig")
                                                Dim sExportCommand As String = ""
                                                sExportCommand = sExportCommand & "export map -proj plan -output " & Chr(34) & IO.Path.GetFileNameWithoutExtension(.FileName) & "_plan.pdf" & Chr(34) & vbCrLf
                                                sExportCommand = sExportCommand & "export map -proj extended -output " & Chr(34) & IO.Path.GetFileNameWithoutExtension(.FileName) & "_profile.pdf" & Chr(34) & vbCrLf
                                                Call modExport.TherionCreateConfig(oSurvey, sConfigFilename, .FileName, sExportCommand)
                                            End If
                                        End If
                                    End Using
                                Case 3
                                    Using frmEE As frmExportExcel = New frmExportExcel
                                        If frmEE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                            Dim iOption As ExcelExportOptionsEnum
                                            If frmEE.chkExportCalculatedData.Checked Then iOption = iOption Or ExcelExportOptionsEnum.CalculatedData
                                            If frmEE.chkExportColor.Checked Then iOption = iOption Or ExcelExportOptionsEnum.Colors
                                            If frmEE.chkExportNamedSplayStations.Checked Then iOption = iOption Or ExcelExportOptionsEnum.NamedSplayStation
                                            If frmEE.chkExportNamedSplayStationsData.Checked Then iOption = iOption Or ExcelExportOptionsEnum.NamedSplayStationData
                                            Call modExport.ExcelExportTo(oSurvey, .FileName, iOption)
                                        End If
                                    End Using
                                Case 4
                                    Using frmEH As frmExportHolos = New frmExportHolos
                                        If frmEH.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                            Dim iOption As HolosExportOptionsEnum
                                            If frmEH.chkExportSurface.Checked Then iOption = iOption Or HolosExportOptionsEnum.SurfaceData
                                            If frmEH.chkExportLRUD.Checked Then iOption = iOption Or HolosExportOptionsEnum.LRUDdata
                                            If frmEH.chkExportColors.Checked Then iOption = iOption Or HolosExportOptionsEnum.LRUDdata
                                            Call modExport.HolosExportTo(oSurvey, .FileName, frmEH.cboExportProfile.SelectedIndex, iOption)
                                        End If
                                    End Using
                            End Select
                        End If
                    End With
                End Using
            Case ImportExportFormatEnum.Track
                Using oSFD As SaveFileDialog = New SaveFileDialog
                    With oSFD
                        .Title = GetLocalizedString("main.exporttrackdialog")
                        .Filter = GetLocalizedString("main.filetypeKML") & " (*.KML)|*.KML"
                        .FilterIndex = modMain.FilterRestoreLast("export.track", 1)
                        .OverwritePrompt = True
                        .CheckPathExists = True
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Call modMain.FilterSaveLast("export.track", .FilterIndex)
                            Select Case .FilterIndex
                                Case 1
                                    Using frmEKML As frmExportGoogleKML = New frmExportGoogleKML(oSurvey)
                                        If frmEKML.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                            Dim iOption As GoogleKMLExportOptionsEnum
                                            If frmEKML.chkExportTrack.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.Track
                                            If frmEKML.chkExportWaypoint.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.Waypoint
                                            If frmEKML.chkExportCaveBorders.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.CaveBorders
                                            If frmEKML.chkExportLinkedSurveys.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.LinkedSurveys
                                            If frmEKML.chkExportUseCadastralIDInCaveNames.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.UseCadastralIDInCaveNames
                                            Call modExport.GoogleKmlExportTo2(oSurvey, .FileName, iOption, frmEKML.txtCaveBordersTransparency.Value)
                                        End If
                                    End Using
                            End Select
                        End If
                    End With
                End Using
            Case ImportExportFormatEnum.Image
                Call pPopupsHide()
                Dim iView As frmPreview.ViewModeEnum
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                    iView = frmPreview.ViewModeEnum.Plan
                Else
                    iView = frmPreview.ViewModeEnum.Profile
                End If
                Using frmPv As frmPreview = New frmPreview(oSurvey, frmPreview.PreviewModeEnum.Export, iView)
                    AddHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
                    With frmPv
                        .Location = Location
                        .Size = Size
                        .WindowState = WindowState
                        Call .ShowDialog(Me)
                    End With
                    RemoveHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
                End Using
                'Call pObjectPropertyLoad()
                Call pMapInvalidate()
                If Not IsNothing(frmV) Then
                    Call frmV.ProfileInvalidate()
                End If
        End Select
    End Sub

    Private Sub pSurveyPrint()
        Call pPopupsHide()
        Dim iView As frmPreview.ViewModeEnum
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
            iView = frmPreview.ViewModeEnum.Plan
        Else
            iView = frmPreview.ViewModeEnum.Profile
        End If
        Using frmPv As frmPreview = New frmPreview(oSurvey, frmPreview.PreviewModeEnum.Preview, iView)
            AddHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
            With frmPv
                .Location = Location
                .Size = Size
                .WindowState = WindowState
                Call .ShowDialog(Me)
            End With
            RemoveHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
        End Using
        'Call pObjectPropertyLoad()
        Call pMapInvalidate()
        If Not IsNothing(frmV) Then
            Call frmV.ProfileInvalidate()
        End If
    End Sub

    Private Sub pSurveyRedraw()
        If Not oCurrentDesign Is Nothing Then
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan OrElse oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call oSurvey.Redraw(oCurrentOptions)
                Call pMapInvalidate()
                Call oMousePointer.Pop()
            Else
                Call pSurvey3DRedraw(cHolosViewer.InvalidateType.All)
            End If
        End If
    End Sub

    Private Sub pSurveyShow3D()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = cIDesign.cDesignTypeEnum.Unknown
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType <> cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call pToolsEnd()
            If iCurrentDesignType >= 0 Then
                Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
            End If

            oCurrentDesign = oTools.ThreeDTools.Design
            oCurrentOptions = oSurvey.Options("_design.3d")
            Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)

            Call oPaintInfo(cIDesign.cDesignTypeEnum.Profile).Restore(oPaintTranslation, sPaintZoom)
            btnViewPlan.Checked = False
            btnViewProfile.Checked = False
            btnView3D.Checked = True

            Call pSurvey3DRedraw(cHolosViewer.InvalidateType.None)  'da rivedere....

            oTopDesignLevelBar.Visible = False
            oTopDesignItemsBar.Visible = False
            grdDesignLayers.Visible = False

            btnScrollMode.Visibility = BarItemVisibility.Never
            btnAltMode.Visibility = BarItemVisibility.Never
            btnMultiSelMode1.Visibility = BarItemVisibility.Never
            btnMultiSelMode2.Visibility = BarItemVisibility.Never
            btnSnapToPointNone.Visibility = BarItemVisibility.Never
            btnSnapToPoint0.Visibility = BarItemVisibility.Never
            btnSnapToPoint1.Visibility = BarItemVisibility.Never
            btnSnapToPoint2.Visibility = BarItemVisibility.Never
            btnViewRulers.Visibility = BarItemVisibility.Never
            btnViewMetricGrid.Visibility = BarItemVisibility.Never
            btnEditDrawing.Visibility = BarItemVisibility.Never
            btnEditPointToPoint.Visibility = BarItemVisibility.Never
            btnItemsEndEdit.Visibility = BarItemVisibility.Never

            btnDesignPlotShowBindings.Visibility = BarItemVisibility.Never
            btnGrpDesignPlotRebindCommands.Visibility = BarItemVisibility.Never
            btnGrpDesignPlotRebindActions.Visibility = BarItemVisibility.Never
            grpDesignOptions.Visible = False

            btn3DViewTop.Visibility = BarItemVisibility.Always
            btn3DViewBottom.Visibility = BarItemVisibility.Always
            btn3dViewNS.Visibility = BarItemVisibility.Always
            btn3dViewSN.Visibility = BarItemVisibility.Always
            btn3dViewEW.Visibility = BarItemVisibility.Always
            btn3dViewWE.Visibility = BarItemVisibility.Always
            btn3DCameraType.Visibility = BarItemVisibility.Always
            btn3DCameraMode.Visibility = BarItemVisibility.Always

            btnFilterEdit.Visibility = BarItemVisibility.Never
            btnFilterFiltered.Visibility = BarItemVisibility.Never
            btnFilterWhiteboard.Visibility = BarItemVisibility.Never
            btnFilterInvertFilter.Visibility = BarItemVisibility.Never

            btnGrpPensType.Visibility = BarItemVisibility.Never
            btnGrpPenSmooting.Visibility = BarItemVisibility.Never

            pnlStatusDesignZoom.Visibility = BarItemVisibility.Never
            pnlStatusZoomBar.Visibility = BarItemVisibility.Never

            'frmMFT.Visible = False
            Call pFloatingToolbarHide()

            Call pHolosResize()

            Try
                pnl3D.Visible = True
            Catch
                oHolos.Reset()
                oHolos.[Error](True)
                pnl3D.Visible = True
            End Try
            picMap.Visible = False
            oVSB.Visible = False
            oHSB.Visible = False

            grdDesignLayers.Enabled = False
            grpDesignCommands.Enabled = False
            grpDesignBindings.Enabled = False

            Call pSurveySetCurrentCaveBranch(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
            btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
            btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
            Call pSurveyRestoreCaveBranchLockstate(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnMainBindDesignType.Visibility = BarItemVisibility.Never
            cboPropBindDesignType.Visible = True

            Call pSurveyHighlightCurrentCave(True)

            Call pSurveyMainPropertiesPanelsRefresh()

            If oHolos.RedrawCount = 0 Then
                Call oHolos.RedrawRequest()
                Call pMapCenterAndFit()
                Call btn3DViewTop.PerformClick()
            End If

            Call pObjectPropertyLoad()
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyShowProfile()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = cIDesign.cDesignTypeEnum.Unknown
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType <> cIDesign.cDesignTypeEnum.Profile Then
            Call pToolsEnd()
            If iCurrentDesignType >= 0 Then
                Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
            End If

            oCurrentDesign = oSurvey.Profile
            oCurrentOptions = oSurvey.Options("_design.profile")
            Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)

            If oPaintInfo(cIDesign.cDesignTypeEnum.Profile).IsEmpty Then
                Call pZoomReset()
                Call pMapCenterAndFit()
            Else
                Dim sNewPaintZoom As Single
                Dim oNewPaintTranslation As PointF
                Call oPaintInfo(cIDesign.cDesignTypeEnum.Profile).Restore(oNewPaintTranslation, sNewPaintZoom)
                Call pMapZoom(sNewPaintZoom)
                oPaintTranslation = oNewPaintTranslation
            End If
            btnViewPlan.Checked = False
            btnViewProfile.Checked = True
            btnView3D.Checked = False

            oTopDesignLevelBar.Visible = True
            oTopDesignItemsBar.Visible = True
            grdDesignLayers.Visible = True

            btnScrollMode.Visibility = BarItemVisibility.Always
            btnAltMode.Visibility = BarItemVisibility.Always
            btnMultiSelMode1.Visibility = BarItemVisibility.Always
            btnMultiSelMode2.Visibility = BarItemVisibility.Always
            btnSnapToPointNone.Visibility = BarItemVisibility.Always
            btnSnapToPoint0.Visibility = BarItemVisibility.Always
            btnSnapToPoint1.Visibility = BarItemVisibility.Always
            btnSnapToPoint2.Visibility = BarItemVisibility.Always
            btnViewRulers.Visibility = BarItemVisibility.Always
            btnViewMetricGrid.Visibility = BarItemVisibility.Always
            btnEditDrawing.Visibility = BarItemVisibility.Always
            btnEditPointToPoint.Visibility = BarItemVisibility.Always
            btnItemsEndEdit.Visibility = BarItemVisibility.Always

            btnDesignPlotShowBindings.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindCommands.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindActions.Visibility = BarItemVisibility.Always
            grpDesignOptions.Visible = True

            btn3DViewTop.Visibility = BarItemVisibility.Never
            btn3DViewBottom.Visibility = BarItemVisibility.Never
            btn3dViewNS.Visibility = BarItemVisibility.Never
            btn3dViewSN.Visibility = BarItemVisibility.Never
            btn3dViewEW.Visibility = BarItemVisibility.Never
            btn3dViewWE.Visibility = BarItemVisibility.Never
            btn3DCameraType.Visibility = BarItemVisibility.Never
            btn3DCameraMode.Visibility = BarItemVisibility.Never

            btnFilterEdit.Visibility = BarItemVisibility.Always
            btnFilterFiltered.Visibility = BarItemVisibility.Always
            btnFilterWhiteboard.Visibility = BarItemVisibility.Always
            btnFilterInvertFilter.Visibility = BarItemVisibility.Always

            btnGrpPensType.Visibility = BarItemVisibility.Always
            btnGrpPenSmooting.Visibility = BarItemVisibility.Always

            pnlStatusDesignZoom.Visibility = BarItemVisibility.Always
            pnlStatusZoomBar.Visibility = BarItemVisibility.Always

            'frmMFT.Visible = False
            Call pFloatingToolbarHide()

            pnl3D.Visible = False
            picMap.Visible = True
            oVSB.Visible = True
            oHSB.Visible = True

            grdDesignLayers.Enabled = True

            grdDesignLayers.Enabled = True
            grpDesignCommands.Enabled = True
            grpDesignBindings.Enabled = True

            If pGetCurrentDesignTools.CurrentLayer Is Nothing Then
                Call pGetCurrentDesignTools.SelectLayer(oSurvey.Profile.Layers(cLayers.LayerTypeEnum.Base))
            Else
                Select Case pGetCurrentDesignTools.CurrentLayer.Type
                    Case cLayers.LayerTypeEnum.Base
                        btnLayer_Base.Checked = True
                        'Call btnLayer_Base.PerformClick()
                    Case cLayers.LayerTypeEnum.Borders
                        btnLayer_Borders.Checked = True
                        'Call btnLayer_Borders.PerformClick()
                    Case cLayers.LayerTypeEnum.RocksAndConcretion
                        btnLayer_Rocks.Checked = True
                        'Call btnLayer_Rocks.PerformClick()
                    Case cLayers.LayerTypeEnum.Signs
                        btnLayer_Signs.Checked = True
                        'Call btnLayer_Signs.PerformClick()
                    Case cLayers.LayerTypeEnum.Soil
                        btnLayer_Soil.Checked = True
                        'Call btnLayer_Soil.PerformClick()
                    Case cLayers.LayerTypeEnum.CeilingMorphologies
                        btnLayer_TerrainLevel.Checked = True
                        'Call btnLayer_TerrainLevel.PerformClick()
                    Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                        btnLayer_Water.Checked = True
                        'Call btnLayer_Water.PerformClick()
                End Select
            End If

            grpDesignItemsAdd.Enabled = True
            For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
                If TypeOf oItem.Item.Tag Is cEditToolsBag Then
                    Dim oBag As cEditToolsBag = oItem.Item.Tag
                    oItem.Item.Visibility = modControls.VisibleToVisibility(oBag.AvaiableInProfile)
                Else
                    oItem.Item.Visibility = BarItemVisibility.Always
                End If
            Next
            'For Each oButton As ToolStripItem In mnuDesignAdd.DropDownItems
            '    If TypeOf oButton.Tag Is cEditToolsBag Then
            '        Dim oBag As cEditToolsBag = oButton.Tag
            '        oButton.Visible = oBag.AvaiableInProfile
            '    Else
            '        oButton.Visible = True
            '    End If
            'Next

            Call pSurveySetCurrentCaveBranch(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
            btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
            btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
            Call pSurveySetCurrentBindTypeAndCrosssection(pGetCurrentDesignTools.CurrentBindDesignType, pGetCurrentDesignTools.CurrentCrossSection, True)
            Call pSurveyRestoreCaveBranchLockstate(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnMainBindDesignType.Visibility = BarItemVisibility.Always
            cboPropBindDesignType.Visible = True
            Call pSurveyLayersFilterApply(False)
            Call pSurveyHighlightCurrentCave(True)

            Call pSurveyMainPropertiesPanelsRefresh()

            Call pSurveyRedraw()

            Call pObjectPropertyLoad()

            Call oDockJoinPoints.SetSurvey(oSurvey, pGetCurrentDesignTools)
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyShowPlan()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = -1
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType <> cIDesign.cDesignTypeEnum.Plan Then
            Call pToolsEnd()
            If iCurrentDesignType >= 0 Then
                Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
            End If

            oCurrentDesign = oSurvey.Plan
            oCurrentOptions = oSurvey.Options("_design.plan")
            Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)

            If oPaintInfo(cIDesign.cDesignTypeEnum.Plan).IsEmpty Then
                Call pZoomReset()
                Call pMapCenterAndFit()
            Else
                Dim sNewPaintZoom As Single
                Dim oNewPaintTranslation As PointF
                Call oPaintInfo(cIDesign.cDesignTypeEnum.Plan).Restore(oNewPaintTranslation, sNewPaintZoom)
                Call pMapZoom(sNewPaintZoom)
                oPaintTranslation = oNewPaintTranslation
            End If
            btnViewPlan.Checked = True
            btnViewProfile.Checked = False
            btnView3D.Checked = False

            oTopDesignLevelBar.visible = True
            oTopDesignItemsBar.Visible = True
            grdDesignLayers.Visible = True

            btnScrollMode.Visibility = BarItemVisibility.Always
            btnAltMode.Visibility = BarItemVisibility.Always
            btnMultiSelMode1.Visibility = BarItemVisibility.Always
            btnMultiSelMode2.Visibility = BarItemVisibility.Always
            btnSnapToPointNone.Visibility = BarItemVisibility.Always
            btnSnapToPoint0.Visibility = BarItemVisibility.Always
            btnSnapToPoint1.Visibility = BarItemVisibility.Always
            btnSnapToPoint2.Visibility = BarItemVisibility.Always
            btnViewRulers.Visibility = BarItemVisibility.Always
            btnViewMetricGrid.Visibility = BarItemVisibility.Always
            btnEditDrawing.Visibility = BarItemVisibility.Always
            btnEditPointToPoint.Visibility = BarItemVisibility.Always
            btnItemsEndEdit.Visibility = BarItemVisibility.Always

            btnDesignPlotShowBindings.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindCommands.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindActions.Visibility = BarItemVisibility.Always
            grpDesignOptions.Visible = True

            btn3DViewTop.Visibility = BarItemVisibility.Never
            btn3DViewBottom.Visibility = BarItemVisibility.Never
            btn3dViewNS.Visibility = BarItemVisibility.Never
            btn3dViewSN.Visibility = BarItemVisibility.Never
            btn3dViewEW.Visibility = BarItemVisibility.Never
            btn3dViewWE.Visibility = BarItemVisibility.Never
            btn3DCameraType.Visibility = BarItemVisibility.Never
            btn3DCameraMode.Visibility = BarItemVisibility.Never

            btnFilterEdit.Visibility = BarItemVisibility.Always
            btnFilterFiltered.Visibility = BarItemVisibility.Always
            btnFilterWhiteboard.Visibility = BarItemVisibility.Always
            btnFilterInvertFilter.Visibility = BarItemVisibility.Always

            btnGrpPensType.Visibility = BarItemVisibility.Always
            btnGrpPenSmooting.Visibility = BarItemVisibility.Always

            pnlStatusDesignZoom.Visibility = BarItemVisibility.Always
            pnlStatusZoomBar.Visibility = BarItemVisibility.Always

            'frmMFT.Visible = False
            Call pFloatingToolbarHide()

            pnl3D.Visible = False
            picMap.Visible = True
            oVSB.Visible = True
            oHSB.Visible = True

            grdDesignLayers.Enabled = True

            grdDesignLayers.Enabled = True
            grpDesignCommands.Enabled = True
            grpDesignBindings.Enabled = True

            If pGetCurrentDesignTools.CurrentLayer Is Nothing Then
                Call pGetCurrentDesignTools.SelectLayer(oSurvey.Plan.Layers(cLayers.LayerTypeEnum.Base))
            Else
                Select Case pGetCurrentDesignTools.CurrentLayer.Type
                    Case cLayers.LayerTypeEnum.Base
                        btnLayer_Base.Checked = True
                        'Call btnLayer_Base.PerformClick()
                    Case cLayers.LayerTypeEnum.Borders
                        btnLayer_Borders.Checked = True
                        'Call btnLayer_Borders.PerformClick()
                    Case cLayers.LayerTypeEnum.RocksAndConcretion
                        btnLayer_Rocks.Checked = True
                        'Call btnLayer_Rocks.PerformClick()
                    Case cLayers.LayerTypeEnum.Signs
                        btnLayer_Signs.Checked = True
                        'Call btnLayer_Signs.PerformClick()
                    Case cLayers.LayerTypeEnum.Soil
                        btnLayer_Soil.Checked = True
                        'Call btnLayer_Soil.PerformClick()
                    Case cLayers.LayerTypeEnum.CeilingMorphologies
                        btnLayer_TerrainLevel.Checked = True
                        'Call btnLayer_TerrainLevel.PerformClick()
                    Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                        btnLayer_Water.Checked = True
                        'Call btnLayer_Water.PerformClick()
                End Select
            End If

            grpDesignItemsAdd.Enabled = True
            For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
                If TypeOf oItem.Item.Tag Is cEditToolsBag Then
                    Dim oBag As cEditToolsBag = oItem.Item.Tag
                    oItem.Item.Visibility = modControls.VisibleToVisibility(oBag.AvaiableInPlan)
                Else
                    oItem.Item.Visibility = BarItemVisibility.Always
                End If
            Next
            'For Each oButton As ToolStripItem In mnuDesignAdd.DropDownItems
            '    If TypeOf oButton.Tag Is cEditToolsBag Then
            '        Dim oBag As cEditToolsBag = oButton.Tag
            '        oButton.Visible = oBag.AvaiableInPlan
            '    Else
            '        oButton.Visible = True
            '    End If
            'Next

            Call pSurveySetCurrentCaveBranch(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
            btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
            btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
            Call pSurveySetCurrentBindTypeAndCrosssection(pGetCurrentDesignTools.CurrentBindDesignType, pGetCurrentDesignTools.CurrentCrossSection, True)
            Call pSurveyRestoreCaveBranchLockstate(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnMainBindDesignType.Visibility = BarItemVisibility.Always
            cboPropBindDesignType.Visible = True
            Call pSurveyLayersFilterApply(False)
            Call pSurveyHighlightCurrentCave(True)

            Call pSurveyMainPropertiesPanelsRefresh()

            Call pSurveyRedraw()

            Call pObjectPropertyLoad()

            Call oDockJoinPoints.SetSurvey(oSurvey, pGetCurrentDesignTools)
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveySetCurrentBindTypeAndCrosssection(BindingType As cItem.BindDesignTypeEnum, CrossSection As String, Force As Boolean)
        bDisabledCaveBranchChangeEvent = True
        If Force OrElse btnMainBindDesignType.EditValue <> BindingType Then
            btnMainBindDesignType.EditValue = BindingType
            Call pGetCurrentDesignTools.SelectBindDesignType(btnMainBindDesignType.EditValue)
            Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
        End If
        bDisabledCaveBranchChangeEvent = False
    End Sub

    Private Function pCaveBranchBarEditToString(CaveBranchEdit As cCaveInfoBranch) As String
        If CaveBranchEdit Is Nothing Then
            Return ""
        Else
            Return CaveBranchEdit.Path
        End If
    End Function

    Private Function pCaveBarEditToString(CaveEdit As cCaveInfo) As String
        If CaveEdit Is Nothing Then
            Return ""
        Else
            Return CaveEdit.Name
        End If
    End Function

    Private Sub pSurveySetCurrentCaveBranch(Cave As String, Branch As String)
        bDisabledCaveBranchChangeEvent = True
        Dim sCurrentCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim sCurrentBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        If sCurrentCave <> Cave Then
            btnMainCaveList.EditValue = oSurvey.Properties.GetCaveInfo(Cave, "")
            Call pSurveyFillCaveBranchList(CType(btnMainCaveList.EditValue, cCaveInfo), btnMainCaveBranchList)
        End If
        If sCurrentBranch <> Branch Then
            If Branch = "" Then
                btnMainCaveBranchList.EditValue = cboMainCaveBranchList.DataSource(0)
            Else
                btnMainCaveBranchList.EditValue = oSurvey.Properties.GetCaveInfo(Cave, Branch)
            End If
        End If
        Call pGetCurrentDesignTools.SelectCave(Cave, Branch)
        bDisabledCaveBranchChangeEvent = False
    End Sub

    Private Sub pSequenceDelete()
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.DeleteSequence(oPoint)
            If oItem.Deleted Then
                .SelectItem(Nothing)
            Else
                Call .SelectPoint(oItem.Points.First)
            End If
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pSequenceDivide(Optional Join As Boolean = False)
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.DivideSequence(oPoint, Join)
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pItemDeletePoint()
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.Remove(oPoint)
            If oItem.Deleted Then
                .SelectItem(Nothing)
            Else
                Call .SelectPoint(oItem.Points.First)
            End If
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pItemAddPoint()
        Try
            With pGetCurrentDesignTools()
                Dim oNewPoint As cPoint
                If .IsNewPoint Then
                    Dim iIndex As Integer = .CurrentItem.Points.IndexOf(.CurrentNewPointRelative)
                    oNewPoint = .CurrentItemPoint.Clone
                    oNewPoint = .CurrentItem.Points.Insert(iIndex + 1, oNewPoint)
                Else
                    Dim iIndex As Integer = .CurrentItem.Points.IndexOf(.CurrentItemPoint)
                    Dim oNewPaintPoint As PointF = .CurrentItemPoint.Point
                    oNewPaintPoint.X += 0.1
                    oNewPaintPoint.Y += 0.1
                    oNewPoint = .CurrentItem.Points.InsertFromPaintPoint(iIndex + 1, oNewPaintPoint)
                End If
                Call .SelectPoint(oNewPoint)
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pSequenceCombine()
        With pGetCurrentDesignTools()
            Dim oEditPoint As cPoint = .CurrentItemPoint
            Dim oNewEditPoint As cPoint = oEditPoint.Item.Points.CombineSequences(oEditPoint)
            Call .SelectPoint(oNewEditPoint)
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pItemSendToBottom()
        Try
            With pGetCurrentDesignTools()
                Call .CurrentLayer.Items.SendToBottom(.CurrentItem)
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pItemSendBehind()
        Try
            With pGetCurrentDesignTools()
                Call .CurrentLayer.Items.SendBehind(.CurrentItem)
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pItemBringAhead()
        Try
            With pGetCurrentDesignTools()
                Call .CurrentLayer.Items.BringAhead(.CurrentItem)
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pItemBringToTop()
        Try
            With pGetCurrentDesignTools()
                Call .CurrentLayer.Items.BringToTop(.CurrentItem)
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    'Private Sub mnuDesignItemPointPlot_DropDownOpening(ByVal sender As Object, ByVal e As System.EventArgs)
    '    Try
    '        With pGetCurrentDesignTools()

    '            If .CurrentItemPoint.SegmentLocked Then
    '                mnuDesignItemPointPlotLockSegment.Text = GetLocalizedString("main.textpart42")
    '                mnuDesignItemPointPlotBindSegment.Enabled = False
    '            Else
    '                mnuDesignItemPointPlotLockSegment.Text = GetLocalizedString("main.textpart43")
    '                mnuDesignItemPointPlotBindSegment.Enabled = True
    '            End If
    '            mnuDesignItemPointPlotLockSegment.Enabled = True
    '            Call .TakeUndoSnapshot()
    '        End With
    '    Catch
    '        mnuDesignItemPointPlotLockSegment.Enabled = False
    '    End Try
    'End Sub

    Private Sub picmap_MouseWheel(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseWheel
        Try
            Dim iDeltaIncrement As Integer
            If My.Computer.Keyboard.ShiftKeyDown Then
                iDeltaIncrement = pnlStatusZoomBar.EditValue / 2
            Else
                iDeltaIncrement = pnlStatusZoomBar.EditValue / 10
            End If
            If iDeltaIncrement = 0 Then iDeltaIncrement = 1
            Dim iDelta As Integer = If(e.Delta > 0, iDeltaIncrement, -iDeltaIncrement)
            If pnlStatusZoomBar.EditValue + iDelta > trkZoom.Maximum Then
                pnlStatusZoomBar.EditValue = trkZoom.Maximum
            ElseIf pnlStatusZoomBar.EditValue + iDelta < trkZoom.Minimum Then
                pnlStatusZoomBar.EditValue = trkZoom.Minimum
            Else
                pnlStatusZoomBar.EditValue = pnlStatusZoomBar.EditValue + iDelta
            End If
        Catch
        End Try
    End Sub

    Private Sub mnuSegmentsAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSegmentAdd()
    End Sub

    Private Sub mnuViewSegmentsAndTrigpoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pFieldDataShow(True)
    End Sub

    Private Sub mnuViewobjectprop_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pObjectPropShow(True)
    End Sub

    Private Sub pLevelsShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockLevels, Visible)
    End Sub

    Private Sub pJoinPointsShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockJoinPoints, Visible)
    End Sub

    Private Sub pTextShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockText, Visible)
    End Sub

    Private Sub pClipartShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(DockClipart, Visible)
    End Sub

    Private Sub pConsoleShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockConsole, Visible)
    End Sub

    Private Sub pDesignAreaShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockDesigner, Visible)
        Call pMapInvalidate()
    End Sub

    Private Sub pDockContentShow(DockPanel As Docking.DockPanel, Optional ByVal Visible As Boolean? = Nothing)
        If Visible.HasValue Then
            If Visible.Value Then
                Call DockPanel.Show()
            Else
                Call DockPanel.Hide()
            End If
            Call DockPanel.Focus()
        Else
            If DockPanel.Visible Then
                Call DockPanel.Hide()
            Else
                Call DockPanel.Show()
            End If
        End If
    End Sub

    Private Sub pFieldDataShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockData, Visible)
    End Sub

    Private Sub pObjectPropShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockProperties, Visible)
    End Sub

    Private Sub pSegmentsAndTrigPointsShow(ByVal Visible As Boolean)
        spSegmentsAndTrigpoints.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Both
        btnSegmentAndTrigpointGridColor.Visibility = BarItemVisibility.Always
    End Sub

    Private Sub pTrigpointsShow(ByVal Visible As Boolean)
        spSegmentsAndTrigpoints.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Panel2
        btnSegmentAndTrigpointGridColor.Visibility = BarItemVisibility.Never
        Call grdTrigPoints.Focus()
    End Sub

    Private Sub pSegmentsShow(ByVal Visible As Boolean)
        spSegmentsAndTrigpoints.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Panel1
        btnSegmentAndTrigpointGridColor.Visibility = BarItemVisibility.Always
        Call grdSegments.Focus()
    End Sub

    Private Sub mnuViewPlan_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyShowPlan()
    End Sub

    Private Sub pSurveyDesignToolsLoadSubToolbarItem(ByVal Item As XmlElement, Optional ParentMenu As PopupMenu = Nothing) ', ByVal Parent As System.Windows.Forms.ToolStripItemCollection, Optional ByVal IsDropDown As Boolean = False)
        'btnItemsAdd.Gallery.ShowGroupCaption = False
        Dim bBeginGroup As Boolean = False
        Dim iLastLayer As cLayers.LayerTypeEnum = -1
        'Dim oGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = ParentGroup
        Dim oItemGroup As BarButtonGroup
        For Each oXmlTool As XmlElement In Item.ChildNodes
            If oXmlTool.Name = "tool" Then
                Dim oBag As cEditToolsBag = New cEditToolsBag(oXmlTool)
                If Not oBag.Hidden Then
                    Dim sType As String = oBag.Type
                    Dim sCaption As String = oBag.Caption
                    Dim iLayer As cLayers.LayerTypeEnum = oBag.Layer
                    If iLayer <> iLastLayer AndAlso ParentMenu Is Nothing Then
                        iLastLayer = iLayer

                        oItemGroup = New BarButtonGroup
                        oItemGroup.Caption = sCaption
                        RibbonControl.Items.Add(oItemGroup)
                        Call grpDesignItemsAdd.ItemLinks.Add(oItemGroup)

                        bBeginGroup = False
                    End If
                    Select Case sType
                        Case "dropdown"
                            Dim oItem As BarButtonItem = New BarButtonItem
                            oItem.Name = "btnItemsAdd_" & oBag.Name
                            oItem.Caption = sCaption
                            oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                            oItem.Tag = oBag
                            oItem.ActAsDropDown = True
                            oItem.ButtonStyle = BarButtonStyle.DropDown
                            oItem.DropDownControl = New PopupMenu
                            If ParentMenu Is Nothing Then
                                Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                            Else
                                ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                            End If
                            '    Dim oItem As ToolStripDropDownButton = New ToolStripDropDownButton
                            '    oItem.Name = "btnSegmentAdd_" & oBag.Name
                            '    oItem.AutoSize = True
                            '    oItem.Text = sCaption
                            '    Call Parent.Add(oItem)
                            '    oItem.Tag = oBag
                            '    oItem.ToolTipText = oBag.ToolTip
                            '    oItem.DisplayStyle = ToolStripItemDisplayStyle.Image
                            '    Try
                            '        If oBag.Image <> "" Then
                            '            oItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            '            oItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
                            '        End If
                            '    Catch
                            '    End Try
                            Call pSurveyDesignToolsLoadSubToolbarItem(oXmlTool, oItem.DropDownControl)
                        Case "separator", "-"
                            '    Dim oItem As ToolStripSeparator = New ToolStripSeparator
                            '    oItem.AutoSize = True
                            '    Call Parent.Add(oItem)
                            'bBeginGroup = True
                        Case "gallery"
                            Dim oItem As BarButtonItem = New BarButtonItem
                            oItem.Name = "btnItemsAdd_" & oBag.Name
                            oItem.Caption = sCaption
                            oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                            oItem.Tag = oBag
                            If ParentMenu Is Nothing Then
                                'oItemGroup.AddItem(oItem).BeginGroup = bBeginGroup
                                Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                            Else
                                ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                            End If
                            bBeginGroup = False
                            AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick

                            'Dim oItem As DevExpress.XtraBars.Ribbon.GalleryItem = New DevExpress.XtraBars.Ribbon.GalleryItem
                            'oItem.Caption = sCaption
                            'oItem.Description = sCaption
                            'oItem.Value = "btnSegmentAdd_" & oBag.Name
                            'oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            'oItem.Tag = oBag
                            'oGroup.Items.Add(oItem)
                            'AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick

                            'Dim oItem As ToolStripButton = New ToolStripButton
                            'oItem.Name = "btnSegmentAdd_" & oBag.Name
                            'oItem.AutoSize = True
                            'oItem.Text = sCaption
                            'Call Parent.Add(oItem)
                            'oItem.Tag = oBag
                            'oItem.ToolTipText = oBag.ToolTip
                            'oItem.DisplayStyle = oBag.Style
                            'Try
                            '    If oBag.Image <> "" Then
                            '        oItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            '        oItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
                            '    End If
                            'Catch
                            'End Try
                            'AddHandler oItem.Click, AddressOf btnDesignTools_Click

                            Dim sGalleryPart() As String = oBag.Gallery.Split(",")
                            Dim sGalleryName As String = sGalleryPart(0)
                            Dim sGalleryText As String = sCaption 'sGalleryPart(1)
                            Dim bGalleryGroupable As Boolean = sGalleryPart(2)
                            Call oDockClipart.AddGallery(sClipartPath, oBag, sGalleryName, sGalleryText, bGalleryGroupable)
                        Case "texteditor"
                            Dim oItem As BarButtonItem = New BarButtonItem
                            oItem.Name = "btnItemsAdd_" & oBag.Name
                            oItem.Caption = sCaption
                            oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                            oItem.Tag = oBag
                            If ParentMenu Is Nothing Then
                                'oItemGroup.AddItem(oItem).BeginGroup = bBeginGroup
                                Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                            Else
                                ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                            End If
                            bBeginGroup = False
                            AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick

                            'Dim oItem As DevExpress.XtraBars.Ribbon.GalleryItem = New DevExpress.XtraBars.Ribbon.GalleryItem
                            'oItem.Caption = sCaption
                            'oItem.Description = sCaption
                            'oItem.Value = "btnSegmentAdd_" & oBag.Name
                            'oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            'oItem.Tag = oBag
                            'oGroup.Items.Add(oItem)
                            'AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick

                            'Dim oItem As ToolStripButton = New ToolStripButton
                            'oItem.Name = "btnSegmentAdd_" & oBag.Name
                            'oItem.AutoSize = True
                            'oItem.Text = sCaption
                            'Call Parent.Add(oItem)
                            'oItem.Tag = oBag
                            'oItem.ToolTipText = oBag.ToolTip
                            'oItem.DisplayStyle = oBag.Style
                            'Try
                            '    If oBag.Image <> "" Then
                            '        oItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            '        oItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
                            '    End If
                            'Catch
                            'End Try
                            Call oDockText.AddText(oBag)
                            'AddHandler oItem.Click, AddressOf btnDesignTools_ItemClick
                        Case Else
                            'Dim oItem As DevExpress.XtraBars.Ribbon.GalleryItem = New DevExpress.XtraBars.Ribbon.GalleryItem
                            'oItem.Caption = sCaption
                            'oItem.Description = sCaption
                            'oItem.Value = "btnSegmentAdd_" & oBag.Name
                            'oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            'oItem.Tag = oBag
                            'oGroup.Items.Add(oItem)
                            'AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick

                            Dim oItem As BarButtonItem = New BarButtonItem
                            oItem.Name = "btnItemsAdd_" & oBag.Name
                            oItem.Caption = sCaption
                            oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                            oItem.Tag = oBag
                            If ParentMenu Is Nothing Then
                                'oItemGroup.AddItem(oItem).BeginGroup = bBeginGroup
                                Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                            Else
                                ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                            End If
                            bBeginGroup = False
                            AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick

                            'If IsDropDown Then
                            '    Dim oItem As ToolStripMenuItem = New ToolStripMenuItem
                            '    oItem.Name = "btnSegmentAdd_" & oBag.Name
                            '    oItem.AutoSize = True
                            '    oItem.Text = sCaption
                            '    Call Parent.Add(oItem)
                            '    oItem.Tag = oBag
                            '    oItem.ToolTipText = oBag.ToolTip
                            '    oItem.DisplayStyle = oBag.Style
                            '    Try
                            '        If oBag.Image <> "" Then
                            '            oItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            '            oItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
                            '        End If
                            '    Catch
                            '    End Try
                            '    AddHandler oItem.Click, AddressOf btnDesignTools_Click
                            'Else
                            '    Dim oItem As ToolStripButton = New ToolStripButton
                            '    oItem.Name = "btnSegmentAdd_" & oBag.Name
                            '    oItem.AutoSize = True
                            '    oItem.Text = sCaption
                            '    Call Parent.Add(oItem)
                            '    oItem.Tag = oBag
                            '    oItem.ToolTipText = oBag.ToolTip
                            '    oItem.DisplayStyle = oBag.Style
                            '    Try
                            '        If oBag.Image <> "" Then
                            '            oItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            '            oItem.ImageScaling = ToolStripItemImageScaling.SizeToFit ' ToolStripItemImageScaling.None
                            '        End If
                            '    Catch
                            '    End Try
                            '    AddHandler oItem.Click, AddressOf btnDesignTools_Click
                            'End If
                    End Select
                End If
            End If
        Next
    End Sub

    'Private Sub pSurveyDesignToolsLoadSubMenuItem(ByVal Item As XmlElement, ByVal Parent As System.Windows.Forms.ToolStripItemCollection)
    '    For Each oXmlTool As XmlElement In Item.ChildNodes
    '        If oXmlTool.Name = "tool" Then
    '            Dim oBag As cEditToolsBag = New cEditToolsBag(oXmlTool)
    '            If Not oBag.Hidden Then
    '                Dim sType As String = oBag.Type
    '                Dim sCaption As String = oBag.Caption
    '                Select Case sType
    '                    Case "dropdown"
    '                        Dim oMenuItem As ToolStripMenuItem = New ToolStripMenuItem
    '                        oMenuItem.AutoSize = True
    '                        oMenuItem.Text = sCaption
    '                        Call Parent.Add(oMenuItem)
    '                        oMenuItem.Tag = oBag
    '                        oMenuItem.ToolTipText = oBag.ToolTip
    '                        oMenuItem.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText
    '                        Try
    '                            If oBag.Image <> "" Then
    '                                oMenuItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
    '                                oMenuItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
    '                            End If
    '                        Catch
    '                        End Try
    '                        Call pSurveyDesignToolsLoadSubMenuItem(oXmlTool, oMenuItem.DropDownItems)
    '                    Case "separator", "-"
    '                        Dim oMenuItem As ToolStripSeparator = New ToolStripSeparator
    '                        oMenuItem.AutoSize = True
    '                        Call Parent.Add(oMenuItem)
    '                    Case "gallery"
    '                        Dim oMenuItem As ToolStripMenuItem = New ToolStripMenuItem
    '                        oMenuItem.AutoSize = True
    '                        oMenuItem.Text = sCaption
    '                        Call Parent.Add(oMenuItem)
    '                        oMenuItem.Tag = oBag
    '                        oMenuItem.ToolTipText = oBag.ToolTip
    '                        oMenuItem.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText
    '                        Try
    '                            If oBag.Image <> "" Then
    '                                oMenuItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
    '                                oMenuItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
    '                            End If
    '                        Catch
    '                        End Try
    '                        AddHandler oMenuItem.Click, AddressOf btnDesignTools_Click
    '                    Case "texteditor"
    '                        Dim oMenuItem As ToolStripMenuItem = New ToolStripMenuItem
    '                        oMenuItem.AutoSize = True
    '                        oMenuItem.Text = sCaption
    '                        Call Parent.Add(oMenuItem)
    '                        oMenuItem.Tag = oBag
    '                        oMenuItem.ToolTipText = oBag.ToolTip
    '                        oMenuItem.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText
    '                        Try
    '                            If oBag.Image <> "" Then
    '                                oMenuItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
    '                                oMenuItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
    '                            End If
    '                        Catch
    '                        End Try
    '                        AddHandler oMenuItem.Click, AddressOf btnDesignTools_Click
    '                    Case Else
    '                        Dim oMenuItem As ToolStripMenuItem = New ToolStripMenuItem
    '                        oMenuItem.AutoSize = True
    '                        oMenuItem.Text = sCaption
    '                        Call Parent.Add(oMenuItem)
    '                        oMenuItem.Tag = oBag
    '                        oMenuItem.ToolTipText = oBag.ToolTip
    '                        oMenuItem.DisplayStyle = ToolStripItemDisplayStyle.ImageAndText
    '                        Try
    '                            If oBag.Image <> "" Then
    '                                oMenuItem.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
    '                                oMenuItem.ImageScaling = ToolStripItemImageScaling.SizeToFit
    '                            End If
    '                        Catch
    '                        End Try
    '                        AddHandler oMenuItem.Click, AddressOf btnDesignTools_Click
    '                End Select
    '            End If
    '        End If
    '    Next
    'End Sub

    Private Sub pSurveyDesignToolsLoadSequenceToAreaItems(Parent As XmlElement)
        For Each oXmlItem As XmlElement In Parent
            If oXmlItem.Name = "tool" Then
                If oXmlItem.GetAttribute("type") = "dropdown" Then
                    Call pSurveyDesignToolsLoadSequenceToAreaItems(oXmlItem)
                Else
                    If oXmlItem.GetAttribute("type") <> "separator" Then
                        Dim bIsFreehandArea As Boolean = False
                        Try : bIsFreehandArea = oXmlItem.GetAttribute("type") = "freehandarea" : Catch : bIsFreehandArea = False : End Try
                        If bIsFreehandArea Then
                            Dim oBag As cConvertToToolsBag = New cConvertToToolsBag(oXmlItem)
                            Dim oItem As ListViewItem = New ListViewItem(oBag.Caption)
                            oItem.Name = oBag.Name
                            Dim oIcon As Icon = New Icon(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            Call oAreaFromSequence.imlGeneric.Images.Add(oBag.Image, oIcon)
                            oItem.ImageKey = oBag.Image
                            oItem.Tag = oBag
                            Call oAreaFromSequence.lvItemToCreate.Items.Add(oItem)
                            oItem.Group = oAreaFromSequence.lvItemToCreate.Groups(oBag.Layer)
                        End If
                    End If
                End If
            End If
        Next
    End Sub

    Private Sub btnConvertToItem_ItemClick(sender As Object, e As Ribbon.GalleryItemClickEventArgs)
        Call pItemConvertTo(e.Item.Tag, pGetCurrentDesignTools.CurrentItem)
    End Sub

    Private Sub pSurveyDesignToolsLoadConvertToItems(Parent As XmlElement, Group As DevExpress.XtraBars.Ribbon.GalleryItemGroup, Layer As cLayers.LayerTypeEnum)
        For Each oXmlItem As XmlElement In Parent
            If oXmlItem.Name = "tool" Then
                If oXmlItem.GetAttribute("type") = "dropdown" Then
                    Call pSurveyDesignToolsLoadConvertToItems(oXmlItem, Group, Layer)
                Else
                    Dim oBag As cEditToolsBag = New cEditToolsBag(oXmlItem)
                    If Not oBag.Hidden AndAlso oBag.Layer = Layer Then
                        Dim bConvertTo As Boolean = modXML.GetAttributeValue(oXmlItem, "convertto", "0")
                        If bConvertTo Then
                            Dim oItem As Ribbon.GalleryItem = New Ribbon.GalleryItem
                            oItem.Caption = oBag.Caption
                            oItem.Hint = oBag.Caption
                            oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            oItem.Tag = oBag
                            AddHandler oItem.ItemClick, AddressOf btnConvertToItem_ItemClick
                            Call Group.Items.Add(oItem)
                        End If
                    End If
                End If
            End If
        Next
    End Sub

    Private Function pSurveyDesignToolsFillConvertToGalleryCreateGroup(LevelButton As BarItem) As DevExpress.XtraBars.Ribbon.GalleryItemGroup
        Dim oGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = New DevExpress.XtraBars.Ribbon.GalleryItemGroup()
        oGroup.Caption = LevelButton.Caption
        oGroup.Tag = LevelButton
        mnuConvertTo.Gallery.Groups.Add(oGroup)
        Return oGroup
    End Function

    Private Sub pSurveyDesignToolsLoad()
        grpDesignItemsAdd.ClearItems

        Dim oXml As XmlDocument = New XmlDocument
        If modMain.bIsInDebug Then
            oXml.Load(Path.Combine(modMain.GetApplicationPath, "designtools_debug.xml"))
        Else
            oXml.Load(Path.Combine(modMain.GetApplicationPath, "designtools.xml"))
        End If

        'Call pSurveyCreateSequenceToArea()
        'Call pSurveyCreateBorderFromSplay()

        'For Each iLayerType As cLayers.LayerTypeEnum In [Enum].GetValues(GetType(cLayers.LayerTypeEnum))
        '    Call lvPropConvertTo.Groups.Add(iLayerType, [Enum].GetName(GetType(cLayers.LayerTypeEnum), iLayerType))
        '    'Call oAreaFromSequence.lvItemToCreate.Groups.Add(iLayerType, [Enum].GetName(GetType(cLayers.LayerTypeEnum), iLayerType))
        'Next
        Dim oXMLDesign As XmlElement = oXml.Item("design")

        Dim oBaseGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Base)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oBaseGroup, cLayers.LayerTypeEnum.Base)
        If Not oBaseGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oBaseGroup)
        Dim oSoilGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Soil)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oSoilGroup, cLayers.LayerTypeEnum.Soil)
        If Not oSoilGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oSoilGroup)
        Dim oWaterGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Water)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oWaterGroup, cLayers.LayerTypeEnum.WaterAndFloorMorphologies)
        If Not oWaterGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oWaterGroup)
        Dim oRocksGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Rocks)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oRocksGroup, cLayers.LayerTypeEnum.RocksAndConcretion)
        If Not oRocksGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oRocksGroup)
        Dim oTerrainLevelGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_TerrainLevel)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oTerrainLevelGroup, cLayers.LayerTypeEnum.CeilingMorphologies)
        If Not oTerrainLevelGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oTerrainLevelGroup)
        Dim oBordersGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Borders)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oBordersGroup, cLayers.LayerTypeEnum.Borders)
        If Not oBordersGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oBordersGroup)
        Dim oSignsGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Signs)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oSignsGroup, cLayers.LayerTypeEnum.Signs)
        If Not oSignsGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oSignsGroup)


        'Try
        '    Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"))
        '    If lvPropConvertTo.Items.Count > 0 Then
        '        lvPropConvertTo.Items(0).Selected = True
        '    End If
        '    'Call pSurveyDesignToolsLoadSequenceToAreaItems(oXMLDesign.Item("tools"))
        'Catch ex As Exception
        '    Call pLogAdd(ex)
        'End Try

        'Try
        Call pSurveyDesignToolsLoadSubToolbarItem(oXMLDesign.Item("tools"))
        'Catch ex As Exception
        'Call pLogAdd(ex)
        'End Try
        'Call pSurveyDesignToolsLoadSubMenuItem(oXMLDesign.Item("tools"), mnuDesignAdd.DropDownItems)
    End Sub

    Private Function pDesignTools_GetMethod(Layer As Object, MethodName As String, ParametersCount As Integer) As MethodInfo
        Return Layer.GetType.GetMethods.FirstOrDefault(Function(oitem) oitem.Name.ToLower = MethodName.ToLower AndAlso oitem.GetParameters.Count = ParametersCount)
    End Function

    Private Sub pDesignTools_CreateItem(ByVal Bag As cEditToolsBag, Optional ByVal UseSubtype As Boolean = False, Optional ByVal Point As PointF = Nothing, Optional ByVal Filename As String = "", Optional ByVal Text As String = "", Optional ByVal Size As cIItemSizable.SizeEnum = cIItemSizable.SizeEnum.Default, Optional ByVal FontType As cItemFont.FontTypeEnum = cItemFont.FontTypeEnum.Generic)
        Dim bCancel As Boolean = False

        Dim sType As String = ""
        If UseSubtype Then
            Select Case Bag.Type
                Case "gallery"
                    sType = Bag.Subtype
                Case "texteditor"
                    sType = "text"
            End Select
        Else
            sType = Bag.Type
        End If

        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        Dim iBindDesignType As cItem.BindDesignTypeEnum = btnMainBindDesignType.EditValue

        Dim oItem As cItem
        Select Case sType
            Case "texteditor"
                Call pTextShow(True)
                Call oDockText.txtText.Focus()
            Case "gallery"
                Call pClipartShow(True)
                oDockClipart.tabGallery.SelectedPage = oDockClipart.tabGallery.Pages.FirstOrDefault(Function(oTab) oTab.Name = "tabpage_" & Bag.Gallery.Split(",")(0))
            Case "sketch"
                If oSurvey.TrigPoints.Count > 1 Then
                    If Filename = "" Then
                        Using oOfd As OpenFileDialog = New OpenFileDialog
                            With oOfd
                                .Title = GetLocalizedString("main.openimagedialog")
                                .Filter = GetLocalizedString("main.filetypeIMAGES") & " (*.JPG;*.PNG;*.TIF;*.BMP;*.GIF)|*.JPG;*.PNG;*.TIF;*.BMP;*.GIF|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                                .FilterIndex = 1
                                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                    Filename = .FileName
                                Else
                                    bCancel = True
                                End If
                            End With
                        End Using
                    End If
                    If Not bCancel And Filename <> "" Then
                        Try
                            Using oImage As Image = New Bitmap(Filename)
                                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "image", oImage))
                                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                                Using frmSE As frmSketchEdit = New frmSketchEdit(oSurvey, oItem)
                                    If frmSE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                        Call pSurveyInvalidate()
                                        Call pGetCurrentDesignTools.SelectItem(oItem)
                                        'Call pSurveyLoadTreeLayers(oItem.Layer, oItem)
                                    Else
                                        Call oLayer.Items.Remove(oItem)
                                        Call pGetCurrentDesignTools.EndItem()
                                        Call oSurvey.Sketches.Rebind()
                                        bCancel = True
                                    End If
                                End Using
                            End Using
                        Catch
                        End Try
                    End If
                Else
                    Call MsgBox(GetLocalizedString("main.warning18"), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                End If
            Case "image"
                If Filename = "" Then
                    Using oOfd As OpenFileDialog = New OpenFileDialog
                        With oOfd
                            .Title = GetLocalizedString("main.openimagedialog")
                            .Filter = GetLocalizedString("main.filetypeIMAGES") & " (*.JPG;*.PNG;*.TIF;*.BMP;*.GIF)|*.JPG;*.PNG;*.TIF;*.BMP;*.GIF|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                            .FilterIndex = 1
                            If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                Filename = .FileName
                            Else
                                bCancel = True
                            End If
                        End With
                    End Using
                End If
                If Not bCancel And Filename <> "" Then
                    Try
                        Using oImage As Image = New Bitmap(Filename)
                            Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                            Call pGetCurrentDesignTools.SelectLayer(oLayer)
                            oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "image", oImage))
                            Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                            Using frmIE As frmImageEdit = New frmImageEdit(oSurvey, oItem)
                                If frmIE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                    Call pGetCurrentDesignTools.EditItem(oItem, True)
                                    'Call pMapInvalidate()
                                Else
                                    Call pGetCurrentDesignTools.EndItem()
                                    Call oLayer.Items.Remove(oItem)
                                    bCancel = True
                                End If
                            End Using
                        End Using
                    Catch
                    End Try
                End If

            Case "quota"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sText As String
                If Text = "" Then
                    sText = Bag.Text
                Else
                    sText = Text
                End If
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "text", sText))
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Dim oItemQuota As cItemQuota = oItem
                oItemQuota.Font.Type = FontType
                oItemQuota.TextSize = Size
                Call pGetCurrentDesignTools.EditItem(oItem, True)
            Case "text"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sText As String
                If Text = "" Then
                    sText = Bag.Text
                Else
                    sText = Text
                End If
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "text", sText))
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Dim oItemText As cItemText = oItem
                oItemText.Font.Type = FontType
                oItemText.TextSize = Size
                Call pGetCurrentDesignTools.EditItem(oItem, True)
            Case "legend"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sText As String
                If Text = "" Then
                    sText = Bag.Text
                Else
                    sText = Text
                End If
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "text", sText))
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Dim oItemLegend As cItemLegend = oItem
                oItemLegend.Font.Type = FontType
                oItemLegend.TextSize = Size
                Call pGetCurrentDesignTools.EditItem(oItem, True)
            Case "sign", "clipart", "compass"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sFilename As String
                Dim iDataFormatEnum As cIItemClipartBase.cClipartDataFormatEnum
                If Filename = "" Then
                    sFilename = Bag.Filename
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
                Else
                    sFilename = Filename
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
                End If
                If sFilename.StartsWith("file://") Then
                    sFilename = sFilename.Substring(7)
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
                ElseIf sFilename.StartsWith("id://") Then
                    sFilename = sFilename.Substring(5)
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGResource
                End If
                If sFilename <> "" Then
                    oItem = pDesignTools_GetMethod(oLayer, Bag.Method, 4).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "data", sFilename, "dataformat", iDataFormatEnum))
                    Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                    Call pGetCurrentDesignTools.EditItem(oItem, True)
                End If
            Case "profile", "crosssection"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
                Using frmSB As frmSegmentBrowser = New frmSegmentBrowser(oSurvey, oSegment)
                    If frmSB.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        oSegment = frmSB.cboSegments.SelectedItem
                        oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "segment", oSegment))
                        Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                        Call pGetCurrentDesignTools.EditItem(oItem, True)
                    End If
                End Using
            Case "attachment"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sFilename As String = ""
                Dim iDataFormatEnum As cAttachmentsLinks.cAttachmentDataFormatEnum
                If Filename = "" Then
                    sFilename = Bag.Filename
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                Else
                    sFilename = Filename
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                End If
                If sFilename = "" Then
                    Using oOFD As OpenFileDialog = New OpenFileDialog
                        If oOFD.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            sFilename = oOFD.FileName
                            iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                        End If
                    End Using
                ElseIf sFilename.StartsWith("file://") Then
                    sFilename = sFilename.Substring(7)
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                ElseIf sFilename.StartsWith("id://") Then
                    sFilename = sFilename.Substring(5)
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.Resource
                End If
                If sFilename <> "" Then
                    oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "data", sFilename, "dataformat", iDataFormatEnum))
                    Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                    Call pGetCurrentDesignTools.EditItem(oItem, True)
                End If
            Case Else
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch))
                If oItem.HaveLineType Then
                    DirectCast(oItem, cIItemLine).LineType = oSurvey.Properties.DesignProperties.GetValue("LineType", oSurvey.GetGlobalSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
                End If
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Call pGetCurrentDesignTools.EditItem(oItem, True)
        End Select

        If Not bCancel Then
            Dim sItemNamePattern As String = oSurvey.Properties.DesignProperties.GetValue("DesignItemNamePattern", "")
            If sItemNamePattern <> "" AndAlso oItem.Name = "" Then
                oItem.Name = modPaint.ReplaceItemTags(oSurvey, oItem, sItemNamePattern)
            End If
            If Not Point.IsEmpty Then
                Select Case oItem.Type
                    Case cIItem.cItemTypeEnum.Text
                        Dim oTextItem As cItemText = oItem
                        Call oTextItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oTextItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()

                    Case cIItem.cItemTypeEnum.Attachment
                        Dim oAttachmentItem As cItemAttachment = oItem
                        Call oAttachmentItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oAttachmentItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()

                    Case cIItem.cItemTypeEnum.Compass
                        'for compass bound is not needed...sign have one point (have to be center...for now left center point)...
                        Dim oCompassItem As cItemCompass = oItem
                        Call oCompassItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oCompassItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()

                    Case cIItem.cItemTypeEnum.Clipart
                        'for clipart bound is needed due to different resize approach...clipart is warped and have 4 point so move to point have to be adjusted
                        Dim oClipartItem As cItemClipart = oItem
                        Call oClipartItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Dim oBounds As RectangleF = oClipartItem.Clipart.Clipart.GetBounds
                        Call oClipartItem.MoveTo(New PointF(oCurrentCenter.X - oBounds.Size.Width / 2, oCurrentCenter.Y - oBounds.Size.Height / 2))
                        Call pGetCurrentDesignTools.EndAndSelectItem()

                    Case cIItem.cItemTypeEnum.Sign
                        'for sign bound is not needed...sign have one point (center)...
                        Dim oSignItem As cItemSign = oItem
                        Call oSignItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oSignItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()

                End Select

                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub pItemClipartCreate(ClipartItem As cItemClipart, Point As PointF)
        Dim sDesignClipartScaleFactor As Single = 1 ' oSurvey.Properties.DesignProperties.GetValue("DesignClipartScaleFactor", 1)
        Call ClipartItem.Points.BeginUpdate()
        Call ClipartItem.Points.Clear()
        Call ClipartItem.Points.AddFromPaintPoint(0, 0)
        Call ClipartItem.Points.AddFromPaintPoint(1 * sDesignClipartScaleFactor, 1 * sDesignClipartScaleFactor)
        Call ClipartItem.Points.EndUpdate()
        Call ClipartItem.FixBound(True)

        Dim oRect As RectangleF = ClipartItem.GetBounds
        Dim sWidth As Single = oRect.Width
        Dim sHeight As Single = oRect.Height

        Dim oCurrentCenter As PointF = Point
        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
        oCurrentCenter.X = oCurrentCenter.X - sWidth / 2
        oCurrentCenter.Y = oCurrentCenter.Y - sHeight / 2
        Call ClipartItem.MoveTo(oCurrentCenter)
    End Sub

    Private Sub btnDesignTools_ItemClick(sender As Object, e As ItemClickEventArgs)
        btnCursorMode.Down = True
        Dim oBag As cEditToolsBag = e.Item.Tag
        Call pDesignTools_CreateItem(oBag)
    End Sub

    'Private Sub mnuDesignItemImageResizeMode0_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageResizeMode0.Click
    '    Try
    '        Dim oItemImage As cIItemImage = pGetCurrentDesignTools.CurrentItem
    '        oItemImage.ImageResizeMode = cIItemImage.ImageResizeModeEnum.Scaled
    '        Call pMapInvalidate()
    '    Catch ex As Exception
    '    End Try
    'End Sub

    'Private Sub mnuDesignItemImageResizeMode1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageResizeMode1.Click
    '    Try
    '        With pGetCurrentDesignTools()
    '            Dim oItemImage As cIItemImage = .CurrentItem
    '            oItemImage.ImageResizeMode = cIItemImage.ImageResizeModeEnum.Stretched
    '            Call .TakeUndoSnapshot()
    '        End With
    '        Call pMapInvalidate()
    '    Catch ex As Exception
    '    End Try
    'End Sub

    'Private Sub mnuDesignItemImageRescale90_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageRescale90.Click
    '    Try
    '        With pGetCurrentDesignTools()
    '            Dim oItemImage As cIItemImage = .CurrentItem
    '            Call oItemImage.ImageRescale(0.9)
    '            Call .TakeUndoSnapshot()
    '        End With
    '        Call pMapInvalidate()
    '    Catch ex As Exception
    '    End Try
    'End Sub

    'Private Sub mnuDesignItemImageRescale50_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageRescale50.Click
    '    Try
    '        With pGetCurrentDesignTools()
    '            Dim oItemImage As cIItemImage = .CurrentItem
    '            Call oItemImage.ImageRescale(0.5)
    '            Call .TakeUndoSnapshot()
    '        End With
    '        Call pMapInvalidate()
    '    Catch ex As Exception
    '    End Try
    'End Sub

    Private Sub pItemImageEdit()
        With pGetCurrentDesignTools()
            Dim oItemImage As cIItemImage = .CurrentItem
            Using frmIE As frmImageEdit = New frmImageEdit(oSurvey, oItemImage)
                If frmIE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    Call .TakeUndoSnapshot()
                    Call pObjectPropertyLoad()
                    Call pMapInvalidate()
                End If
            End Using
        End With
    End Sub

    'Private Sub mnuDesignItemImageResizeMode_DropDownOpening(ByVal sender As Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageResizeMode.DropDownOpening
    '    Try
    '        Dim oItemImage As cIItemImage = pGetCurrentDesignTools.CurrentItem
    '        mnuDesignItemImageResizeMode0.Checked = (oItemImage.ImageResizeMode = cIItemImage.ImageResizeModeEnum.Scaled)
    '        mnuDesignItemImageResizeMode1.Checked = (oItemImage.ImageResizeMode = cIItemImage.ImageResizeModeEnum.Stretched)
    '    Catch ex As Exception
    '    End Try
    'End Sub

    'Private Sub mnuDesignItemLock_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemLock.Click
    '    mnuDesignItemLock.Checked = Not mnuDesignItemLock.Checked
    '    Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
    '    oItem.Locked = mnuDesignItemLock.Checked
    '    frmMFT.btnPenLock.Checked = oItem.Locked
    '    chkPropLock.Checked = oItem.Locked
    '    'Call pObjectPropertyLoad()
    '    Call pMapInvalidate()
    'End Sub

    Private Sub mnuDesignItem_Opening(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles mnuDesignItemOLD.Opening
        Try
            Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
            If oItem.Type = cIItem.cItemTypeEnum.Segment Then
                Dim oItemSegment As cItemSegment = oItem
                'If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                '    mnuDesignItemSegmentInvert.Visible = False
                'Else
                '    mnuDesignItemSegmentInvert.Enabled = Not oItemSegment.Segment.IsProfileBinded AndAlso oItemSegment.Segment.Direction <> cSurvey.cSurvey.DirectionEnum.Vertical
                'End If
                mnuDesignItemSegmentSplay.Visible = True


                'mnuDesignItemImage.Visible = False
                'mnuDesignItemSketch.Visible = False
                mnuDesignItemBar0.Visible = True

                'mnuDesignItemCut.Visible = False
                'mnuDesignItemCopy.Visible = False
                'mnuDesignItempaste.Visible = False
                'mnuDesignItemDelete.Visible = False

                mnuDesignItemChangeTo.Visible = False
                'mnuDesignItemRotate.Visible = False

            Else
                'mnuDesignItemSegmentInvert.Visible = False
                mnuDesignItemSegmentSplay.Visible = False
                'mnuDesignItemSegmentSetCoordinate.Visible = False
                'mnuDesignItemSegmentSetCoordinateCP.Visible = False

                'mnuDesignItemImage.Visible = oItem.HaveImage
                'mnuDesignItemSketch.Visible = oItem.HaveSketch

                'Dim bItemItems As Boolean
                'If oItem.Type = cIItem.cItemTypeEnum.Items Then
                '    Dim oItemItems As cItemItems = oItem
                '    Dim bCombined As Boolean = True
                '    For Each oSubItem As cItem In oItemItems
                '        bCombined = bCombined And oSubItem.CanBeCombined
                '    Next
                '    btnCurrentItemItemsCombine.Visible = bCombined
                '    bItemItems = bCombined
                '    grpCurrentItemItems.Visible = bItemItems
                'Else
                '    grpCurrentItemItems.Visible = False
                '    bItemItems = False
                'End If

                'mnuDesignItemCut.Visible = True
                'mnuDesignItemCopy.Visible = True
                'mnuDesignItempaste.Visible = False
                'mnuDesignItemDelete.Visible = True

                'Dim bCanBeRaised As Boolean = pGetCurrentDesignTools.CurrentLayer.Items.Contains(oItem)
                'mnuDesignItemBringAhead.Visible = bCanBeRaised
                'mnuDesignItemBringOnTop.Visible = bCanBeRaised
                'mnuDesignItemSendToBottom.Visible = bCanBeRaised
                'mnuDesignItemSendBehind.Visible = bCanBeRaised
                'mnuDesignItemBar3.Visible = bCanBeRaised

                'mnuDesignItemRotate.Visible = oItem.CanBeRotated
                mnuDesignItemChangeTo.Visible = pGetCurrentDesignTools.CurrentItem.HaveEditablePoints   'pGetCurrentDesignTools.CurrentLayer.Type = cLayers.LayerTypeEnum.Borders

            End If
        Catch
        End Try
        'Call pMapInfoMenu(mnuDesignItemOLD.Location, mnuDesignItemInfo)
    End Sub

    'Private Sub mnuDesignItemImageRealSizeImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageRealSizeImage.Click
    '    Call pItemImageRealSize(1)
    'End Sub

    'Private Sub mnuDesignItemImageRealSize100_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageRealSize100.Click
    '    Call pItemImageRealSize(100)
    'End Sub

    'Private Sub mnuDesignItemImageRealSize250_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageRealSize250.Click
    '    Call pItemImageRealSize(250)
    'End Sub

    'Private Sub mnuDesignItemImageRealSize500_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemImageRealSize500.Click
    '    Call pItemImageRealSize(500)
    'End Sub

    Private Sub pItemImageRealSize(ByVal Scale As Integer)
        Try
            With pGetCurrentDesignTools()
                Dim oItemImage As cItemImage = .CurrentItem
                Dim oSize As SizeF = oItemImage.ImageSize
                Dim oRes As PointF = oItemImage.ImageResolution
                oSize.Width = (oSize.Width / oRes.X) * 0.0254F * Scale
                oSize.Height = (oSize.Height / oRes.Y) * 0.0254F * Scale
                Call oItemImage.ResizeTo(oSize)
                Call .TakeUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Public Sub pObjectPropertyInitialize()
        Call cboPropPenPattern.Items.Clear()
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.None)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.CavePen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedCavePen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.TooNarrowCavePen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.UnderlyingCavePen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.Pen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.CliffUpPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedCliffUpPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.CliffDownPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedCliffDownPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.GradientUpPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedGradientUpPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.GradientDownPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedGradientDownPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.GenericPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedGenericPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.TightPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedTightPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.OverhangUpPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedOverhangUpPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.OverhangDownPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedOverhangDownPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.MeanderPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedMeanderPen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.IcePen)
        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.PresumedIcePen)

        Call cboPropPenPattern.Items.Add(oSurvey.EditPaintObjects.GenericPens.FromCustom(Color.Black, GetLocalizedString("main.textpart41"), 1, cPen.PenStylesEnum.Solid))
        For Each oItem As cPen In cboPropPenPattern.Items
            oItem.LocalLineWidth = 0.05
            oItem.LocalZoomFactor = 1
        Next

        Call cboPropBrushPattern.Items.Clear()
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.None)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.Solid)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.Sand)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.Pebbles)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.Flow)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.Water)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.NotStandardWater)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.SignSolid)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.SmallDebrits)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.BigDebrits)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.SnowOrIce)
        Call cboPropBrushPattern.Items.Add(oSurvey.EditPaintObjects.GenericBrushes.FromCustom(Color.Black, GetLocalizedString("main.textpart41"), cBrush.HatchTypeEnum.None))
        For Each oItem As cBrush In cboPropBrushPattern.Items
            oItem.LocalLineWidth = 0.05
            oItem.LocalZoomFactor = 2
        Next

        Call cboPropTextStyle.Items.Clear()
        Call cboPropTextStyle.Items.Add(oSurvey.EditPaintObjects.GenericFonts.Generic)
        Call cboPropTextStyle.Items.Add(oSurvey.EditPaintObjects.GenericFonts.Title)
        Call cboPropTextStyle.Items.Add(oSurvey.EditPaintObjects.GenericFonts.CaveName)
        Call cboPropTextStyle.Items.Add(oSurvey.EditPaintObjects.GenericFonts.CaveComplexName)
        Call cboPropTextStyle.Items.Add(oSurvey.EditPaintObjects.GenericFonts.TrigPoint)
        Call cboPropTextStyle.Items.Add(oSurvey.EditPaintObjects.GenericFonts.Note)
        'Dim oDefaultTextFont As cIFont = oSurvey.Properties.DesignProperties.GetValue("DesignTextFont", New cFont(oSurvey, "Tahoma", 8, Color.Black))
        Call cboPropTextStyle.Items.Add(oSurvey.EditPaintObjects.GenericFonts.FromCustom("", 0, Color.Black, False, False, False))
        'For Each oItem As cItemFont In cboPropTextStyle.Items
        '    'oItem.LocalLineWidth = 0.05
        '    'oItem.LocalZoomFactor = 1
        'Next

        Call cboPropTextFontChar.Items.Clear()
        Dim oFonts As System.Drawing.Text.InstalledFontCollection = New System.Drawing.Text.InstalledFontCollection
        Call cboPropTextFontChar.Items.Add(GetLocalizedString("main.textpart40"))
        For Each oFontFamily As FontFamily In oFonts.Families
            Call cboPropTextFontChar.Items.Add(oFontFamily.Name)
        Next

        Call cboPropSign.Items.Clear()
        For Each iValue As Items.cIItemSign.SignEnum In System.Enum.GetValues(GetType(Items.cIItemSign.SignEnum))
            Call cboPropSign.Items.Add(GetLocalizedString("main.sign" & iValue.ToString("D")))
        Next

        'Call pPenToolbarFill()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub cboSessionList_DrawItem(ByVal sender As Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles cboSessionList.DrawItem
        Try
            If e.Index >= 0 Then
                Dim oGr As Graphics = e.Graphics
                'oGr.SmoothingMode = SmoothingMode.AntiAlias
                'oGr.CompositingQuality = CompositingQuality.HighQuality
                'oGr.InterpolationMode = InterpolationMode.HighQualityBicubic
                'oGr.TextRenderingHint = Drawing.Text.TextRenderingHint.ClearTypeGridFit

                Dim oSession As cSession = cboSessionList.Items(e.Index)
                Dim bSelected As Boolean = (e.State And DrawItemState.Selected) = DrawItemState.Selected
                Dim oRect As Rectangle = e.Bounds
                If bSelected Then
                    Call oGr.FillRectangle(SystemBrushes.Highlight, oRect)
                Else
                    Call oGr.FillRectangle(SystemBrushes.Window, oRect)
                End If

                Using oSF As StringFormat = New StringFormat
                    oSF.LineAlignment = StringAlignment.Center
                    oSF.Trimming = StringTrimming.EllipsisCharacter
                    If bSelected Then
                        Call oGr.DrawString(If(oSession.Date.ToOADate = 0, "", oSession.Date) & vbCrLf & oSession.Description, cboSessionList.Font, SystemBrushes.HighlightText, oRect, oSF)
                    Else
                        Call oGr.DrawString(If(oSession.Date.ToOADate = 0, "", oSession.Date) & vbCrLf & oSession.Description, cboSessionList.Font, SystemBrushes.WindowText, oRect, oSF)
                    End If
                End Using
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropBrushPattern_DrawItem(ByVal sender As Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles cboPropBrushPattern.DrawItem
        Try
            Dim oGr As Graphics = e.Graphics
            oGr.CompositingQuality = CompositingQuality.HighQuality
            oGr.InterpolationMode = InterpolationMode.HighQualityBicubic
            oGr.SmoothingMode = SmoothingMode.AntiAlias
            oGr.TextRenderingHint = Drawing.Text.TextRenderingHint.ClearTypeGridFit
            Dim bSelected As Boolean = (e.State And DrawItemState.Selected) = DrawItemState.Selected
            If bSelected Then
                Call oGr.FillRectangle(SystemBrushes.Highlight, e.Bounds)
            Else
                Call oGr.FillRectangle(SystemBrushes.Window, e.Bounds)
            End If
            Dim sZoom As Single = 0.1
            Using oBrush As cBrush = cboPropBrushPattern.Items(e.Index)
                Using oBrushImage As Image = oBrush.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, e.Bounds.Height - 4, e.Bounds.Height - 4)
                    Call oGr.DrawImageUnscaled(oBrushImage, e.Bounds.Left + 2, e.Bounds.Top + 2)
                    Using oBorderPen As Pen = New Pen(Brushes.DarkGray)
                        Call oGr.DrawRectangle(oBorderPen, e.Bounds.Left + 2, e.Bounds.Top + 2, e.Bounds.Height - 4, e.Bounds.Height - 4)
                    End Using
                    Dim oLabelRect As RectangleF = New RectangleF(e.Bounds.Left + e.Bounds.Height + 2, e.Bounds.Top, e.Bounds.Right - (e.Bounds.Left + e.Bounds.Height + 2), e.Bounds.Height)
                    Using oSF As StringFormat = New StringFormat
                        oSF.LineAlignment = StringAlignment.Center
                        oSF.Trimming = StringTrimming.EllipsisCharacter
                        If bSelected Then
                            Call oGr.DrawString(oBrush.Name, cboPropBrushPattern.Font, SystemBrushes.HighlightText, oLabelRect, oSF)
                        Else
                            Call oGr.DrawString(oBrush.Name, cboPropBrushPattern.Font, SystemBrushes.WindowText, oLabelRect, oSF)
                        End If
                    End Using
                End Using
            End Using
        Catch
        End Try
    End Sub

    'Private Sub pPenToolbarFill()
    '    Dim iPenIndex As Integer = 1
    '    Dim iWidth As Integer = 32
    '    Dim iHeight As Integer = 32

    '    Dim oGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = btnPenStyles.Gallery.Groups(0)

    '    For Each oComboPen As cPen In cboPropPenPattern.Items
    '        Try
    '            If oComboPen.Type <> cPen.PenTypeEnum.Custom Then
    '                Dim oImage As Image = New Bitmap(iWidth, iHeight)
    '                Dim oBounds As RectangleF = New RectangleF(0, 0, iWidth, iHeight)
    '                Using oGr As Graphics = Graphics.FromImage(oImage)
    '                    oGr.CompositingQuality = CompositingQuality.HighQuality
    '                    oGr.InterpolationMode = InterpolationMode.HighQualityBicubic
    '                    oGr.SmoothingMode = SmoothingMode.AntiAlias

    '                    Using oPen As cPen = oSurvey.EditPaintObjects.GenericPens.FromType(oComboPen.Type)
    '                        Using oDesignPen As cPen = New cPen(oSurvey)
    '                            oDesignPen.CopyFrom(oPen)
    '                            oDesignPen.DecorationScale = 20
    '                            oDesignPen.Width = oCurrentOptions.GetPenDefaultWidth(oPen.Type) * 5
    '                            Select Case oPen.DecorationStyle
    '                                Case cPen.DecorationStylesEnum.Dash
    '                                    oDesignPen.DecorationSpacePercentage = oDesignPen.DecorationSpacePercentage * oDesignPen.DecorationScale
    '                            End Select
    '                            Dim oPenImage As Image = oDesignPen.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, oBounds.Height - 2, oBounds.Height - 2)
    '                            Call oGr.DrawImageUnscaled(oPenImage, 1, 1)

    '                            Call oGr.DrawLine(Pens.LightGray, 1, 0, iWidth - 2, 0)
    '                            Call oGr.DrawLine(Pens.LightGray, 0, 1, 0, iHeight - 2)
    '                            Call oGr.DrawLine(Pens.LightGray, 1, iHeight - 1, iWidth - 2, iHeight - 1)
    '                            Call oGr.DrawLine(Pens.LightGray, iWidth - 1, 1, iWidth - 1, iHeight - 2)

    '                            Dim oItem As DevExpress.XtraBars.Ribbon.GalleryItem = New DevExpress.XtraBars.Ribbon.GalleryItem
    '                            oItem.Caption = oPen.Name
    '                            oItem.ImageOptions.Image = oImage
    '                            oItem.Tag = oComboPen.Type
    '                            oGroup.Items.Add(oItem)
    '                            AddHandler oItem.ItemClick, AddressOf oPensItem_ItemClick

    '                            'Dim oItem As ToolStripItem = New ToolStripButton
    '                            'oItem.Name = "btnPens_" & oPen.Type.ToString("D")
    '                            'Call tbPens.Items.RemoveByKey(oItem.Name)
    '                            'oItem.Image = oImage
    '                            'oItem.ToolTipText = oPen.Name
    '                            'oItem.DisplayStyle = ToolStripItemDisplayStyle.Image
    '                            'oItem.Tag = oComboPen.Type
    '                            'Call tbPens.Items.Insert(iPenIndex, oItem)
    '                            'AddHandler oItem.Click, AddressOf oPensItem_Click
    '                        End Using
    '                    End Using
    '                End Using
    '            End If
    '        Catch
    '        End Try
    '        iPenIndex += 1
    '    Next

    '    'scelgo 0.05 come smooting predefinito...
    '    'cboPensSmooting.SelectedIndex = 4
    'End Sub

    'Private Sub oPensItem_ItemClick(sender As Object, e As DevExpress.XtraBars.Ribbon.GalleryItemClickEventArgs)
    '    Try
    '        If Not bDisabledObjectPropertyEvent Then
    '            With pGetCurrentDesignTools()
    '                If optPropObjectSequence.Checked Then
    '                    Call pObjectSetSequencePen()
    '                    .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.Type = e.Item.Tag
    '                Else
    '                    .CurrentItem.Pen.Type = e.Item.Tag
    '                End If
    '                Call .TakeUndoSnapshot()
    '            End With
    '            Call pObjectPropertyLoad()
    '            Call pMapInvalidate()
    '        End If
    '    Catch
    '    End Try
    'End Sub

    Private Sub cboPropPenPattern_DrawItem(ByVal sender As Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles cboPropPenPattern.DrawItem
        Try
            Dim oGr As Graphics = e.Graphics
            oGr.CompositingQuality = CompositingQuality.HighQuality
            oGr.InterpolationMode = InterpolationMode.HighQualityBicubic
            oGr.SmoothingMode = SmoothingMode.AntiAlias
            oGr.TextRenderingHint = Drawing.Text.TextRenderingHint.ClearTypeGridFit
            Dim bSelected As Boolean = (e.State And DrawItemState.Selected) = DrawItemState.Selected
            Dim oBounds As RectangleF = e.Bounds
            If bSelected Then
                Call oGr.FillRectangle(SystemBrushes.Highlight, oBounds)
                Call oGr.DrawRectangle(SystemPens.Highlight, oBounds.Left, oBounds.Top, oBounds.Width, oBounds.Height)
            Else
                Call oGr.FillRectangle(SystemBrushes.Window, oBounds)
                Call oGr.DrawRectangle(SystemPens.Window, oBounds.Left, oBounds.Top, oBounds.Width, oBounds.Height)
            End If
            Using oPen As cPen = cboPropPenPattern.Items(e.Index)
                Using oDesignPen As cPen = New cPen(oSurvey)
                    oDesignPen.CopyFrom(oPen)
                    oDesignPen.DecorationScale = 40
                    oDesignPen.Width = oCurrentOptions.GetPenDefaultWidth(oPen.Type) * 5
                    Select Case oPen.DecorationStyle
                        Case cPen.DecorationStylesEnum.Dash
                            oDesignPen.DecorationSpacePercentage = oDesignPen.DecorationSpacePercentage * oDesignPen.DecorationScale
                    End Select

                    Using oPenImage As Image = oDesignPen.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, e.Bounds.Height - 4, e.Bounds.Height - 4)
                        Call oGr.DrawImageUnscaled(oPenImage, e.Bounds.Left + 2, e.Bounds.Top + 2)
                        Using oBorderPen As Pen = New Pen(Brushes.DarkGray)
                            Call oGr.DrawRectangle(oBorderPen, e.Bounds.Left + 2, e.Bounds.Top + 2, e.Bounds.Height - 4, e.Bounds.Height - 4)
                        End Using

                        Dim oLabelRect As RectangleF = New RectangleF(e.Bounds.Left + e.Bounds.Height + 2, e.Bounds.Top, e.Bounds.Right - (e.Bounds.Left + e.Bounds.Height + 2), e.Bounds.Height)

                        Using oSF As StringFormat = New StringFormat
                            oSF.LineAlignment = StringAlignment.Center
                            oSF.Trimming = StringTrimming.EllipsisCharacter
                            If bSelected Then
                                Call oGr.DrawString(oPen.Name, cboPropPenPattern.Font, SystemBrushes.HighlightText, oLabelRect, oSF)
                            Else
                                Call oGr.DrawString(oPen.Name, cboPropPenPattern.Font, SystemBrushes.WindowText, oLabelRect, oSF)
                            End If
                        End Using
                    End Using
                End Using
            End Using
        Catch
        End Try
    End Sub

    Private Sub cboPropPenPattern_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropPenPattern.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()

                    If optPropObjectSequence.Checked Then
                        Call pObjectSetSequencePen()
                        .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.Type = cboPropPenPattern.SelectedItem.type
                    Else
                        .CurrentItem.Pen.Type = cboPropPenPattern.SelectedItem.type
                    End If
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub pObjectSetSequencePen()
        With pGetCurrentDesignTools()
            With .CurrentItem.Points.GetSequence(.CurrentItemPoint).First
                If .Pen Is Nothing Then
                    .Pen = New cPen(oSurvey)
                    .Pen.CopyFrom(pGetCurrentDesignTools.CurrentItem.Pen)
                End If
            End With
            Call .TakeUndoSnapshot()
        End With
    End Sub

    Private Sub cboPropPenStyle_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPropPenStyle.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If optPropObjectSequence.Checked Then
                    Call pObjectSetSequencePen()
                    .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.Style = cboPropPenStyle.SelectedIndex
                Else
                    .CurrentItem.Pen.Style = cboPropPenStyle.SelectedIndex
                End If
                Call .TakeUndoSnapshot()
            End With
            'todo: manage custom pen
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropPenDecoration_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPropPenDecoration.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()

                    If optPropObjectSequence.Checked Then
                        Call pObjectSetSequencePen()
                        .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.DecorationStyle = cboPropPenDecoration.SelectedIndex
                    Else
                        '.CurrentItem.Pen.DecorationStyle = if(cboPropPenDecoration.SelectedIndex = cboPropPenDecoration.Items.Count - 1, 99, cboPropPenDecoration.SelectedIndex)
                        .CurrentItem.Pen.DecorationStyle = cboPropPenDecoration.SelectedIndex
                    End If
                    Call .TakeUndoSnapshot()
                End With

                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropPenDecorationAlignment_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPropPenDecorationAlignment.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    If optPropObjectSequence.Checked Then
                        Call pObjectSetSequencePen()
                        .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.DecorationAlignment = cboPropPenDecorationAlignment.SelectedIndex
                    Else
                        .CurrentItem.Pen.DecorationAlignment = cboPropPenDecorationAlignment.SelectedIndex
                    End If
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub txtPropPenWidth_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPropPenWidth.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            Try
                With pGetCurrentDesignTools()

                    If optPropObjectSequence.Checked Then
                        Call pObjectSetSequencePen()
                        .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.Width = txtPropPenWidth.Value
                    Else
                        .CurrentItem.Pen.Width = txtPropPenWidth.Value
                    End If
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Catch
            End Try
        End If
    End Sub

    Private Sub txtPropPenDecorationSpacePercentage_ValueChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPropPenDecorationSpacePercentage.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            Try
                With pGetCurrentDesignTools()

                    If optPropObjectSequence.Checked Then
                        Call pObjectSetSequencePen()
                        .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.DecorationSpacePercentage = txtPropPenDecorationSpacePercentage.Value
                    Else
                        .CurrentItem.Pen.DecorationSpacePercentage = txtPropPenDecorationSpacePercentage.Value
                    End If
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Catch
            End Try
        End If
    End Sub

    Private Sub cmdPropPenColorBrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropPenColorBrowse.Click
        Using oCD As ColorDialog = New ColorDialog
            With oCD
                .FullOpen = True
                .AnyColor = True
                .Color = picPropPenColor.BackColor
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    picPropPenColor.BackColor = .Color
                    Try
                        With pGetCurrentDesignTools()

                            If optPropObjectSequence.Checked Then
                                Call pObjectSetSequencePen()
                                .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.Color = picPropPenColor.BackColor
                            Else
                                .CurrentItem.Pen.Color = picPropPenColor.BackColor
                            End If
                            Call .TakeUndoSnapshot()
                        End With
                        Call pObjectPropertyLoad()
                        Call pMapInvalidate()
                    Catch
                    End Try
                End If
            End With
        End Using
    End Sub

    Private Sub cmdPropbrushColorBrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropBrushColor.Click
        Using oCD As ColorDialog = New ColorDialog
            With oCD
                .FullOpen = True
                .AnyColor = True
                .Color = picPropBrushColor.BackColor
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    picPropBrushColor.BackColor = .Color
                    Try
                        With pGetCurrentDesignTools()
                            .CurrentItem.Brush.Color = picPropBrushColor.BackColor
                            Call .TakeUndoSnapshot()
                        End With
                        Call pObjectPropertyLoad()
                        Call pMapInvalidate()
                    Catch
                    End Try
                End If
            End With
        End Using
    End Sub

    Private Sub cboPropBrushPattern_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropBrushPattern.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            Try
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.Type = cboPropBrushPattern.SelectedItem.type
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Catch
            End Try
        End If
    End Sub

    Private Sub cboPropBrushHatch_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropBrushHatch.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            Try
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.HatchType = cboPropBrushHatch.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Catch
            End Try
        End If
    End Sub

    Private Sub pSequenceClose()
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.CloseSequence(oPoint)
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub cmdPropImageBrowse_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropImageBrowse.Click
        With pGetCurrentDesignTools()
            Dim oItemImage As cIItemImage = .CurrentItem
            Using frmIE As frmImageEdit = New frmImageEdit(oSurvey, oItemImage)
                If frmIE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    Call .TakeUndoSnapshot()
                    'todo: refresh preview
                    Call pObjectPropertyLoad()
                    Call pMapInvalidate()
                End If
            End Using
        End With
    End Sub

    Private Sub cboPropImageResizeMode_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropImageResizeMode.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItemImage As cIItemImage = .CurrentItem
                oItemImage.ImageResizeMode = cboPropImageResizeMode.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'todo: refresh preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropImageScale100_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropImageScale100.Click
        Call pItemImageRealSize(100)
    End Sub

    Private Sub cmdPropImageScale250_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropImageScale250.Click
        Call pItemImageRealSize(250)
    End Sub

    Private Sub cmdPropImageScale500_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropImageScale500.Click
        Call pItemImageRealSize(500)
    End Sub

    Private Sub txtPropImageScaleFree_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPropImageScaleFree.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            Try
                Call pItemImageRealSize(txtPropImageScaleFree.Value)
            Catch
            End Try
        End If
    End Sub

    'Private Sub mnuDesignItemCut_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemCut.Click
    '    Call pClipboardCut()
    'End Sub

    'Private Sub mnuDesignItemCopy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemCopy.Click
    '    Call pClipboardCopy()
    'End Sub

    'Private Sub mnuDesignNonePaste_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignNonePaste.Click
    '    Call pClipboardPaste("", modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
    'End Sub

    Private Sub pItemRotateBy(Angle As Single, CenteredOnOrigin As Boolean)
        With pGetCurrentDesignTools()
            If .CurrentItem Is Nothing Then
                Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                Dim oCenter As PointF
                If CenteredOnOrigin Then
                    oCenter = New PointF(0, 0)
                Else
                    oCenter = New PointF(oRect.Left + oRect.Width / 2, oRect.Top + oRect.Height / 2)
                End If
                Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oItem.AddRange(oCurrentDesign.GetAllItems)
                If oItem.Count > 0 Then
                    Call oItem.RotateAt(oCenter, Angle)
                End If
            Else
                If CenteredOnOrigin Then
                    Call .CurrentItem.RotateAt(New PointF(0, 0), Angle)
                Else
                    Call .CurrentItem.Rotate(Angle)
                End If
            End If
            Call pPropertyItemBounds()
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pObjectFlipV()
        With pGetCurrentDesignTools()
            If .CurrentItem Is Nothing Then
                Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oItem.AddRange(oCurrentDesign.GetAllItems)
                If oItem.Count > 0 Then
                    oItem.ResizeBy(-1, 1)
                End If
            Else
                Call .CurrentItem.ResizeBy(1, -1)
            End If
            Call pPropertyItemBounds()
            Call .TakeUndoSnapshot()
        End With
        pGetCurrentDesignTools.LastCenterPoint = New PointF(0, 0)
        Call pMapInvalidate()
    End Sub

    Private Sub pObjectFlipH()
        With pGetCurrentDesignTools()
            If .CurrentItem Is Nothing Then
                Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oItem.AddRange(oCurrentDesign.GetAllItems)
                If oItem.Count > 0 Then
                    oItem.ResizeBy(-1, 1)
                End If
            Else
                Call .CurrentItem.ResizeBy(-1, 1)
            End If
            Call pPropertyItemBounds()
            Call .TakeUndoSnapshot()
        End With
        pGetCurrentDesignTools.LastCenterPoint = New PointF(0, 0)
        Call pMapInvalidate()
    End Sub

    Private Function pTrigpointAddDetailInfo(ByVal Name As String, ByVal Value As String, Optional Color As Object = Nothing) As ListViewItem
        Dim oItem As ListViewItem = lvTrigpointInfo.Items.Add(Name)
        Call oItem.SubItems.Add(Value)
        oItem.ToolTipText = Value
        If Not Color Is Nothing Then
            oItem.ForeColor = Color
        End If
        Return oItem
    End Function

    Private Function pSegmentAddDetailInfo(ByVal Name As String, ByVal Value As String, Optional Color As Object = Nothing) As ListViewItem
        Dim oItem As ListViewItem = lvSegmentInfo.Items.Add(Name)
        Call oItem.SubItems.Add(Value)
        oItem.ToolTipText = Value
        If Not Color Is Nothing Then
            oItem.ForeColor = Color
        End If
        Return oItem
    End Function

    Private Sub pUndoRefresh()
        Dim bIsUndoable As Boolean = pGetCurrentTools.Undo.IsUndoable
        btnUndo.Enabled = bIsUndoable
    End Sub

    Private Sub pFrozeDesktopImage()
        If Not IsNothing(oFrozenDesktop) Then
            Call oFrozenDesktop.Dispose()
            oFrozenDesktop = Nothing
        End If
        Dim oTempFrozenDesktop As Image = New Bitmap(picMap.Width, picMap.Height)
        Call pSurveyDraw(Graphics.FromImage(oTempFrozenDesktop), True)
        oFrozenDesktop = oTempFrozenDesktop
    End Sub

    Private Sub oPlanTools_OnFilterApplied(Sender As Object, ToolEventArgs As cEditDesignTools.cFilterEventArgs) Handles oPlanTools.OnFilterApplied
        Call pSurveyLayersFilterApply(True, ToolEventArgs.Refresh)
    End Sub

    Private Sub oProfileTools_OnFilterApplied(Sender As Object, ToolEventArgs As cEditDesignTools.cFilterEventArgs) Handles oProfileTools.OnFilterApplied
        Call pSurveyLayersFilterApply(True, ToolEventArgs.Refresh)
    End Sub

    Private Sub oPlanTools_OnItemDelete(Sender As Object, ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemDelete, oProfileTools.OnItemDelete
        'If ToolEventArgs.CurrentItem.Deleted Then
        '    Call tvLayers2.RemoveObject(ToolEventArgs.CurrentItem)
        'End If
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub oPlanTools_OnItemPointDelete(Sender As Object, ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemPointDelete, oProfileTools.OnItemPointDelete
        Call pMapInvalidate()
    End Sub

    Private Sub oPlanTools_OnItemEdit(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemEdit, oProfileTools.OnItemEdit
        picMap.Cursor = Cursors.Cross
        Call pFrozeDesktopImage()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oPlanTools_OnItemPointEdit(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemPointEdit, oProfileTools.OnItemPointEdit
        picMap.Cursor = Cursors.Cross
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oPlanTools_OnItemEnd(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemEnd, oProfileTools.OnItemEnd
        Dim bValidItem As Boolean = Not ToolEventArgs.CurrentItem Is Nothing
        If Not oFrozenDesktop Is Nothing Then
            If bValidItem Then
                If ToolEventArgs.IsNewItem Then
                    Dim oItem As cItem = ToolEventArgs.CurrentItem
                    If oItem.CanBeReduced Then
                        If btnPenSmooting.Checked Then
                            Dim oLineItem As Items.cIItemLine = oItem
                            Call oLineItem.ReducePoints(btnPenSmootingFactor.EditValue)
                        End If
                        Dim iDefaultLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", oSurvey.GetGlobalSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
                        If iDefaultLineType = cIItemLine.LineTypeEnum.Beziers Then
                            'converto le sequenze in bezier
                            Call pSequencesTo(cIItemLine.LineTypeEnum.Beziers, True, False)
                        End If
                    End If
                End If
            End If
        End If
        oFrozenDesktop = Nothing

        If bValidItem Then
            With ToolEventArgs.CurrentItem
                If .Points.Count = 0 AndAlso .Type <> cIItem.cItemTypeEnum.Group AndAlso .Type <> cIItem.cItemTypeEnum.Items AndAlso .Type <> cIItem.cItemTypeEnum.Sketch AndAlso .Type <> cIItem.cItemTypeEnum.CrossSectionMarker AndAlso .Type <> cIItem.cItemTypeEnum.Trigpoint AndAlso .Type <> cIItem.cItemTypeEnum.Segment Then
                    Call .Layer.Items.Remove(ToolEventArgs.CurrentItem)
                    'Call oSurvey.Undo.Cancel()
                    Call pGetCurrentDesignTools.Reset()
                Else
                    Call .Invalidate(oCurrentOptions)
                    'Call .BindSegments()
                    'If ToolEventArgs.IsNewItem Then
                    '    Call pSurveyLoadTreeLayers(.Layer, ToolEventArgs.CurrentItem)
                    'End If
                End If
            End With
        End If

        Sender.LastAngle = 0
        Sender.LastAnchor = AnchorRectangleTypeEnum.None
        picMap.Cursor = Cursors.Default
        'tbPen.Visible = False
        Call pFloatingToolbarHide()

        'frmMFT.btnPenEndEdit.Enabled = False
        btnItemsEndEdit.Enabled = False

        Call pUndoRefresh()
        If ToolEventArgs.IsNewItem Then
            Call pObjectPropertyLoad()
        End If
        Call pMapInvalidate()

        Call pClipboardAlign()
    End Sub

    Private Sub oPlanTools_OnItemCombine(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemCombine, oProfileTools.OnItemCombine
        Call pMapInvalidate()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oPlanTools_OnRefreshDesign(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnRefreshDesign, oProfileTools.OnRefreshDesign
        Call pMapInvalidate()
        Call pClipboardAlign()
    End Sub

    Private Sub oPlanTools_OnItemSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemSelect, oProfileTools.OnItemSelect
        Dim bThereIsAnItemSelected As Boolean = Not pGetCurrentDesignTools.CurrentItem Is Nothing
        btnZoomZoomToSelection.Enabled = bThereIsAnItemSelected
        btnItemsLayouts.Enabled = bThereIsAnItemSelected

        Call pMapInvalidate()
        Call pObjectPropertyDelayedLoad()
        Call pClipboardAlign()
    End Sub

    Private Sub oPlanTools_OnLayerSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnLayerSelect, oProfileTools.OnLayerSelect
        Select Case ToolEventArgs.CurrentLayer.Type
            Case cLayers.LayerTypeEnum.Base
                If Not btnLayer_Base.Checked Then
                    btnLayer_Base.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Borders
                If Not btnLayer_Borders.Checked Then
                    btnLayer_Borders.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.RocksAndConcretion
                If Not btnLayer_Rocks.Checked Then
                    btnLayer_Rocks.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Signs
                If Not btnLayer_Signs.Checked Then
                    btnLayer_Signs.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Soil
                If Not btnLayer_Soil.Checked Then
                    btnLayer_Soil.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.CeilingMorphologies
                If Not btnLayer_TerrainLevel.Checked Then
                    btnLayer_TerrainLevel.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                If Not btnLayer_Water.Checked Then
                    btnLayer_Water.PerformClick()
                End If
        End Select

        Call pObjectPropertyLoad()

        'forzo la pulizia del garbage...pare che nei sistemi a 32 giovi a prevenire errori 'misteriosi' dovuti all'eccessivo uso di risorse grafiche
        If modMain.Is32Bit Then Call GC.Collect()
    End Sub

    Private Sub oPlanTools_OnItemPointEnd(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oPlanTools.OnItemPointEnd, oProfileTools.OnItemPointEnd
        Call pUndoRefresh()
        Call pMapInvalidate()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub pTrigpointItemSelect()
        If Not oTools.CurrentTrigpoint Is Nothing AndAlso Not oTools.CurrentTrigpoint.IsSystem Then
            If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemTrigpoint Then
                Dim oItemTrigpoint As cItemTrigpoint = pGetCurrentDesignTools.CurrentItem
                oItemTrigpoint.Trigpoint = oTools.CurrentTrigpoint
            Else
                Dim oItemTrigpoint As cItemTrigpoint = New cItemTrigpoint(oSurvey, oCurrentDesign, oTools.CurrentTrigpoint)
                Call pGetCurrentDesignTools.SelectItem(oItemTrigpoint)
            End If
        End If
    End Sub

    Private Sub pSegmentItemSelect()
        If Not oTools.CurrentSegment Is Nothing AndAlso oTools.CurrentSegment.IsValid Then
            If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemSegment Then
                Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
                oItemSegment.Segment = oTools.CurrentSegment
            Else
                Dim oItemSegment As cItemSegment = New cItemSegment(oSurvey, oCurrentDesign, oTools.CurrentSegment)
                Call pGetCurrentDesignTools.SelectItem(oItemSegment)
            End If
        End If
    End Sub

    Private Sub oTools_OnSegmentSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditTools.cEditBaseToolsEventArgs) Handles oTools.OnSegmentSelect
        Call pFloatingToolbarHide()

        Call pSegmentSave(ToolEventArgs.PreviousSegment)
        Dim iRowHandle As Integer = grdViewSegments.FindRow(ToolEventArgs.CurrentSegment)
        If iRowHandle <> grdViewSegments.FocusedRowHandle Then
            grdViewSegments.FocusedRowHandle = iRowHandle
        End If
        Call pSegmentLoad(ToolEventArgs.CurrentSegment)

        Call oSurvey.Plan.Plot.Redraw(oCurrentOptions)
        Call oSurvey.Profile.Plot.Redraw(oCurrentOptions)

        Call pClipboardAlign()

        Call pSegmentItemSelect()
    End Sub

    Private Sub btnCut_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardCut()
    End Sub

    Private Sub pClipboardCut()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart10"))
        If grdSegments.Focused Then
            Try
                If grdViewSegments.GetSelectedRows.Count > 0 Then
                    Call pGetCurrentTools.CutSegments(pSegmentsFromGridSelection())
                End If
            Catch
            End Try
        ElseIf picMap.Focused Then
            Try
                Call pGetCurrentDesignTools.CutItem()
            Catch ex As Exception
                Call pLogAdd(ex)
            End Try
            Call pMapInvalidate()
        End If
        Call pStatusSet(GetLocalizedString("main.textpart9"))
        Call oMousePointer.Pop()
    End Sub

    Private Sub pClipboardPaste(Optional ByVal Format As String = "", Optional ByVal Location As PointF = Nothing)
        oMousePointer.Push(Cursors.WaitCursor)
        If grdSegments.Focused Then
            Try
                Dim iIndex As Integer = grdViewSegments.GetFocusedDataSourceRowIndex
                bDisableSegmentsChangeEvent = True
                Dim oSegments As List(Of cSegment) = pGetCurrentTools.PasteSegments(Format, iIndex)
                bDisableSegmentsChangeEvent = False
                Call pSurveySegmentsGridSetup()
                Call pSegmentSelect(oSurvey.Segments(iIndex + oSegments.Count - 1), False, False)
            Catch
            End Try
        ElseIf picMap.Focused Then
            Call pGetCurrentDesignTools.PasteItem(Format, Location)
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Function pSegmentsFromGridSelection(Optional OnlyEditable As Boolean = False) As cSegmentCollection
        Dim oSegments As cSegmentCollection = New cSegmentCollection(oSurvey)
        Dim oSortedSegments As SortedList(Of Integer, cSegment) = New SortedList(Of Integer, cSegment)
        Dim bAdd As Boolean
        For Each iRowHandle As Integer In grdViewSegments.GetSelectedRows
            Dim oSegment As cSegment = grdViewSegments.GetRow(iRowHandle)
            If Not oSegment Is Nothing Then
                If OnlyEditable Then
                    bAdd = oSegment.Splay OrElse (Not oSegment.IsBinded) OrElse oSegment.IsOrigin OrElse Not oSegment.GetLocked
                Else
                    bAdd = True
                End If
                If bAdd Then
                    Call oSortedSegments.Add(iRowHandle, oSegment)
                End If
            End If
        Next
        For Each oSegment As cSegment In oSortedSegments.Values
            Call oSegments.Append(oSegment)
        Next
        Return oSegments
    End Function

    Private Sub pClipboardCopy()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart8"))
        If grdSegments.Focused Then
            If grdViewSegments.GetSelectedRows.Count > 0 Then
                Call pGetCurrentTools.CopySegments(pSegmentsFromGridSelection())
            End If
        ElseIf picMap.Focused Then
            With pGetCurrentDesignTools()
                If Not .CurrentItem Is Nothing Then
                    Call .EndAndSelectItem()
                    Call .CopyItem()
                End If
            End With
        End If
        Call pStatusSet(GetLocalizedString("main.textpart9"))
        Call oMousePointer.Pop()
    End Sub

    Private Sub pClipboardDelete()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart7"))
        If grdSegments.Focused Then
            Try
                Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
                If Not oSegment Is Nothing Then
                    Dim bEnabledEdit As Boolean = (oSegment.Splay) OrElse (Not (oSegment.IsBinded Or oSegment.IsOrigin))
                    If bEnabledEdit Then
                        Call pSegmentDelete()
                    End If
                End If
            Catch
            End Try
        ElseIf picMap.Focused Then
            Call pDesignItemDelete()
        End If
        Call pStatusSet(GetLocalizedString("main.textpart6"))
        Call oMousePointer.Pop()
    End Sub

    Private Sub pDesignItemDelete()
        Call oMousePointer.Push(Cursors.WaitCursor)
        With pGetCurrentDesignTools()

            If .CurrentItemPoint Is Nothing Then
                Call .EndAndSelectItem()
                Call .DeleteItem()
            Else
                Call .DeleteItemPoint()
            End If
        End With
        Call oMousePointer.Pop()
    End Sub

    Private Sub mnuSegmentsDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSegmentDelete()
    End Sub

    Private Sub mnuSegmentsCut_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardCut()
    End Sub

    Private Sub mnuSegmentsCopy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardCopy()
    End Sub

    Private Sub mnuSegmentsPaste_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardPaste()
    End Sub

    Private Sub pSettingsSetDesignQuality(ByVal Quality As DesignQualityLevelEnum, Optional ByVal ForceSetting As Boolean = False)
        If Quality <> iDesignQuality OrElse ForceSetting Then
            iDesignQuality = Quality
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCaveList_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPropCaveList.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If Not .CurrentItem Is Nothing Then
                    Dim oItem As cItem = .CurrentItem
                    Call oItem.SetCave(cboPropCaveList.Text, "", True)
                    Call cboPropCaveBranchList.Rebind(CType(cboPropCaveList.SelectedItem, cICaveInfoBranches), False)
                    Call .TakeUndoSnapshot()
                    Call pMapInvalidate()
                End If
            End With
        End If
    End Sub

    Private Sub chkPropSegmentLocked_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPropSegmentLocked.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oPoint As cPoint = .CurrentItemPoint
                oPoint.SegmentLocked = chkPropSegmentLocked.Checked
                cmdPropSegmentRebind.Enabled = Not chkPropSegmentLocked.Checked
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub lvPropSegmentsBinded_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles lvPropSegmentsBinded.DoubleClick
        If lvPropSegmentsBinded.SelectedItems.Count > 0 Then
            Call pFieldDataShow(True)
        End If
    End Sub

    Private Sub lvPropSegmentsBinded_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles lvPropSegmentsBinded.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            Try
                Dim oSegment As cSegment = lvPropSegmentsBinded.SelectedItems(0).Tag
                Call pSegmentSelect(oSegment, False, False)
            Catch
            End Try
        End If
    End Sub

    Private Sub cmdPropSegmentsRebind_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropSegmentsRebind.Click
        With pGetCurrentDesignTools()
            Call .CurrentItem.BindSegments()
            Call .TakeUndoSnapshot()
        End With
        'todo: refresh object list
        Call pObjectPropertyLoad()
    End Sub

    Private Sub btnZoomsToFit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pMapCenterAndFit()
    End Sub

    Private Sub oHSB_Scroll(ByVal sender As Object, ByVal e As System.Windows.Forms.ScrollEventArgs) Handles oHSB.Scroll
        oPaintTranslation = New PointF(-e.NewValue, oPaintTranslation.Y)
        If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()
        Call pMapInvalidate()
    End Sub

    Private Sub oVSB_Scroll(ByVal sender As Object, ByVal e As System.Windows.Forms.ScrollEventArgs) Handles oVSB.Scroll
        oPaintTranslation = New PointF(oPaintTranslation.X, -e.NewValue)
        If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()
        Call pMapInvalidate()
    End Sub

    Private Sub cmdPropBrushBrowseClipart_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropBrushBrowseClipart.Click
        Using oOfd As OpenFileDialog = New OpenFileDialog
            With oOfd
                If cboPropBrushHatch.SelectedIndex = cBrush.HatchTypeEnum.Texture Then
                    .Title = GetLocalizedString("main.loadtexturedialog")
                    .Filter = GetLocalizedString("main.filetypePNG") & " (*.PNG)|*.PNG|" & GetLocalizedString("main.filetypeBMP") & " (*.BMP)|*.BMP|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        Try
                            Dim oImage As Bitmap = New Bitmap(.FileName)
                            With pGetCurrentDesignTools()
                                .CurrentItem.Brush.Texture = oImage
                                picPropBrushClipartImage.Image = oImage
                                Call .TakeUndoSnapshot()
                            End With
                            Call pObjectPropertyLoad()
                            Call pMapInvalidate()
                        Catch
                        End Try
                    End If
                End If

                If cboPropBrushHatch.SelectedIndex = cBrush.HatchTypeEnum.Clipart Then
                    .Title = GetLocalizedString("main.loadclipartdialog")
                    .Filter = GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        Try
                            Dim oClipart As cDrawClipArt = New cDrawClipArt(.FileName)
                            With pGetCurrentDesignTools()
                                .CurrentItem.Brush.Clipart = oClipart
                                Try
                                    picPropBrushClipartImage.Image = oClipart.GetThumbnailImage(picPropBrushClipartImage.Width, picPropBrushClipartImage.Height)
                                Catch
                                    picPropBrushClipartImage.Image = Nothing
                                End Try
                                Call .TakeUndoSnapshot()
                            End With
                            'Call pObjectPropertyLoad()
                            Call pMapInvalidate()
                        Catch
                        End Try
                    End If
                End If
            End With
        End Using
    End Sub

    Private Sub txtPropBrushClipartDensity_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPropBrushClipartDensity.ValueChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.ClipartDensity = txtPropBrushClipartDensity.Value / 100
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub txtPropBrushClipartZoomFactor_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPropBrushClipartZoomFactor.ValueChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.ClipartZoomFactor = txtPropBrushClipartZoomFactor.Value / 1000
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cmdPropBrushReseed_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropBrushReseed.Click
        Try
            With pGetCurrentDesignTools()
                Call .CurrentItem.Brush.Seed.Reseed()
                Call .TakeUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub cboPropBrushClipartAngleMode_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropBrushClipartAngleMode.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.ClipartAngleMode = cboPropBrushClipartAngleMode.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub txtPropBrushClipartAngle_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPropBrushClipartAngle.ValueChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.ClipartAngle = txtPropBrushClipartAngle.Value
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    'Private Function pGetCurrentOptions() As cOptionsDesign
    '    Select Case oCurrentDesign.Type
    '        Case cIDesign.cDesignTypeEnum.Plan
    '            Return oSurvey.Options("_design.plan")
    '        Case cIDesign.cDesignTypeEnum.Profile
    '            Return oSurvey.Options("_design.profile")
    '    End Select
    'End Function

    'Private Sub mnuViewPlotShowImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuViewPlotShowImage.Click
    '    mnuViewPlotShowImage.Checked = Not mnuViewPlotShowImage.Checked
    '    Dim oOptions As cOptionsDesign = pGetCurrentOptions()
    '    oOptions.DrawImages = mnuViewPlotShowImage.Checked
    '    Call pMapInvalidate()
    'End Sub

    Private Sub pSurveyUndo()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pGetCurrentDesignTools.Reset()
        Call pGetCurrentTools.Undo.Pop()
        Call oMousePointer.Pop()
        Call pMapInvalidate()
        Call pUndoRefresh()
    End Sub

    Private Sub cboPropSignRotateMode_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropSignRotateMode.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemRotable = .CurrentItem
                    oItem.RotateMode = cboPropSignRotateMode.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropSignSize_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropSignSize.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemSizable = .CurrentItem
                    oItem.Size = cboPropSignSize.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropTextRotateMode_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropTextRotateMode.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemRotable = .CurrentItem
                    oItem.RotateMode = cboPropTextRotateMode.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub txtPropText_PreviewKeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.PreviewKeyDownEventArgs) Handles txtPropText.PreviewKeyDown
        If e.Control And e.KeyCode = Keys.Enter Then ' And Not e.Shift And Not e.Control And Not e.Alt Then
            Try
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemText = .CurrentItem
                    oItem.Text = txtPropText.Text
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Catch
            End Try
        End If
    End Sub

    Private Sub cboPropTextStyle_DrawItem(ByVal sender As Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles cboPropTextStyle.DrawItem
        Try
            Dim oGr As Graphics = e.Graphics
            oGr.CompositingQuality = CompositingQuality.HighQuality
            oGr.InterpolationMode = InterpolationMode.HighQualityBicubic
            oGr.TextRenderingHint = Drawing.Text.TextRenderingHint.ClearTypeGridFit
            Dim bSelected As Boolean = (e.State And DrawItemState.Selected) = DrawItemState.Selected
            If bSelected Then
                Call oGr.FillRectangle(SystemBrushes.Highlight, e.Bounds)
            Else
                Call oGr.FillRectangle(SystemBrushes.Window, e.Bounds)
            End If
            Dim oFont As cItemFont = cboPropTextStyle.Items(e.Index)
            Using oSampleFont As Font = oFont.GetSampleFont
                Dim oLabelRect As RectangleF = New RectangleF(e.Bounds.Left + 2, e.Bounds.Top, e.Bounds.Right - 2, e.Bounds.Height)
                Using oSF As StringFormat = New StringFormat
                    oSF.LineAlignment = StringAlignment.Center
                    oSF.Trimming = StringTrimming.EllipsisCharacter
                    oSF.FormatFlags = StringFormatFlags.NoWrap
                    If bSelected Then
                        Call oGr.DrawString(oFont.Name, oSampleFont, SystemBrushes.HighlightText, oLabelRect, oSF)
                    Else
                        Call oGr.DrawString(oFont.Name, oSampleFont, SystemBrushes.WindowText, oLabelRect, oSF)
                    End If
                End Using
            End Using
        Catch
        End Try
    End Sub

    Private Sub cboPropTextStyle_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropTextStyle.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemText = .CurrentItem
                    oItem.Font.Type = cboPropTextStyle.SelectedItem.type
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropTextFontChar_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropTextFontChar.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemFont = .CurrentItem
                    If cboPropTextFontChar.SelectedIndex = 0 Then
                        oItem.Font.FontName = ""
                    Else
                        oItem.Font.FontName = cboPropTextFontChar.Text
                    End If
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub chkPropTextFontBold_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPropTextFontBold.CheckedChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemFont = .CurrentItem
                    oItem.Font.FontBold = chkPropTextFontBold.Checked
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub chkPropTextFontItalic_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPropTextFontItalic.CheckedChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemFont = .CurrentItem
                    oItem.Font.FontItalic = chkPropTextFontItalic.Checked
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub chkPropTextFontUnderline_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPropTextFontUnderline.CheckedChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemFont = .CurrentItem
                    oItem.Font.FontUnderline = chkPropTextFontUnderline.Checked
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropTextFontSize_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles cboPropTextFontSize.TextChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemFont = .CurrentItem
                    If cboPropTextFontSize.SelectedIndex = 0 Then
                        oItem.Font.FontSize = 0
                    Else
                        oItem.Font.FontSize = cboPropTextFontSize.Text
                    End If
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub txtPropText_Validated(ByVal sender As Object, ByVal e As System.EventArgs) Handles txtPropText.Validated
        Try
            With pGetCurrentDesignTools()
                Dim oItem As cIItemText = .CurrentItem
                oItem.Text = txtPropText.Text
                Call .TakeUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub cmdPropFontColor_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropFontColor.Click
        Using oCD As ColorDialog = New ColorDialog
            With oCD
                .FullOpen = True
                .AnyColor = True
                .Color = picPropFontColor.BackColor
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    picPropFontColor.BackColor = .Color
                    Try
                        With pGetCurrentDesignTools()
                            Dim oItem As cIItemFont = .CurrentItem
                            oItem.Font.Color = picPropFontColor.BackColor
                            Call .TakeUndoSnapshot()
                        End With
                        Call pObjectPropertyLoad()
                        Call pMapInvalidate()
                    Catch
                    End Try
                End If
            End With
        End Using
    End Sub

    Private Sub mnuSegmentsReplicateData_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSegmentsDataReplicate()
    End Sub

    Private Function pSegmentsLRUDIsInRange(Segment As cSegment, Form As frmManageLRUD) As Boolean
        Dim bHaveLRUD As Boolean = Segment.HaveLRUD
        If bHaveLRUD Then
            Dim bCalculatedLRUD As Boolean = Segment.DataProperties.GetValue("LRUD_calculated", False)
            If bCalculatedLRUD Then
                Return Form.chkShotWithCalculatedLRUD.Checked
            Else
                Return Form.chkShotWithLRUD.Checked
            End If
        Else
            Return Form.chkShotWithoutLRUD.Checked
        End If
    End Function

    Private Sub pSegmentsLRUDManage()
        Dim oCurrentSegment As cSegment = pGetCurrentTools.CurrentSegment
        If Not oCurrentSegment Is Nothing Then
            Dim sOldSession As String = "" & oCurrentSegment.Session
            Dim sOldCave As String = "" & oCurrentSegment.Cave
            Dim sOldBranch As String = "" & oCurrentSegment.Branch

            If Not oCurrentSegment Is Nothing Then
                sOldSession = "" & oCurrentSegment.Session
                sOldCave = "" & oCurrentSegment.Cave
                sOldBranch = "" & oCurrentSegment.Branch
            End If

            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oSession As cSession
            Dim oCave As cCaveInfo
            Dim oCaveBranch As cCaveInfoBranch
            Try : oSession = oSurvey.Properties.Sessions(sOldSession) : Catch : End Try
            Try : oCave = oSurvey.Properties.CaveInfos(sOldCave) : Catch : End Try
            Try : oCaveBranch = oCave.Branches(sOldBranch) : Catch : End Try

            Dim iRows As Integer = pSegmentsFromGridSelection.Count
            Call oMousePointer.Pop()

            Using frmMLRUD As frmManageLRUD = New frmManageLRUD(oSurvey, oSession, oCave, oCaveBranch, iRows)
                With frmMLRUD
                    If .ShowDialog(Me) = vbOK Then
                        bDisableSegmentsChangeEvent = True
                        Call grdSegments.BeginUpdate()
                        Dim bBackup As Boolean = .chkBackup.Checked
                        Dim bMarkAsCalculated As Boolean = .chkMarkAsCalculated.Checked
                        If bMarkAsCalculated Then
                            Call oSurvey.Properties.DataTables.Segments.Add("LRUD_calculated", Data.cDataFields.TypeEnum.Boolean)
                            Call oSurvey.Properties.DataTables.Segments.Add("LRUD_source", Data.cDataFields.TypeEnum.Text)
                        End If
                        If .cboAction.SelectedIndex = 0 Then
                            Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                            For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                                If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then
                                    Dim oSplay As cSegmentCollection
                                    Dim oSegmentSession As cSession = oSessions(oSegment.Session)
                                    If oSegmentSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                                        oSplay = oSurvey.Segments.GetSplaySegments(oSegment.From)
                                    Else
                                        oSplay = oSurvey.Segments.GetSplaySegments(oSegment.To)
                                    End If
                                    If oSplay.Count >= 4 Then
                                        If bBackup Then Call .Backup(oSegment)

                                        If .RadioButton1a.Checked Then
                                            oSegment.Left = modNumbers.MathRound(oSplay(0).Data.Data.Distance, 2)
                                            oSegment.Right = modNumbers.MathRound(oSplay(1).Data.Data.Distance, 2)
                                            oSegment.Up = modNumbers.MathRound(oSplay(2).Data.Data.Distance, 2)
                                            oSegment.Down = modNumbers.MathRound(oSplay(3).Data.Data.Distance, 2)
                                            oSegment.Save()
                                        ElseIf .RadioButton1b.Checked Then
                                            oSegment.Up = modNumbers.MathRound(oSplay(0).Data.Data.Distance, 2)
                                            oSegment.Down = modNumbers.MathRound(oSplay(1).Data.Data.Distance, 2)
                                            oSegment.Left = modNumbers.MathRound(oSplay(2).Data.Data.Distance, 2)
                                            oSegment.Right = modNumbers.MathRound(oSplay(3).Data.Data.Distance, 2)
                                        End If
                                        If bMarkAsCalculated Then
                                            Call oSegment.DataProperties.SetValue("LRUD_calculated", True)
                                            Call oSegment.DataProperties.SetValue("LRUD_source", "4shots")
                                        End If
                                    End If
                                End If
                            Next
                            Call oSurvey.Segments.SaveAll()
                        ElseIf .cboAction.SelectedIndex = 1 Then
                            Select Case .cboMode2Mode.SelectedIndex
                                Case 0
                                    Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                                    For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                                        If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then
                                            If bBackup Then Call .Backup(oSegment)

                                            Dim iFromOrTo As GetDesignStationEnum
                                            Dim oSegmentSession As cSession = oSessions(oSegment.Session)
                                            If oSegmentSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                                                If oSegment.Data.Data.Reversed Then
                                                    iFromOrTo = GetDesignStationEnum.To
                                                Else
                                                    iFromOrTo = GetDesignStationEnum.From
                                                End If
                                            Else
                                                If oSegment.Data.Data.Reversed Then
                                                    iFromOrTo = GetDesignStationEnum.From
                                                Else
                                                    iFromOrTo = GetDesignStationEnum.To
                                                End If
                                            End If

                                            Dim iPlanAngleRange As Decimal = .txtMode2H.Value
                                            Dim iProfileAngleRange As Decimal = .txtMode2V.Value
                                            Dim bUseOnlyCutSplay As Boolean = .chkMode2OnlyCutSplay.Checked

                                            If iFromOrTo = GetDesignStationEnum.From Then
                                                Dim oFromSplays As List(Of cSegment)
                                                If bUseOnlyCutSplay Then
                                                    oFromSplays = oSegment.FromSplays.Select(Function(item) DirectCast(item, cSegment)).Where(Function(item) item.Cut).ToList
                                                Else
                                                    oFromSplays = oSegment.FromSplays.Select(Function(item) DirectCast(item, cSegment)).ToList
                                                End If

                                                Dim dLBearing As Decimal = oSegment.Data.Plan.FromBearingLeft
                                                Dim oLSplay As cSegment = oFromSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dLBearing - iPlanAngleRange, dLBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oLSplay) Then
                                                    oSegment.Left = 0
                                                Else
                                                    oSegment.Left = oLSplay.Data.Data.Distance
                                                End If

                                                Dim dRBearing As Decimal = oSegment.Data.Plan.FromBearingRight
                                                Dim oRSplay As cSegment = oFromSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dRBearing - iPlanAngleRange, dRBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oRSplay) Then
                                                    oSegment.Right = 0
                                                Else
                                                    oSegment.Right = oRSplay.Data.Data.Distance
                                                End If

                                                'profile-------------------------------------------------------
                                                Dim oUSplay As cSegment = oFromSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, 90 - iProfileAngleRange, 90)).OrderBy(Function(item) Math.Abs(90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oUSplay) Then
                                                    oSegment.Up = 0
                                                Else
                                                    oSegment.Up = oUSplay.Data.Data.Distance
                                                End If

                                                Dim oDSplay As cSegment = oFromSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, -90 + iProfileAngleRange, -90)).OrderBy(Function(item) Math.Abs(-90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oDSplay) Then
                                                    oSegment.Down = 0
                                                Else
                                                    oSegment.Down = oDSplay.Data.Data.Distance
                                                End If
                                            Else
                                                Dim oToSplays As List(Of cSegment)
                                                If bUseOnlyCutSplay Then
                                                    oToSplays = oSegment.ToSplays.Select(Function(item) DirectCast(item, cSegment)).Where(Function(item) item.Cut).ToList
                                                Else
                                                    oToSplays = oSegment.ToSplays.Select(Function(item) DirectCast(item, cSegment)).ToList
                                                End If

                                                Dim dLBearing As Decimal = oSegment.Data.Plan.ToBearingLeft
                                                Dim oLSplay As cSegment = oToSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dLBearing - iPlanAngleRange, dLBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oLSplay) Then
                                                    oSegment.Left = 0
                                                Else
                                                    oSegment.Left = oLSplay.Data.Data.Distance
                                                End If

                                                Dim dRBearing As Decimal = oSegment.Data.Plan.ToBearingRight
                                                Dim oRSplay As cSegment = oToSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dRBearing - iPlanAngleRange, dRBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oRSplay) Then
                                                    oSegment.Right = 0
                                                Else
                                                    oSegment.Right = oRSplay.Data.Data.Distance
                                                End If

                                                'profile-------------------------------------------------------
                                                Dim oUSplay As cSegment = oToSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, 90 - iProfileAngleRange, 90)).OrderBy(Function(item) Math.Abs(90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oUSplay) Then
                                                    oSegment.Up = 0
                                                Else
                                                    oSegment.Up = oUSplay.Data.Data.Distance
                                                End If

                                                Dim oDSplay As cSegment = oToSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, -90 + iProfileAngleRange, -90)).OrderBy(Function(item) Math.Abs(-90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oDSplay) Then
                                                    oSegment.Down = 0
                                                Else
                                                    oSegment.Down = oDSplay.Data.Data.Distance
                                                End If
                                            End If
                                            If bMarkAsCalculated Then
                                                Call oSegment.DataProperties.SetValue("LRUD_calculated", True)
                                                Call oSegment.DataProperties.SetValue("LRUD_source", "splays")
                                            End If
                                        End If
                                    Next
                                    Call oSurvey.Segments.SaveAll()
                            End Select

                            'Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                            'For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                            '    If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then

                            '        If bBackup Then Call .Backup(oSegment)

                            '        Dim iFromOrTo As GetDesignStationEnum
                            '        Dim oSegmentSession As cSession = oSessions(oSegment.Session)
                            '        If oSegmentSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                            '            If oSegment.Data.Data.Reversed Then
                            '                iFromOrTo = GetDesignStationEnum.To
                            '            Else
                            '                iFromOrTo = GetDesignStationEnum.From
                            '            End If
                            '        Else
                            '            If oSegment.Data.Data.Reversed Then
                            '                iFromOrTo = GetDesignStationEnum.From
                            '            Else
                            '                iFromOrTo = GetDesignStationEnum.To
                            '            End If
                            '        End If

                            '        Dim iPlanAngleRange As Decimal = .txtMode2H.Value
                            '        Dim iProfileAngleRange As Decimal = .txtMode2V.Value
                            '        Dim bUseOnlyCutSplay As Boolean = .chkMode2OnlyCutSplay.Checked

                            '        If iFromOrTo = GetDesignStationEnum.From Then
                            '            Dim oPlanSplays As List(Of Calculate.Plot.cSplayPlanProjectedData)
                            '            If bUseOnlyCutSplay Then
                            '                oPlanSplays = oSegment.Data.Plan.FromSplays.Where(Function(item) item.GetSplaySegment.Cut).ToList
                            '            Else
                            '                oPlanSplays = oSegment.Data.Plan.FromSplays.ToList
                            '            End If

                            '            Dim dLBearing As Decimal = oSegment.Data.Plan.FromBearingLeft
                            '            Dim oLSplay As Calculate.Plot.cSplayPlanProjectedData = oPlanSplays.Where(Function(item) modPaint.AngleIsInRange(modPaint.GetBearing(oSegment.Data.Plan.FromPoint, item.ToPoint), dLBearing - iPlanAngleRange, dLBearing + iPlanAngleRange)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Plan.FromPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oLSplay) Then
                            '                oSegment.Left = 0
                            '            Else
                            '                oSegment.Left = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Plan.FromPoint, oLSplay.ToPoint), 2)
                            '            End If

                            '            Dim dRBearing As Decimal = oSegment.Data.Plan.FromBearingRight
                            '            Dim oRSplay As Calculate.Plot.cSplayPlanProjectedData = oPlanSplays.Where(Function(item) modPaint.AngleIsInRange(modPaint.GetBearing(oSegment.Data.Plan.FromPoint, item.ToPoint), dRBearing - iPlanAngleRange, dRBearing + iPlanAngleRange)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Plan.FromPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oRSplay) Then
                            '                oSegment.Right = 0
                            '            Else
                            '                oSegment.Right = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Plan.FromPoint, oRSplay.ToPoint), 2)
                            '            End If

                            '            'profile-------------------------------------------------------
                            '            Dim oProfileSplays As List(Of Calculate.Plot.cSplayProfileProjectedData)
                            '            If bUseOnlyCutSplay Then
                            '                oProfileSplays = oSegment.Data.Profile.FromSplays.Where(Function(item) item.GetSplaySegment.Cut).ToList
                            '            Else
                            '                oProfileSplays = oSegment.Data.Profile.FromSplays.ToList
                            '            End If

                            '            Dim oUSplay As Calculate.Plot.cSplayProfileProjectedData = oProfileSplays.Where(Function(item) modPaint.InclinationIsInRange(modPaint.GetInclination(oSegment.Data.Profile.FromPoint, item.ToPoint), 90 - iProfileAngleRange, 90)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Profile.FromPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oUSplay) Then
                            '                oSegment.Up = 0
                            '            Else
                            '                oSegment.Up = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Profile.FromPoint, oUSplay.ToPoint), 2)
                            '            End If

                            '            Dim oDSplay As Calculate.Plot.cSplayProfileProjectedData = oProfileSplays.Where(Function(item) modPaint.InclinationIsInRange(modPaint.GetInclination(oSegment.Data.Profile.FromPoint, item.ToPoint), -90 + iProfileAngleRange, -90)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Profile.FromPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oDSplay) Then
                            '                oSegment.Down = 0
                            '            Else
                            '                oSegment.Down = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Profile.FromPoint, oDSplay.ToPoint), 2)
                            '            End If
                            '        Else
                            '            Dim oPlanSplays As List(Of Calculate.Plot.cSplayPlanProjectedData)
                            '            If bUseOnlyCutSplay Then
                            '                oPlanSplays = oSegment.Data.Plan.ToSplays.Where(Function(item) item.GetSplaySegment.Cut).ToList
                            '            Else
                            '                oPlanSplays = oSegment.Data.Plan.ToSplays.ToList
                            '            End If

                            '            Dim dLBearing As Decimal = oSegment.Data.Plan.ToBearingLeft
                            '            Dim oLSplay As Calculate.Plot.cSplayPlanProjectedData = oPlanSplays.Where(Function(item) modPaint.AngleIsInRange(modPaint.GetBearing(oSegment.Data.Plan.ToPoint, item.ToPoint), dLBearing - iPlanAngleRange, dLBearing + iPlanAngleRange)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Plan.ToPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oLSplay) Then
                            '                oSegment.Left = 0
                            '            Else
                            '                oSegment.Left = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Plan.ToPoint, oLSplay.ToPoint), 2)
                            '            End If

                            '            Dim dRBearing As Decimal = oSegment.Data.Plan.ToBearingRight
                            '            Dim oRSplay As Calculate.Plot.cSplayPlanProjectedData = oPlanSplays.Where(Function(item) modPaint.AngleIsInRange(modPaint.GetBearing(oSegment.Data.Plan.ToPoint, item.ToPoint), dRBearing - iPlanAngleRange, dRBearing + iPlanAngleRange)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Plan.ToPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oRSplay) Then
                            '                oSegment.Right = 0
                            '            Else
                            '                oSegment.Right = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Plan.ToPoint, oRSplay.ToPoint), 2)
                            '            End If

                            '            'profile-------------------------------------------------------
                            '            Dim oProfileSplays As List(Of Calculate.Plot.cSplayProfileProjectedData)
                            '            If bUseOnlyCutSplay Then
                            '                oProfileSplays = oSegment.Data.Profile.ToSplays.Where(Function(item) item.GetSplaySegment.Cut).ToList
                            '            Else
                            '                oProfileSplays = oSegment.Data.Profile.ToSplays.ToList
                            '            End If

                            '            Dim oUSplay As Calculate.Plot.cSplayProfileProjectedData = oProfileSplays.Where(Function(item) modPaint.InclinationIsInRange(modPaint.GetInclination(oSegment.Data.Profile.ToPoint, item.ToPoint), 90 - iProfileAngleRange, 90)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Profile.ToPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oUSplay) Then
                            '                oSegment.Up = 0
                            '            Else
                            '                oSegment.Up = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Profile.ToPoint, oUSplay.ToPoint), 2)
                            '            End If

                            '            Dim oDSplay As Calculate.Plot.cSplayProfileProjectedData = oProfileSplays.Where(Function(item) modPaint.InclinationIsInRange(modPaint.GetInclination(oSegment.Data.Profile.ToPoint, item.ToPoint), -90 + iProfileAngleRange, -90)).OrderByDescending(Function(item) modPaint.DistancePointToPoint(oSegment.Data.Profile.ToPoint, item.ToPoint)).FirstOrDefault
                            '            If IsNothing(oDSplay) Then
                            '                oSegment.Down = 0
                            '            Else
                            '                oSegment.Down = modNumbers.MathRound(modPaint.DistancePointToPoint(oSegment.Data.Profile.ToPoint, oDSplay.ToPoint), 2)
                            '            End If
                            '        End If
                            '        If bMarkAsCalculated Then
                            '            Call oSegment.DataProperties.SetValue("LRUD_calculated", True)
                            '            Call oSegment.DataProperties.SetValue("LRUD_source", "splays")
                            '        End If
                            '    End If
                            'Next
                            'Call oSurvey.Segments.SaveAll()

                        ElseIf .cboAction.SelectedIndex = 2 Then
                            Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                            For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                                If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then
                                    If bBackup Then Call .Backup(oSegment)

                                    Dim iFromOrTo As GetDesignStationEnum
                                    Dim oSegmentSession As cSession = oSessions(oSegment.Session)
                                    If oSegmentSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                                        If oSegment.Data.Data.Reversed Then
                                            iFromOrTo = GetDesignStationEnum.To
                                        Else
                                            iFromOrTo = GetDesignStationEnum.From
                                        End If
                                    Else
                                        If oSegment.Data.Data.Reversed Then
                                            iFromOrTo = GetDesignStationEnum.From
                                        Else
                                            iFromOrTo = GetDesignStationEnum.To
                                        End If
                                    End If
                                    Dim oLR As SizeF = modDesignLRUD.GetLRFromDesign(oSurvey.Options("_design.plan"), oSegment, iFromOrTo)
                                    oSegment.Left = modNumbers.MathRound(oLR.Width, 2)
                                    oSegment.Right = modNumbers.MathRound(oLR.Height, 2)
                                    Dim oUD As SizeF = modDesignLRUD.GetUDFromDesign(oSurvey.Options("_design.profile"), oSegment, iFromOrTo)
                                    oSegment.Up = modNumbers.MathRound(oUD.Width, 2)
                                    oSegment.Down = modNumbers.MathRound(oUD.Height, 2)

                                    If bMarkAsCalculated Then
                                        Call oSegment.DataProperties.SetValue("LRUD_calculated", True)
                                        Call oSegment.DataProperties.SetValue("LRUD_source", "design")
                                    End If
                                End If
                            Next
                            Call oSurvey.Segments.SaveAll()
                        Else
                            Call .Restore()
                        End If
                        Call grdSegments.EndUpdate()
                        bDisableSegmentsChangeEvent = False

                        Call pSurveySegmentsRefresh()
                        Call pSurveyInvalidate()

                        Call pMapInvalidate()
                    End If
                End With
            End Using
        End If
    End Sub

    Private Function pSegmentsGetSelections(SelectionType As Integer, Optional CurrentSession As cSession = Nothing, Optional CurrentCave As String = "", Optional CurrentBranch As String = "") As List(Of cSegment)
        'per i segmenti che hanno lo stesso ramo/grotta del segmento corrente
        'per i segmenti che hanno la stessa sessione del segmento corrente
        'per tutti i segmenti
        'per i segmenti selezionati
        Dim oSegments As List(Of cSegment) = New List(Of cSegment)
        If SelectionType = 3 Then
            For Each oSegment As cSegment In pSegmentsFromGridSelection()
                Call oSegments.Add(oSegment)
            Next
        ElseIf SelectionType = 2 Then
            For Each oSegment As cSegment In oSurvey.Segments
                Call oSegments.Add(oSegment)
            Next
        ElseIf SelectionType = 1 Then
            For Each oSegment As cSegment In oSurvey.Segments.GetSessionSegments(CurrentSession)
                Call oSegments.Add(oSegment)
            Next
        Else
            For Each oSegment As cSegment In oSurvey.Segments.GetCaveSegments(CurrentCave, CurrentBranch)
                Call oSegments.Add(oSegment)
            Next
        End If
        Return oSegments
    End Function

    Private Sub pSegmentsDataReplicate()
        Dim sOldSession As String = "" & pGetCurrentTools.CurrentSegment.Session
        Dim sOldCave As String = "" & pGetCurrentTools.CurrentSegment.Cave
        Dim sOldBranch As String = "" & pGetCurrentTools.CurrentSegment.Branch
        Dim iOldDirection As cSurvey.cSurvey.DirectionEnum = pGetCurrentTools.CurrentSegment.Direction

        If Not pGetCurrentTools.CurrentSegment Is Nothing Then
            sOldSession = "" & pGetCurrentTools.CurrentSegment.Session
            sOldCave = "" & pGetCurrentTools.CurrentSegment.Cave
            sOldBranch = "" & pGetCurrentTools.CurrentSegment.Branch
        End If

        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oSession As cSession
        Dim oCave As cCaveInfo
        Dim oCaveBranch As cCaveInfoBranch
        Try : oSession = oSurvey.Properties.Sessions(sOldSession) : Catch : End Try
        Try : oCave = oSurvey.Properties.CaveInfos(sOldCave) : Catch : End Try
        Try : oCaveBranch = oCave.Branches(sOldBranch) : Catch : End Try

        Dim iRows As Integer = pSegmentsFromGridSelection.Count
        Call oMousePointer.Pop()

        Using frmSRI As frmSegmentsReplicateInfo = New frmSegmentsReplicateInfo(oSurvey, oSession, oCave, oCaveBranch, iOldDirection, iRows, iFunctionLanguage)
            With frmSRI
                If .ShowDialog(Me) = vbOK Then
                    oMousePointer.Push(Cursors.WaitCursor)
                    Call oTools.SelectSegment(Nothing)

                    Dim bReplicateSession As Boolean = .chkSession.Checked
                    Dim bReplicateCave As Boolean = .chkCave.Checked
                    Dim bReplicateDirection As Boolean = .chkDirection.Checked
                    Dim bReplicateFormula As Integer = .chkFormula.Checked
                    Dim oReplicateFormula As cScript = Nothing

                    Dim bRebind As Boolean = .chkRebind.Checked

                    Dim sSession As String = ""
                    Dim sCave As String = ""
                    Dim sBranch As String = ""
                    Dim iDirection As cSurvey.cSurvey.DirectionEnum
                    Dim iPriority As Integer = -1
                    'Dim sFormula As String = ""
                    Try : sSession = .cboSessionList.SelectedItem.id : Catch : End Try  'pGetCurrentDesignTools.CurrentSegment.Session
                    Try : sCave = .cboCaveList.SelectedItem.name : Catch : End Try '"" & pGetCurrentDesignTools.CurrentSegment.Cave
                    Try : sBranch = .cboCaveBranchList.SelectedItem.path : Catch : End Try '"" & pGetCurrentDesignTools.CurrentSegment.Branch
                    iDirection = .cboDirection.SelectedIndex

                    'Try : sFormula = .Formula : Catch : End Try
                    If bReplicateFormula Then
                        oReplicateFormula = frmSRI.GetScript
                        bDisableSegmentsChangeEvent = True
                    End If

                    'Dim oSegment As cSegment
                    'cerco il segmento...
                    'If iReplicateTo = 4 Then
                    For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                        If bReplicateSession Then
                            Call oSegment.SetSession(sSession)
                        End If
                        If bReplicateCave Then
                            Call oSegment.SetCave(sCave, sBranch)
                        End If
                        If bReplicateDirection Then
                            Dim bEnabled As Boolean = Not oSegment.IsProfileBinded
                            If bEnabled Then
                                If bReplicateDirection Then
                                    oSegment.Direction = iDirection
                                End If
                            End If
                        End If
                        If bReplicateFormula AndAlso Not oReplicateFormula Is Nothing Then
                            Call oReplicateFormula.Eval("ReplicateFormula", {oSegment})
                        End If
                    Next
                    Call oSurvey.Segments.SaveAll(bRebind)
                    If bReplicateFormula Then
                        bDisableSegmentsChangeEvent = False
                    End If
                    Call oMousePointer.Pop()

                    Call pSurveySegmentsRefresh()

                    Call pSurveyInvalidate()

                    Call pMapInvalidate()
                End If
            End With
        End Using
    End Sub

    Private Sub oDockClipart_OnItemCreate(ByVal Sender As Object, ByVal e As cDockClipart.OnItemEventArgs) Handles oDockClipart.OnItemCreate
        Dim oCurrentCenter As PointF = New PointF(picMap.Width / 2, picMap.Height / 2)
        Dim oBag As cEditToolsBag = e.Bag
        Call pDesignTools_CreateItem(oBag, True, oCurrentCenter, e.Filename)
    End Sub

    Private Sub frmTP_OnItemCreate(ByVal Sender As Object, ByVal e As cDockText.OnItemEventArgs) Handles oDockText.OnItemCreate
        Dim oCurrentCenter As PointF = New PointF(picMap.Width / 2, picMap.Height / 2)
        Dim oBag As cEditToolsBag = e.Bag
        Call pDesignTools_CreateItem(oBag, True, oCurrentCenter, "", e.Text, e.Size, e.Type)
    End Sub

    Private Function pDropExtensionCheck(Filename As String) As DropActionEnum
        Select Case IO.Path.GetExtension(Filename).ToLower
            Case ".jpg", ".jpeg", ".gif", ".bmp", ".tif", ".png"
                Return DropActionEnum.AddImageOrSketch
            Case ".csz", ".csx"
                Return DropActionEnum.ImportcSurveyData
            Case ".svg"
                Return DropActionEnum.ImportSVGDesign
            Case ".tro"
                Return DropActionEnum.ImportVTopoData
            Case ".dat"
                Return DropActionEnum.ImportCompassData
            Case ".txt"
                Return DropActionEnum.AddText
            Case ".csv"
                Return DropActionEnum.ImportTextData
            Case ".kml"
                Return DropActionEnum.ImportKMLData
            Case ".gpx"
                Return DropActionEnum.ImportGPXData
            Case Else
                Return DropActionEnum.AddAttachment
        End Select
    End Function

    Private Sub picMap_DragOver(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles picMap.DragOver
        If Not (e.Data.GetDataPresent(GetType(cDockClipart.OnItemEventArgs))) And Not (e.Data.GetDataPresent(GetType(cDockText.OnItemEventArgs))) Then
            If e.Data.GetDataPresent(DataFormats.FileDrop) Then
                Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
                If sFilePaths.Length = 1 Then
                    If pDropExtensionCheck(sFilePaths(0)) <> DropActionEnum.None Then
                        e.Effect = DragDropEffects.Copy
                    Else
                        e.Effect = DragDropEffects.None
                    End If
                Else
                    e.Effect = DragDropEffects.None
                End If
            ElseIf e.Data.GetDataPresent(GetType(cAttachmentsLink)) Then
                e.Effect = DragDropEffects.Copy
            Else
                e.Effect = DragDropEffects.None
            End If
        Else
            If e.Data.GetDataPresent(GetType(cDockClipart.OnItemEventArgs)) Then
                Dim oItem As cDockClipart.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockClipart.OnItemEventArgs)), cDockClipart.OnItemEventArgs)
                If oItem.Filename <> "" Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            ElseIf e.Data.GetDataPresent(GetType(cDockText.OnItemEventArgs)) Then
                Dim oItem As cDockText.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockText.OnItemEventArgs)), cDockText.OnItemEventArgs)
                If oItem.Text <> "" Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            End If
        End If
    End Sub

    Private Sub picMap_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles picMap.DragDrop
        If (e.Data.GetDataPresent(GetType(cDockClipart.OnItemEventArgs))) Then
            Dim oItem As cDockClipart.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockClipart.OnItemEventArgs)), cDockClipart.OnItemEventArgs)
            If oItem.Filename <> "" Then
                Dim oPoint As Point = picMap.PointToClient(New Point(e.X, e.Y))
                Call pDesignTools_CreateItem(oItem.Bag, True, oPoint, oItem.Filename)
            End If
        ElseIf e.Data.GetDataPresent(GetType(cDockText.OnItemEventArgs)) Then
            Dim oItem As cDockText.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockText.OnItemEventArgs)), cDockText.OnItemEventArgs)
            If oItem.Text <> "" Then
                Dim oPoint As Point = picMap.PointToClient(New Point(e.X, e.Y))
                Dim oBag As cEditToolsBag = Nothing
                Call pDesignTools_CreateItem(oItem.Bag, True, oPoint, "", oItem.Text, oItem.Size, oItem.Type)
            End If
        ElseIf e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Select Case pDropExtensionCheck(sFilePaths(0))
                    Case DropActionEnum.AddText
                        mnuMapDrop.Tag = sFilePaths(0)
                        btnMapDropImage.Visibility = BarItemVisibility.Never
                        btnMapDropSketch.Visibility = BarItemVisibility.Never
                        btnMapDropGenericText.Visibility = BarItemVisibility.Always
                        btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
                        btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
                        btnMapDropAttachment.Visibility = BarItemVisibility.Always
                        Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))

                    Case DropActionEnum.AddImageOrSketch
                        mnuMapDrop.Tag = sFilePaths(0)
                        btnMapDropImage.Visibility = BarItemVisibility.Always
                        btnMapDropSketch.Visibility = BarItemVisibility.Always
                        btnMapDropGenericText.Visibility = BarItemVisibility.Never
                        btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
                        btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
                        btnMapDropAttachment.Visibility = BarItemVisibility.Always
                        Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))

                    Case DropActionEnum.ImportSVGDesign
                        Call pSurveyImport(ImportExportFormatEnum.Design, sFilePaths(0), 1)

                    Case DropActionEnum.ImportKMLData
                        Call pSurveyImport(ImportExportFormatEnum.Track, sFilePaths(0), 1, True)
                    Case DropActionEnum.ImportGPXData
                        Call pSurveyImport(ImportExportFormatEnum.Track, sFilePaths(0), 2, True)

                    Case DropActionEnum.ImportTextData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 6, True)

                    Case DropActionEnum.ImportCompassData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 4, True)
                    Case DropActionEnum.ImportVTopoData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 1, True)
                    Case DropActionEnum.ImportcSurveyData
                        If pSurveyIsEmpty() Then
                            Call pSurveyLoad(sFilePaths(0), False)
                        Else
                            Call pSurveyImport(ImportExportFormatEnum.Design, sFilePaths(0), 2, True)
                        End If
                    Case DropActionEnum.AddAttachment
                        mnuMapDrop.Tag = sFilePaths(0)
                        btnMapDropImage.Visibility = BarItemVisibility.Never
                        btnMapDropSketch.Visibility = BarItemVisibility.Never
                        btnMapDropGenericText.Visibility = BarItemVisibility.Never
                        btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
                        btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
                        btnMapDropAttachment.Visibility = BarItemVisibility.Always
                        Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))
                End Select
            End If
        ElseIf e.Data.GetDataPresent(GetType(cAttachmentsLink)) Then
            Dim oAttachmentsLink As cAttachmentsLink = e.Data.GetData(GetType(cAttachmentsLink))
            mnuMapDrop.Tag = "id://" & oAttachmentsLink.Attachment.ID
            btnMapDropImage.Visibility = BarItemVisibility.Never
            btnMapDropSketch.Visibility = BarItemVisibility.Never
            btnMapDropGenericText.Visibility = BarItemVisibility.Never
            btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
            btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
            btnMapDropAttachment.Visibility = BarItemVisibility.Always
            Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))

            'ElseIf TypeOf e.Data Is BrightIdeasSoftware.OLVDataObject Then
            '    Dim oDataObject As OLVDataObject = DirectCast(e.Data, OLVDataObject)
            '    If oDataObject.ListView Is tvSegmentAttachments Then
            '        mnuMapDrop.Tag = "id://" & oDataObject.ModelObjects(0).attachment.id
            '        mnuMapDropImage.Visible = False
            '        mnuMapDropSketch.Visible = False
            '        mnuMapDropText.Visible = False
            '        mnuMapDropPocketTopo.Visible = False
            '        mnuMapDropCaveExplorer.Visible = False
            '        mnuMapDropAttachment.Visible = True
            '        Call mnuMapDrop.Show((New Point(e.X, e.Y)))
            '    End If
        End If
    End Sub

    Private Function pSurveyIsEmpty() As Boolean
        Dim sHash As String = pSurveyGetHash()
        Return sHash = sNewHash
    End Function

    Private Sub oProfileTools_OnLayerSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles oProfileTools.OnLayerSelect
        Select Case ToolEventArgs.CurrentLayer.Type
            Case cLayers.LayerTypeEnum.Base
                If Not btnLayer_Base.Checked Then
                    btnLayer_Base.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Borders
                If Not btnLayer_Borders.Checked Then
                    btnLayer_Borders.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.RocksAndConcretion
                If Not btnLayer_Rocks.Checked Then
                    btnLayer_Rocks.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Signs
                If Not btnLayer_Signs.Checked Then
                    btnLayer_Signs.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Soil
                If Not btnLayer_Soil.Checked Then
                    btnLayer_Soil.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.CeilingMorphologies
                If Not btnLayer_TerrainLevel.Checked Then
                    btnLayer_TerrainLevel.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                If Not btnLayer_Water.Checked Then
                    btnLayer_Water.PerformClick()
                End If
        End Select
        'Call frmCP_Rocks.SetEnabled(ToolEventArgs.CurrentLayer.Type = cLayers.LayerTypeEnum.RocksAndConcretion)
        'Call frmCP_Signs.SetEnabled(ToolEventArgs.CurrentLayer.Type = cLayers.LayerTypeEnum.Signs)
        Call pObjectPropertyLoad()
    End Sub

    Private Sub cmdPropNext_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropNext.Click
        Try
            If Not pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
                If pGetCurrentDesignTools.CurrentItem.Points.Last Is pGetCurrentDesignTools.CurrentItemPoint Then
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.First)
                Else
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.Next(pGetCurrentDesignTools.CurrentItemPoint))
                End If
            Else
                If pGetCurrentDesignTools.CurrentLayer.Items.Last Is pGetCurrentDesignTools.CurrentItem Then
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.First)
                Else
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.Next(pGetCurrentDesignTools.CurrentItem))
                End If
            End If
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub cmdPropPrev_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropPrev.Click
        Try
            If Not pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
                If pGetCurrentDesignTools.CurrentItem.Points.First Is pGetCurrentDesignTools.CurrentItemPoint Then
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.Last)
                Else
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.Previous(pGetCurrentDesignTools.CurrentItemPoint))
                End If
            Else
                If pGetCurrentDesignTools.CurrentLayer.Items.First Is pGetCurrentDesignTools.CurrentItem Then
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.Last)
                Else
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.Previous(pGetCurrentDesignTools.CurrentItem))
                End If
            End If
            Call pMapInvalidate()
            'If Not pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
            '    Dim iIndex As Integer = pGetCurrentDesignTools.CurrentItem.Points.IndexOf(pGetCurrentDesignTools.CurrentItemPoint)
            '    iIndex -= 1
            '    If iIndex < 0 Then
            '        iIndex = pGetCurrentDesignTools.CurrentItem.Points.Count - 1
            '    End If
            '    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points(iIndex))
            '    Call pMapInvalidate()
            'Else
            '    Dim iIndex As Integer = pGetCurrentDesignTools.CurrentLayer.Items.IndexOf(pGetCurrentDesignTools.CurrentItem)
            '    iIndex -= 1
            '    If iIndex < 0 Then
            '        iIndex = pGetCurrentDesignTools.CurrentLayer.Items.Count - 1
            '    End If
            '    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items(iIndex))
            '    Call pMapInvalidate()
            'End If
        Catch
        End Try
    End Sub

    Private Sub btnShowDesignByCaveAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        oCurrentOptions.HighlightCurrentCave = False
        Call pMapInvalidate()
    End Sub

    Private Sub btnShowDesignByCaveCurrent_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        oCurrentOptions.HighlightCurrentCave = True
        Dim sCurrentCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim sCurrentBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        pGetCurrentDesignTools.SelectCave(sCurrentCave, sCurrentBranch)
    End Sub

    Private Sub pSurveyRestoreCurrentWorkarea(Optional ByRef HavePaintInfo As Boolean = False, Optional ByRef HaveGridColor As Boolean = False)
        bDisabledCaveBranchChangeEvent = True
        Dim sSelectedCave As String
        Dim sSelectedCaveBranch As String
        sSelectedCave = oSurvey.SharedSettings.GetValue("plan.selectedcave", "")
        sSelectedCaveBranch = oSurvey.SharedSettings.GetValue("plan.selectedcavebranch", "")
        Call oPlanTools.SelectCave(sSelectedCave, sSelectedCaveBranch)

        sSelectedCave = oSurvey.SharedSettings.GetValue("profile.selectedcave", "")
        sSelectedCaveBranch = oSurvey.SharedSettings.GetValue("profile.selectedcavebranch", "")
        Call oProfileTools.SelectCave(sSelectedCave, sSelectedCaveBranch)

        sSelectedCave = oSurvey.SharedSettings.GetValue("threed.selectedcave", "")
        sSelectedCaveBranch = oSurvey.SharedSettings.GetValue("threed.selectedcavebranch", "")
        Call o3DTools.SelectCave(sSelectedCave, sSelectedCaveBranch)

        Try
            If oSurvey.SharedSettings.Contains("paintinfo") Then
                With oPaintInfo(0)
                    .PaintZoom = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("plan.paintinfo.zoom", 0))
                    .PaintTranslation.X = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("plan.paintinfo.translation.x", 0))
                    .PaintTranslation.Y = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("plan.paintinfo.translation.y", 0))
                    If Single.IsNaN(.PaintTranslation.X) Then .PaintTranslation.X = 0
                    If Single.IsNaN(.PaintTranslation.Y) Then .PaintTranslation.Y = 0
                End With

                With oPaintInfo(1)
                    .PaintZoom = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("profile.paintinfo.zoom", 0))
                    .PaintTranslation.X = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("profile.paintinfo.translation.x", 0))
                    .PaintTranslation.Y = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("profile.paintinfo.translation.y", 0))
                    If Single.IsNaN(.PaintTranslation.X) Then .PaintTranslation.X = 0
                    If Single.IsNaN(.PaintTranslation.Y) Then .PaintTranslation.Y = 0
                End With

                HavePaintInfo = True
            Else
                With oPaintInfo(0)
                    .PaintZoom = 0
                    .PaintTranslation = SizeF.Empty
                End With

                With oPaintInfo(1)
                    .PaintZoom = 0
                    .PaintTranslation = SizeF.Empty
                End With

                HavePaintInfo = False
            End If
        Catch
            oPaintInfo(0).PaintZoom = 0
            oPaintInfo(0).PaintTranslation = New SizeF(0, 0)

            oPaintInfo(1).PaintZoom = 0
            oPaintInfo(1).PaintTranslation = New SizeF(0, 0)

            HavePaintInfo = False
        End Try

        If oSurvey.SharedSettings.Contains("gridcolor") Then
            iGridColorBy = oSurvey.SharedSettings.GetValue("gridcolorby", 0)
            HaveGridColor = True
        Else
            HaveGridColor = False
        End If

        bDisabledCaveBranchChangeEvent = False
    End Sub

    Private Sub pSurveySaveCurrentWorkarea()
        Call oSurvey.SharedSettings.SetValue("plan.selectedcave", oPlanTools.CurrentCave)
        Call oSurvey.SharedSettings.SetValue("plan.selectedcavebranch", oPlanTools.CurrentBranch)
        Call oSurvey.SharedSettings.SetValue("profile.selectedcave", oProfileTools.CurrentCave)
        Call oSurvey.SharedSettings.SetValue("profile.selectedcavebranch", oProfileTools.CurrentBranch)
        Call oSurvey.SharedSettings.SetValue("threed.selectedcave", o3DTools.CurrentCave)
        Call oSurvey.SharedSettings.SetValue("threed.selectedcavebranch", o3DTools.CurrentBranch)

        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = cIDesign.cDesignTypeEnum.Unknown
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType >= 0 Then
            Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
        End If

        Call oSurvey.SharedSettings.SetValue("paintinfo", 1)
        Call oSurvey.SharedSettings.SetValue("plan.paintinfo.zoom", modNumbers.NumberToString(oPaintInfo(0).PaintZoom, "0.000"))
        Call oSurvey.SharedSettings.SetValue("plan.paintinfo.translation.x", modNumbers.NumberToString(oPaintInfo(0).PaintTranslation.X, "0.000"))
        Call oSurvey.SharedSettings.SetValue("plan.paintinfo.translation.y", modNumbers.NumberToString(oPaintInfo(0).PaintTranslation.Y, "0.000"))

        Call oSurvey.SharedSettings.SetValue("profile.paintinfo.zoom", modNumbers.NumberToString(oPaintInfo(1).PaintZoom, "0.000"))
        Call oSurvey.SharedSettings.SetValue("profile.paintinfo.translation.x", modNumbers.NumberToString(oPaintInfo(1).PaintTranslation.X, "0.000"))
        Call oSurvey.SharedSettings.SetValue("profile.paintinfo.translation.y", modNumbers.NumberToString(oPaintInfo(1).PaintTranslation.Y, "0.000"))

        Call oSurvey.SharedSettings.SetValue("gridcolor", 1)
        Call oSurvey.SharedSettings.SetValue("gridcolorby", iGridColorBy)
    End Sub

    Private Sub pTrigpointsTrigPointRename()
        Dim oTrigPoint As cTrigPoint = pGetCurrentTools.CurrentTrigpoint
        Using frmRTP As frmRenameTrigpoints = New frmRenameTrigpoints(oSurvey)
            With frmRTP
                If Not grdViewTrigpoints.GetFocusedRow Is Nothing Then
                    .cboOld.Text = DirectCast(grdViewTrigpoints.GetFocusedRow, cTrigPoint).Name
                End If
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    Dim oCurrentSegment As cSegment = oTools.CurrentSegment
                    Dim oCurrentTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
                    Call pGetCurrentTools.SelectSegment(Nothing)
                    Call pGetCurrentTools.SelectTrigpoint(Nothing)

                    Dim sOld As String = .cboOld.Text
                    Dim sNew As String = .txtNew.Text
                    Call oSurvey.TrigPoints.RenameTrigPoint(sOld, sNew)

                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()

                    Call pSegmentSelect(oCurrentSegment, False, False)
                    Call pTrigPointSelect(oCurrentTrigpoint, False, False)

                    Call pSurveyTrigpointsRefresh()
                End If
            End With
        End Using
    End Sub

    Private Sub pSegmentsTrigPointRename()
        Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
        Using frmRTP As frmRenameTrigpoints = New frmRenameTrigpoints(oSurvey)
            With frmRTP
                If grdViewSegments.FocusedColumn Is colSegmentsListFrom OrElse grdViewSegments.FocusedColumn Is colSegmentsListTo Then
                    .cboOld.Text = grdViewSegments.FocusedValue
                End If
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    Dim oCurrentSegment As cSegment = oTools.CurrentSegment
                    Dim oCurrentTrigpoint As cTrigPoint = oTools.CurrentTrigpoint

                    Call pGetCurrentTools.SelectSegment(Nothing)
                    Call pGetCurrentTools.SelectTrigpoint(Nothing)

                    Dim sOld As String = .cboOld.Text.ToUpper
                    Dim sNew As String = .txtNew.Text.ToUpper
                    Call oSurvey.TrigPoints.RenameTrigPoint(sOld, sNew)

                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()

                    Call pSegmentSelect(oCurrentSegment, False, False)
                    Call pTrigPointSelect(oCurrentTrigpoint, False, False)

                    Call pTrigpointsRefresh()
                End If
            End With
        End Using
    End Sub

    Private Sub mnuSegmentsRenameTrigpoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSegmentsTrigPointRename()
    End Sub

    'Private Sub tmrRedraw_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call tmrRedraw.Stop()
    '    Call pMapInvalidate()
    'End Sub

    Private Sub pSequenceRevert()
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.RevertSequence(oPoint)
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub txtPropPenDecorationScale_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPropPenDecorationScale.ValueChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()

                    If optPropObjectSequence.Checked Then
                        Call pObjectSetSequencePen()
                        .CurrentItem.Points.GetSequence(.CurrentItemPoint).First.Pen.DecorationScale = txtPropPenDecorationScale.Value
                    Else
                        .CurrentItem.Pen.DecorationScale = txtPropPenDecorationScale.Value
                    End If
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub mnuPlotCalculate_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyCalculate(True)
    End Sub

    Private Sub pSurveyWipeData()
        Using frmDDD As frmDeleteDataDialog = New frmDeleteDataDialog
            If frmDDD.ShowDialog(Me) = DialogResult.OK Then
                If MsgBox(GetLocalizedString("main.warning17"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
                    Call pGetCurrentTools.SelectSegment(Nothing)
                    If frmDDD.RadioButton1.Checked Then
                        Call oSurvey.Segments.Clear()
                    ElseIf frmDDD.RadioButton2.Checked Then
                        Call oSurvey.Segments.Clear(cSegments.ClearFlags.OnlySplays)
                    End If
                    Call pGetCurrentTools.Undo.Clear()
                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()
                End If
            End If
        End Using
    End Sub

    Private Sub pDesignRestoreShowBinding()
        If Not oCurrentOptions Is Nothing Then
            btnDesignPlotShowBindings.Checked = oCurrentOptions.ShowSegmentBindings
        End If
    End Sub

    Private Sub pDesignShowBindings(ShowBindings As Boolean)
        If oCurrentOptions.ShowSegmentBindings <> ShowBindings Then
            btnDesignPlotShowBindings.Checked = ShowBindings
            oCurrentOptions.ShowSegmentBindings = ShowBindings
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboSegmentCaveList_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboSegmentCaveList.SelectedIndexChanged
        'Call pSurveyFillCaveBranchList(CType(cboSegmentCaveList.SelectedItem, cCaveInfo), cboSegmentCaveBranchList)
        Call cboSegmentCaveBranchList.Rebind(CType(cboSegmentCaveList.SelectedItem, cICaveInfoBranches), False)
        Call pSegmentSetCaveBranchesColor()
    End Sub

    Private Sub cboPropBranchList_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropCaveBranchList.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cItem = .CurrentItem
                    Call oItem.SetCave(cboPropCaveList.Text, cboPropCaveBranchList.Text, True)
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    'Private Sub pItemChange(ByVal NewItemType As String)
    '    Dim sBranch As String = btnMainCaveBranchList.EditValue
    '    Dim sCave As String = btnMainCaveList.editvalue
    '    Dim oNewItem As cItem = Nothing
    '    Select Case NewItemType.ToLower
    '        Case "caveborder"
    '            Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
    '            oNewItem = oLayer.CreateCaveBorder(sCave, sBranch)
    '        Case "presumedcaveborder"
    '            Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
    '            oNewItem = oLayer.CreatePresumedCaveBorder(sCave, sBranch)
    '        Case "toonarrowcaveborder"
    '            Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
    '            oNewItem = oLayer.CreateTooNarrowCaveBorder(sCave, sBranch)
    '        Case "underlyingcaveborder"
    '            Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
    '            oNewItem = oLayer.CreateUnderlyingCaveBorder(sCave, sBranch)

    '        Case "border"
    '            Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
    '            oNewItem = oLayer.CreateBorder(sCave, sBranch)
    '        Case "presumedborder"
    '            Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
    '            oNewItem = oLayer.CreatePresumedBorder(sCave, sBranch)
    '        Case "waterarea"
    '            Dim oLayer As cLayerWaterAndFloorMorphologies = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.WaterAndFloorMorphologies)
    '            oNewItem = oLayer.CreateWaterArea(sCave, sBranch)
    '        Case "soil"
    '            Dim oLayer As cLayerSoil = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Soil)
    '            oNewItem = oLayer.CreateSoil(sCave, sBranch)
    '        Case "pebblessoil"
    '            Dim oLayer As cLayerSoil = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Soil)
    '            oNewItem = oLayer.CreatePebblesSoil(sCave, sBranch)
    '        Case "smalldebritssoil"
    '            Dim oLayer As cLayerSoil = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Soil)
    '            oNewItem = oLayer.CreateSmallDebritsSoil(sCave, sBranch)
    '        Case "bigdebritssoil"
    '            Dim oLayer As cLayerSoil = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Soil)
    '            oNewItem = oLayer.CreateBigDebritsSoil(sCave, sBranch)
    '        Case "sandsoil"
    '            Dim oLayer As cLayerSoil = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Soil)
    '            oNewItem = oLayer.CreateSandSoil(sCave, sBranch)
    '        Case "flowsoil"
    '            Dim oLayer As cLayerSoil = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Soil)
    '            oNewItem = oLayer.CreateFlowSoil(sCave, sBranch)
    '    End Select
    '    If Not oNewItem Is Nothing Then
    '        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
    '        Call oNewItem.Points.AddRange(oItem.Points)
    '        Call pGetCurrentDesignTools.DeleteItem()
    '        Call pGetCurrentDesignTools.SelectItem(oNewItem)
    '        Call pMapInvalidate()
    '    End If
    'End Sub

    Private Sub mnuDesignItemChangeTo1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemChangeTo1.Click
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim oNewItem As cItemInvertedFreeHandArea = oLayer.CreateCaveBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub mnuDesignItemChangeTo2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemChangeTo2.Click
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim oNewItem As cItemFreeHandLine = oLayer.CreateBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub mnuDesignItemChangeTo3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemChangeTo3.Click
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerCeilingMorphologies = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.CeilingMorphologies)
        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim oNewItem As cItemFreeHandLine = oLayer.CreateCeilingBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub mnuDesignItemChangeTo4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemChangeTo4.Click
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerWaterAndFloorMorphologies = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.WaterAndFloorMorphologies)
        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim oNewItem As cItemFreeHandLine = oLayer.CreateBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub pRulersSetVisible(Visible As Boolean)
        If bDrawRulers <> Visible Then
            bDrawRulers = Visible
            btnViewRulers.Checked = bDrawRulers
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnCurrentItemGenericReducePoint_Click(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnCurrentItemGenericReducePoint.ItemClick
        Try
            If MsgBox(GetLocalizedString("main.warning11"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
                With pGetCurrentDesignTools()
                    Dim oItem As Items.cIItemLine = .CurrentItem
                    Call oItem.ReducePoints(btnCurrentItemGenericReducePointFactor.EditValue)
                    Call .TakeUndoSnapshot()
                End With
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cmdPropSegmentsLock_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropSegmentsLock.Click
        Try
            With pGetCurrentDesignTools()
                .CurrentItem.LockSegments()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
            Call pObjectPropertyLoad()
        Catch
        End Try
    End Sub

    Private Sub cmdPropSegmentsUnlock_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropSegmentsUnlock.Click
        Try
            With pGetCurrentDesignTools()
                .CurrentItem.UnlockSegments()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
            Call pObjectPropertyLoad()
        Catch
        End Try
    End Sub

    Private Function pFloatingToolbarGetLocation() As Point
        Select Case iDesignBarPosition
            Case DesignBarPositionEnum.TopLeftCorner
                Return picMap.PointToScreen(New Point(8, 48))
            Case DesignBarPositionEnum.NearCurrentItem
                If pGetCurrentDesignTools.CurrentItem Is Nothing Then
                    Return picMap.PointToScreen(New Point(8, 48))
                    'Return Point.Empty
                Else
                    'Dim oPenToolsPointF As PointF = modPaint.ToPaintPoint(New PointF(pGetCurrentDesignTools.CurrentItem.GetBounds.Left, pGetCurrentDesignTools.CurrentItem.GetBounds.Top), sPaintZoom, oPaintTranslation)
                    'Return picMap.PointToScreen(New Point(oPenToolsPointF.X - 4, oPenToolsPointF.Y - 4))
                    Dim oItemBound As RectangleF = modPaint.ToPaintRectangle(pGetCurrentDesignTools.CurrentItem.GetBounds, sPaintZoom, oPaintTranslation)
                    Dim oVisibleBound As RectangleF = RectangleF.Intersect(oItemBound, picMap.ClientRectangle)
                    Debug.Print(oVisibleBound.ToString)
                    If oVisibleBound.IsEmpty Then
                        Return picMap.PointToScreen(New Point(8, 48))
                    Else
                        Return picMap.PointToScreen(New Point(oVisibleBound.X - 4, oVisibleBound.Y - 24))
                    End If
                End If
            Case DesignBarPositionEnum.NearCurrentItemAndPoint, DesignBarPositionEnum.Default
                If pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
                    If pGetCurrentDesignTools.CurrentItem Is Nothing Then
                        Return picMap.PointToScreen(New Point(8, 48))
                    Else
                        Dim oItemBound As RectangleF = modPaint.ToPaintrectangle(pGetCurrentDesignTools.CurrentItem.GetBounds, sPaintZoom, oPaintTranslation)
                        Dim oVisibleBound As RectangleF = RectangleF.Intersect(oItemBound, picMap.ClientRectangle)
                        Debug.Print(oVisibleBound.ToString)
                        If oVisibleBound.IsEmpty Then
                            Return picMap.PointToScreen(New Point(8, 48))
                        Else
                            Return picMap.PointToScreen(New Point(oVisibleBound.X - 4, oVisibleBound.Y - 24))
                        End If
                        'Dim oPenToolsPointF As PointF = modPaint.ToPaintPoint(New PointF(pGetCurrentDesignTools.CurrentItem.GetBounds.Left, pGetCurrentDesignTools.CurrentItem.GetBounds.Top), sPaintZoom, oPaintTranslation)
                        'Return picMap.PointToScreen(New Point(oPenToolsPointF.X - 4, oPenToolsPointF.Y - 24))
                    End If
                Else
                    Dim oPenToolsPointF As PointF = modPaint.ToPaintPoint(New PointF(pGetCurrentDesignTools.CurrentItemPoint.X, pGetCurrentDesignTools.CurrentItemPoint.Y), sPaintZoom, oPaintTranslation)
                    Using oPath As GraphicsPath = New GraphicsPath
                        Dim oNextPoint As cPoint = pGetCurrentDesignTools.CurrentItemPoint.GetNext
                        If Not IsNothing(oNextPoint) Then
                            Call oPath.AddLine(oPenToolsPointF, modPaint.ToPaintPoint(New PointF(oNextPoint.X, oNextPoint.Y), sPaintZoom, oPaintTranslation))
                        End If
                        Dim oPrevPoint As cPoint = pGetCurrentDesignTools.CurrentItemPoint.GetPrevious
                        If Not IsNothing(oPrevPoint) Then
                            Call oPath.AddLine(oPenToolsPointF, modPaint.ToPaintPoint(New PointF(oPrevPoint.X, oPrevPoint.Y), sPaintZoom, oPaintTranslation))
                        End If
                        If oPath.GetBounds.IsEmpty Then
                            Return picMap.PointToScreen(New Point(oPenToolsPointF.X - 4, oPenToolsPointF.Y - 24))
                        Else
                            Return picMap.PointToScreen(New Point(oPath.GetBounds.Location.X - 4, oPath.GetBounds.Location.Y - 24))
                        End If
                    End Using
                End If
        End Select
    End Function

    Private Sub pSurveyDrawTools(Graphics As Graphics)
        If Not pGetCurrentDesignTools.CurrentItem Is Nothing Then
            If pGetCurrentDesignTools.IsInEdit Then
                'mentre sono in edit...non disegno i punti di modifica
                Call modPaint.PaintSelection(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, pGetCurrentDesignTools.CurrentItem, sPaintZoom)
            Else
                If pGetCurrentDesignTools.CurrentItem.Type = cIItem.cItemTypeEnum.Items Then
                    Dim oItems As cItemItems = pGetCurrentDesignTools.CurrentItem
                    For Each oItem As cItem In oItems
                        Call modPaint.PaintSelection(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, oItem, sPaintZoom) ' / DPIRatio)
                    Next
                    Call modPaint.PaintSelectionTools(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, oItems, pGetCurrentDesignTools, sPaintZoom) ' / DPIRatio)
                Else
                    Call modPaint.PaintSelectionTools(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, pGetCurrentDesignTools.CurrentItem, pGetCurrentDesignTools, sPaintZoom)
                End If
            End If

            Try
                Dim bEndEnabled As Boolean = pGetCurrentDesignTools.IsInEdit
                btnItemsEndEdit.Enabled = bEndEnabled
            Catch ex As Exception
            End Try
        End If
        'Call pFloatingToolbarHide()
    End Sub

    Private Sub pSurveyDraw(ByVal Graphics As Graphics, Optional DisableDrawSelection As Boolean = False)
        If Not bDrawing Then
            bDrawing = True
            Call oMousePointer.Push(Cursors.AppStarting)

            Dim iWidth As Integer = picMap.Width - oVSB.Width
            Dim iHeight As Integer = picMap.Height - oHSB.Height

            Select Case iDesignQuality
                Case DesignQualityLevelEnum.Base
                    Graphics.CompositingQuality = CompositingQuality.HighSpeed
                    Graphics.InterpolationMode = InterpolationMode.Low
                    Graphics.SmoothingMode = SmoothingMode.HighSpeed
                    Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.AntiAlias
                Case DesignQualityLevelEnum.MediumQuality
                    Graphics.CompositingQuality = CompositingQuality.HighSpeed
                    Graphics.InterpolationMode = InterpolationMode.Default
                    Graphics.SmoothingMode = SmoothingMode.AntiAlias
                    Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.ClearTypeGridFit
                Case DesignQualityLevelEnum.HighQuality
                    Graphics.CompositingQuality = CompositingQuality.HighQuality
                    Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic
                    Graphics.SmoothingMode = SmoothingMode.HighQuality
                    Graphics.TextRenderingHint = Drawing.Text.TextRenderingHint.ClearTypeGridFit
            End Select

            If Not oFrozenDesktop Is Nothing Then
                Call Graphics.DrawImageUnscaled(oFrozenDesktop, New Point(0, 0))
            End If

            Call Graphics.ScaleTransform(sPaintZoom, sPaintZoom, MatrixOrder.Append)
            Call Graphics.TranslateTransform(oPaintTranslation.X, oPaintTranslation.Y, MatrixOrder.Append)

            Dim oDesignTools As cEditDesignTools = pGetCurrentDesignTools()

            If Not oFrozenDesktop Is Nothing Then
                If Not oDesignTools.CurrentItem Is Nothing Then
                    Call oDesignTools.CurrentItem.Paint(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, cItem.SelectionModeEnum.InEdit)
                End If
                If Not DisableDrawSelection Then
                    Call pSurveyDrawTools(Graphics)
                    If oDesignTools.IsLastPoint Then
                        Call modPaint.PaintLastPoint(Graphics, oSurvey, oDesignTools.LastItemPoint, sPaintZoom, oPaintTranslation)
                    End If
                End If
            Else
                Call MapDrawPrintOrExportArea(Graphics, oCurrentOptions, oSurvey, oCurrentDesign, sPaintZoom)
                If oDesignTools.IsFiltered AndAlso oDesignTools.FilterWhiteBoard Then
                    'whiteboard effect...to be optimized...
                    oDesignTools.Filter.Reversed = Not oDesignTools.Filter.Reversed
                    oDesignTools.FilterApply(False)
                    Call oCurrentDesign.Paint(Graphics, oCurrentOptions, cDrawOptions.Empty, oDesignTools)
                    Call Graphics.FillRectangle(New SolidBrush(Color.FromArgb(120, Color.White)), Graphics.ClipBounds)
                    oDesignTools.Filter.Reversed = Not oDesignTools.Filter.Reversed
                    oDesignTools.FilterApply(False)
                    Call oCurrentDesign.Paint(Graphics, oCurrentOptions, cDrawOptions.Empty, oDesignTools)
                Else
                    Call oCurrentDesign.Paint(Graphics, oCurrentOptions, cDrawOptions.Empty, oDesignTools)
                End If
                If Not DisableDrawSelection Then
                    Call pSurveyDrawTools(Graphics)
                    If oDesignTools.IsNewPoint Then
                        Call modPaint.PaintNewPoint(Graphics, oSurvey, oDesignTools.CurrentItemPoint, sPaintZoom, oPaintTranslation)
                    End If
                    If oDesignTools.IsLastPoint Then
                        Call modPaint.PaintLastPoint(Graphics, oSurvey, oDesignTools.LastItemPoint, sPaintZoom, oPaintTranslation)
                    End If
                End If
                Call modPaint.PaintCurrentMarkedDesktopPoint(Graphics, oSurvey, oDesignTools.CurrentMarkedDesktopPoint, sPaintZoom)

                Graphics.SmoothingMode = SmoothingMode.None
                Call modPaint.MapDrawAxis(Graphics, oSurvey)
                If iDrawMetricGrid = 1 Then
                    Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, sPaintZoom)
                ElseIf iDrawMetricGrid = 2 Then
                    If oTools.CurrentSegment Is Nothing Then
                        Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, sPaintZoom)
                    Else
                        If oTools.CurrentSegment.IsValid Then
                            Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, oCurrentDesign, oTools.CurrentSegment, oTools.CurrentTrigpoint, sPaintZoom, oPaintTranslation)
                        Else
                            Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, sPaintZoom)
                        End If
                    End If
                End If
                If bDrawRulers Then
                    Call modPaint.MapDrawRulers(Graphics, oCurrentOptions, oSurvey, oDesignTools, iDrawRulesStyle, sPaintZoom)
                End If

                Graphics.SmoothingMode = SmoothingMode.AntiAlias
                Call Graphics.ResetTransform()
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    Dim oMultiSelRect As RectangleF = pGetMultiSelRect()
                    If Not oMultiSelRect.IsEmpty Then
                        Dim oMultiSelBrush As SolidBrush = Nothing
                        Dim oMultiSelPen As Pen = Nothing
                        Select Case iMultiSelEnabled
                            Case MultiSelTypeEnum.Zoom
                                oMultiSelBrush = oMultiSelBrush1
                                oMultiSelPen = oMultiSelPen1
                            Case MultiSelTypeEnum.SingleLayer
                                oMultiSelBrush = oMultiSelBrush2
                                oMultiSelPen = oMultiSelPen2
                            Case MultiSelTypeEnum.MultiLayer
                                oMultiSelBrush = oMultiSelBrush3
                                oMultiSelPen = oMultiSelPen3
                        End Select
                        If Not oMultiSelBrush Is Nothing Then
                            Call Graphics.FillRectangle(oMultiSelBrush, oMultiSelRect)
                        End If
                        If Not oMultiSelPen Is Nothing Then
                            Call Graphics.DrawRectangle(oMultiSelPen, Rectangle.Truncate(oMultiSelRect))
                        End If
                    End If
                End If
            End If

            If oFrozenDesktop Is Nothing Then
                If oSurvey.Invalidated <> Calculate.cCalculate.InvalidateEnum.None Then
                    Call Graphics.DrawImage(modPaint.SVGToBitmap(My.Resources.warning, New Drawing.Size(32, 32), LookAndFeel), 8, 8)
                End If
            End If

            Call oMousePointer.Pop()
            bDrawing = False
        End If
    End Sub

    Private Sub pPopupShow(ByVal Type As String, ByVal Text As String, Optional Details As String = "")
        With pnlPopup
            Dim bShow As Boolean
            Select Case Type.ToLower
                Case "error"
                    picPopupWarning.SvgImage = My.Resources.error2
                    .BackColor = Color.PeachPuff
                    bShow = True
                Case "warning"
                    picPopupWarning.SvgImage = My.Resources.warning
                    .BackColor = Color.LightYellow
                    bShow = True
            End Select
            If bShow Then
                Dim sText As String = If(Text.Length > 2048, Text.Substring(0, 2048), Text)
                lblPopupWarning.Text = sText
                Call tipDefault.SetToolTip(lblPopupWarning, sText & If(Details <> "", vbCrLf & Details, ""))
                'Call .SendToBack()
                .Visible = True
            End If
        End With
    End Sub

    Private Sub pPopupHide()
        Call pnlPopup.Hide()
    End Sub

    Private Sub mnuTrigPointsRenameTrigpoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pTrigpointsTrigPointRename()
    End Sub

    Private Sub mnuTrigPointsRebind_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyTrigpointsRefresh()
    End Sub

    Private Sub mnuTrigPointsRemoveOrphans_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pTrigpointRemoveOrphans()
    End Sub

    Private Sub pTrigpointRemoveOrphans()
        If MsgBoxResult.Yes = MsgBox(GetLocalizedString("main.warning10"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            Call pSurveyTrigpointsRefresh(True)
        End If
    End Sub

    'Private Sub mnuViewTrigPoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    mnuViewTrigPoints.Checked = Not mnuViewTrigPoints.Checked
    '    Call pTrigpointsShow(mnuViewTrigPoints.Checked)
    'End Sub

    Private Sub btnSegments_Click(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnSegments.DownChanged
        btnSegments.Down = True
        btnTrigpoints.Down = False
        btnSegmentsAndTrigPoints.Down = False
        Call pSegmentsShow(True)
    End Sub

    Private Sub btnTrigPoints_Click(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnTrigpoints.DownChanged
        btnSegments.Down = False
        btnTrigpoints.Down = True
        btnSegmentsAndTrigPoints.Down = False
        Call pTrigpointsShow(True)
    End Sub

    Private Sub btnSegmentsAndTrigPoints_Click(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnSegmentsAndTrigPoints.DownChanged
        btnSegments.Down = False
        btnTrigpoints.Down = False
        btnSegmentsAndTrigPoints.Down = True
        Call pSegmentsAndTrigPointsShow(True)
    End Sub

    Private Delegate Sub picMapInvalidateDelegate()

    Private Sub pMapInvalidate()
        Call picMap.Invalidate()
        If Not frmV Is Nothing Then
            Call frmV.MapInvalidate()
        End If
    End Sub

    Private Sub cmdPropParent_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropParent.Click
        Call pGetCurrentDesignTools.EndPoint()
    End Sub

    'Private Sub mnuLayersAndItemsProperty_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuLayersAndItemsProperty.Click
    '    If TypeOf tvLayers2.SelectedObject Is cLayer Then
    '    ElseIf TypeOf tvLayers2.SelectedObject Is cItem Then
    '        Dim oItem As cItem = tvLayers2.SelectedObject
    '        Call pGetCurrentDesignTools.SelectItem(oItem)
    '        Call pMapInvalidate()
    '        Call pObjectPropShow(True)
    '        Call tabObjectProp.SelectTab(tabObjectPropMain)
    '    End If
    'End Sub

    'Private Sub mnuLayersAndItemsRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuLayersAndItemsRefresh.Click
    '    Call pSurveyLoadTreeLayers()
    'End Sub

    'Private Sub mnuLayersAndItemsExpand_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuLayersAndItemsExpand.Click
    '    If Not IsNothing(tvLayers2.FocusedItem) Then
    '        Call tvLayers2.Expand(tvLayers2.FocusedObject)
    '    End If
    'End Sub

    'Private Sub pSurveyLayersCollapse()
    '    Call oDockLevels.CollapseAll()
    'End Sub

    'Private Sub pSurveyLayersExpand()
    '    Call oDockLevels.ExpandAll()
    'End Sub

    'Private Sub tvLayers_NodeMouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.TreeNodeMouseClickEventArgs)
    '    If e.Node.Name Like "item:*" Then
    '        Dim oItem As cItem = e.Node.Tag
    '        If oItem.Deleted Then
    '            With e.Node
    '                .ImageKey = "cross"
    '                .StateImageKey = "cross"
    '                .SelectedImageKey = "cross"
    '            End With
    '        End If
    '    End If
    '    If e.Node.Name Like "layer:*" Then
    '        '?
    '    End If
    'End Sub

    'Private Sub tvLayers_NodeMouseDoubleClick(ByVal sender As Object, ByVal e As System.Windows.Forms.TreeNodeMouseClickEventArgs)
    '    If e.Node.Name Like "item:*" Then
    '        Dim oItem As cItem = e.Node.Tag
    '        If Not oItem.Deleted Then
    '            Call pGetCurrentDesignTools.SelectItem(oItem)
    '            If My.Computer.Keyboard.CtrlKeyDown Then
    '                Call pMapCenterAndFitSelection()
    '            End If
    '            Call pMapInvalidate()
    '        End If
    '    End If
    '    If e.Node.Name Like "layer:*" Then
    '        Dim oLayer As cLayer = e.Node.Tag
    '        Call pGetCurrentDesignTools.SelectLayer(oLayer)
    '    End If
    'End Sub

    Private Delegate Sub pSurveyHighlightCurrentCaveDelegate(ForceRefresh As Boolean)
    Private Sub pSurveyHighlightCurrentCave(ForceRefresh As Boolean)
        If InvokeRequired Then
            Call Me.BeginInvoke(New pSurveyHighlightCurrentCaveDelegate(AddressOf pSurveyHighlightCurrentCave), {ForceRefresh})
        Else
            If oCurrentOptions.HighlightCurrentCave OrElse ForceRefresh Then
                Call pSurveySegmentsAndTrigpointVisibility()
                'Call pSurveyLoadTreeLayers()
                Call pSurveyRedraw()
                Dim oTimer As Threading.Timer = New Threading.Timer(AddressOf pSurveyDelayedLoadTreeLayers, Nothing, 10, Threading.Timeout.Infinite)
            End If
        End If
    End Sub

    Private Sub pSurveyDelayedLoadTreeLayers(State As Object)
        If Not oDockLevels Is Nothing Then
            Call oDockLevels.RefreshData()
        End If
        'Call pSurveyLoadTreeLayers()
    End Sub

    Private Sub pFloatingToolbarUpdate()
        If Not pGetCurrentDesignTools() Is o3DTools Then
            If pGetCurrentDesignTools.IsInPointEdit Then
                If barDesignerItemPointFloat.Visible Then
                    barDesignerItemPointFloat.Location = pFloatingToolbarGetLocation()
                End If
            Else
                If barDesignerItemFloat.Visible Then
                    barDesignerItemFloat.Location = pFloatingToolbarGetLocation()
                End If
            End If
        End If
    End Sub

    Private Delegate Sub pFloatingToolbarShowDelegate()
    Private Sub pFloatingToolbarShow()
        If InvokeRequired Then
            Call Me.BeginInvoke(New pFloatingToolbarShowDelegate(AddressOf pFloatingToolbarShow))
        Else
            If Not pGetCurrentDesignTools() Is o3DTools Then
                If pGetCurrentDesignTools.IsInPointEdit Then
                    'If barDesignerItemFloat.Visible Then
                    bFloatingToolbarHiding = True
                    Call barDesignerItemFloat.Hide()
                    bFloatingToolbarHiding = False
                    'End If
                    If barDesignerItemPointFloat.Visible Then
                        barDesignerItemPointFloat.Location = pFloatingToolbarGetLocation()
                    Else
                        barDesignerItemPointFloat.Show(pFloatingToolbarGetLocation())
                    End If
                    Call barDesignerItemPointFloat.Refresh()
                    'Call RibbonControl.Refresh()
                Else
                    'If barDesignerItemPointFloat.Visible Then
                    bFloatingToolbarHiding = True
                    Call barDesignerItemPointFloat.Hide()
                    bFloatingToolbarHiding = False
                    'End If
                    If barDesignerItemFloat.Visible Then
                        barDesignerItemFloat.Location = pFloatingToolbarGetLocation()
                    Else
                        barDesignerItemFloat.Show(pFloatingToolbarGetLocation())
                    End If
                    Call barDesignerItemFloat.Refresh()
                    'Call RibbonControl.Refresh()
                End If
            End If
        End If
    End Sub

    Private bFloatingToolbarHiding As Boolean

    Private Delegate Sub pFloatingToolbarHideDelegate()
    Private Sub pFloatingToolbarHide()
        If InvokeRequired Then
            Call Me.BeginInvoke(New pFloatingToolbarShowDelegate(AddressOf pFloatingToolbarHide))
        Else
            bFloatingToolbarHiding = True
            Call barDesignerItemFloat.Hide()
            Call barDesignerItemPointFloat.Hide()
            bFloatingToolbarHiding = False
        End If
    End Sub

    'Private Sub btnPenSegmentSetCurrentCaveBranch_Click(sender As Object, e As EventArgs)
    '    Call pSurveySetCurrentCaveBranch(oTools.CurrentSegment.Cave, oTools.CurrentSegment.Branch)
    '    Call pSurveyRedraw()
    'End Sub

    'Private Sub btnPenSegmentInvert_Click(sender As Object, e As EventArgs)
    '    If oSurvey.Properties.InversionMode = cSurvey.cSurvey.InversioneModeEnum.Relative Then
    '        Call mnuDesignItemSegmentInvert_Click(Nothing, Nothing)
    '    Else
    '        Call mnuDesignItemSegmentDirection0_Click(Nothing, Nothing)
    '    End If
    'End Sub

    'Private Sub btnPenSegmentFrom_Click(sender As Object, e As EventArgs)
    '    Call mnuDesignItemSegmentTrigpointFrom_Click(Nothing, Nothing)
    'End Sub

    'Private Sub btnPenSegmentTo_Click(sender As Object, e As EventArgs)
    '    Call mnuDesignItemSegmentTrigpointTo_Click(Nothing, Nothing)
    'End Sub

    'Private Sub btnPenPaste_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pClipboardPaste()
    'End Sub

    'Private Sub btnPenSegment_Click(sender As Object, e As EventArgs) Handles btnPenSegment.Click
    '    Call mnuDesignItemSegment_Click(Nothing, Nothing)
    'End Sub

    'Private Sub btnPenLock_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenLock.Click
    '    btnPenLock.Checked = Not btnPenLock.Checked
    '    Try
    '        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
    '        oItem.Locked = btnPenLock.Checked
    '        chkPropLock.Checked = oItem.Locked
    '        Call pObjectPropertyLoad()
    '        Call pMapInvalidate()
    '    Catch ex As Exception
    '    End Try
    'End Sub

    'Private Sub btnPenEndEdit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenEndEdit.Click
    '    If pGetCurrentDesignTools.IsInEdit Then
    '        Call pGetCurrentDesignTools.EndAndSelectItem()
    '    End If
    'End Sub

    'Private Sub btnPenContextMenu_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenContextMenu.Click
    '    If pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
    '        Call mnuDesignItem.Show(Cursor.Position)
    '    Else
    '        Call mnuDesignItemPoint.Show(Cursor.Position)
    '    End If
    'End Sub

    'Private Sub btnPenBringToTop_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenBringToTop.Click
    '    Try
    '        With pGetCurrentDesignTools
    '            Call .CurrentLayer.Items.BringToTop(.CurrentItem)
    '            Call .TakeUndoSnapshot()
    '        End With
    '        Call pMapInvalidate()
    '    Catch
    '    End Try
    'End Sub

    'Private Sub btnPenSendToBottom_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenSendToBottom.Click
    '    Try
    '        With pGetCurrentDesignTools
    '            Call .CurrentLayer.Items.SendToBottom(.CurrentItem)
    '            Call .TakeUndoSnapshot()
    '        End With
    '        Call pMapInvalidate()
    '    Catch
    '    End Try
    'End Sub

    'Private Sub btnPenObjectProp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenObjectProp.Click
    '    Call pObjectPropShow(True)
    '    Call tabObjectProp.SelectTab(tabObjectPropMain)
    'End Sub

    'Private Sub btnPenDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenDelete.Click
    '    Call pDesignItemDelete()
    'End Sub

    'Private Sub btnPenAddPoint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenAddPoint.Click
    '    Call pItemAddPoint()
    'End Sub

    'Private Sub btnPenDeletePoint_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPenDeletePoint.Click
    '    Try
    '        With pGetCurrentDesignTools
    '            Call .DeleteItemPoint()
    '        End With
    '        Call pMapInvalidate()
    '    Catch
    '    End Try
    'End Sub

    Private Sub mnuSegmentsTrigPointsFrom_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If Not pGetCurrentTools.CurrentSegment Is Nothing Then
            Dim sPivotTrigPoint As String = "" & pGetCurrentTools.CurrentSegment.From
            Call pSurveyFindTrigPoint(sPivotTrigPoint)
        End If
    End Sub

    Private Sub mnuSegmentsTrigPointsTo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If Not pGetCurrentTools.CurrentSegment Is Nothing Then
            Dim sPivotTrigPoint As String = "" & pGetCurrentTools.CurrentSegment.To
            Call pSurveyFindTrigPoint(sPivotTrigPoint)
        End If
    End Sub

    Private Function pSurveyFindTrigPoint(ByVal TrigPoint As String) As Boolean
        TrigPoint = TrigPoint.ToUpper
        Call btnTrigPoints_Click(Nothing, Nothing)
        'if oTrigpointRowIndex.ContainsKey(TrigPoint) Then
        If oSurvey.TrigPoints.Contains(TrigPoint) Then
            Dim oTrigpoint As cTrigPoint = oSurvey.TrigPoints(TrigPoint)
            Call oTools.SelectTrigpoint(oTrigpoint)
            Return True
        Else
            Return False
        End If
    End Function

    Private Sub cboPropTextSize_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropTextSize.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemSizable = .CurrentItem
                    oItem.Size = cboPropTextSize.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropClipping_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropClipping.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cItem = .CurrentItem
                    oItem.ClippingType = cboPropClipping.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub pItemConvertTo(ByVal Bag As cEditToolsBag, ByVal SourceItem As cItem)
        'Dim sType As String = Bag.Type
        'Dim oItem As cItem
        'Select Case sType
        '    Case "gallery"
        '    Case "image", "sketch"
        '    Case "text", "sign"
        '    Case "clipart"
        '        Dim oSourceBound As RectangleF = SourceItem.GetBounds

        '        Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
        '        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        '        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        '        Dim sDesignClipartScaleFactor As Single = oSurvey.Properties.DesignProperties.GetValue("DesignClipartScaleFactor", 1)
        '        oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "data", SourceItem.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.None).InnerXml, "dataformat", cIItemClipartBase.cClipartDataFormatEnum.SVGData))
        '        Call oItem.SetBindDesignType(btnMainBindDesignType.EditValue, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
        '        Call pGetCurrentDesignTools.DeleteItem()
        '        Call pGetCurrentDesignTools.EditItem(oItem, True)
        '        Dim oClipartItem As cItemClipart = oItem
        '        Call oClipartItem.Points.BeginUpdate()
        '        Call oClipartItem.Points.Clear()
        '        Call oClipartItem.Points.AddFromPaintPoint(0, 0)
        '        Call oClipartItem.Points.AddFromPaintPoint(oSourceBound.Width, oSourceBound.Height)
        '        Call oClipartItem.Points.EndUpdate()
        '        Call oClipartItem.FixBound(True)
        '        Call oClipartItem.MoveTo(SourceItem.Location)
        '        Call pGetCurrentDesignTools.EndAndSelectItem()
        '    Case Else
        'Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        'Dim oLayer As cLayerWaterAndFloorMorphologies = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.WaterAndFloorMorphologies)
        'Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        'Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        'Dim oNewItem As cItemFreeHandLine = oLayer.CreateBorder(sCave, sBranch)
        'Call oNewItem.Points.AddRange(oItem.Points)
        'Call oNewItem.Pen.CopyFrom(oItem.Pen)
        'Call pGetCurrentDesignTools.DeleteItem()
        'Call pGetCurrentDesignTools.SelectItem(oNewItem)
        'Call pMapInvalidate()
        Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
        Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
        Dim oNewItem As cItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch))
        Call oNewItem.Points.AddRange(SourceItem.Points)
        If My.Computer.Keyboard.ShiftKeyDown Then
            Try : Call oNewItem.Pen.CopyFrom(SourceItem.Pen) : Catch : End Try
            Try : Call oNewItem.Brush.CopyFrom(SourceItem.Brush) : Catch : End Try
        End If
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
        'End Select
    End Sub

    'Private Sub cmdPropConvertTo_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Try
    '        If Not bDisabledObjectPropertyEvent Then
    '            With pGetCurrentDesignTools()
    '                Dim oItem As cItem = .CurrentItem
    '                Call pItemConvertTo(lvPropConvertTo.SelectedItems(0).Tag, oItem)
    '            End With
    '            Call pObjectPropertyLoad()
    '            Call pMapInvalidate()
    '        End If
    '    Catch ex As Exception
    '        Call MsgBox(GetLocalizedString("main.warning9"), MsgBoxStyle.OkOnly, GetLocalizedString("main.warningtitle"))
    '    End Try
    'End Sub

    'Private Sub lvPropConvertTo_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs)
    '    Call cmdPropConvertTo_Click(Nothing, Nothing)
    'End Sub

    Private Sub mnuFileImportSurvey_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyImport(ImportExportFormatEnum.Survey, "", True)
    End Sub

    Private Sub mnuFileImportDesign_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyImport(ImportExportFormatEnum.Design, "", True)
    End Sub

    'Private Sub mnuDesignNone_Opening(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles mnuDesignNoneOld.Opening
    '    Dim bStandardFormat As Boolean = pClipboardCheckDesignFormat()
    '    Dim bExtraFormat As Boolean = pClipboardCheckDesignExtraFormats()
    '    Dim bEnabled As Boolean = bStandardFormat Or bExtraFormat
    '    mnuDesignNonePaste.Enabled = bEnabled
    '    If bExtraFormat Then
    '        mnuDesignNonePasteSpecial.Enabled = True
    '        mnuDesignNonePasteSpecial0.Enabled = False
    '        mnuDesignNonePasteSpecial1.Enabled = False
    '        mnuDesignNonePasteSpecial2.Enabled = False
    '        mnuDesignNonePasteSpecial3.Enabled = False
    '        If Clipboard.ContainsData("image/svg+xml") Then
    '            mnuDesignNonePasteSpecial0.Enabled = True
    '            mnuDesignNonePasteSpecial1.Enabled = True
    '            mnuDesignNonePasteSpecial2.Enabled = True
    '        End If
    '        If Clipboard.ContainsText Then
    '            mnuDesignNonePasteSpecial3.Enabled = True
    '        End If
    '    Else
    '        mnuDesignNonePasteSpecial.Enabled = False
    '    End If
    '    'Call pMapInfoMenu(mnuDesignNone.Location, mnuDesignNoneInfo)
    'End Sub

    Private Function pClipboardCheckDesignFormat() As Boolean
        Try
            Return Clipboard.ContainsData("csurvey.item")
        Catch
        End Try
        Return False
    End Function

    Private Function pClipboardCheckDataFormat() As Boolean
        Try
            Return Clipboard.ContainsData("csurvey.segments")
        Catch
        End Try
        Return False
    End Function

    Private Function pClipboardCheckDesignExtraFormats() As Boolean
        Dim bResult As Boolean = False
        Try
            bResult = bResult Or Clipboard.ContainsData("image/svg+xml")
            'bResult = bResult Or Clipboard.ContainsImage
            bResult = bResult Or Clipboard.ContainsText
            Return bResult
        Catch
        End Try
        Return False
    End Function

    Private Function pClipboardCheckDataExtraFormats() As Boolean
        Dim bResult As Boolean = False
        Try
            bResult = bResult Or Clipboard.ContainsText
            'csv?
            'altri?...boh!
            Return bResult
        Catch
        End Try
        Return False
    End Function

    Private Sub oClipboardViewer_ClipboardChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles oClipboardViewer.ClipboardChanged
        Call tmrClipboard.Start()
    End Sub

    Private Sub mnuDesignNonePasteSpecial0_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardPaste("generic", modPaint.FromPaintPoint(pGetCurrentDesignTools.LastPoint, sPaintZoom, oPaintTranslation))
    End Sub

    Private Sub mnuDesignNonePasteSpecial1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardPaste("rock", modPaint.FromPaintPoint(pGetCurrentDesignTools.LastPoint, sPaintZoom, oPaintTranslation))
    End Sub

    Private Sub mnuDesignNonePasteSpecial2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardPaste("symbol", modPaint.FromPaintPoint(pGetCurrentDesignTools.LastPoint, sPaintZoom, oPaintTranslation))
    End Sub

    Private Sub mnuDesignNonePasteSpecial3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardPaste("text", modPaint.FromPaintPoint(pGetCurrentDesignTools.LastPoint, sPaintZoom, oPaintTranslation))
    End Sub

    Private Sub pSurveyViewer()
        If frmV Is Nothing Then
            Dim iView As frmPreview.ViewModeEnum
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                iView = frmPreview.ViewModeEnum.Plan
            Else
                iView = frmPreview.ViewModeEnum.Profile
            End If
            frmV = New frmPreview(oSurvey, frmPreview.PreviewModeEnum.Viewer, iView)
            Call frmV.Show(Me)
        End If
        Call frmV.BringToFront()
        Call frmV.Focus()
    End Sub

    Private Sub mnuViewViewer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyViewer()
    End Sub

    Private Sub frmS_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles frmS.FormClosed
        Call frmS.Dispose()
        frmS = Nothing
    End Sub

    Private Sub frmV_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles frmV.FormClosed
        Call frmV.Dispose()
        frmV = Nothing
    End Sub

    Private Sub cboPropProfileTextPosition_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropProfileTextPosition.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemCrossSection = .CurrentItem
                    oItem.TextPosition = cboPropProfileTextPosition.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub txtPropProfileTextDistance_ValueChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtPropProfileTextDistance.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            Try
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemCrossSection = .CurrentItem
                    oItem.TextDistance = txtPropProfileTextDistance.Value
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Catch
            End Try
        End If
    End Sub

    Private Sub cboPropCrossSectionSplayStation_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropCrossSectionRefStation.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemCrossSection = .CurrentItem
                    oItem.RefStation = cboPropCrossSectionRefStation.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub


    Private Sub cboPropProfileDirection_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropProfileDirection.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemCrossSection = .CurrentItem
                    oItem.Direction = cboPropProfileDirection.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    'Private Sub mnuLayersAndItemsDelete_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuLayersAndItemsDelete.Click
    '    Try
    '        Dim oItem As cItem = tvLayers2.SelectedObject
    '        Call pGetCurrentDesignTools.SelectItem(oItem)
    '        Call pDesignItemDelete()
    '        Call pMapInvalidate()
    '    Catch
    '    End Try
    'End Sub

    'Private Sub cboMainBindDesignType_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboMainBindDesignType.Click
    '    Call pGetCurrentDesignTools.SelectBindDesignType(btnMainBindDesignType.editvalue)
    'End Sub

    Private Sub cboPropBindDesignType_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropBindDesignType.SelectedIndexChanged, cboPropBindCrossSections.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cItem = .CurrentItem
                    Call oItem.SetBindDesignType(cboPropBindDesignType.SelectedIndex, oSurvey.CrossSections.GetBindItem(cboPropBindCrossSections.SelectedItem))
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cmdPropCrossSectionSegment_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropCrossSectionSegment.Click
        With pGetCurrentDesignTools()
            Dim oItem As cItemCrossSection = .CurrentItem
            Using frmSB As frmSegmentBrowser = New frmSegmentBrowser(oSurvey, oItem.Segment)
                If frmSB.ShowDialog(Me) = vbOK Then
                    Dim bOk As Boolean
                    If IsNothing(frmSB.cboSegments.SelectedItem) AndAlso oItem.DesignCrossSection.HaveMarkers Then
                        bOk = MsgBox(modMain.GetLocalizedString("main.warning29"), MsgBoxStyle.YesNo Or MsgBoxStyle.Critical Or MsgBoxStyle.DefaultButton2, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes
                    Else
                        bOk = True
                    End If
                    If bOk Then
                        oItem.Segment = frmSB.cboSegments.SelectedItem
                        Call .TakeUndoSnapshot()
                        Call pObjectPropertyLoad()
                        Call pMapInvalidate()
                    End If
                End If
            End Using
        End With
    End Sub

    Private Sub btnObjectProp_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pObjectPropShow(True)
        'Call tabObjectProp.SelectTab(tabObjectPropMain)
    End Sub

    Private Sub btnEndEdit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pDesignEndEdit()
    End Sub

    'Private Sub mnuLayersAndItemsCurrentLevelDeleteAll_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuLayersAndItemsCurrentLevelDeleteAll.Click
    '    Try
    '        If MsgBox(GetLocalizedString("main.warning8"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
    '            Call pGetCurrentDesignTools.EndItem()
    '            Dim oLayer As cLayer = tvLayers2.SelectedObject
    '            Call pGetCurrentDesignTools.SelectLayer(oLayer)
    '            Call oLayer.Items.RemoveRange(oLayer.GetAllVisibleItems(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch))
    '            Call pMapInvalidate()
    '            Call tvLayers2.RefreshObject(oLayer)
    '        End If
    '    Catch
    '    End Try
    'End Sub

    'Private Sub tvLayers_AfterSelect(ByVal sender As System.Object, ByVal e As System.Windows.Forms.TreeViewEventArgs)
    '    If Not e Is Nothing Then
    '        If Not e.Node Is Nothing Then
    '            If e.Node.Name Like "item:*" Then
    '                Dim oItem As cItem = e.Node.Tag
    '                If oItem.Deleted Then
    '                    piclayerItemPreview.Image = imlLayers.Images("cross")
    '                    lbLayerItemTitle.Text = GetLocalizedString("main.textpart5")
    '                    lbLayerItemCaption.Text = ""
    '                    cmdLayerObjectProperty.Enabled = False
    '                    cmdLayerObjectSelect.Enabled = False
    '                Else
    '                    Dim oItemThumb As Image = oItem.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, 48, 48)
    '                    If oItemThumb Is Nothing Then
    '                        piclayerItemPreview.Image = imlLayers.Images("generic_error")
    '                    Else
    '                        piclayerItemPreview.Image = oItemThumb
    '                    End If
    '                    lbLayerItemTitle.Text = e.Node.Text
    '                    Dim oBounds As RectangleF = oItem.GetBounds
    '                    lbLayerItemCaption.Text = "x: " & Strings.Format(oBounds.Left, "0.00") & " y: " & Strings.Format(oBounds.Top, "0.00") & "" & vbCrLf & "w: " & Strings.Format(oBounds.Width, "0.00") & " h: " & Strings.Format(oBounds.Height, "0.00")
    '                    cmdLayerObjectProperty.Enabled = True
    '                    cmdLayerObjectSelect.Enabled = True
    '                End If
    '            End If
    '            If e.Node.Name Like "layer:*" Then
    '                piclayerItemPreview.Image = Nothing
    '                lbLayerItemTitle.Text = e.Node.Text
    '                lbLayerItemCaption.Text = ""
    '                cmdLayerObjectProperty.Enabled = False
    '                cmdLayerObjectSelect.Enabled = True
    '            End If
    '        Else
    '            piclayerItemPreview.Image = Nothing
    '            lbLayerItemTitle.Text = ""
    '            lbLayerItemCaption.Text = ""
    '            cmdLayerObjectProperty.Enabled = False
    '            cmdLayerObjectSelect.Enabled = False
    '        End If
    '    Else
    '        piclayerItemPreview.Image = Nothing
    '        lbLayerItemTitle.Text = ""
    '        lbLayerItemCaption.Text = ""
    '        cmdLayerObjectProperty.Enabled = False
    '        cmdLayerObjectSelect.Enabled = False
    '    End If
    'End Sub

    Private Sub cboPropQuotaType_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropQuotaType.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemQuota = .CurrentItem
                    oItem.QuotaType = cboPropQuotaType.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropQuotaAlign_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropQuotaAlign.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemQuota = .CurrentItem
                    oItem.QuotaAlign = cboPropQuotaAlign.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropQuotaValue_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropQuotaValue.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemQuota = .CurrentItem
                    oItem.QuotaValue = cboPropQuotaValue.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropQuotaValueType_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropQuotaValueType.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemQuota = .CurrentItem
                    oItem.QuotaValueType = cboPropQuotaValueType.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub mnuSegmentsPrefixTrigpoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pTrigpointsTrigpointPrefix()
    End Sub

    Private Sub mnuTrigPointsPrefixTrigpoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pTrigpointsTrigpointPrefix()
    End Sub

    Private Sub pTrigpointsTrigpointPrefix()
        Dim oSelectedTrigpoints As List(Of String) = New List(Of String)
        If grdTrigPoints.Focused Then
            Dim sTrigpoint As String
            For Each oTrigpoint As cTrigPoint In grdViewTrigpoints.GetSelectedRows.Select(Function(iRowHandle) DirectCast(grdViewTrigpoints.GetRow(iRowHandle), cTrigPoint)).ToList
                sTrigpoint = oTrigpoint.Name
                If Not oSelectedTrigpoints.Contains(sTrigpoint) Then
                    Call oSelectedTrigpoints.Add(sTrigpoint)
                End If
            Next
            'For Each oCell As DataGridViewCell In grdTrigPoints.SelectedCells
            '    Dim oRow As DataGridViewRow = grdTrigPoints.Rows(oCell.RowIndex)
            '    sTrigpoint = oRow.Cells(0).Value
            '    If Not oSelectedTrigpoints.Contains(sTrigpoint) Then
            '        Call oSelectedTrigpoints.Add(sTrigpoint)
            '    End If
            'Next
        ElseIf grdSegments.Focused Then
            Dim sTrigpoint As String
            For Each oSegment As cSegment In pSegmentsFromGridSelection()
                sTrigpoint = oSegment.From
                If Not oSelectedTrigpoints.Contains(sTrigpoint) Then
                    Call oSelectedTrigpoints.Add(sTrigpoint)
                End If
                sTrigpoint = oSegment.To
                If Not oSelectedTrigpoints.Contains(sTrigpoint) Then
                    Call oSelectedTrigpoints.Add(sTrigpoint)
                End If
            Next
        End If

        Call pSurveyTrigpointsRefresh()

        'Dim iCurrentSegment As Integer
        'Dim iCurrentTrigpoint As Integer

        Dim oCurrentSegment As cSegment = oTools.CurrentSegment
        Dim oCurrentTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
        'Try : iCurrentSegment = grdSegments.CurrentRow.Index : Catch : iCurrentSegment = -1 : End Try
        'Try : iCurrentTrigpoint = grdTrigPoints.CurrentRow.Index : Catch : iCurrentTrigpoint = -1 : End Try
        Call pGetCurrentTools.SelectSegment(Nothing)
        Call pGetCurrentTools.SelectTrigpoint(Nothing)
        Using frmPT As frmPrefixTrigPoints = New frmPrefixTrigPoints(oSurvey, oSelectedTrigpoints)
            With frmPT
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()
                    Call pSegmentSelect(oCurrentSegment, False, False)
                    Call pTrigPointSelect(oCurrentTrigpoint, False, False)
                    Call pSegmentsRefresh()
                    Call pTrigpointsRefresh()
                End If
            End With
        End Using
    End Sub

    Private Sub pSurveyAutosave()
        If Not bDisabledAutosaveEvent Then
            If sFilename <> "" Then
                oAutosaveThread = New Threading.Thread(AddressOf pAutosaveThread_callback)
                Call oAutosaveThread.Start()
            End If
        End If
    End Sub

    Private Sub tmrAutosave_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrAutosave.Tick
        Call pSurveyAutosave()
    End Sub

    Private Sub mnuFile3D_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyLoch()
    End Sub

    Private Sub pProcessOutputHandler(sendingProcess As Object, outLine As DataReceivedEventArgs)
        Call oSurvey.RaiseOnLogEvent(cSurvey.cSurvey.LogEntryType.Unknown, outLine.Data, True)
    End Sub

    Private Function pSurveyExportToTherion(ByVal Commands As String, Optional ByRef Output As String = "") As Boolean
        Dim sThProcess As String = oSurvey.GetGlobalSetting("therion.path", "")
        If sThProcess = "" Then
        Else
            Dim bThBackgroundProcess As Boolean = oSurvey.GetGlobalSetting("therion.backgroundprocess", 0)
            Dim bThTrigpointSafeName As Boolean = oSurvey.GetGlobalSetting("therion.trigpointsafename", 1)
            Dim bThDeleteTempFile As Boolean = oSurvey.GetGlobalSetting("therion.deletetempfiles", 0)
            If sThProcess <> "" Then
                Dim sTempThInputFilename As String = IO.Path.Combine(My.Computer.FileSystem.SpecialDirectories.Temp, "_therioninput.th")
                Dim sTempConfigFilename As String = IO.Path.Combine(My.Computer.FileSystem.SpecialDirectories.Temp, "_therionconfig.")
                Dim sTempThLogFilename As String = IO.Path.Combine(My.Computer.FileSystem.SpecialDirectories.Temp, "_therionlog.log")

                Try : My.Computer.FileSystem.DeleteFile(sTempThInputFilename) : Catch : End Try
                Try : My.Computer.FileSystem.DeleteFile(sTempConfigFilename) : Catch : End Try
                Try : My.Computer.FileSystem.DeleteFile(sTempThLogFilename) : Catch : End Try

                Dim oTrigPointsToElaborate As List(Of String) = oSurvey.Segments.GetTrigPointsNames.ToList
                Dim iTrigPointsCount As Integer = oTrigPointsToElaborate.Count
                Dim iSegmentsCount As Integer = oSurvey.Segments.GetValidSegments.Count

                If iTrigPointsCount > 1 And iSegmentsCount > 0 Then

                    'creo due dizionari di codifica per i capisaldi...
                    Dim oInputdictionary As Dictionary(Of String, String)
                    Dim oOutputdictionary As Dictionary(Of String, String)
                    If bThTrigpointSafeName Then
                        oInputdictionary = New Dictionary(Of String, String)
                        oOutputdictionary = New Dictionary(Of String, String)
                        Dim iIndex As Integer = 0
                        For Each sTrigPoint As String In oTrigPointsToElaborate
                            Call oInputdictionary.Add(sTrigPoint, iIndex)
                            Call oOutputdictionary.Add(iIndex, sTrigPoint)
                            iIndex += 1
                        Next
                    End If

                    Dim bThSegmentForceDirection As Boolean = oSurvey.GetGlobalSetting("therion.segmentforcedirection", 1)
                    Dim bThSegmentForcePath As Boolean = oSurvey.GetGlobalSetting("therion.segmentforcepath", 1)
                    Dim iThOptions As modExport.TherionExportOptionsEnum = If(bThSegmentForceDirection, modExport.TherionExportOptionsEnum.SegmentForceDirection, 0) Or If(bThSegmentForcePath, modExport.TherionExportOptionsEnum.SegmentForcePath, 0)
                    iThOptions = iThOptions Or TherionExportOptionsEnum.Scrap
                    Call modExport.TherionThExportTo(oSurvey, sTempThInputFilename, oInputdictionary, iThOptions)
                    Call modExport.TherionCreateConfig(oSurvey, sTempConfigFilename, sTempThInputFilename, Commands)

                    Dim iExitCode As Integer = modMain.ExecuteProcess(sThProcess, Chr(34) & sTempConfigFilename & Chr(34) & " -l " & Chr(34) & sTempThLogFilename & Chr(34), bThBackgroundProcess, AddressOf pProcessOutputHandler)

                    Dim oFi As IO.FileInfo = New IO.FileInfo(sTempThLogFilename)
                    Output = oFi.OpenText.ReadToEnd

                    Call pConsoleAdd(cSurvey.cSurvey.LogEntryType.Unknown, Output)

                    If iExitCode = 0 Then
                    Else

                    End If

                    If bThDeleteTempFile Then
                        Try : My.Computer.FileSystem.DeleteFile(sTempThInputFilename) : Catch : End Try
                        Try : My.Computer.FileSystem.DeleteFile(sTempConfigFilename) : Catch : End Try
                        Try : My.Computer.FileSystem.DeleteFile(sTempThLogFilename) : Catch : End Try
                    End If

                    If iExitCode = 0 Then
                        Return True
                    Else
                        Return False
                    End If
                End If
            End If
        End If
    End Function

    Private Function pSurveyLoch() As Boolean
        Dim iExitCode As Integer
        Dim sThProcess As String = oSurvey.GetGlobalSetting("therion.path", "")
        If sThProcess = "" Then
            Return False
        Else
            Call pStatusSet(GetLocalizedString("main.textpart4"))
            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim bThBackgroundProcess As Boolean = oSurvey.GetGlobalSetting("therion.backgroundprocess", 0)
            Dim bThTrigpointSafeName As Boolean = oSurvey.GetGlobalSetting("therion.trigpointsafename", 1)
            Dim bThUseCadastralIDinCaveNames As Boolean = oSurvey.GetGlobalSetting("therion.usecadastralidincavenames", 0)
            Dim bThDeleteTempFile As Boolean = oSurvey.GetGlobalSetting("therion.deletetempfiles", 0)

            Dim oFiles As List(Of String) = New List(Of String)

            Dim sTempPath As String = My.Computer.FileSystem.SpecialDirectories.Temp
            Dim sBaseName As String = "_therion" & If(modMain.bIsInDebug, "", "_" & Guid.NewGuid.ToString) & "_loch"

            Dim oTempThInputFilename As List(Of String) = New List(Of String)
            'Dim oTempThInputFilename As List(Of String) = New List(Of String)({IO.Path.Combine(sTempPath, sBaseName & "_input.th")})
            Dim sTempThOutputFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_output.lox")
            Call oFiles.Add(sTempThOutputFilename)
            'Dim sTempThOutputPlanXVIFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_output_plan.xvi")
            'Call oFiles.Add(sTempThOutputPlanXVIFilename)
            'Dim sTempThOutputProfileXVIFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_output_profile.xvi")
            'Call oFiles.Add(sTempThOutputProfileXVIFilename)
            Dim sTempConfigFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_config.thconfig")
            Call oFiles.Add(sTempConfigFilename)
            Dim sTempThLogFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_log.log")
            Call oFiles.Add(sTempThLogFilename)

            Call DeleteFiles(oFiles)

            Dim oTrigPointsToElaborate As List(Of String) = oSurvey.Segments.GetTrigPointsNames.ToList
            Dim iTrigPointsCount As Integer = oTrigPointsToElaborate.Count
            Dim iSegmentsCount As Integer = oSurvey.Segments.GetValidSegments.Count

            If iTrigPointsCount > 1 AndAlso iSegmentsCount > 0 Then
                Using frmLD As frmLochDialog = New frmLochDialog(oSurvey)
                    Dim iRes As DialogResult = frmLD.ShowDialog(Me)
                    If iRes = Windows.Forms.DialogResult.OK OrElse iRes = Windows.Forms.DialogResult.Retry Then
                        Dim iThOptions As modExport.TherionExportOptionsEnum = TherionExportOptionsEnum.Default Or TherionExportOptionsEnum.ExportSurfaceElevationsData

                        'use 3d mode of main survey....
                        If oSurvey.Properties.ThreeDModelMode > cProperties.ThreeDModelModeEnum.Simple Then
                            Call oSurvey.Calculate.CalculateDataFromDesigns(oTrigPointsToElaborate)
                            For Each oLinkedSurvey As cLinkedSurvey In oSurvey.LinkedSurveys.GetSelected("loch")
                                Call pStatusSet(String.Format(GetLocalizedString("main.textpart152"), oLinkedSurvey.GetName))
                                Dim oLinkedSurveyTrigPointsToElaborate As List(Of String) = oLinkedSurvey.LinkedSurvey.Segments.GetTrigPointsNames.ToList
                                Call oLinkedSurvey.LinkedSurvey.Calculate.CalculateDataFromDesigns(oLinkedSurveyTrigPointsToElaborate, oSurvey.Properties.ThreeDModelMode)
                            Next
                        Else
                            'splay could be visibile only without 3d model...
                            If oSurvey.Properties.ThreeDLochShowSplay Then iThOptions = iThOptions Or TherionExportOptionsEnum.CalculateSplay Or TherionExportOptionsEnum.ExportSplay
                        End If

                        '---------------------------------------------------------------------------------------------------------
                        'creo due dizionari di codifica per i capisaldi...
                        Dim oInputdictionary As Dictionary(Of String, String) = Nothing
                        Dim oOutputdictionary As Dictionary(Of String, String) = Nothing
                        If bThTrigpointSafeName Then
                            Call modExport.CreateStationDictionary(oTrigPointsToElaborate, oInputdictionary, oOutputdictionary)
                        End If
                        '---------------------------------------------------------------------------------------------------------

                        If bThTrigpointSafeName Then iThOptions = iThOptions Or TherionExportOptionsEnum.TrigpointExportNameAsComment
                        If bThUseCadastralIDinCaveNames Then iThOptions = iThOptions Or TherionExportOptionsEnum.UseCadastralIDinCaveNames

                        Dim sTempThInputFilename As String = IO.Path.Combine(sTempPath, Guid.NewGuid.ToString & "_input.th")
                        If oSurvey.Properties.ThreeDModelMode = cProperties.ThreeDModelModeEnum.Simple Then
                            Call oFiles.AddRange(modExport.TherionThExportTo(oSurvey, sTempThInputFilename, oInputdictionary, iThOptions))
                        Else
                            Call oFiles.AddRange(modExport.TherionThExportTo(oSurvey, sTempThInputFilename, oInputdictionary, iThOptions Or TherionExportOptionsEnum.UseSubData))
                        End If
                        Call oTempThInputFilename.Add(sTempThInputFilename)

                        'remove elevation data export option from linked survey...
                        iThOptions = iThOptions And Not TherionExportOptionsEnum.ExportSurfaceElevationsData
                        For Each oLinkedSurvey As cLinkedSurvey In oSurvey.LinkedSurveys.GetSelected("loch")
                            Dim sTempThInputLinkedFilename As String = IO.Path.Combine(sTempPath, Guid.NewGuid.ToString & "_input.th")

                            Dim oLinkedSurveyTrigPointsToElaborate As List(Of String) = oLinkedSurvey.LinkedSurvey.Segments.GetTrigPointsNames.ToList
                            Dim oLinkedSurveyInputdictionary As Dictionary(Of String, String) = Nothing
                            Dim oLinkedSurveyOutputdictionary As Dictionary(Of String, String) = Nothing
                            If bThTrigpointSafeName Then
                                Call modExport.CreateStationDictionary(oLinkedSurveyTrigPointsToElaborate, oLinkedSurveyInputdictionary, oLinkedSurveyOutputdictionary)
                            End If
                            'use 3d mode of main survey....
                            If oSurvey.Properties.ThreeDModelMode = cProperties.ThreeDModelModeEnum.Simple Then
                                Call oFiles.AddRange(modExport.TherionThExportTo(oLinkedSurvey.LinkedSurvey, sTempThInputLinkedFilename, oLinkedSurveyInputdictionary, iThOptions))
                            Else
                                Call oFiles.AddRange(modExport.TherionThExportTo(oLinkedSurvey.LinkedSurvey, sTempThInputLinkedFilename, oLinkedSurveyInputdictionary, iThOptions Or TherionExportOptionsEnum.UseSubData))
                            End If
                            Call oTempThInputFilename.Add(sTempThInputLinkedFilename)
                        Next
                        Call modExport.TherionCreateConfig(oSurvey, sTempConfigFilename, oTempThInputFilename, "export model -fmt loch -output " & Chr(34) & sTempThOutputFilename & Chr(34))

                        iExitCode = modMain.ExecuteProcess(sThProcess, Chr(34) & sTempConfigFilename & Chr(34) & " -l " & Chr(34) & sTempThLogFilename & Chr(34), bThBackgroundProcess, AddressOf pProcessOutputHandler)
                        If iExitCode = 0 Then
                            If iRes = DialogResult.OK Then
                                Dim sLochPath As String = Path.GetDirectoryName(sThProcess)
                                Call Shell(Path.Combine(sLochPath, "loch.exe") & " " & Chr(34) & sTempThOutputFilename & Chr(34), AppWinStyle.MaximizedFocus, True, -1)
                            Else
                                Using oSFD As SaveFileDialog = New SaveFileDialog
                                    With oSFD
                                        .Title = GetLocalizedString("main.saveloch")
                                        .Filter = GetLocalizedString("main.filetypeLOX") & " (*.LOX)|*.LOX|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                                        .FilterIndex = 1
                                        If .ShowDialog = DialogResult.OK Then
                                            Call My.Computer.FileSystem.MoveFile(sTempThOutputFilename, .FileName)
                                        End If
                                    End With
                                End Using
                            End If
                        Else
                            Dim oFi As IO.FileInfo = New IO.FileInfo(sTempThLogFilename)
                            Dim sLines As String = ""
                            Using oLogSR As IO.StreamReader = oFi.OpenText
                                sLines = oLogSR.ReadToEnd()
                                Call oLogSR.Close()
                            End Using

                            For Each sLine As String In Strings.Split(sLines, vbCrLf)
                                If sLine Like "* error -- *" Then
                                    Dim sErrorMessage As String = sLine.Substring(sLine.IndexOf(" error -- ") + 10)
                                    sErrorMessage = sErrorMessage.Replace(sTempThInputFilename, "").Trim
                                    'todo: error use dictionaries for station...have to be translated...
                                    Call pPopupShow("error", sErrorMessage)
                                End If
                            Next
                        End If

                        If bThDeleteTempFile Then
                            Call DeleteFiles(oFiles)
                        End If
                    End If
                End Using
            End If
            Call oMousePointer.Pop()
            Call pStatusSet("")
        End If
        If iExitCode = 0 Then
            Return True
        Else
            Return False
        End If
    End Function

    'Private Sub mnuDesignItemSketchEdit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuDesignItemSketchEdit.Click
    '    Try
    '        With pGetCurrentDesignTools()
    '            Dim oItemSketch As cIItemSketch = .CurrentItem
    '            Using frmSB As frmSketchEdit = New frmSketchEdit(oSurvey, oItemSketch)
    '                If frmSB.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
    '                    Call .TakeUndoSnapshot()
    '                    Call pObjectPropertyLoad()
    '                    Call pSurveyInvalidate()
    '                End If
    '            End Using
    '        End With
    '    Catch ex As Exception
    '    End Try
    'End Sub

    Private Sub pItemSketchEdit()
        Try
            With pGetCurrentDesignTools()
                Dim oItemSketch As cIItemSketch = .CurrentItem
                Using frmSB As frmSketchEdit = New frmSketchEdit(oSurvey, oItemSketch)
                    If frmSB.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        Call .TakeUndoSnapshot()
                        Call pSurveyInvalidate()
                    End If
                End Using
            End With
        Catch ex As Exception
        End Try
    End Sub

    Private Sub cmdPropSketchEdit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropSketchEdit.Click
        Call pItemSketchEdit
    End Sub

    Private Sub btnViewer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyViewer()
    End Sub

    Private Sub pFind(Optional ByVal Where As frmFind.FindWhereEnum = -1)
        'If frmF Is Nothing Then
        '    frmF = New frmFind
        '    Dim oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadSubTree)
        '    Try : Call modWindow.StringToWindowSettings(oReg.GetValue("user.findposition"), frmF) : Catch : End Try
        'End If
        'Dim sText As String = Clipboard.GetText
        'If sText <> "" And sText <> frmF.cboFind.Text Then
        '    frmF.cboFind.Text = sText
        'End If
        'If Where = -1 Then
        If Where = frmFind.FindWhereEnum.Segments OrElse (grdSegments.Focused AndAlso Where = frmFind.FindWhereEnum.Default) Then
            Call grdViewSegments.ShowFindPanel()
        ElseIf Where = frmFind.FindWhereEnum.Segments OrElse (grdTrigPoints.Focused AndAlso Where = frmFind.FindWhereEnum.Default) Then
            Call grdViewTrigpoints.ShowFindPanel()
        Else
            Call pLevelsShow(True)
            Call oDockLevels.ShowFindPanel()
        End If
    End Sub

    Private Sub frmThp_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles frmThP.FormClosed
        Dim oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
        Call oReg.SetValue("user.therionpadposition", modWindow.WindowSettingsToString(frmThP))
        Call oReg.Close()
        Call oReg.Dispose()
        frmThP = Nothing
    End Sub

    'Private Sub frmF_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles frmF.FormClosed
    '    Dim oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
    '    Call oReg.SetValue("user.findposition", modWindow.WindowSettingsToString(frmF))
    '    Call oReg.Close()
    '    Call oReg.Dispose()
    '    frmF = Nothing
    'End Sub

    'Private Sub frmF_OnFind(ByVal Sender As Object, ByVal e As frmFind.cFindEventArg) Handles frmF.OnFind
    '    Dim sText As String = e.Text.ToLower
    '    Dim bWholeWord As Boolean = e.WholeWord
    '    Dim bUseJollyChars As Boolean = e.UseJollyChars
    '    Dim iWhere As frmFind.FindWhereEnum = e.Where
    '    Call pSurveyFind(sText, bWholeWord, bUseJollyChars, iWhere, e.Cancel)
    'End Sub

    'Private Sub pSurveyFind(ByVal Text As String, ByVal WholeWord As Boolean, ByVal UseJollyChar As Boolean, ByVal Where As frmFind.FindWhereEnum, ByRef Cancel As Boolean)
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    Dim bFound As Boolean = False
    '    Dim bFromBegin As Boolean = False

    '    Select Case Where
    '        Case frmFind.FindWhereEnum.Segments
    '            Call pSegmentsShow(True)
    '            Dim oCurrentCell As Point = grdSegments.CurrentCellAddress
    '            Dim iRow As Integer = oCurrentCell.Y
    '            Dim iColumn As Integer = oCurrentCell.X
    '            Dim iColumns As Integer = grdSegments.Columns.Count
    '            Dim iRows As Integer = grdSegments.Rows.Count
    '            Do
    '                Do While iRow < iRows - 1
    '                    Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart92"), iRow))
    '                    Do While iColumn < iColumns - 1
    '                        If GetAsyncKeyState(Keys.Escape) Then Cancel = True
    '                        iColumn += 1
    '                        Dim oValue As Object = grdSegments.Rows(iRow).Cells(iColumn).Value
    '                        Dim sValue As String
    '                        Try
    '                            sValue = oValue.ToString
    '                        Catch ex As Exception
    '                            sValue = ""
    '                        End Try
    '                        If UseJollyChar Then
    '                            bFound = (sValue.ToLower Like Text)
    '                        Else
    '                            If WholeWord Then
    '                                bFound = (sValue.ToLower = Text)
    '                            Else
    '                                bFound = (sValue.ToLower Like "*" & Text & "*")
    '                            End If
    '                        End If
    '                        If bFound Or Cancel Then Exit Do
    '                    Loop
    '                    If bFound Or Cancel Then Exit Do
    '                    iRow += 1
    '                    iColumn = -1
    '                Loop
    '                If Not Cancel Then
    '                    If bFound Then
    '                        grdSegments.CurrentCell = grdSegments.Rows(iRow).Cells(iColumn)
    '                        Call grdSegments.Focus()
    '                        Exit Do
    '                    Else
    '                        If bFromBegin Then
    '                            Exit Do
    '                        Else
    '                            If MsgBox(GetLocalizedString("main.warning7"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
    '                                iRow = 0
    '                                bFromBegin = True
    '                            Else
    '                                Exit Do
    '                            End If
    '                        End If
    '                    End If
    '                Else
    '                    Exit Do
    '                End If
    '            Loop
    '        Case frmFind.FindWhereEnum.TrigPoints
    '            Call pTrigpointsShow(True)

    '            'Dim iRow As Integer = lvTrigPoints.SelectedIndex + 1
    '            'Dim iRows As Integer = lvTrigPoints.Items.Count
    '            'Do
    '            '    Do While iRow < iRows - 1
    '            '        Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart92"), iRow))
    '            '        For Each oColumn As OLVColumn In lvTrigPoints.Columns
    '            '            If GetAsyncKeyState(Keys.Escape) Then Cancel = True
    '            '            Dim sValue As String = lvTrigPoints.GetItem(iRow).SubItems(oColumn.Index).Text
    '            '            If UseJollyChar Then
    '            '                bFound = (sValue.ToLower Like Text)
    '            '            Else
    '            '                If WholeWord Then
    '            '                    bFound = (sValue.ToLower = Text)
    '            '                Else
    '            '                    bFound = (sValue.ToLower Like "*" & Text & "*")
    '            '                End If
    '            '            End If
    '            '            If bFound Or Cancel Then Exit For
    '            '        Next
    '            '        If bFound Or Cancel Then Exit Do
    '            '        iRow += 1
    '            '    Loop
    '            '    If Not Cancel Then
    '            '        If bFound Then
    '            '            lvTrigPoints.SelectedObject = lvTrigPoints.GetItem(iRow).RowObject
    '            '            Call grdSegments.Focus()
    '            '            Exit Do
    '            '        Else
    '            '            If bFromBegin Then
    '            '                Exit Do
    '            '            Else
    '            '                If MsgBox(GetLocalizedString("main.warning7"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
    '            '                    iRow = 0
    '            '                    bFromBegin = True
    '            '                Else
    '            '                    Exit Do
    '            '                End If
    '            '            End If
    '            '        End If
    '            '    Else
    '            '        Exit Do
    '            '    End If
    '            'Loop
    '    End Select

    '    Call oMousePointer.Push(Cursors.Default)
    'End Sub

    Private Sub mnuTrigPointsFind_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pFind(frmFind.FindWhereEnum.TrigPoints)
    End Sub

    Private Sub mnuSegmentsFind_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pFind(frmFind.FindWhereEnum.Segments)
    End Sub

    Private Sub mnuFileTherion_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyTherionPad()
    End Sub

    Private Sub pSurveyTherionPad()
        If frmThP Is Nothing Then
            frmThP = New frmTherionPad
            Dim oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadSubTree)
            Try : Call modWindow.StringToWindowSettings(oReg.GetValue("user.therionpadposition"), frmThP) : Catch : End Try
            Call oReg.Close()
            Call oReg.Dispose()
        End If
        Call frmThP.Show()
        Call frmThP.BringToFront()
    End Sub

    Private Sub frmThP_OnExport3D(ByVal Sender As frmTherionPad, ByVal Args As frmTherionPad.cOnTherionPadEventArgs) Handles frmThP.OnExport3D
        Dim sOutputFIlename As String = Path.GetFileNameWithoutExtension(sFilename) & ".lox"
        Using sfd As SaveFileDialog = New SaveFileDialog
            With sfd
                .Filter = GetLocalizedString("main.filetypeLOX") & " (*.LOX)|*.LOX|" & GetLocalizedString("main.filetypeCompass") & " (*.PLT)|*.PLT|" & GetLocalizedString("main.filetypeSurvex") & " (*.3D)|*.3D|" & GetLocalizedString("main.filetypeDXF") & " (*.DXF)|*.DXF|" & GetLocalizedString("main.filetypeShapeFile") & " (*.SHP)|*.SHP|" & GetLocalizedString("main.filetypeVRLM") & " (*.VRLM)|*.VRLM|" & GetLocalizedString("main.filetype3DMF") & " (*.3DMF)|*.3DMF|" & GetLocalizedString("main.filetypeKML") & " (*.KML)|*.KML"
                .FilterIndex = 1
                .FileName = sOutputFIlename
                If .ShowDialog(Me) = vbOK Then
                    sOutputFIlename = .FileName
                    Args.Filename = sOutputFIlename
                    Dim s3DFormat As String = "loch"
                    Select Case .FilterIndex
                        Case 1
                            s3DFormat = "loch"
                        Case 2
                            s3DFormat = "compass"
                        Case 3
                            s3DFormat = "survex"
                        Case 4
                            s3DFormat = "dxf"
                        Case 5
                            s3DFormat = "esri"
                        Case 6
                            s3DFormat = "vrlm"
                        Case 7
                            s3DFormat = "3dmf"
                        Case 8
                            s3DFormat = "kml"
                    End Select
                    Args.Error = Not pSurveyExportToTherion("export model -fmt " & s3DFormat & " -output " & Chr(34) & sOutputFIlename & Chr(34), Args.Output)
                Else
                    Args.Cancel = True
                End If
            End With
        End Using
    End Sub

    Private Sub frmThP_OnExportPlan(ByVal Sender As frmTherionPad, ByVal Args As frmTherionPad.cOnTherionPadEventArgs) Handles frmThP.OnExportPlan
        Dim sOutputFilename As String = Path.GetFileNameWithoutExtension(sFilename) & ".pdf"
        Using sfd As SaveFileDialog = New SaveFileDialog
            With sfd
                .Filter = GetLocalizedString("main.filetypePDF") & " (*.PDF)|*.PDF|" & GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeDXF") & " (*.DXF)|*.DXF"
                .FilterIndex = 1
                .FileName = sOutputFilename
                If .ShowDialog(Me) = vbOK Then
                    sOutputFilename = .FileName
                    Dim sFormat As String
                    Select Case Path.GetExtension(sOutputFilename).ToLower
                        Case ".svg"
                            sFormat = "svg"
                        Case ".dxf"
                            sFormat = "dxf"
                        Case Else
                            sFormat = "pdf"
                    End Select
                    Args.Filename = sOutputFilename
                    Args.Error = Not pSurveyExportToTherion("export map -proj plan -fmt " & sFormat & " -output " & Chr(34) & sOutputFilename & Chr(34), Args.Output)
                Else
                    Args.Cancel = True
                End If
            End With
        End Using
    End Sub

    Private Sub frmThP_OnExportProfile(ByVal Sender As frmTherionPad, ByVal Args As frmTherionPad.cOnTherionPadEventArgs) Handles frmThP.OnExportProfile
        Dim sOutputFilename As String = Path.GetFileNameWithoutExtension(sFilename) & ".pdf"
        Using sfd As SaveFileDialog = New SaveFileDialog
            With sfd
                .Filter = GetLocalizedString("main.filetypePDF") & " (*.PDF)|*.PDF|" & GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeDXF") & " (*.DXF)|*.DXF"
                .FilterIndex = 1
                .FileName = sOutputFilename
                If .ShowDialog(Me) = vbOK Then
                    sOutputFilename = .FileName
                    Dim sFormat As String
                    Select Case Path.GetExtension(sOutputFilename).ToLower
                        Case ".svg"
                            sFormat = "svg"
                        Case ".dxf"
                            sFormat = "dxf"
                        Case Else
                            sFormat = "pdf"
                    End Select
                    Args.Filename = sOutputFilename
                    Args.Error = Not pSurveyExportToTherion("export map -proj extended -fmt " & sFormat & " -output " & Chr(34) & sOutputFilename & Chr(34), Args.Output)
                Else
                    Args.Cancel = True
                End If
            End With
        End Using
    End Sub

    Private Sub oTools_OnTrigPointSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditTools.cEditBaseToolsEventArgs) Handles oTools.OnTrigPointSelect
        Call pTrigPointSave(ToolEventArgs.PreviousTrigpoint)
        Call pTrigpointLoad(ToolEventArgs.CurrentTrigpoint)

        Call oSurvey.Plan.Plot.Redraw(oCurrentOptions)
        Call oSurvey.Profile.Plot.Redraw(oCurrentOptions)

        Call pClipboardAlign()

        Call pTrigpointItemSelect()
    End Sub

    Private Function pGetCurrentControlInsidePanels(ParentPanel As ContainerControl) As Control
        Dim oPanel As ContainerControl = TryCast(ParentPanel.ActiveControl, ContainerControl)
        If oPanel Is Nothing Then
            Return ParentPanel.ActiveControl
        Else
            Return pGetCurrentControlInsidePanels(oPanel)
        End If
    End Function

    Private Sub pClipboardAlign()
        Try
            Dim oActiveControl As Control = pGetCurrentControlInsidePanels(Me)
            If oActiveControl Is grdSegments Then
                'allinea lo stato dei comandi CUT e DELETE che dipendono dalla selezione
                Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
                If Not oSegment Is Nothing Then
                    Dim oSegments As cSegmentCollection = pSegmentsFromGridSelection(True)
                    Dim bEnabledEdit As Boolean = oSegments.Count > 0 AndAlso Not IsNothing(oSegment)
                    Dim bLocked As Boolean = oSegment.GetLocked

                    btnCut.Enabled = bEnabledEdit AndAlso Not bLocked
                    btnCopy.Enabled = bEnabledEdit
                    btnDelete.Enabled = bEnabledEdit AndAlso Not bLocked

                    'mnuDesignItemCut.Enabled = bEnabledEdit AndAlso Not bLocked
                    'mnuDesignItemCopy.Enabled = bEnabledEdit
                    'mnuDesignItemDelete.Enabled = bEnabledEdit AndAlso Not bLocked

                    'frmMFT.btnPenCut.Enabled = bEnabledEdit
                    'frmMFT.btnPenCopy.Enabled = bEnabledEdit
                    'frmMFT.btnPenDelete.Enabled = bEnabledEdit
                    'allinea lo stato dei comandi PASTE
                    Dim bStandardFormat As Boolean = pClipboardCheckDataFormat()
                    Dim bExtraFormat As Boolean = pClipboardCheckDesignExtraFormats()
                    Dim bEnabled As Boolean = bStandardFormat Or bExtraFormat

                    btnPasteService.Enabled = bEnabled
                    btnPaste.Enabled = bEnabled
                    btnPasteService.ActAsDropDown = False
                    btnPasteService.ButtonStyle = BarButtonStyle.Default

                    'mnuDesignItemPaste.Enabled = bEnabled
                    'mnuDesignItemPasteSpecial.Enabled = bEnabled
                    'frmMFT.btnPenPaste.Enabled = False
                End If
            ElseIf oActiveControl Is grdTrigPoints Then
                btnCut.Enabled = False
                btnCopy.Enabled = False

                btnPasteService.Enabled = False
                btnPaste.Enabled = False
                btnPasteService.ActAsDropDown = False
                btnPasteService.ButtonStyle = BarButtonStyle.Default

                btnDelete.Enabled = False
                'mnuDesignItemCut.Enabled = False
                'mnuDesignItemCopy.Enabled = False
                'mnuDesignItemPaste.Enabled = False
                'mnuDesignItemPasteSpecial.Enabled = False
                'mnuDesignItemDelete.Enabled = False
            Else 'If picMap.Focused Then
                'allinea lo stato dei comandi CUT e DELETE che dipendono dalla selezione
                If oCurrentDesign Is Nothing Then
                    btnCut.Enabled = False
                    btnCopy.Enabled = False

                    btnPasteService.Enabled = False
                    btnPaste.Enabled = False
                    btnPasteService.ActAsDropDown = False
                    btnPasteService.ButtonStyle = BarButtonStyle.Default

                    btnDelete.Enabled = False
                    'mnuDesignItemCut.Enabled = False
                    'mnuDesignItemDelete.Enabled = False
                Else
                    Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
                    Dim bEnabledEdit As Boolean = Not oItem Is Nothing
                    'Dim bLocked As Boolean = oItem.GetLocked

                    If bEnabledEdit Then
                        If TypeOf oItem Is cItemSegment Then
                            bEnabledEdit = False
                        ElseIf TypeOf oItem Is cItemMarker Then
                            bEnabledEdit = False
                        End If
                    End If

                    Dim bCanBeDeleted As Boolean = bEnabledEdit AndAlso oItem.CanBeDeleted 'AndAlso bLocked
                    Dim bCanBeCutted As Boolean = bCanBeDeleted
                    Dim bCanBeCopied As Boolean = bEnabledEdit

                    btnCut.Enabled = bCanBeCutted
                    btnCopy.Enabled = bCanBeCopied
                    btnDelete.Enabled = bCanBeDeleted

                    'mnuDesignItemCut.Enabled = bCanBeCutted
                    'mnuDesignItemCopy.Enabled = bCanBeCopied
                    'mnuDesignItemDelete.Enabled = bCanBeDeleted

                    'frmMFT.btnPenCut.Enabled = bCanBeCutted
                    'frmMFT.btnPenCopy.Enabled = bCanBeCopied
                    'frmMFT.btnPenDelete.Enabled = bCanBeDeleted

                    'allinea lo stato dei comandi PASTE
                    Dim bStandardFormat As Boolean = pClipboardCheckDesignFormat()
                    Dim bExtraFormat As Boolean = False 'pClipboardCheckDesignExtraFormats()
                    Dim bEnabled As Boolean = bStandardFormat OrElse bExtraFormat

                    If bEnabledEdit AndAlso (oItem.HavePen OrElse oItem.HaveBrush) Then
                        If bEnabled Then
                            btnPasteService.Enabled = True
                            btnPasteService.ActAsDropDown = False
                        Else
                            btnPasteService.Enabled = True
                            btnPasteService.ActAsDropDown = True
                        End If
                        btnPasteService.ButtonStyle = BarButtonStyle.DropDown
                        btnPasteService.DropDownControl = mnuPasteSpecial
                        btnPasteStylePen.Enabled = bEnabledEdit AndAlso oItem.HavePen
                        btnPasteStyleBrush.Enabled = bEnabledEdit AndAlso oItem.HaveBrush
                    Else
                        btnPasteService.Enabled = bEnabled
                        btnPasteService.ButtonStyle = BarButtonStyle.Default
                    End If
                    btnPaste.Enabled = bEnabled

                    'mnuDesignItemPaste.Enabled = bEnabled
                    'mnuDesignItemPasteSpecial.Enabled = bEnabled
                    'frmMFT.btnPenPaste.Enabled = bEnabled
                End If
            End If
        Catch
        End Try
    End Sub

    Private Sub tmrClipboard_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrClipboard.Tick
        'allinea lo stato dei comandi PASTE
        Call tmrClipboard.Stop()
        Call pClipboardAlign()
        'Try
        '    Dim oActiveControl As Control = pGetCurrentControlInsidePanels(Me)
        '    If oActiveControl Is grdSegments Then
        '        Dim bStandardFormat As Boolean = pClipboardCheckDataFormat()
        '        Dim bExtraFormat As Boolean = pClipboardCheckDesignExtraFormats()
        '        Dim bEnabled As Boolean = bStandardFormat Or bExtraFormat
        '        btnPaste.Enabled = bEnabled
        '        frmMFT.btnPenPaste.Enabled = False
        '        mnuEditPaste.Enabled = bEnabled
        '    Else
        '        Dim bStandardFormat As Boolean = pClipboardCheckDesignFormat()
        '        Dim bExtraFormat As Boolean = False
        '        Dim bEnabled As Boolean = bStandardFormat Or bExtraFormat
        '        btnPaste.Enabled = bEnabled
        '        frmMFT.btnPenPaste.Enabled = bEnabled
        '        mnuEditPaste.Enabled = bEnabled
        '    End If
        'Catch
        'End Try
    End Sub

    Private Sub pObjectSetCaveBranch()
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cItem = .CurrentItem
                    Dim sCurrentCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
                    Dim sCurrentBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
                    Call oItem.SetCave(sCurrentCave, sCurrentBranch, True)
                    Call oItem.SetBindDesignType(btnMainBindDesignType.EditValue, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), True)
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub chkPropSketchManualAdjust_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPropSketchManualAdjust.CheckedChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemSketch = .CurrentItem
                    oItem.ManualAdjust = chkPropSketchManualAdjust.Checked
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub chkPropSketchMorphingDisabled_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPropSketchMorphingDisabled.CheckedChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemSketch = .CurrentItem
                    oItem.MorphingDisabled = chkPropSketchMorphingDisabled.Checked
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub pSurveyImportTherion(Filename As String, Append As Boolean)
        Using frmIT As frmImportTherion = New frmImportTherion
            frmIT.txtFilename.Text = Filename

            If frmIT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Dim iOptions As modImport.TherionImportOptionsEnum
                iOptions = iOptions Or If(frmIT.chkTherionImportplan.Checked, modImport.TherionImportOptionsEnum.ImportPlan, 0)
                iOptions = iOptions Or If(frmIT.chkTherionImportprofile.Checked, modImport.TherionImportOptionsEnum.ImportProfile, 0)
                iOptions = iOptions Or If(frmIT.chkTherionMergeAndReorderBorders.Checked, modImport.TherionImportOptionsEnum.MergeAndReorderBorders, 0)
                iOptions = iOptions Or If(frmIT.chktherionConvertBezierToSpline.Checked, modImport.TherionImportOptionsEnum.ConvertBezierToSpline, 0)
                Dim sScaleFactor As Single = frmIT.txtTherionScaleFactor.Value

                Dim sForcedCaveName As String = frmIT.txtCaveName.Text
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin11"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)

                Call modImport.TherionThImportFrom(oSurvey, Filename, sForcedCaveName, iOptions, sScaleFactor)

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend11"))
                Call oMousePointer.Pop()
                'Call pSurveyLoadTreeLayers()
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportSVG(Filename As String, Append As Boolean)
        'SVG
        Dim dNow As Date = Date.Now

        Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)
        Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)

        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oXML As Xml.XmlDocument = New Xml.XmlDocument
        oXML.XmlResolver = Nothing
        Call oXML.Load(Filename)
        Dim oClipart As cDrawClipArt = New cDrawClipArt(oXML)
        Call oMousePointer.Pop()

        Dim oOptions As cItemGeneric.cItemGenericOptions = New cItemGeneric.cItemGenericOptions(oSurvey)
        Dim oSVGI As frmSVGImportOptions = New frmSVGImportOptions(oSurvey, oOptions, oClipart)
        If oSVGI.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
            Call oMousePointer.Push(Cursors.WaitCursor)

            Dim sCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
            Dim sBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
            Dim oItem As cItem = pGetCurrentDesignTools.CurrentLayer.CreateGeneric(sCave, sBranch, oClipart, oOptions)

            Call oItem.DataProperties.SetValue("import_source", "svg")
            Call oItem.DataProperties.SetValue("import_date", dNow)

            If oOptions.Divide Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call pGetCurrentDesignTools.CurrentLayer.Items.Divide(oItem)
                Call oMousePointer.Pop()
                Call pGetCurrentDesignTools.EndItem()
            Else
                Call pGetCurrentDesignTools.SelectItem(oItem)
            End If
            Call oMousePointer.Pop()

            'Call pSurveyLoadTreeLayers()

            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pSurveyImportTrack(Filename As String, FilterIndex As Integer, Append As Boolean)
        'TRACCIA GPS
        Dim dNow As Date = Date.Now

        Using frmIGT As frmImportGPSTrack = New frmImportGPSTrack
            frmIGT.txtFilename.Text = Filename

            If frmIGT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim bImportWaypoint As Boolean = frmIGT.chkGPSImportWaypoint.Checked
                Dim iImportWaypointMode As Integer = frmIGT.cboGPSImportWaypointMode.SelectedIndex
                Dim bImportCreateCaveForWaypoint As Boolean = frmIGT.chkGPSImportCreateCaveForWaypoint.Checked
                Dim bImportCreateStationLink As Boolean = frmIGT.chkGPSImportCreateStationLinks.Checked

                Dim oCurrentCave As cCaveInfo = Nothing

                Dim oXml As XmlDocument = New XmlDocument
                Call oXml.Load(Filename)

                Dim sPrevStationName As String = ""
                Dim sStationName As String = ""

                'Dim bImportTrack As Boolean = True
                'If bImportTrack Then
                '    Dim oPrevStationUTM As modUTM.UTM
                '    Dim oStationUTM As modUTM.UTM
                '    'test for track
                '    Dim oTracksNodes As XmlNodeList
                '    Select Case FilterIndex
                '        Case 2
                '            oTracksNodes = oXml.GetElementsByTagName("trk")
                '    End Select
                '    Dim iTrackIndex As Integer = 0
                '    For Each oXMLTracks As XmlElement In oTracksNodes
                '        Dim sLon As String = ""
                '        Dim sLat As String = ""
                '        Dim sAlt As String = ""
                '        Dim iTrackPointIndex As Integer = 0
                '        For Each oXMLTrackPoint As XmlElement In oXMLTracks.GetElementsByTagName("trkpt")
                '            sLon = oXMLTrackPoint.GetAttribute("lon")
                '            sLat = oXMLTrackPoint.GetAttribute("lat")
                '            sAlt = oXMLTrackPoint.Item("ele").InnerText

                '            sStationName = iTrackIndex & "_" & iTrackPointIndex
                '            iTrackPointIndex += 1

                '            Dim oTrigpoint As cTrigPoint = oSurvey.TrigPoints.Add(sStationName)
                '            With oTrigpoint
                '                .Coordinate.Format = "dd.ddddddd n"
                '                .Coordinate.Longitude = sLon
                '                .Coordinate.Latitude = sLat
                '                .Coordinate.Altitude = sAlt
                '                If bImportCreateCaveForWaypoint Then
                '                    .Entrance = cTrigPoint.EntranceTypeEnum.MainCaveEntrace
                '                Else
                '                    .Entrance = cTrigPoint.EntranceTypeEnum.OutSide
                '                End If
                '                Call .Save()
                '                oStationUTM = modUTM.WGS84ToUTM(.Coordinate)
                '            End With

                '            If sPrevStationName <> "" Then
                '                Dim oSegment As cSegment = oSurvey.Segments.Append()

                '                oSegment.From = sPrevStationName
                '                oSegment.To = sStationName

                '                oSegment.Distance = 1
                '                oSegment.Bearing = 0
                '                oSegment.Inclination = 0

                '                oSegment.Left = 0
                '                oSegment.Right = 0
                '                oSegment.Up = 0
                '                oSegment.Down = 0

                '                oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                '                oSegment.Exclude = True
                '                oSegment.Surface = True

                '                Call oSegment.DataProperties.SetValue("import_source", sFilename)
                '                Call oSegment.DataProperties.SetValue("import_date", dNow)
                '                Call oSegment.DataProperties.SetValue("import_source_type", "trk/link")

                '                Call oSegment.Save()
                '            End If

                '            sPrevStationName = sStationName
                '            oPrevStationUTM = oStationUTM
                '        Next
                '    Next
                'End If

                If bImportWaypoint Then
                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_source.type", Data.cDataFields.TypeEnum.Text)

                    Dim oNodes As XmlNodeList
                    Select Case FilterIndex
                        Case 1
                            oNodes = oXml.GetElementsByTagName("Placemark")
                        Case 2
                            oNodes = oXml.GetElementsByTagName("wpt")
                    End Select

                    For Each oXMLPlaceMark As XmlElement In oNodes
                        Try
                            Dim sCaveName As String
                            Dim sCavePrefix As String
                            Dim sLon As String = ""
                            Dim sLat As String = ""
                            Dim sAlt As String = ""
                            Select Case FilterIndex
                                Case 1
                                    sCaveName = oXMLPlaceMark.Item("name").InnerText
                                    Dim sCoordinate As String = oXMLPlaceMark.Item("Point").Item("coordinates").InnerText
                                    Dim sCoordinateParts() As String = sCoordinate.Split(",")
                                    sLon = sCoordinateParts(0)
                                    sLat = sCoordinateParts(1)
                                    sAlt = sCoordinateParts(2)
                                Case 2
                                    sCaveName = oXMLPlaceMark.Item("name").InnerText
                                    sLon = oXMLPlaceMark.GetAttribute("lon")
                                    sLat = oXMLPlaceMark.GetAttribute("lat")
                                    sAlt = oXMLPlaceMark.Item("ele").InnerText
                            End Select
                            sCavePrefix = modExport.GetStationPrexifFromText(sCaveName)

                            If bImportCreateCaveForWaypoint Then
                                If oSurvey.Properties.CaveInfos.Contains(sCaveName) Then
                                    oCurrentCave = oSurvey.Properties.CaveInfos(sCaveName)
                                Else
                                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)
                                End If
                            End If

                            Dim oSegment As cSegment
                            If bImportCreateCaveForWaypoint Then
                                sStationName = modExport.GetNewStationName(oSurvey.TrigPoints, sCavePrefix)
                            Else
                                sStationName = modExport.FormatTextFor(sCaveName, FormatTextForEnum.BaseWithoutSpaces).ToUpper
                            End If

                            If Not oSurvey.TrigPoints.Contains(sStationName) Then
                                If bImportCreateStationLink Then
                                    If sPrevStationName = "" Then sPrevStationName = sStationName

                                    oSegment = oSurvey.Segments.Append()

                                    oSegment.From = sPrevStationName
                                    oSegment.To = sStationName

                                    oSegment.Distance = 0
                                    oSegment.Bearing = 0
                                    oSegment.Inclination = 0

                                    oSegment.Left = 0
                                    oSegment.Right = 0
                                    oSegment.Up = 0
                                    oSegment.Down = 0

                                    oSegment.Note = sCaveName

                                    oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                    oSegment.Exclude = True
                                    oSegment.Surface = True
                                    oSegment.Virtual = True

                                    Call oSegment.DataProperties.SetValue("import_source", sFilename)
                                    Call oSegment.DataProperties.SetValue("import_date", dNow)
                                    Call oSegment.DataProperties.SetValue("import_source_type", "trk/link")

                                    Call oSegment.Save()
                                End If

                                oSegment = oSurvey.Segments.Append()
                                If bImportCreateCaveForWaypoint Then Call oSegment.SetCave(sCaveName)

                                oSegment.From = sStationName
                                oSegment.To = sStationName

                                oSegment.Distance = 0
                                oSegment.Bearing = 0
                                oSegment.Inclination = 0

                                oSegment.Left = 0
                                oSegment.Right = 0
                                oSegment.Up = 0
                                oSegment.Down = 0

                                oSegment.Note = sCaveName

                                oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                oSegment.Exclude = False
                                oSegment.Surface = False
                                oSegment.Virtual = False

                                Call oSegment.DataProperties.SetValue("import_source", sFilename)
                                Call oSegment.DataProperties.SetValue("import_date", dNow)
                                Call oSegment.DataProperties.SetValue("import_source_type", "trk/placemark")

                                Call oSegment.Save()

                                If iImportWaypointMode = 1 Then
                                    oSegment = oSurvey.Segments.Append()
                                    If bImportCreateCaveForWaypoint Then Call oSegment.SetCave(sCaveName)

                                    oSegment.From = sStationName
                                    oSegment.To = sStationName & "_MARKER"

                                    oSegment.Distance = 10
                                    oSegment.Bearing = 0
                                    oSegment.Inclination = 90

                                    oSegment.Left = 0
                                    oSegment.Right = 0
                                    oSegment.Up = 0
                                    oSegment.Down = 0

                                    oSegment.Note = sCaveName

                                    oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                    oSegment.Exclude = True
                                    oSegment.Surface = False
                                    oSegment.Virtual = False

                                    Call oSegment.DataProperties.SetValue("import_source", sFilename)
                                    Call oSegment.DataProperties.SetValue("import_date", dNow)
                                    Call oSegment.DataProperties.SetValue("import_source_type", "trk/marker")

                                    Call oSegment.Save()
                                End If

                                Call oSurvey.TrigPoints.Rebind()

                                With oSurvey.TrigPoints(sStationName)
                                    .Aliases.Add(sCaveName)
                                    .Coordinate.Format = "dd.ddddddd n"
                                    .Coordinate.Longitude = sLon
                                    .Coordinate.Latitude = sLat
                                    .Coordinate.Altitude = sAlt

                                    If bImportCreateCaveForWaypoint Then
                                        .Entrance = cTrigPoint.EntranceTypeEnum.MainCaveEntrace
                                    Else
                                        .Entrance = cTrigPoint.EntranceTypeEnum.OutSide
                                    End If
                                End With
                                sPrevStationName = sStationName
                            End If
                        Catch
                        End Try
                    Next
                End If

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                'Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend9"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportXLSX(Filename As String, Append As Boolean)
        'FILE EXCEL
        Dim dNow As Date = Date.Now

        Using frmIX As frmImportExcel = New frmImportExcel
            frmIX.txtFilename.Text = Filename

            If frmIX.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim bSkipFirstLine As Boolean = frmIX.chkFirstline.Checked
                Dim oFields As frmImportGenericData.cDestFields = frmIX.GetFields
                Dim sForcedCaveName As String = frmIX.txtCaveName.Text
                Dim sPrefix As String = frmIX.txtPrefix.Text.Trim.ToUpper
                Dim bAutoSplay As Boolean = frmIX.chkAutoSplay.Checked
                Dim bSplaySymbol As Boolean = frmIX.chkSplaySymbol.Checked
                Dim sSplaySymbol = frmIX.txtSplayMarker.Text
                Dim bCutSplaySymbol As Boolean = frmIX.chkCutSplaySymbol.Checked
                Dim sCutSplaySymbol = frmIX.txtCutSplayMarker.Text
                Dim bZeroSymbol As Boolean = frmIX.chkZeroPlaceholders.Checked
                Dim sZeroSymbol = frmIX.txtZeroPlaceholders.Text
                Dim bCommentSymbols As Boolean = frmIX.chkCommentSymbols.Checked
                Dim sCommentSymbols = frmIX.txtCommentSymbols.Text

                If bSplaySymbol Then bAutoSplay = True

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing

                'backup delle impostazioni splay e impostazione su splay automatici...
                Dim iSplay As cSurvey.cSurvey.SplayModeEnum = oSurvey.Properties.SplayMode
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = cSurvey.cSurvey.SplayModeEnum.Automatic
                End If
                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin13"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)

                    Using oXLS As OfficeOpenXml.ExcelPackage = New OfficeOpenXml.ExcelPackage(New FileInfo(Filename))
                        Using oXLSSheet As OfficeOpenXml.ExcelWorksheet = oXLS.Workbook.Worksheets.First
                            Dim iFirstRow As Integer = oXLSSheet.Dimension.Start.Row
                            Dim iLastRow As Integer = oXLSSheet.Dimension.End.Row
                            Dim iRows As Integer = iLastRow - iFirstRow

                            Dim iFirstColumn As Integer = oXLSSheet.Dimension.Start.Column
                            Dim iLastColumn As Integer = oXLSSheet.Dimension.End.Column
                            For r As Integer = iFirstRow To iLastRow
                                If bSkipFirstLine Then
                                    bSkipFirstLine = False
                                    Continue For
                                End If
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, r / iRows, GetLocalizedString("main.progress13"))

                                If bCommentSymbols Then
                                    If oXLSSheet.Cells(r, iFirstColumn).Value = sCommentSymbols Then
                                        Continue For
                                    End If
                                End If

                                Dim sFrom As String
                                Dim sTo As String
                                Dim dDist As Decimal
                                Dim dDir As Decimal
                                Dim dIncl As Decimal
                                Dim dLeft As Decimal
                                Dim dRight As Decimal
                                Dim dUp As Decimal
                                Dim dDown As Decimal
                                Dim sNote As String

                                sFrom = oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.From, oXLSSheet, r, "").ToString
                                sTo = oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.To, oXLSSheet, r, "").ToString

                                If bSplaySymbol And sTo = sSplaySymbol Then sTo = ""
                                Dim cutSplay = False
                                If bCutSplaySymbol And sTo = sCutSplaySymbol Then
                                    sTo = ""
                                    cutSplay = True
                                End If

                                If bZeroSymbol Then
                                    For c As Integer = iFirstColumn To iLastColumn
                                        If oXLSSheet.Cells(r, c).Value.ToString = sZeroSymbol Then
                                            oXLSSheet.Cells(r, c).Value = 0
                                        End If
                                    Next
                                End If

                                If sPrefix.Length > 0 AndAlso sFrom.Length > 0 Then sFrom = sPrefix + sFrom
                                If sPrefix.Length > 0 AndAlso sTo.Length > 0 Then sTo = sPrefix + sTo

                                dDist = modNumbers.ToDecimal(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Distance, oXLSSheet, r, 0))
                                dDir = modNumbers.ToDecimal(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Direction, oXLSSheet, r, 0))
                                dIncl = modNumbers.ToDecimal(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Inclination, oXLSSheet, r, 0))

                                'If sTo.Length > 0 Then
                                dLeft = modNumbers.ToDecimal(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Left, oXLSSheet, r, 0))
                                dRight = modNumbers.ToDecimal(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Right, oXLSSheet, r, 0))
                                dUp = modNumbers.ToDecimal(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Up, oXLSSheet, r, 0))
                                dDown = modNumbers.ToDecimal(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Down, oXLSSheet, r, 0))
                                sNote = oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Note, oXLSSheet, r, "").ToString
                                'End If

                                Dim oSegment As cSegment = oSurvey.Segments.Append()
                                Call oSegment.SetCave(sCaveName)
                                oSegment.From = sFrom
                                oSegment.To = sTo

                                oSegment.Distance = dDist
                                oSegment.Bearing = dDir
                                oSegment.Inclination = dIncl

                                oSegment.Left = dLeft
                                oSegment.Right = dRight
                                oSegment.Up = dUp
                                oSegment.Down = dDown

                                oSegment.Note = sNote

                                oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                oSegment.Exclude = False
                                oSegment.Cut = cutSplay


                                Call oSegment.DataProperties.SetValue("import_source", "text")
                                Call oSegment.DataProperties.SetValue("import_date", dNow)

                                Call oSegment.Save()
                            Next
                        End Using
                    End Using
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = iSplay
                End If

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend13"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportText(Filename As String, Append As Boolean)
        'FILE DI TESTO GENERICO
        Dim dNow As Date = Date.Now

        Using frmIGD As frmImportGenericData = New frmImportGenericData
            frmIGD.txtFilename.Text = Filename

            If frmIGD.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim bSkipFirstLine As Boolean = frmIGD.chkFirstline.Checked
                Dim oFields As frmImportGenericData.cDestFields = frmIGD.GetFields
                Dim sSeparator() As String = frmIGD.GetSeparator
                Dim bRemoveEmptyEntries As Boolean
                If sSeparator(0) = " " Then
                    bRemoveEmptyEntries = True
                End If
                Dim sForcedCaveName As String = frmIGD.txtCaveName.Text
                Dim sPrefix As String = frmIGD.txtPrefix.Text.Trim.ToUpper
                Dim bAutoSplay As Boolean = frmIGD.chkAutoSplay.Checked
                Dim bSplaySymbol As Boolean = frmIGD.chkSplaySymbol.Checked
                Dim sSplaySymbol = frmIGD.txtSplayMarker.Text
                Dim bCutSplaySymbol As Boolean = frmIGD.chkCutSplaySymbol.Checked
                Dim sCutSplaySymbol = frmIGD.txtCutSplayMarker.Text
                Dim bZeroSymbol As Boolean = frmIGD.chkZeroPlaceholders.Checked
                Dim sZeroSymbol = frmIGD.txtZeroPlaceholders.Text
                Dim bCommentSymbols As Boolean = frmIGD.chkCommentSymbols.Checked
                Dim sCommentSymbols = frmIGD.txtCommentSymbols.Text

                If bSplaySymbol Then bAutoSplay = True

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing

                Dim sLine As String
                Dim sLineParts() As String

                'backup delle impostazioni splay e impostazione su splay automatici...
                Dim iSplay As cSurvey.cSurvey.SplayModeEnum = oSurvey.Properties.SplayMode
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = cSurvey.cSurvey.SplayModeEnum.Automatic
                End If
                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin9"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)

                    Dim fi As FileInfo = New FileInfo(Filename)
                    Dim sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                    If Not sr.EndOfStream Then
                        If bSkipFirstLine Then
                            Call sr.ReadLine()
                        End If
                        Do Until sr.EndOfStream
                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress9"))

                            sLine = sr.ReadLine

                            If bCommentSymbols Then
                                For Each ch In sCommentSymbols
                                    Dim chPos = sLine.IndexOf(ch)
                                    If chPos >= 0 Then sLine = sLine.Remove(chPos, sLine.Length - chPos)
                                Next
                            End If

                            If sLine.Length = 0 Then Continue Do

                            If bRemoveEmptyEntries Then
                                sLineParts = sLine.Split(sSeparator, StringSplitOptions.RemoveEmptyEntries)
                            Else
                                sLineParts = sLine.Split(sSeparator, StringSplitOptions.None)
                            End If

                            Dim sFrom As String
                            Dim sTo As String
                            Dim dDist As Decimal
                            Dim dDir As Decimal
                            Dim dIncl As Decimal
                            Dim dLeft As Decimal
                            Dim dRight As Decimal
                            Dim dUp As Decimal
                            Dim dDown As Decimal
                            Dim sNote As String

                            sFrom = modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.From, sLineParts, ""))
                            sTo = modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.To, sLineParts, ""))

                            If bSplaySymbol And sTo = sSplaySymbol Then sTo = ""
                            Dim cutSplay = False
                            If bCutSplaySymbol And sTo = sCutSplaySymbol Then
                                sTo = ""
                                cutSplay = True
                            End If

                            If bZeroSymbol Then
                                For Each field In sLineParts
                                    If field.Length = 1 And sZeroSymbol.Contains(field) Then
                                        field = "0"
                                    End If
                                Next
                            End If

                            If sPrefix.Length > 0 AndAlso sFrom.Length > 0 Then sFrom = sPrefix + sFrom
                            If sPrefix.Length > 0 AndAlso sTo.Length > 0 Then sTo = sPrefix + sTo

                            dDist = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Distance, sLineParts, 0)))
                            dDir = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Direction, sLineParts, 0)))
                            dIncl = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Inclination, sLineParts, 0)))

                            If sTo.Length > 0 Then
                                dLeft = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Left, sLineParts, 0)))
                                dRight = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Right, sLineParts, 0)))
                                dUp = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Up, sLineParts, 0)))
                                dDown = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Down, sLineParts, 0)))
                                sNote = modNumbers.FieldUnformat(oFields.GetValue(frmImportGenericData.TextFieldIndexEnum.Note, sLineParts, ""))
                            End If

                            Dim oSegment As cSegment = oSurvey.Segments.Append()
                            Call oSegment.SetCave(sCaveName)
                            oSegment.From = sFrom
                            oSegment.To = sTo

                            oSegment.Distance = dDist
                            oSegment.Bearing = dDir
                            oSegment.Inclination = dIncl

                            oSegment.Left = dLeft
                            oSegment.Right = dRight
                            oSegment.Up = dUp
                            oSegment.Down = dDown

                            oSegment.Note = sNote

                            oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                            oSegment.Exclude = False
                            oSegment.Cut = cutSplay


                            Call oSegment.DataProperties.SetValue("import_source", "text")
                            Call oSegment.DataProperties.SetValue("import_date", dNow)

                            Call oSegment.Save()
                        Loop
                    End If
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = iSplay
                End If

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend9"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportVisualTopo(Filename As String, Append As Boolean)
        'VISUALTOPO
        Dim dNow As Date = Date.Now

        Dim bImportIncompatibleSet As Boolean = oSurvey.GetGlobalSetting("vtopo.importincompatibleset", 0)
        Dim bImportSetAsBranch As Boolean = oSurvey.GetGlobalSetting("vtopo.importsetasbranch", 1)

        Using frmIVT As frmImportVisualTopo = New frmImportVisualTopo
            frmIVT.txtFilename.Text = Filename
            frmIVT.chkVTopoImportIncompatibleSet.Checked = bImportIncompatibleSet
            frmIVT.chkVTopoImportSetAsBranch.Checked = bImportSetAsBranch

            If frmIVT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bImportIncompatibleSet = frmIVT.chkVTopoImportIncompatibleSet.Checked
                bImportSetAsBranch = frmIVT.chkVTopoImportSetAsBranch.Checked
                Dim sForcedCaveName As String = frmIVT.txtCaveName.Text
                Dim sPrefix As String = frmIVT.txtPrefix.Text.Trim.ToUpper

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True
                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim oStandardColor As Color = Color.Transparent
                Dim oColor As Color = oStandardColor
                Dim oLastColor As Color = Color.Transparent

                Dim fi As FileInfo = New FileInfo(Filename)

                Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                    Dim sVersion As String = sr.ReadLine
                    Dim bVersionOk As Boolean = False
                    If sVersion Like "Version *" Then
                        Dim sVersionNumber As Single = modNumbers.StringToDecimal(sVersion.Substring(8).Trim)
                        If sVersionNumber < 4.9 Then
                            Call MsgBox(String.Format(GetLocalizedString("main.warning1"), sVersion), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                            bVersionOk = False
                        Else
                            bVersionOk = True
                        End If
                    Else
                        Call MsgBox(GetLocalizedString("main.warning2"), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                        bVersionOk = False
                    End If

                    If bVersionOk Then
                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin1"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                        Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                        Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                        Dim sLine As String

                        Dim sCaveName As String
                        Dim sCaveBranchName As String
                        Dim oCurrentCave As cCaveInfo = Nothing
                        Dim oCurrentCaveBranch As cCaveInfoBranch = Nothing
                        Dim sOrigin As String = ""
                        Do
                            sLine = sr.ReadLine()
                            If sLine Like "Trou *" And sForcedCaveName = "" Then
                                Dim sLineParts() As String = sLine.Substring(5).Split(",")
                                sCaveName = sLineParts(0)
                                If Not Append Then
                                    oSurvey.Properties.Name = sCaveName
                                End If
                                oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)
                            End If

                            If sLine Like "Club *" Then
                                Dim sLineParts() As String = sLine.Substring(5).Split(",")
                                If Not Append Then
                                    oSurvey.Properties.Club = sLineParts(0)
                                End If
                            End If

                            If sLine Like "Entree *" Then
                                sOrigin = sLine.Substring(7).Trim
                            End If

                            If sLine Like "Couleur *" Then
                                Try
                                    Dim sColorParts() As String = sLine.Substring(8).Split(",")
                                    oStandardColor = Color.FromArgb(255, sColorParts(0), sColorParts(1), sColorParts(2))
                                Catch
                                End Try
                            End If
                        Loop Until sLine Like "Param *"

                        Dim bMeasureSetOk As Boolean = True
                        Dim iRow As Integer
                        Dim iSet As Integer
                        Dim iSessionCount As Integer
                        Dim oSession As cSession
                        Dim iCaveCount As Integer
                        Dim dDirInverted As Decimal = 0
                        Dim dInclInverted As Decimal = 1
                        Dim iDirection As cSurvey.cSurvey.DirectionEnum = cSurvey.cSurvey.DirectionEnum.Right

                        Do Until sr.EndOfStream
                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress1"))
                            sLine = sr.ReadLine
                            If sLine.StartsWith("[Configuration") Or sLine.StartsWith("[Setup") Then
                                Do Until sr.EndOfStream
                                    sLine = sr.ReadLine()
                                    If sLine Like "Calcul=*" Then
                                        sLine = sr.ReadLine()
                                        If sLine Like "Options=*" Then
                                            Dim sLineParts() As String = sLine.Substring(8).Split(",")
                                            Dim iOption As Integer = sLineParts(0)
                                            If (iOption And 2) = 2 Then
                                                oSurvey.Properties.SideMeasuresType = cSegment.SideMeasuresTypeEnum.Bisection
                                                For Each oOtherSession As cSession In oSurvey.Properties.Sessions
                                                    oOtherSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.Bisection
                                                Next
                                            End If
                                            If (iOption And 4) = 4 Then
                                                oSurvey.Properties.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToPrevious
                                                For Each oOtherSession As cSession In oSurvey.Properties.Sessions
                                                    oOtherSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToPrevious
                                                Next
                                            End If
                                        End If
                                    End If
                                Loop
                                Exit Do
                            End If
                            If sLine <> "" Then
                                If sLine Like "Param *" Then
                                    'Try
                                    Dim sLineParts() As String = sLine.Substring(6).Split(" ")
                                    If bImportIncompatibleSet Then
                                        bMeasureSetOk = True
                                    Else
                                        If (sLineParts(0) = "Deca" And sLineParts(1) = "Degd" And sLineParts(2) = "Clino" And sLineParts(3) = "Degd") Then
                                            bMeasureSetOk = True
                                        Else
                                            Call MsgBox(String.Format(GetLocalizedString("main.warning3"), iRow, sLine), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                                        End If
                                    End If

                                    Dim sInversions() As String = sLineParts(5).Split(",")
                                    If sInversions(0).ToLower = "inv" Then
                                        dDirInverted = -180
                                    Else
                                        dDirInverted = 0
                                    End If
                                    If sInversions(1).ToLower = "inv" Then
                                        dInclInverted = -1
                                    Else
                                        dInclInverted = 1
                                    End If

                                    Dim iStartEnd As cSurvey.cSegment.SideMeasuresReferToEnum
                                    Dim sStartEnd As String = sLineParts(6)
                                    If sStartEnd.ToLower = "dep" Then
                                        'gestisco solo partenza, arrivo e sconosciuto vengono equiparati
                                        iStartEnd = cSegment.SideMeasuresReferToEnum.StartPoint
                                    Else
                                        iStartEnd = cSegment.SideMeasuresReferToEnum.EndPoint
                                    End If

                                    Dim sColor As String = sLineParts(7)
                                    If sColor = "Std" Then
                                        oColor = oStandardColor
                                    Else
                                        Dim sColorParts() As String = sLineParts(7).Split(",")
                                        oColor = Color.FromArgb(255, sColorParts(0), sColorParts(1), sColorParts(2))
                                    End If

                                    iSet += 1

                                    Do
                                        iSessionCount += 1
                                    Loop While oSurvey.Properties.Sessions.Contains(oSurvey.Properties.Sessions.GetID(Today, GetLocalizedString("main.visualtopodefaultsessionprefix") & " " & iSessionCount))
                                    oSession = oSurvey.Properties.Sessions.Add(Today, GetLocalizedString("main.visualtopodefaultsessionprefix") & " " & iSessionCount)
                                    oSession.Declination = sLineParts(4)
                                    oSession.SideMeasuresReferTo = iStartEnd

                                    If bImportSetAsBranch Then
                                        If oCurrentCave Is Nothing Then
                                            If sForcedCaveName = "" Then
                                                sCaveName = Path.GetFileNameWithoutExtension(Filename)
                                            Else
                                                sCaveName = sForcedCaveName
                                            End If
                                            oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)
                                        End If
                                        Do
                                            iCaveCount += 1
                                        Loop While oCurrentCave.Branches.Contains(GetLocalizedString("main.visualtopodefaultcaveprefix") & " " & iCaveCount)
                                        sCaveBranchName = GetLocalizedString("main.visualtopodefaultcaveprefix") & " " & iCaveCount
                                        oCurrentCaveBranch = oCurrentCave.Branches.Add(sCaveBranchName)
                                        oCurrentCaveBranch.Color = oColor
                                    End If
                                    'Catch
                                    'End Try
                                    iRow += 1
                                Else
                                    If bMeasureSetOk Then
                                        'Dim sFrom As String = sLine.Substring(0, 11).Trim.ToUpper
                                        'Dim sTo As String = sLine.Substring(11, 11).Trim.ToUpper
                                        Dim sValues() As String = modExport.VTopoParseLine(sLine)

                                        Dim sFrom As String = sPrefix & sValues(0).ToUpper.Trim
                                        Dim sTo As String = sPrefix & sValues(1).ToUpper.Trim
                                        Dim dDist As Decimal = modText.GetNumber(sValues(2))
                                        Dim dDir As Decimal = modText.GetNumber(sValues(3))
                                        Dim dIncl As Decimal = modText.GetNumber(sValues(4))
                                        If dIncl > 90 Or dIncl < -90 Then
                                            Call MsgBox(String.Format(GetLocalizedString("main.warning4"), iRow, sLine), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                                        End If
                                        dDir = modPaint.NormalizeAngle(dDir + dDirInverted)
                                        dIncl = dIncl * dInclInverted

                                        Dim dLeft As Decimal = If(sValues(5) = "*", 0, modText.GetNumber(sValues(5)))
                                        Dim dRight As Decimal = If(sValues(6) = "*", 0, modText.GetNumber(sValues(6)))
                                        Dim dUp As Decimal = If(sValues(7) = "*", 0, modText.GetNumber(sValues(7)))
                                        Dim dDown As Decimal = If(sValues(8) = "*", 0, modText.GetNumber(sValues(8)))

                                        Dim sInverted As String = sValues(9)
                                        Dim bInverted As Boolean = sInverted.ToUpper = "I"
                                        If bInverted Then
                                            If iDirection = cSurvey.cSurvey.DirectionEnum.Left Then
                                                iDirection = cSurvey.cSurvey.DirectionEnum.Right
                                            Else
                                                iDirection = cSurvey.cSurvey.DirectionEnum.Left
                                            End If
                                        End If

                                        Dim sExclude As String = ""
                                        Try : sExclude = sValues(10) : Catch : End Try
                                        Dim bExclude As Boolean = sExclude.ToUpper = "E"

                                        Dim sNote As String = ""
                                        Try : sNote = sValues(11) : Catch : End Try

                                        Dim oSegment As cSegment = oSurvey.Segments.Append()
                                        Call oSegment.SetCave(sCaveName, sCaveBranchName)
                                        If Not oSession Is Nothing Then Call oSegment.SetSession(oSession)
                                        oSegment.From = sFrom
                                        oSegment.To = sTo
                                        oSegment.Distance = dDist
                                        oSegment.Bearing = dDir
                                        oSegment.Inclination = dIncl
                                        oSegment.Left = dLeft
                                        oSegment.Right = dRight
                                        oSegment.Up = dUp
                                        oSegment.Down = dDown

                                        oSegment.Note = sNote

                                        oSegment.Direction = iDirection
                                        oSegment.Exclude = bExclude

                                        Call oSegment.DataProperties.SetValue("import_source", "visualtopo")
                                        Call oSegment.DataProperties.SetValue("import_date", Strings.Format("ddMMyyyy HHmmss"))

                                        Call oSegment.Save()

                                        'If oEntrance.ContainsKey(sFrom) Then
                                        If sOrigin.ToUpper = sFrom.ToUpper Then
                                            Call oSurvey.TrigPoints.Rebind()
                                            With oSurvey.TrigPoints(sFrom)
                                                .Entrance = cTrigPoint.EntranceTypeEnum.MainCaveEntrace
                                                .ShowEntrance = True
                                            End With
                                            'Call oEntrance.Remove(sFrom)
                                        End If
                                    End If

                                    iRow += 1
                                End If
                            End If
                            'sLine = sr.ReadLine
                        Loop
                        Call sr.Close()

                        Call oSurvey.TrigPoints.Rebind()

                        oSurvey.Properties.Origin = sOrigin
                    End If
                End Using

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend1"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportcSurvey(Filename As String, Append As Boolean)
        'cSurvey
        'bDisablewarpingDetails = True
        Dim dNow As Date = Date.Now

        Using frmIS As frmImportcSurvey = New frmImportcSurvey
            frmIS.txtFilename.Text = Filename

            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oImportSurvey As cSurvey.cSurvey = New cSurvey.cSurvey
            Call oImportSurvey.Load(Filename, cSurvey.cSurvey.LoadOptionsEnum.FixTopoDroid)
            If Not oImportSurvey.Calculate.LoadedFromFile Then
                Call oImportSurvey.Invalidate()
                Call oImportSurvey.Calculate.Calculate(True)
            End If
            Call oMousePointer.Pop()

            Call frmIS.cboImportAsBranchOfCave.Rebind(oSurvey.Properties.CaveInfos, True, False)

            Dim bHasData As Boolean = oImportSurvey.Segments.Count > 0 OrElse oImportSurvey.Properties.CaveInfos.Count > 0 OrElse oImportSurvey.Properties.Sessions.Count > 0
            frmIS.chkcSurveyImportData.Enabled = bHasData

            Dim bHasErrors As Boolean

            If oImportSurvey.Properties.CreatorID = "TopoDroid" Then
                Call frmIS.lvCheck.Items.Add(String.Format(modMain.GetLocalizedString("main.textpart155"), "TopoDroid " & oImportSurvey.Properties.CreatorVersion), "topodroid")
            End If
            If oImportSurvey.Properties.CreatorID = "cSurvey" OrElse oImportSurvey.Properties.CreatorID = "" Then
                Call frmIS.lvCheck.Items.Add(String.Format(modMain.GetLocalizedString("main.textpart155"), "cSurvey " & oImportSurvey.Properties.CreatorVersion), "csurvey")
            End If

            If oImportSurvey.Properties.CalculateVersion <> oSurvey.Properties.CalculateVersion Then
                Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart154"), "warning")
                'bHasErrors = bHasErrors Or True
            End If

            Dim oImportTrigpointNames As List(Of String) = oImportSurvey.TrigPoints.GetNames
            Dim oTrigpointNames As List(Of String) = oSurvey.TrigPoints.GetNames
            If oImportTrigpointNames.Intersect(oTrigpointNames).Count = 0 Then
                Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart101b"), "error")
                bHasErrors = bHasErrors Or True
            Else
                Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart101a"), "ok")
            End If

            Dim bDataDataProperties As Boolean = oSurvey.Properties.DataTables.Segments.CanMergeWith(oImportSurvey.Properties.DataTables.Segments) AndAlso oSurvey.Properties.DataTables.Trigpoints.CanMergeWith(oImportSurvey.Properties.DataTables.Trigpoints)
            If bDataDataProperties Then
                Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart106a"), "ok")
            Else
                bHasErrors = bHasErrors Or True
                Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart106b"), "error")
            End If

            Dim bHasCalculateData As Boolean = oImportSurvey.Calculate.TrigPoints.Count > 0
            If bHasCalculateData Then
                Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart97a"), "ok")
            Else
                Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart97b"), "warning")
            End If
            Dim bImportPlanEnabled As Boolean = oImportSurvey.Plan.GetAllItems.Count > 0
            Dim bImportProfileEnabled As Boolean = oImportSurvey.Profile.GetAllItems.Count > 0
            frmIS.chkcSurveyImportGraphics.Enabled = bImportPlanEnabled OrElse bImportProfileEnabled
            frmIS.chkcSurveyImportPlan.Enabled = bImportPlanEnabled
            frmIS.chkcSurveyImportProfile.Enabled = bImportProfileEnabled
            Dim bHasBindedSegments As Boolean
            Dim bHasPlanWarping As Boolean
            Dim bHasProfileWarping As Boolean
            Dim bThereAreUnbindedPlanPoint As Boolean
            Dim bThereAreUnbindedProfilePoint As Boolean
            If frmIS.chkcSurveyImportGraphics.Enabled Then
                bHasPlanWarping = oImportSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oImportSurvey.Properties.PlanWarpingDisabled
                bHasProfileWarping = oImportSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oImportSurvey.Properties.ProfileWarpingDisabled
                If bHasPlanWarping Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart98a"), "ok")
                Else
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart98b"), "warning")
                End If
                If bHasProfileWarping Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart99a"), "ok")
                Else
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart99b"), "warning")
                End If

                bThereAreUnbindedPlanPoint = oImportSurvey.Plan.GetAllItems.Where(Function(item) item.Points.Where(Function(point) point.BindedSegment Is Nothing).Count > 0).Count > 0
                bThereAreUnbindedProfilePoint = oImportSurvey.Plan.GetAllItems.Where(Function(item) item.Points.Where(Function(point) point.BindedSegment Is Nothing).Count > 0).Count > 0
                If bThereAreUnbindedPlanPoint Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart108a"), "warning")
                Else
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart108b"), "ok")
                End If
                If bThereAreUnbindedProfilePoint Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart109a"), "warning")
                Else
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart109b"), "ok")
                End If

                bHasPlanWarping = oSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oSurvey.Properties.PlanWarpingDisabled
                bHasProfileWarping = oSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oSurvey.Properties.ProfileWarpingDisabled
                If bHasPlanWarping Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart98c"), "ok")
                Else
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart98d"), "warning")
                End If
                If bHasProfileWarping Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart99c"), "ok")
                Else
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart99d"), "warning")
                End If

                bHasBindedSegments = oImportSurvey.Segments.GetBindedSegments.Count > 0
                If bHasBindedSegments Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart100a"), "ok")
                Else
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart100b"), "warning")
                End If

                Dim bDesignDataProperties As Boolean = oSurvey.Properties.DataTables.DesignItems.CanMergeWith(oImportSurvey.Properties.DataTables.DesignItems)
                If bDataDataProperties Then
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart107a"), "ok")
                Else
                    bHasErrors = bHasErrors Or True
                    Call frmIS.lvCheck.Items.Add(modMain.GetLocalizedString("main.textpart107b"), "error")
                End If
            End If
            If bHasErrors Then frmIS.chkcSurveyImportGraphics.Enabled = False
            If bHasErrors Then frmIS.chkcSurveyImportData.Enabled = False

            frmIS.chkcSurveyImportSurface.Enabled = Not oImportSurvey.Surface.IsEmpty

            If frmIS.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                If (frmIS.chkcSurveyImportData.Checked AndAlso frmIS.chkcSurveyImportData.Enabled) OrElse (frmIS.chkcSurveyImportGraphics.Checked AndAlso frmIS.chkcSurveyImportGraphics.Enabled) OrElse frmIS.chkcSurveyImportSurface.Checked OrElse frmIS.chkcSurveyImportDesignProperties.Checked OrElse frmIS.chkcSurveyImportScaleRules.Checked OrElse frmIS.chkcsurveyimportlinkedsurvey.Checked Then

                    'check if there are no segment with same id
                    'check if there are almost one common station between the two surveys
                    If frmIS.chkcSurveyImportTexts.Enabled AndAlso frmIS.chkcSurveyImportTexts.Checked Then
                        Call oMousePointer.Push(Cursors.WaitCursor)
                        Call oSurvey.Texts.MergeWith(oImportSurvey.Texts)
                        Call oMousePointer.Pop()
                    End If

                    If frmIS.chkcSurveyImportSurface.Enabled AndAlso frmIS.chkcSurveyImportSurface.Checked Then
                        Call oMousePointer.Push(Cursors.WaitCursor)

                        For Each oElevation As Surface.cElevation In oImportSurvey.Surface.Elevations
                            If Not oSurvey.Surface.Elevations.Contains(oElevation.ID) Then
                                Dim oNewElevation As Surface.cElevation = oSurvey.Surface.Elevations.Add()
                                Call oNewElevation.CopyFrom(oElevation)
                            End If
                        Next

                        For Each oOrthoPhoto As Surface.cOrthoPhoto In oImportSurvey.Surface.OrthoPhotos
                            If Not oSurvey.Surface.OrthoPhotos.Contains(oOrthoPhoto.ID) Then
                                Dim oNewOrthoPhoto As Surface.cOrthoPhoto = oSurvey.Surface.OrthoPhotos.Add()
                                Call oNewOrthoPhoto.CopyFrom(oOrthoPhoto)
                            End If
                        Next

                        For Each oWMS As Surface.cWMS In oImportSurvey.Surface.WMSs
                            If Not oSurvey.Surface.WMSs.Contains(oWMS.ID) Then
                                Dim oNewWMS As Surface.cWMS = oSurvey.Surface.WMSs.Add()
                                Call oNewWMS.CopyFrom(oWMS)
                            End If
                        Next

                        Call oMousePointer.Pop()
                    End If

                    Dim oDuplicatedSegments As Dictionary(Of String, String) = New Dictionary(Of String, String)

                    If frmIS.chkcSurveyImportData.Checked AndAlso frmIS.chkcSurveyImportData.Enabled Then
                        Call oMousePointer.Push(Cursors.WaitCursor)
                        bDisabledCaveBranchChangeEvent = True

                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin5"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
                        Try
                            Dim oCaveInfos As cCaveInfos = oImportSurvey.Properties.CaveInfos
                            If frmIS.chkImportAsBranchOf.Checked Then
                                Dim oCaveBranch As cICaveInfoBranches = If(DirectCast(frmIS.cboImportAsBranchOfBranch.SelectedItem, cCaveInfoBranch).Name = "", frmIS.cboImportAsBranchOfCave.SelectedItem, frmIS.cboImportAsBranchOfBranch.SelectedItem)
                                If frmIS.chkcSurveyImportCreateNewBranch.Checked Then
                                    oCaveBranch = oCaveBranch.Branches.Add(oCaveBranch.Branches.GetUniqueName(If(oImportSurvey.Properties.Name = "", IO.Path.GetFileNameWithoutExtension(Filename), oImportSurvey.Properties.Name)))
                                    If Not frmIS.chkcSurveyDisableOriginAsExtendstart.Checked Then
                                        oCaveBranch.ExtendStart = oImportSurvey.Properties.Origin
                                    End If
                                End If
                                For Each oCaveInfo As cCaveInfo In oCaveInfos
                                    If oCaveBranch.Branches.Contains(oCaveInfo.Name) Then
                                        Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches(oCaveInfo.Name)
                                        Call oNewCaveBranch.MergeWith(oCaveInfo)
                                        Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                    Else
                                        Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches.Add(oCaveInfo.Name)
                                        Call oNewCaveBranch.CopyFrom(oCaveInfo)
                                        Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                    End If
                                Next
                            Else
                                If frmIS.chkcSurveyImportCreateNewBranch.Checked Then
                                    Dim oCaveBranch As cICaveInfoBranches = oSurvey.Properties.CaveInfos.Add(oSurvey.Properties.CaveInfos.GetUniqueName(If(oImportSurvey.Properties.Name = "", IO.Path.GetFileNameWithoutExtension(Filename), oImportSurvey.Properties.Name)))
                                    If Not frmIS.chkcSurveyDisableOriginAsExtendstart.Checked Then
                                        oCaveBranch.ExtendStart = oImportSurvey.Properties.Origin
                                    End If
                                    For Each oCaveInfo As cCaveInfo In oCaveInfos
                                        If oCaveBranch.Branches.Contains(oCaveInfo.Name) Then
                                            Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches(oCaveInfo.Name)
                                            Call oNewCaveBranch.MergeWith(oCaveInfo)
                                            Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                        Else
                                            Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches.Add(oCaveInfo.Name)
                                            Call oNewCaveBranch.CopyFrom(oCaveInfo)
                                            Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                        End If
                                    Next
                                Else
                                    For Each oCaveInfo As cCaveInfo In oCaveInfos
                                        If oSurvey.Properties.CaveInfos.Contains(oCaveInfo.Name) Then
                                            Call oSurvey.Properties.CaveInfos(oCaveInfo.Name).MergeWith(oCaveInfo)
                                        Else
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        End If
                                    Next
                                End If
                            End If

                            Dim oGrades As cGrades = oImportSurvey.Grades
                            For Each oGrade As cGrade In oGrades
                                If Not oSurvey.Grades.Contains(oGrade.ID) Then
                                    Dim oNewGrade As cGrade = oSurvey.Grades.Add(oGrade.ID, oGrade.Description)
                                    Call oNewGrade.CopyFrom(oGrade)
                                End If
                            Next

                            'fix this code like above (import caveinfo) or not? same date...same description...is the same session
                            Dim oSessions As cSessions = oImportSurvey.Properties.Sessions
                            For Each oSession As cSession In oSessions
                                Dim oNewSession As cSession
                                If oSurvey.Properties.Sessions.Contains(oSession.Date, oSession.Description) Then
                                    oNewSession = oSurvey.Properties.Sessions(oSession.Date, oSession.Description)
                                Else
                                    oNewSession = oSurvey.Properties.Sessions.Add(oSession.Date, oSession.Description)
                                End If
                                'the only problem is that this will override session in this survey with the same in the imported survey
                                Call oNewSession.CopyFrom(oSession)
                            Next

                            Dim oHLs As Properties.cHighlightsDetails = oImportSurvey.Properties.HighlightsDetails
                            For Each oHL As Properties.cHighlightsDetail In oHLs
                                If Not oHL.System Then
                                    Call oSurvey.Properties.HighlightsDetails.Add(oHL)
                                End If
                            Next

                            bDisableSegmentsChangeEvent = True
                            Dim oImportSegments As cSegments = oImportSurvey.Segments

                            Call oSurvey.Properties.DataTables.Segments.MergeWith(oImportSurvey.Properties.DataTables.Segments)
                            Call oSurvey.Properties.DataTables.Trigpoints.MergeWith(oImportSurvey.Properties.DataTables.Trigpoints)

                            Dim iIndex As Integer = 0
                            Dim iCount As Integer = oImportSegments.Count
                            For Each oImportSegment As cSegment In oImportSegments
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress5"))
                                iIndex += 1

                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportSegment.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.ForClipboard)

                                    Dim oNewSegment As cSegment = New cSegment(oSurvey, oFile, oXMLParent.ChildNodes(0))
                                    Dim iFindDuplicateMode As Integer = 0
                                    Dim bIsDuplicated As Boolean

                                    Dim oOldSegment As cSegment = Nothing
                                    If (frmIS.cbocSurveyImportDuplicatesMode.SelectedIndex = 0 AndAlso oSurvey.Segments.Contains(oNewSegment.ID)) Then
                                        bIsDuplicated = True
                                        oOldSegment = oSurvey.Segments(oNewSegment.ID)
                                    ElseIf (frmIS.cbocSurveyImportDuplicatesMode.SelectedIndex = 1) Then
                                        Dim oDuplicates As cSegmentCollection = oSurvey.Segments.FindDuplicate(oImportSegment)
                                        If oDuplicates.Count > 0 Then
                                            bIsDuplicated = True
                                            oOldSegment = oDuplicates(0)
                                        Else
                                            bIsDuplicated = False
                                        End If
                                    End If

                                    If bIsDuplicated Then
                                        If frmIS.chkcSurveyImportDuplicates.Checked Then
                                            If frmIS.chkcSurveyImportDuplicatesOverwrite.Checked Then
                                                Dim bOverwrite As Boolean = False
                                                If frmIS.chkcSurveyImportDuplicatesOverwriteOnlyUsed.Checked Then
                                                    bOverwrite = oImportSegment.IsBinded()
                                                Else
                                                    bOverwrite = True
                                                End If
                                                If bOverwrite Then
                                                    With oOldSegment
                                                        Call .SetCave(oNewSegment.Cave, oNewSegment.Branch)
                                                        Call .SetSession(oNewSegment.Session)
                                                        .Distance = oNewSegment.Distance
                                                        .Inclination = oNewSegment.Inclination
                                                        .Bearing = oNewSegment.Bearing
                                                        .Left = oNewSegment.Left
                                                        .Right = oNewSegment.Right
                                                        .Up = oNewSegment.Up
                                                        .Down = oNewSegment.Down
                                                        .Exclude = oNewSegment.Exclude
                                                        .Splay = oNewSegment.Splay
                                                        .Surface = oNewSegment.Surface
                                                        .Duplicate = oNewSegment.Duplicate
                                                        .Cut = oNewSegment.Cut
                                                        .Unbindable = oNewSegment.Unbindable
                                                        .Virtual = oNewSegment.Virtual
                                                        .Direction = oNewSegment.Direction
                                                        .Color = oNewSegment.Color
                                                        Call .DataProperties.CopyFrom(oNewSegment.DataProperties)
                                                        Call .Save()
                                                    End With
                                                End If
                                            End If
                                            Call oDuplicatedSegments.Add(oNewSegment.ID, oOldSegment.ID)
                                        End If
                                    Else
                                        Call oSurvey.Segments.Append(oNewSegment)
                                    End If
                                End Using
                            Next
                            bDisableSegmentsChangeEvent = False

                            bDisableTrigpointsChangeEvent = True
                            Dim oOriginalTrigpoints As List(Of String) = oSurvey.TrigPoints.GetNames
                            Call oSurvey.TrigPoints.Rebind()
                            Dim oImportTrigpoints As cTrigPoints = oImportSurvey.TrigPoints
                            For Each oImportTrigpoint As cTrigPoint In oImportTrigpoints
                                If Not oImportTrigpoint.IsSystem Then
                                    'check if station exist (orphan are non imported)...
                                    Dim sTrigpointName As String = oImportTrigpoint.Name.ToUpper
                                    Dim bIsDuplicated As Boolean = oOriginalTrigpoints.Contains(sTrigpointName) 'AndAlso oOriginalTrigpoints(oTrigpoint.Name)
                                    If (bIsDuplicated AndAlso frmIS.chkcSurveyImportDuplicatesStations.Checked) OrElse Not (bIsDuplicated) Then
                                        If oSurvey.TrigPoints.Contains(sTrigpointName) Then
                                            With oSurvey.TrigPoints(sTrigpointName)
                                                .Entrance = oImportTrigpoint.Entrance
                                                .IsInExploration = oImportTrigpoint.IsInExploration
                                                .Note = oImportTrigpoint.Note
                                                .LabelSymbol = oImportTrigpoint.LabelSymbol
                                                .LabelDistance = oImportTrigpoint.LabelDistance
                                                .LabelPosition = oImportTrigpoint.LabelPosition
                                                .ShowEntrance = oImportTrigpoint.ShowEntrance
                                                .Type = oImportTrigpoint.Type
                                                Call .Coordinate.CopyFrom(oImportTrigpoint.Coordinate)
                                                Call .Aliases.CopyFrom(oImportTrigpoint.Aliases)
                                                Call .Connections.CopyFrom(oImportTrigpoint.Connections)
                                                Call .DataProperties.CopyFrom(oImportTrigpoint.DataProperties)
                                                Call .Save()
                                            End With
                                        End If
                                    End If
                                End If
                            Next
                            bDisableTrigpointsChangeEvent = False
                        Catch ex As Exception
                            Call pLogAdd(ex)
                        End Try

                        'mark exclusion for shared station except first one...
                        'Dim oSharedTrigpointNames As List(Of String) = oImportTrigpointNames.Intersect(oTrigpointNames)
                        'problem...have to understand if this is the only way to avoid change in shot's elaboration in the destination survey

                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend5"))
                        bDisabledCaveBranchChangeEvent = False
                        Call oMousePointer.Pop()
                    End If

                    If frmIS.chkcSurveyImportGraphics.Checked AndAlso frmIS.chkcSurveyImportGraphics.Enabled Then
                        Call oSurvey.Properties.DataTables.DesignItems.MergeWith(oImportSurvey.Properties.DataTables.DesignItems)

                        Dim oPlanTraslation As SizeF
                        Dim oProfileTraslation As SizeF
                        Try
                            If (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 0 AndAlso Not bHasBindedSegments) OrElse (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 2) Then
                                Call oSurvey.Calculate.Calculate()
                                Dim oImportOriginPoint As Calculate.cTrigPointPoint = oSurvey.Calculate.TrigPoints(oImportSurvey.Properties.Origin).Point
                                Dim oOriginPoint As Calculate.cTrigPointPoint = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Point
                                oPlanTraslation = New SizeF(oImportOriginPoint.X - oOriginPoint.X, (oImportOriginPoint.Y - oOriginPoint.Y))
                                'per il calcolo di D devo prendere la D della stessa connection tra oImportOriginPoint e oOriginPoint
                                Dim oImportConnection As cSurvey.Calculate.cTrigPointConnection = oSurvey.Calculate.TrigPoints(oImportSurvey.Properties.Origin).Connections.First
                                Dim oConnection As cSurvey.Calculate.cTrigPointConnection = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Connections.First
                                oProfileTraslation = New SizeF(oImportConnection.GetPoint.D - oConnection.GetPoint.D, (oImportOriginPoint.Z - oOriginPoint.Z))
                                'oProfileTraslation = New SizeF(oImportOriginPoint.D - oOriginPoint.D, (oImportOriginPoint.Z - oOriginPoint.Z))
                            End If
                        Catch ex As Exception
                            oPlanTraslation = SizeF.Empty
                            oProfileTraslation = SizeF.Empty
                        End Try

                        Dim bPlan As Boolean = frmIS.chkcSurveyImportPlan.Enabled AndAlso frmIS.chkcSurveyImportPlan.Checked
                        Dim bProfile As Boolean = frmIS.chkcSurveyImportProfile.Enabled AndAlso frmIS.chkcSurveyImportProfile.Checked
                        If bPlan Or bProfile Then
                            Call oMousePointer.Push(Cursors.WaitCursor)

                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin10"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
                            If bHasBindedSegments Then
                                For Each sNewSegmentID As String In oDuplicatedSegments.Keys
                                    Dim sOldSegmentID As String = oDuplicatedSegments(sNewSegmentID)
                                    Dim oOldSegment As cSegment = oSurvey.Segments(sOldSegmentID)
                                    Dim oNewSegment As cSegment = oImportSurvey.Segments(sNewSegmentID)
                                    If oNewSegment.IsPlanBinded AndAlso (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 0 OrElse frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 1) Then
                                        Call oImportSurvey.Plan.WarpItemsEx(oNewSegment, New Calculate.Plot.cData.cPlanWarpingFactor(oNewSegment, oOldSegment), True)
                                    End If
                                    If oNewSegment.IsProfileBinded AndAlso (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 0 OrElse frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 1) Then
                                        Call oImportSurvey.Profile.WarpItemsEx(oNewSegment, New Calculate.Plot.cData.cProfileWarpingFactor(oNewSegment, oOldSegment), True)
                                    End If
                                Next
                            End If

                            Dim oItems As List(Of cItem)
                            Dim oImportItems As List(Of cItem)
                            Dim oImportItemsWithLinks As List(Of cItem)
                            Dim oImportItemsLegends As List(Of cItem)
                            If bPlan And bProfile Then
                                oItems = oImportSurvey.GetAllDesignItems
                            Else
                                If bPlan Then
                                    oItems = oImportSurvey.Plan.GetAllItems
                                Else
                                    oItems = oImportSurvey.Profile.GetAllItems
                                End If
                            End If

                            oImportItemsLegends = oItems.Where(Function(item) item.Type = cIItem.cItemTypeEnum.Legend).ToList
                            oImportItemsWithLinks = oItems.Where(Function(item) (item.Type <> cIItem.cItemTypeEnum.Legend) AndAlso (item.Type = cIItem.cItemTypeEnum.CrossSectionMarker OrElse item.BindDesignType = cItem.BindDesignTypeEnum.CrossSections)).ToList
                            oImportItems = oItems.Where(Function(item) (item.Type <> cIItem.cItemTypeEnum.Legend) AndAlso (Not oImportItemsWithLinks.Contains(item))).ToList

                            Dim oCrossSectionsIndex As Dictionary(Of String, String) = New Dictionary(Of String, String)
                            Dim oImportedItemsIndex As Dictionary(Of cItem, cItem) = New Dictionary(Of cItem, cItem)

                            Dim iIndex As Integer = 0
                            Dim iCount As Integer = oImportItems.Count
                            For Each oImportItem As cItem In oImportItems
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress10"))
                                iIndex += 1

                                If Not frmIS.chkcSurveyImportData.Checked AndAlso frmIS.chkcSurveyImportCaveBranchFromDesign.Checked Then
                                    If oImportItem.Cave <> "" Then
                                        If Not oSurvey.Properties.CaveInfos.Contains(oImportItem.Cave) Then
                                            Dim oCaveInfo As cCaveInfo = oImportSurvey.Properties.CaveInfos(oImportItem.Cave)
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        ElseIf Not oSurvey.Properties.CaveInfos.Contains(oImportItem.Cave, oImportItem.Branch) Then
                                            Call oSurvey.Properties.CaveInfos(oImportItem.Cave).MergeWith(oImportSurvey.Properties.CaveInfos(oImportItem.Cave))
                                        End If
                                    End If
                                End If

                                Dim iDesign As Integer = oImportItem.Design.Type
                                Dim iLayer As Integer = oImportItem.Layer.Type
                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportItem.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.ForClipboard)
                                    Dim oXMLItem As XmlElement = oXMLParent.ChildNodes(0)
                                    Call modImport.ReplaceIDItem(oXMLItem, oDuplicatedSegments)

                                    Dim oItem As cItem
                                    If iDesign = 0 Then
                                        oItem = oSurvey.Plan.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        If oItem.Type = cIItem.cItemTypeEnum.CrossSection Then
                                            Dim oCrossSection As cDesignCrossSection = oSurvey.CrossSections.Add(oItem)
                                            Call oCrossSectionsIndex.Add(DirectCast(oImportItem, cItemCrossSection).DesignCrossSection.ID, oCrossSection.ID)
                                        End If
                                        If Not oPlanTraslation.IsEmpty Then Call oItem.MoveBy(oPlanTraslation)
                                    Else
                                        oItem = oSurvey.Profile.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        If oItem.Type = cIItem.cItemTypeEnum.CrossSection Then
                                            Dim oCrossSection As cDesignCrossSection = oSurvey.CrossSections.Add(oItem)
                                            Call oCrossSectionsIndex.Add(DirectCast(oImportItem, cItemCrossSection).DesignCrossSection.ID, oCrossSection.ID)
                                        End If
                                        If Not oProfileTraslation.IsEmpty Then Call oItem.MoveBy(oProfileTraslation)
                                    End If
                                    Call oImportedItemsIndex.Add(oImportItem, oItem)
                                End Using
                            Next

                            iIndex = 0
                            iCount = oImportItemsWithLinks.Count
                            For Each oImportItemWithLinks As cItem In oImportItemsWithLinks
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress10"))
                                iIndex += 1
                                If frmIS.chkcSurveyImportCaveBranchFromDesign.Checked Then
                                    If oImportItemWithLinks.Cave <> "" Then
                                        If Not oSurvey.Properties.CaveInfos.Contains(oImportItemWithLinks.Cave) Then
                                            Dim oCaveInfo As cCaveInfo = oImportSurvey.Properties.CaveInfos(oImportItemWithLinks.Cave)
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        ElseIf Not oSurvey.Properties.CaveInfos.Contains(oImportItemWithLinks.Cave, oImportItemWithLinks.Branch) Then
                                            Call oSurvey.Properties.CaveInfos(oImportItemWithLinks.Cave).MergeWith(oImportSurvey.Properties.CaveInfos(oImportItemWithLinks.Cave))
                                        End If
                                    End If
                                End If

                                Dim iDesign As Integer = oImportItemWithLinks.Design.Type
                                Dim iLayer As Integer = oImportItemWithLinks.Layer.Type
                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportItemWithLinks.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                                    Dim oXMLItem As XmlElement = oXMLParent.ChildNodes(0)
                                    Call modImport.ReplaceIDItem(oXMLItem, oDuplicatedSegments)

                                    Dim oItem As cItem
                                    If iDesign = 0 Then
                                        oItem = oSurvey.Plan.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oPlanTraslation.IsEmpty Then Call oItem.MoveBy(oPlanTraslation)
                                    Else
                                        oItem = oSurvey.Profile.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oProfileTraslation.IsEmpty Then Call oItem.MoveBy(oProfileTraslation)
                                    End If
                                    If oItem.Type = cIItem.cItemTypeEnum.CrossSectionMarker Then
                                        Dim oCrossSection As cDesignCrossSection = oSurvey.CrossSections(oCrossSectionsIndex(DirectCast(oImportItemWithLinks, cIItemCrossSectionMarker).DesignCrossSection.ID))
                                        If iDesign = 0 Then
                                            Call oCrossSection.AddPlanMarker(oItem)
                                        Else
                                            Call oCrossSection.AddProfileMarker(oItem)
                                        End If
                                    Else
                                        'is a standard item binded to a xsection
                                        If oImportItemWithLinks.CrossSection = "" Then
                                            Call oItem.SetBindDesignType(cItem.BindDesignTypeEnum.CrossSections)
                                        Else
                                            Dim oCrosssection As cDesignCrossSection = oSurvey.CrossSections(oCrossSectionsIndex(oImportItemWithLinks.CrossSection))
                                            Call oItem.SetBindDesignType(cItem.BindDesignTypeEnum.CrossSections, oCrosssection, True)
                                        End If
                                    End If
                                    Call oImportedItemsIndex.Add(oImportItemWithLinks, oItem)
                                End Using
                            Next

                            iIndex = 0
                            iCount = oImportItemsLegends.Count
                            For Each oImportItemsLegend As cItemLegend In oImportItemsLegends
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress10"))
                                iIndex += 1
                                If frmIS.chkcSurveyImportCaveBranchFromDesign.Checked Then
                                    If oImportItemsLegend.Cave <> "" Then
                                        If Not oSurvey.Properties.CaveInfos.Contains(oImportItemsLegend.Cave) Then
                                            Dim oCaveInfo As cCaveInfo = oImportSurvey.Properties.CaveInfos(oImportItemsLegend.Cave)
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        ElseIf Not oSurvey.Properties.CaveInfos.Contains(oImportItemsLegend.Cave, oImportItemsLegend.Branch) Then
                                            Call oSurvey.Properties.CaveInfos(oImportItemsLegend.Cave).MergeWith(oImportSurvey.Properties.CaveInfos(oImportItemsLegend.Cave))
                                        End If
                                    End If
                                End If

                                Dim iDesign As Integer = oImportItemsLegend.Design.Type
                                Dim iLayer As Integer = oImportItemsLegend.Layer.Type
                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportItemsLegend.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                                    Dim oXMLItem As XmlElement = oXMLParent.ChildNodes(0)
                                    Call modImport.ReplaceIDItem(oXMLItem, oDuplicatedSegments)

                                    Dim oItem As cItemLegend
                                    If iDesign = 0 Then
                                        oItem = oSurvey.Plan.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oPlanTraslation.IsEmpty Then Call oItem.MoveBy(oPlanTraslation)
                                    Else
                                        oItem = oSurvey.Profile.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oProfileTraslation.IsEmpty Then Call oItem.MoveBy(oProfileTraslation)
                                    End If
                                    'for legend every item have to be check if exist in current survey and then changed with correct data
                                    Call oItem.Items.Clear()
                                    Dim iSubItemIndex As Integer = 0
                                    For Each oSubItem As cItemLegend.cLegendItem In oImportItemsLegend.Items
                                        If oImportedItemsIndex.ContainsKey(oSubItem.Item) Then
                                            Dim oNewSubItem As cItemLegend.cLegendItem = oItem.AddItem(oImportedItemsIndex(oSubItem.Item))
                                            Call oNewSubItem.CopyFrom(oSubItem)
                                        End If
                                        iSubItemIndex += 1
                                    Next
                                End Using
                            Next

                            For Each sOldCrossSectionID As String In oCrossSectionsIndex.Keys
                                Dim sNewCrossSectionID As String = oCrossSectionsIndex(sOldCrossSectionID)
                                Dim oNewCrossSection As cDesignCrossSection = oSurvey.CrossSections(sNewCrossSectionID)
                                Dim oOldCrossSection As cDesignCrossSection = oImportSurvey.CrossSections(sOldCrossSectionID)
                                If oNewCrossSection.Design.Type = cIDesign.cDesignTypeEnum.Plan Then
                                    Dim oPlanWarpingFactor As Calculate.Plot.cData.cPlanWarpingFactor = New Calculate.Plot.cData.cPlanWarpingFactor(oOldCrossSection, oNewCrossSection)
                                    Call oPlanWarpingFactor.Translate(New SizeF(-oPlanTraslation.Width, -oPlanTraslation.Height))
                                    Call oNewCrossSection.WarpItemsEx(oPlanWarpingFactor, True)
                                End If
                                If oNewCrossSection.Design.Type = cIDesign.cDesignTypeEnum.Profile Then
                                    Dim oProfileWarpingFactor As Calculate.Plot.cData.cProfileWarpingFactor = New Calculate.Plot.cData.cProfileWarpingFactor(oOldCrossSection, oNewCrossSection)
                                    Call oProfileWarpingFactor.Translate(New SizeF(-oProfileTraslation.Width, -oProfileTraslation.Height))
                                    Call oNewCrossSection.WarpItemsEx(oProfileWarpingFactor, True)
                                End If
                            Next

                            'If 1 = 1 Then
                            '    Dim oBorder As cItemItems = New cItemItems(oSurvey, oSurvey.Plan, oSurvey.Plan.Layers.Item(cLayers.LayerTypeEnum.Borders), cIItem.cItemCategoryEnum.CaveBorder)
                            '    oBorder.AddRange(oSurvey.Plan.Layers.Item(cLayers.LayerTypeEnum.Borders).GetAllItems.Where(Function(item) item.Type = cIItem.cItemTypeEnum.InvertedFreeHandArea AndAlso item.BindDesignType = cItem.BindDesignTypeEnum.MainDesign))
                            '    oBorder.SelfCombine()
                            'End If

                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend10"))
                            Call oMousePointer.Pop()

                            'oSurvey.Calculate.Calculate(False)
                        End If
                    End If

                    If frmIS.chkcSurveyImportDesignProperties.Enabled And frmIS.chkcSurveyImportDesignProperties.Checked Then
                        Call oSurvey.Properties.DesignProperties.MergeWith(oImportSurvey.Properties.DesignProperties)
                    End If

                    If frmIS.chkcSurveyImportScaleRules.Enabled And frmIS.chkcSurveyImportScaleRules.Checked Then
                        Call oSurvey.ScaleRules.MergeWidth(oImportSurvey.ScaleRules)
                    End If

                    If frmIS.chkcsurveyimportlinkedsurvey.Enabled And frmIS.chkcsurveyimportlinkedsurvey.Checked Then
                        Call oSurvey.LinkedSurveys.MergeWith(oImportSurvey.LinkedSurveys)
                        'Call oDockLS.tvLinkedSurveys.BuildList()
                    End If

                    Call pSurveyFillSessionList(False)
                    Call pSurveyFillCaveList(False)

                    Call pSurveyCaption()
                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()

                    'Call pSurveyLoadTreeLayers()

                    Call pObjectPropertyLoad()

                    Call pSurveyCalculate(True)
                    Call pMapInvalidate()
                End If
            End If
        End Using

        bDisablewarpingDetails = False
    End Sub

    Private Sub pSurveyImportPocketTopo(Filename As String, Append As Boolean)
        'POCKETTOPO
        Dim dNow As Date = Date.Now

        Dim bImportData As Boolean
        Dim bImportGraphics As Boolean

        Using frmIPT As frmImportPocketTopo = New frmImportPocketTopo
            frmIPT.txtFilename.Text = Filename

            If frmIPT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bImportData = frmIPT.chkPocketTopoImportData.Checked
                bImportGraphics = frmIPT.chkPocketTopoImportGraphics.Checked

                Dim sForcedCaveName As String = frmIPT.txtCaveName.Text
                Dim sPrefix As String = frmIPT.txtPrefix.Text.Trim.ToUpper

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                If bImportData Then
                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)
                End If
                If bImportGraphics Then
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)
                End If

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing
                Dim oCurrentSession As cSession

                Dim sLine As String
                Dim sLineParts() As String

                Dim sKeyWords As List(Of String) = New List(Of String)({"TRIP", "FIX", "DATE", "DATA", "PLAN", "ELEVATION", "STATIONS", "SHOTS", "POLYLINE", "DECLINATION"})

                'backup delle impostazioni splay e impostazione su splay automatici...
                Dim iSplay As cSurvey.cSurvey.SplayModeEnum = oSurvey.Properties.SplayMode
                oSurvey.Properties.SplayMode = cSurvey.cSurvey.SplayModeEnum.Automatic
                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(Filename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Dim bData As Boolean
                    Dim bPolyline As Boolean
                    Dim bStations As Boolean
                    Dim iDesign As cSurvey.Design.cIDesign.cDesignTypeEnum
                    Dim oItem As cSurvey.Design.Items.cItemFreeHandLine
                    Dim sColor As String

                    Dim sOrigin As String = ""

                    Dim oPlanTraslation As SizeF
                    Dim oProfileTraslation As SizeF
                    Dim sDeclination As Single

                    Dim oTempSegments As List(Of cImportSegment) = New List(Of cImportSegment)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin6"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Dim fi As FileInfo = New FileInfo(Filename)
                    Dim sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                    If Not sr.EndOfStream Then
                        Do Until sr.EndOfStream
                            sLine = sr.ReadLine
                            If sLine <> "" Then
                                sLineParts = sLine.Split({" "}, StringSplitOptions.RemoveEmptyEntries)
                                If sKeyWords.Contains(sLineParts(0)) Then
                                    Select Case sLineParts(0)
                                        Case "TRIP"
                                        'grosso modo direi che coincide con le sessioni di csurvey
                                        'non faccio nulla ma uso il tag DATE per cominciare una sessione
                                        Case "DATE"
                                            Dim sDatePart As String() = sLineParts(1).Split("-")
                                            Dim dSessionDate As Date = New Date(sDatePart(0), sDatePart(1), sDatePart(2))
                                            oCurrentSession = oSurvey.Properties.Sessions.Add(dSessionDate, oSurvey.Properties.Sessions.GetUniqueID(dSessionDate, GetLocalizedString("main.textpart13")))
                                        Case "FIX"
                                        'coordinate GPS in formato metrico!
                                        'DA FARE!!!!!
                                        'bisogna chiedere i dati aggiuntivi per completare le coordinate UTM...
                                        Case "DECLINATION"
                                            sDeclination = modNumbers.StringToSingle(sLineParts(1))
                                        Case "PLAN"
                                            iDesign = cSurvey.Design.cIDesign.cDesignTypeEnum.Plan
                                            bData = False
                                            bPolyline = False
                                            bStations = False
                                        Case "ELEVATION"
                                            iDesign = cSurvey.Design.cIDesign.cDesignTypeEnum.Profile
                                            bData = False
                                            bPolyline = False
                                            bStations = False
                                        Case "STATIONS"
                                            bStations = True
                                        Case "DATA"
                                            bData = bImportData
                                            bPolyline = False
                                            bStations = False
                                        Case "POLYLINE"
                                            sColor = sLineParts(1)
                                            Dim oColor As Color
                                            Select Case iDesign
                                                Case cIDesign.cDesignTypeEnum.Plan
                                                    oItem = DirectCast(oSurvey.Plan.Layers(cLayers.LayerTypeEnum.Borders), cSurvey.Design.Layers.cLayerBorders).CreateBorder(sCaveName, "")
                                                Case cIDesign.cDesignTypeEnum.Profile
                                                    oItem = DirectCast(oSurvey.Profile.Layers(cLayers.LayerTypeEnum.Borders), cSurvey.Design.Layers.cLayerBorders).CreateBorder(sCaveName, "")
                                            End Select
                                            Select Case sColor
                                                Case "ORANGE"
                                                    oColor = Color.Orange
                                                Case "BLUE"
                                                    oColor = Color.Blue
                                                Case "BLACK"
                                                    oColor = Color.Black
                                                Case "GREEN"
                                                    oColor = Color.Green
                                                Case "BROWN"
                                                    oColor = Color.Brown
                                                Case "GRAY"
                                                    oColor = Color.Gray
                                                Case "RED"
                                                    oColor = Color.Red
                                                Case Else
                                                    'non so quanto colori siano gestibili
                                                    Try
                                                        oColor = Color.FromName(sColor)
                                                    Catch
                                                        oColor = Color.DimGray
                                                    End Try
                                            End Select
                                            oItem.Pen.Color = oColor
                                            Call oItem.DataProperties.SetValue("import_source", "pockettopo")
                                            Call oItem.DataProperties.SetValue("import_date", dNow)

                                            bData = False
                                            bPolyline = bImportGraphics
                                            bStations = False
                                        Case Else
                                            bData = False
                                            bPolyline = False
                                            bStations = False
                                    End Select
                                Else
                                    If bStations Then
                                        sLineParts = sLine.Split(vbTab)
                                        If sOrigin = "" Then
                                            sOrigin = sLineParts(2)
                                            If iDesign = cIDesign.cDesignTypeEnum.Plan Then
                                                oPlanTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                            Else
                                                oProfileTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                            End If
                                            bStations = False
                                        Else
                                            If sLineParts(2) = sOrigin Then
                                                If iDesign = cIDesign.cDesignTypeEnum.Plan Then
                                                    oPlanTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                                Else
                                                    oProfileTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                                End If
                                            End If
                                            bStations = False
                                        End If
                                    End If
                                    If bPolyline Then
                                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress6b"))
                                        sLineParts = sLine.Split(vbTab)
                                        Dim oPoint As PointF = New PointF(modNumbers.StringToSingle(sLineParts(0)), -1 * modNumbers.StringToSingle(sLineParts(1)))
                                        If iDesign = cIDesign.cDesignTypeEnum.Plan Then
                                            oPoint.X += oPlanTraslation.Width
                                            oPoint.Y += oPlanTraslation.Height
                                            oPoint = modPaint.RotatePoint(oPoint, -sDeclination)
                                        Else
                                            oPoint.X += oProfileTraslation.Width
                                            oPoint.Y += oProfileTraslation.Height
                                        End If
                                        Call oItem.Points.AddFromPaintPoint(oPoint)
                                    End If
                                    If bData Then
                                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress6a"))
                                        sLineParts = sLine.Split(vbTab)
                                        Try
                                            Dim sFrom As String
                                            Dim sTo As String
                                            Dim dDist As Decimal
                                            Dim dDir As Decimal
                                            Dim dIncl As Decimal
                                            Dim dLeft As Decimal
                                            Dim dRight As Decimal
                                            Dim dUp As Decimal
                                            Dim dDown As Decimal
                                            Dim iDirection As cSurvey.cSurvey.DirectionEnum
                                            Dim sNote As String

                                            Try : sFrom = sPrefix & sLineParts(0).Trim.ToUpper : Catch : sFrom = "" : End Try
                                            Try : sTo = sLineParts(1).Trim.ToUpper : Catch : sTo = "" : End Try
                                            If sTo <> "" Then sTo = sPrefix & sTo

                                            Try : dDir = modNumbers.StringToDecimal(sLineParts(2)) : Catch : dDist = 0 : End Try
                                            Try : dIncl = modNumbers.StringToDecimal(sLineParts(3)) : Catch : dDir = 0 : End Try
                                            Try : dDist = modNumbers.StringToDecimal(sLineParts(4)) : Catch : dIncl = 0 : End Try

                                            Try
                                                If sLineParts(5) = "<" Then
                                                    iDirection = cSurvey.cSurvey.DirectionEnum.Left
                                                Else
                                                    iDirection = cSurvey.cSurvey.DirectionEnum.Right
                                                End If
                                            Catch
                                                iDirection = cSurvey.cSurvey.DirectionEnum.Right
                                            End Try

                                            dLeft = 0
                                            dRight = 0
                                            dUp = 0
                                            dDown = 0

                                            sNote = ""

                                            Call oTempSegments.Add(New cImportSegment(oCurrentSession, sFrom, sTo, dDist, dDir, dIncl, sNote, iDirection, dLeft, dRight, dUp, dDown))
                                        Catch
                                        End Try
                                    End If
                                End If
                            End If
                        Loop

                        Dim iIndex As Integer
                        Dim iCount As Integer = oTempSegments.Count
                        For Each oTempSegment As cImportSegment In oTempSegments
                            Dim oSegment As cSegment = oSurvey.Segments.Append()
                            Call oSegment.SetCave(sCaveName)
                            Call oSegment.SetSession(oTempSegment.Session)
                            oSegment.From = oTempSegment.From
                            oSegment.To = oTempSegment.To
                            oSegment.Distance = oTempSegment.Distance
                            oSegment.Bearing = oTempSegment.Bearing
                            oSegment.Inclination = oTempSegment.Inclination
                            oSegment.Left = oTempSegment.Left
                            oSegment.Right = oTempSegment.Right
                            oSegment.Up = oTempSegment.Up
                            oSegment.Down = oTempSegment.Down
                            oSegment.Note = oTempSegment.Note
                            oSegment.Direction = oTempSegment.Direction
                            Call oSegment.DataProperties.SetValue("import_source", "pockettopo")
                            Call oSegment.DataProperties.SetValue("import_date", dNow)
                            Call oSegment.Save()

                            iIndex += 1
                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress6c"))
                        Next

                        If oSurvey.Properties.Origin = "" Then
                            oSurvey.Properties.Origin = sOrigin
                        End If
                    End If
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                oSurvey.Properties.SplayMode = iSplay

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend6"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportCompass(Filename As String, Append As Boolean)
        'COMPASS
        Dim dNow As Date = Date.Now

        Using frmIC As frmImportCompass = New frmImportCompass
            frmIC.txtFilename.Text = Filename

            If frmIC.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                Dim sForcedCaveName As String = frmIC.txtCaveName.Text
                Dim sPrefix As String = frmIC.txtPrefix.Text.Trim.ToUpper
                Dim bBranchForSession As Boolean = frmIC.chkCompassCreateBrachForSession.Checked
                Dim bImportFlagX As Boolean = frmIC.chkCompassImportFlagX.Checked

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim sCaveName As String = ""
                Dim sCaveBranchName As String
                Dim dSessionDate As Date
                Dim sSessionDescription As String
                Dim oCurrentCave As cCaveInfo = Nothing
                Dim oCurrentCaveBranch As cCaveInfoBranch = Nothing
                Dim oCurrentCaveSubBranch As cCaveInfoBranch = Nothing
                Dim oCurrentsession As cSession

                Dim bSkipSegment As Boolean
                Dim bExcludeSegment As Boolean
                Dim bSurfaceSegment As Boolean

                Dim iFlagsIndex As Integer
                Dim bBackSight As Boolean

                Dim iSideMeasureReferTo As cSegment.SideMeasuresReferToEnum = cSegment.SideMeasuresReferToEnum.EndPoint

                If sForcedCaveName = "" Then
                    sCaveName = Path.GetFileNameWithoutExtension(Filename)
                Else
                    sCaveName = sForcedCaveName
                End If
                oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin7"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                Dim fi As FileInfo = New FileInfo(Filename)
                Dim sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                Dim sLine As String = ""
                Dim iLineCount As Integer = 0
                Dim iCaveLineCount As Integer = 0
                Do Until sr.EndOfStream
                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress7"))
                    Do Until sLine = Chr(&HFF) Or (sLine = "" And iCaveLineCount > 9) Or sr.EndOfStream
                        sLine = sr.ReadLine
                        sLine = sLine.Trim
                        If sLine.Length > 1 Then
                            Select Case iCaveLineCount
                                Case 0
                                    'nome cavità...
                                    sCaveBranchName = sLine
                                    If oCurrentCave.Branches.Contains(sCaveBranchName) Then
                                        oCurrentCaveBranch = oCurrentCave.Branches(sCaveBranchName)
                                    Else
                                        oCurrentCaveBranch = oCurrentCave.Branches.Add(sCaveBranchName)
                                    End If
                                Case 1
                                    'nome sessione
                                    sSessionDescription = sLine.Replace("SURVEY NAME: ", "")
                                    If bBranchForSession Then
                                        If oCurrentCaveBranch.Branches.Contains(sSessionDescription) Then
                                            oCurrentCaveSubBranch = oCurrentCaveBranch.Branches(sSessionDescription)
                                        Else
                                            oCurrentCaveSubBranch = oCurrentCaveBranch.Branches.Add(sSessionDescription)
                                        End If
                                    Else
                                        oCurrentCaveSubBranch = oCurrentCaveBranch
                                    End If
                                Case 2
                                    'data session
                                    Dim sTemp As String = sLine.Replace("SURVEY DATE: ", "")
                                    If sTemp.Contains("COMMENT:") Then
                                        sTemp = sTemp.Substring(0, sTemp.IndexOf("COMMENT:"))
                                    End If
                                    Dim sDatePart() As String = sTemp.Trim.Split({" "}, StringSplitOptions.RemoveEmptyEntries)
                                    dSessionDate = New Date(sDatePart(2), sDatePart(0), sDatePart(1))
                                    oCurrentsession = oSurvey.Properties.Sessions.Add(dSessionDate, sSessionDescription)
                                    oCurrentsession.Note = sLine.Substring(sLine.IndexOf("COMMENT:") + 8).Trim
                                Case 3
                                    'team
                                    sLine = sr.ReadLine.Trim
                                    oCurrentsession.Team = sLine
                                    iCaveLineCount += 1
                                    iLineCount += 1
                                Case 5
                                    'parametri
                                    'DECLINATION: 1.00  FORMAT: DDDDLUDRADLNT  CORRECTIONS: 2.00 3.00 4.00 CORRECTIONS2: 5.0 6.0 
                                    Dim sLinePart() As String = sLine.Split({" "}, StringSplitOptions.RemoveEmptyEntries)
                                    If sLinePart.Contains("FORMAT:") Then
                                        Dim sFormat As String = sLinePart(sLinePart.ToList.IndexOf("FORMAT:") + 1)
                                        '--------------------
                                        If sFormat.Length = 12 Then
                                            bBackSight = sFormat(11) = "B"
                                        ElseIf sFormat.Length = 13 Then
                                            bBackSight = sFormat(11) = "B"
                                            If sFormat(12) = "F" Then
                                                iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.StartPoint
                                            Else
                                                iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.EndPoint
                                            End If
                                        ElseIf sFormat.Length = 15 Then
                                            bBackSight = sFormat(13) = "B"
                                            If sFormat(14) = "F" Then
                                                iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.StartPoint
                                            Else
                                                iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.EndPoint
                                            End If
                                        End If
                                        oCurrentsession.SideMeasuresReferTo = iSideMeasureReferTo

                                        If bBackSight Then
                                            iFlagsIndex = 11
                                        Else
                                            iFlagsIndex = 9
                                        End If

                                        'FORMAT: DMMD LRUD LDdAaNF
                                        'I.	    Bearing Units: D = Degrees, Q = quads, R = Grads
                                        'II.	Length Units: D = Decimal Feet, I = Feet and Inches M = Meters
                                        'III.	Passage Units: Same as length
                                        'IV.	Inclination Units: D = Degrees, G = Percent Grade M = Degrees and Minutes, R = Grads W = Depth Gauge

                                        'V.	    Passage Dimension Order: U = Up, D = Down, R = Right L = Left
                                        'VI.	Passage Dimension Order: U = Up, D = Down, R = Right L = Left
                                        'VII.	Passage Dimension Order: U = Up, D = Down, R = Right L = Left
                                        'VIII.	Passage Dimension Order: U = Up, D = Down, R = Right L = Left

                                        'IX.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                        'X.	    Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                        'XI.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                        'XII.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                        'XIII.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination

                                        'XIV.	Backsight: B=Redundant, N or empty=No Redundant Backsights.
                                        'XV.LRUD Association: F=From Station, T=To Station
                                        'http://www.fountainware.com/compass/Documents/FileFormats/SurveyDataFormat.htm

                                        'Compatibility Issues. Over time, the Compass Format string has changed to accommodate more format information. For backward compatibility, Compass can read all previous versions of the format. Here is detailed information about different versions of the Format strings:
                                        '11-Character Format. The earliest version of the string had 11 characters like this: UUUUDDDDSSS
                                        '12-Character Format. The next version had 12 characters, adding Backsight information: UUUUDDDDSSSB
                                        '13-Character Format. The next version had 13 characters, adding information about the LRUD associations: UUUUDDDDSSSBL
                                        '15-Character Format. Finally, the current version has 15 characters, adding backsights to order information: UUUUDDDDSSSSSBL
                                        'U = Units, D = Dimension Order, S = Shot Order, B = Backsight Info, L = LRUD association
                                    End If
                                Case Is > 8
                                    If sLine <> "" Then
                                        Dim sLineParts() As String = sLine.Split({" "}, StringSplitOptions.RemoveEmptyEntries)

                                        Dim sFrom As String
                                        Dim sTo As String
                                        Dim dDist As Decimal
                                        Dim dDir As Decimal
                                        Dim dIncl As Decimal
                                        Dim dLeft As Decimal
                                        Dim dRight As Decimal
                                        Dim dUp As Decimal
                                        Dim dDown As Decimal
                                        Dim sFlags As String
                                        Dim sNote As String = ""

                                        Try : sFrom = modNumbers.FieldUnformat(sLineParts(0)) : Catch : sFrom = "" : End Try
                                        If sFrom <> "" Then sFrom = sPrefix & sFrom
                                        Try : sTo = modNumbers.FieldUnformat(sLineParts(1)) : Catch : sTo = "" : End Try
                                        If sTo <> "" Then sTo = sPrefix & sTo

                                        Try : dDist = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(2))) * 0.3048, 2) : Catch : dDist = 0 : End Try
                                        Try : dDir = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(3))) : Catch : dDir = 0 : End Try
                                        Try : dIncl = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(4))) : Catch : dIncl = 0 : End Try

                                        Try : dLeft = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(5))) * 0.3048D, 2) : Catch : dLeft = 0 : End Try
                                        If dLeft < 0D Then dLeft = 0
                                        Try : dRight = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(8))) * 0.3048D, 2) : Catch : dRight = 0 : End Try
                                        If dRight < 0D Then dRight = 0
                                        Try : dUp = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(6))) * 0.3048D, 2) : Catch : dUp = 0 : End Try
                                        If dUp < 0D Then dUp = 0
                                        Try : dDown = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(7))) * 0.3048D, 2) : Catch : dDown = 0 : End Try
                                        If dDown < 0D Then dDown = 0

                                        sFlags = If(sLineParts.Count > iFlagsIndex, sLineParts(iFlagsIndex), "")
                                        If sFlags.StartsWith("#|") Then
                                            'L=escludi dai calcoli
                                            'X=il tiro andrebbe inserito solo se nei parametri ho detto di inserirlo (va comunque impostato come escludi dai calcoli)
                                            'P=non disegnare: si può importare come superficie o duplicato
                                            'C=non gestibile in csurvey
                                            sFlags = sFlags.Substring(2)
                                            If sFlags.Contains("L") Then
                                                bExcludeSegment = True
                                            End If
                                            If sFlags.Contains("X") Then
                                                bSkipSegment = True
                                            Else
                                                bSkipSegment = False
                                            End If
                                            If sFlags.Contains("P") Then
                                                bSurfaceSegment = True
                                            Else
                                                bSurfaceSegment = False
                                            End If
                                        Else
                                            sNote = sFlags.Substring(sFlags.IndexOf("#") + 1)
                                            bSkipSegment = False
                                            bExcludeSegment = False
                                            bSurfaceSegment = False
                                        End If

                                        'cumulo alle note i campi successivi
                                        For iNote As Integer = iFlagsIndex + 1 To sLineParts.Length - 1
                                            sNote &= " " & sLineParts(iNote)
                                        Next
                                        sNote = sNote.Trim

                                        If (bImportFlagX) OrElse (Not bImportFlagX AndAlso Not bSkipSegment) Then
                                            Dim oSegment As cSegment = oSurvey.Segments.Append()
                                            Call oSegment.SetCave(oCurrentCave.Name, oCurrentCaveSubBranch.Path)
                                            Call oSegment.SetSession(oCurrentsession)
                                            oSegment.From = sFrom
                                            oSegment.To = sTo

                                            oSegment.Distance = dDist
                                            oSegment.Bearing = dDir
                                            oSegment.Inclination = dIncl

                                            oSegment.Left = dLeft
                                            oSegment.Right = dRight
                                            oSegment.Up = dUp
                                            oSegment.Down = dDown

                                            oSegment.Note = sNote

                                            oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                            oSegment.Exclude = bExcludeSegment
                                            oSegment.Surface = bSurfaceSegment

                                            Call oSegment.DataProperties.SetValue("import_source", "compass")
                                            Call oSegment.DataProperties.SetValue("import_date", dNow)

                                            Call oSegment.Save()
                                        End If
                                    End If
                            End Select
                        End If
                        iCaveLineCount += 1
                        iLineCount += 1
                    Loop
                    iCaveLineCount = 0
                Loop

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend7"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportCaveExplorer(Filename As String, Append As Boolean)
        'CAVEEXPLORER
        Dim dNow As Date = Date.Now

        Using frmICE As frmImportCaveExporer = New frmImportCaveExporer
            frmICE.txtFilename.Text = Filename

            If frmICE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim sForcedCaveName As String = frmICE.txtCaveName.Text
                Dim sPrefix As String = frmICE.txtPrefix.Text.Trim.ToUpper

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing
                Dim oCurrentCaveBranch As cCaveInfoBranch = Nothing
                Dim oCurrentCaveSubBranch As cCaveInfoBranch = Nothing
                Dim oCurrentsession As cSession

                If sForcedCaveName = "" Then
                    sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                Else
                    sCaveName = sForcedCaveName
                End If
                oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin8"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                Dim fi As FileInfo = New FileInfo(Filename)
                Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                    Dim sLine As String = ""
                    Dim iLineCount As Integer = 0
                    Dim iCaveLineCount As Integer = 0

                    Dim sConversion As Single
                    sLine = sr.ReadLine
                    If sLine Like "Unit=*" Then
                        'unita di misura...
                        Select Case sLine.Substring(5).ToLower
                            Case "feet"
                                sConversion = 0.3048
                            Case Else
                                sConversion = 1
                        End Select
                    End If

                    sLine = sr.ReadLine
                    If sLine Like "GPS:*" Then
                        'per ora ignoro i dati GPS...
                        sLine = sr.ReadLine
                    End If

                    Do Until sLine = "" Or sr.EndOfStream
                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress8"))
                        sLine = sr.ReadLine

                        Dim sLineParts() As String = sLine.Split({vbTab}, StringSplitOptions.RemoveEmptyEntries)
                        Dim sFrom As String
                        Dim sTo As String
                        Dim dDist As Decimal
                        Dim dDir As Decimal
                        Dim dIncl As Decimal
                        Dim dLeft As Decimal
                        Dim dRight As Decimal
                        Dim dUp As Decimal
                        Dim dDown As Decimal
                        Dim sNote As String
                        Dim bSplay As Boolean

                        Try : sFrom = modNumbers.FieldUnformat(sLineParts(0)) : Catch : sFrom = "" : End Try
                        Try : sTo = modNumbers.FieldUnformat(sLineParts(1)) : Catch : sTo = "" : End Try
                        If sTo.Contains(":") Then
                            bSplay = True
                        Else
                            bSplay = False
                        End If

                        Try : dDist = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(2))) * sConversion : Catch : dDist = 0 : End Try
                        Try : dDir = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(3))) : Catch : dDir = 0 : End Try
                        Try : dIncl = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(4))) : Catch : dIncl = 0 : End Try

                        Dim oSegment As cSegment = oSurvey.Segments.Append()
                        Call oSegment.SetCave(oCurrentCave.Name)
                        oSegment.From = sFrom
                        oSegment.To = sTo

                        oSegment.Distance = dDist
                        oSegment.Bearing = dDir
                        oSegment.Inclination = dIncl

                        oSegment.Left = dLeft
                        oSegment.Right = dRight
                        oSegment.Up = dUp
                        oSegment.Down = dDown

                        oSegment.Note = sNote

                        oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                        oSegment.Exclude = False

                        oSegment.Splay = bSplay

                        Call oSegment.DataProperties.SetValue("import_source", "caveexplorer")
                        Call oSegment.DataProperties.SetValue("import_date", dNow)

                        Call oSegment.Save()

                        iCaveLineCount += 1
                        iLineCount += 1
                    Loop
                End Using

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend8"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()

            End If
        End Using
    End Sub

    Private Sub pSurveyInfoEntrance()
        Using frmIE As frmInfoEntrance = New frmInfoEntrance(oSurvey, pGetCurrentDesignTools.CurrentCave)
            Call frmIE.ShowDialog(Me)
        End Using
    End Sub

    Private Sub pSurveyInfoCave()
        Using frmIC As frmInfoCave = New frmInfoCave(oSurvey, bLinkedSurveysShowInCaveInfo, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            Call frmIC.ShowDialog(Me)
        End Using
    End Sub

    Private Sub frmInfoRing_OnApply(sender As frmInfoRing)
        Call pSurveyRedraw()
    End Sub

    Private Sub pSurveyInfoRing()
        Dim sCave As String = pGetCurrentDesignTools.CurrentCave
        Using frmIR As frmInfoRing = New frmInfoRing(oSurvey, sCave)
            AddHandler frmIR.OnApply, AddressOf frmInfoRing_OnApply
            Call frmIR.ShowDialog(Me)
            RemoveHandler frmIR.OnApply, AddressOf frmInfoRing_OnApply
        End Using
    End Sub

    Private Sub pSurveyInfoSession()
        Using frmIS As frmInfoSession = New frmInfoSession(oSurvey, "")
            Call frmIS.ShowDialog(Me)
        End Using
    End Sub

    Private Sub mnuPlotInfoRing_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveyInfoRing()
    End Sub

    Private Sub pSurveyInfoBearing()
        Dim sCave As String = pGetCurrentDesignTools.CurrentCave
        Using frmIO As frmInfoOrientation = New frmInfoOrientation(oSurvey, sCave)
            Call frmIO.ShowDialog(Me)
        End Using
    End Sub

    Private Sub mnuSegmentInfoCopy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuSegmentInfoCopy.Click
        Call pListviewInfoCopy(lvSegmentInfo.SelectedItems, False)
    End Sub

    'Private Sub btnLayerRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pSurveyLoadTreeLayers()
    'End Sub

    'Private Sub cmdLayerObjectProperty_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pSurveyLayerSelectObject()
    '    Call pObjectPropShow(True)
    '    Call tabObjectProp.SelectTab(tabObjectPropMain)
    'End Sub

    'Private Sub cmdLayerObjectSelect_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pSurveyLayerSelectObject()
    'End Sub

    Private Sub pSurveyLayerSelectAll()
        Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
        For Each oLayer As cLayer In oCurrentDesign.Layers
            For Each oItem As cItem In oLayer.GetAllVisibleItems(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
                Call oItemItems.Add(oItem)
            Next
        Next
        If oItemItems.Count > 0 Then
            Call pGetCurrentDesignTools.SelectItem(oItemItems)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    Private Sub pSurveyLayerSelectAllInCurrentLayer()
        Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
        For Each oItem As cItem In pGetCurrentDesignTools.CurrentLayer.GetAllVisibleItems(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            Call oItemItems.Add(oItem)
        Next
        If oItemItems.Count > 0 Then
            Call pGetCurrentDesignTools.SelectItem(oItemItems)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    'Private Sub pSurveyLayerSelectObject()
    '    If TypeOf tvLayers2.SelectedObject Is cItem Then
    '        Dim oItem As cItem = tvLayers2.SelectedObject
    '        Call pGetCurrentDesignTools.SelectItem(oItem)
    '        Call pMapInvalidate()
    '        Call pMapCenterAndFitSelection()
    '    ElseIf TypeOf tvLayers2.SelectedObject Is cLayer Then
    '        Dim oLayer As cLayer = tvLayers2.SelectedObject
    '        Call pGetCurrentDesignTools.SelectLayer(oLayer)
    '        Call pMapInvalidate()
    '        Call pMapCenterAndFitSelection()
    '    End If
    'End Sub

    Private Sub btnCurrentItemGenericRestorePointPen_ItemClick(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnCurrentItemGenericRestorePointPen.ItemClick
        Try
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                For Each oSequence As cSequence In oItem.Points.GetSequences
                    With oSequence.First
                        .Pen = Nothing
                        .LineType = cIItemLine.LineTypeEnum.Undefined
                    End With
                Next
                'Call oItem.Cache.Invalidate()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Function pScaleRulesEdit() As Boolean
        Using frmSR As frmScaleRules = New frmScaleRules(oSurvey, frmScaleRules.EditStyleEnum.ScaleRule)
            If frmSR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End Using
    End Function

    Private Function pScaleRulestemScaleVisibilityEdit(Item As cItem) As Boolean
        Using frmSR As frmItemScaleVisibility = New frmItemScaleVisibility(Item)
            If frmSR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End Using
    End Function

    Private Function pProfileVisibilityEdit(Item As cItem) As Boolean
        Using frmSR As frmItemProfileVisibility = New frmItemProfileVisibility(Item)
            If frmSR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End Using
    End Function

    Private Sub mnuFileRollback_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If MsgBox(GetLocalizedString("main.warning6"), MsgBoxStyle.Exclamation Or MsgBoxStyle.YesNo, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Call pSurveyLoad(sFilename, False)
        End If
    End Sub

    Private Sub oRecentItem_ItemClick(Sender As Object, e As ItemClickEventArgs)
        Call pSurveyRecentsAppendTo(e.Item.Tag)
        If Not pSurveyLoad(e.Item.Tag) Then
            Call pSurveyRecentsRemoveFrom(e.Item.Tag)
        End If
    End Sub

    Private Sub oNewFromTemplate_ItemClick(sender As Object, e As ItemClickEventArgs)
        Call pSurveyNew(e.Item.Tag)
    End Sub

    Private Sub mnuFile_DropDownOpening(ByVal sender As Object, ByVal e As System.EventArgs)
        Dim bEnabledRollback = sFilename <> ""
        If bEnabledRollback Then
            bEnabledRollback = New FileInfo(sFilename).Exists
        End If
        btnRollback.Enabled = bEnabledRollback

        btnHistory.Enabled = bHistory And oSurvey.Properties.HistoryEnabled
    End Sub

    Private Sub cmdPropSetCaveBranch_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdPropSetCaveBranch.Click
        Call pObjectSetCaveBranch()
    End Sub

    Private Sub tmrMouseMove_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrMouseMove.Tick
        Dim oPoint As Point = Cursor.Position
        oPoint = picMap.PointToClient(oPoint)
        Call picMap_MouseMove(picMap, New MouseEventArgs(Control.MouseButtons, 0, oPoint.X, oPoint.Y, 0))
    End Sub

    Private Sub mnuViewPlotShowStyle3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        oCurrentOptions.DrawStyle = cOptions.DrawStyleEnum.OnlySegment
        Call oCurrentOptions.DrawingObjects.Rebind()
        Call pSurveyRedraw()
    End Sub

    Private oCommandLine As cCommandLineParameters

    Public Sub New()
        ' This call is required by the designer.
        InitializeComponent()

        ' Add any initialization after the InitializeComponent() call.
        WorkspaceManager.SetSerializationEnabled(RibbonControl, False)

        AddHandler RibbonControl.Manager.HighlightedLinkChanged, AddressOf RibbonControl_HighlightedLinkChanged

        oMousePointer = New cMousePointer
        dlastLogEvent = Now

        sObjectsPath = modMain.GetApplicationPath & "\objects"
        sClipartPath = sObjectsPath & "\cliparts"

        WindowState = FormWindowState.Maximized
        'CheckForIllegalCrossThreadCalls = False

        oCommandLine = New cCommandLineParameters(Command)
        modMain.bIsInDebug = oCommandLine.GetValue("debug", "0")
        If oCommandLine.GetValue("modernos", "1") = 1 Then modMain.bIsModernOS = modMain.GetWindowsVersion >= 6.1

        Call SuspendLayout()

        For Each oGroup In pageCurrentItem.Groups
            Call pageHome.Groups.Add(oGroup)
        Next
        For Each oGroup In pageCurrentItemPoint.Groups
            Call pageHome.Groups.Add(oGroup)
        Next
        'Call modMain.SetGridDefaultValueForColumnImage(grdSegments)
        'Call modMain.SetGridDefaultValueForColumnImage(grdTrigPoints)

        '-----------------------------------------------------------------------------------------------
        'oDockPanel = New WeifenLuo.WinFormsUI.Docking.DockPanel
        'oDockPanel.DocumentStyle = WeifenLuo.WinFormsUI.Docking.DocumentStyle.DockingWindow
        'Call tsMain.ContentPanel.Controls.Add(oDockPanel)
        'oDockPanel.Theme = New WeifenLuo.WinFormsUI.Docking.VS2015LightTheme
        'oDockPanel.Dock = DockStyle.Fill
        'oDockPanel.Visible = True

        'oDockData = New cDockContent("data")
        'oDockData.Text = btnViewFieldData.Caption
        'oDockData.DockAreas = WeifenLuo.WinFormsUI.Docking.DockAreas.Document
        ''oDockData.HideOnClose = True
        'oDockData.Icon = New Icon(My.Resources.table1, 16, 16)
        'oDockData.Controls.Add(pnlData)
        'pnlData.Dock = DockStyle.Fill
        'oDockData.CloseButtonVisible = False
        'oDockData.DockPanel = oDockPanel
        'oDockData.DockTo(oDockPanel, DockStyle.Fill)
        'oDockData.Show(oDockPanel, WeifenLuo.WinFormsUI.Docking.DockState.Document)

        'oDockDesigner = New cDockContent("designer")
        'oDockDesigner.Text = btnViewDesignArea.Caption
        'oDockDesigner.DockAreas = WeifenLuo.WinFormsUI.Docking.DockAreas.Document
        ''oDockDesigner.HideOnClose = True
        'oDockDesigner.Icon = New Icon(My.Resources.application_edit1, 16, 16)
        'oDockDesigner.Controls.Add(pnlDesigner)
        'pnlDesigner.Dock = DockStyle.Fill
        'oDockDesigner.CloseButtonVisible = False
        'oDockDesigner.DockPanel = oDockPanel
        'oDockDesigner.DockTo(oDockData.Pane, DockStyle.Right, -1)
        'oDockDesigner.Show(oDockPanel, WeifenLuo.WinFormsUI.Docking.DockState.Document)


        oDockLevels = New cDockLevels
        dockLevels.Controls.Add(oDockLevels)
        oDockLevels.Dock = DockStyle.Fill

        'oDockLayers = New cDockContent("layers")
        'oDockLayers.Text = grdDesignLayers.Text
        'oDockLayers.DockAreas = WeifenLuo.WinFormsUI.Docking.DockAreas.DockRight Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockLeft Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockTop Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockBottom Or WeifenLuo.WinFormsUI.Docking.DockAreas.Float
        'oDockLayers.HideOnClose = True
        'oDockLayers.Icon = New Icon(My.Resources.layers1, 16, 16)
        'Call oDockLayers.Controls.Add(pnlObjectLayers)
        'pnlObjectLayers.Dock = DockStyle.Fill
        'oDockLayers.DockPanel = oDockPanel
        'oDockLayers.Show(oDockPanel, WeifenLuo.WinFormsUI.Docking.DockState.DockRight)

        'oDockProperties = New cDockContent("properties")
        'oDockProperties.Text = btnViewObjectProp.Caption
        'oDockProperties.DockAreas = WeifenLuo.WinFormsUI.Docking.DockAreas.DockRight Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockLeft Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockTop Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockBottom Or WeifenLuo.WinFormsUI.Docking.DockAreas.Float
        'oDockProperties.HideOnClose = True
        'oDockProperties.Icon = New Icon(My.Resources.sidebox, 16, 16)
        'Call oDockProperties.Controls.Add(pnlProperties)
        'pnlProperties.Dock = DockStyle.Fill
        'oDockProperties.DockPanel = oDockPanel
        'oDockProperties.Show(oDockPanel, WeifenLuo.WinFormsUI.Docking.DockState.DockRight)

        'oDockConsole = New cDockContent("console")
        'oDockConsole.Text = btnViewConsole.Caption
        'oDockConsole.DockAreas = WeifenLuo.WinFormsUI.Docking.DockAreas.DockRight Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockLeft Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockTop Or WeifenLuo.WinFormsUI.Docking.DockAreas.DockBottom Or WeifenLuo.WinFormsUI.Docking.DockAreas.Float
        'oDockConsole.HideOnClose = True
        'oDockConsole.Icon = New Icon(My.Resources.console, 16, 16)
        'Call oDockConsole.Controls.Add(pnlConsole)
        'pnlConsole.Dock = DockStyle.Fill
        'oDockConsole.DockPanel = oDockPanel

        oDockClipart = New cDockClipart
        dockClipart.Controls.Add(oDockClipart)
        oDockClipart.Dock = DockStyle.Fill

        oDockText = New cDockText
        dockText.Controls.Add(oDockText)
        oDockText.Dock = DockStyle.Fill

        oDockJoinPoints = New cDockJoinPoints
        dockJoinPoints.Controls.Add(oDockJoinPoints)
        oDockJoinPoints.Dock = DockStyle.Fill

        oDockAV = New cDockAudioViewer
        dockAV.Controls.Add(oDockAV)
        oDockAV.Dock = DockStyle.Fill

        oDockIV = New cDockImageViewer
        dockIV.Controls.Add(oDockIV)
        oDockIV.Dock = DockStyle.Fill

        oDockLS = New cDockLinkedSurveys
        dockLS.Controls.Add(oDockLS)
        oDockLS.Dock = DockStyle.Fill

        oDockTexts = New cDockTexts
        dockTexts.Controls.Add(oDockTexts)
        oDockTexts.Dock = DockStyle.Fill

        '-----------------------------------------------------------------------------------------------
        tblObjectProp.AutoScroll = True

        picMap.AllowDrop = True

        'carico i cursori
        oOpenHandCursor = New Cursor(sObjectsPath & "\cursors\openhand.cur")
        oClosedHandCursor = New Cursor(sObjectsPath & "\cursors\closedhand.cur")

        'layer's tree setup...
        'Call pSurveySetupTreeLayers()
        'Call pSurveySetupSegmentAttachments()
        'Call pSurveySetupTrigpoints()

        Dim oBindDesignTypeList As List(Of cComboItem(Of cItem.BindDesignTypeEnum)) = New List(Of cComboItem(Of cItem.BindDesignTypeEnum))
        Dim oEditBindDesignTypeCombo As DevExpress.XtraEditors.Repository.RepositoryItemLookUpEdit = btnMainBindDesignType.Edit
        Call oBindDesignTypeList.Add(New cComboItem(Of cItem.BindDesignTypeEnum)(modMain.GetLocalizedString("csurvey.design.item.binddesigntypeenum." & cItem.BindDesignTypeEnum.MainDesign.ToString("D")), cItem.BindDesignTypeEnum.MainDesign))
        Call oBindDesignTypeList.Add(New cComboItem(Of cItem.BindDesignTypeEnum)(modMain.GetLocalizedString("csurvey.design.item.binddesigntypeenum." & cItem.BindDesignTypeEnum.CrossSections.ToString("D")), cItem.BindDesignTypeEnum.CrossSections))
        oEditBindDesignTypeCombo.DataSource = oBindDesignTypeList

        Dim oDirectionTypeList As List(Of cComboItem(Of cSurvey.cSurvey.DirectionEnum)) = New List(Of cComboItem(Of cSurvey.cSurvey.DirectionEnum))
        Dim oEditDirectionTypeCombo As DevExpress.XtraEditors.Repository.RepositoryItemLookUpEdit = colSegmentsListProfileDirection.ColumnEdit
        Call oDirectionTypeList.Add(New cComboItem(Of cSurvey.cSurvey.DirectionEnum)(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Right.ToString("D")), cSurvey.cSurvey.DirectionEnum.Right))
        Call oDirectionTypeList.Add(New cComboItem(Of cSurvey.cSurvey.DirectionEnum)(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Left.ToString("D")), cSurvey.cSurvey.DirectionEnum.Left))
        Call oDirectionTypeList.Add(New cComboItem(Of cSurvey.cSurvey.DirectionEnum)(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Vertical.ToString("D")), cSurvey.cSurvey.DirectionEnum.Vertical))
        oEditDirectionTypeCombo.DataSource = oDirectionTypeList

        'delegates for wms download
        Call modWMSManager.WMSSetDelegate(AddressOf pWMSChangeState, AddressOf pWMSDownloadAsyncProgress, AddressOf pWMSDownloadAsyncCompleted, AddressOf pWMSLog)

        'carico gli insiemi di clipart e simboli...
        'sClipartPath = sObjectsPath & "\cliparts"
        'frmCP = New frmClipartPopup
        'frmTP = New frmTextPopup

        'point join
        'frmJ = New frmJoinPoints

        'toolbar fluttuante...anche se non visibile la carico comunque
        'frmMFT = New frmMainFloatingToolbar

        'undo
        btnUndo.Enabled = False
        frmU = New frmUndoManager()

        '3dviewer
        Try
            oHolos = New cHolosViewer
            h3D.Child = oHolos
            pnl3D.Dock = DockStyle.Fill
            h3D.Dock = DockStyle.Fill
            h3D.BringToFront()
            bHolos = True
        Catch ex As Exception
            Call pLogAdd(ex)
            btnView3D.Enabled = False
            btnExport3D.Enabled = False
        End Try

        Call pSurveyDesignToolsLoad()

        'riduco il pannello data utente
        pnlPropDataProperties.Height = 0

        'picMap.Dock = DockStyle.Fill
        Call pnlDesigner.SuspendLayout()
        Dim oPanelSize As Size = pnlDesigner.ClientSize
        oVSB = New DevExpress.XtraEditors.VScrollBar
        oHSB = New DevExpress.XtraEditors.HScrollBar

        oVSB.SmallChange = 1
        oVSB.LargeChange = 25
        oVSB.Anchor = AnchorStyles.Right Or AnchorStyles.Top Or AnchorStyles.Bottom
        oVSB.Location = New Point(oPanelSize.Width - oVSB.Width, 0)
        oVSB.Size = New Size(oVSB.Width, oPanelSize.Height - oHSB.Height)
        pnlDesigner.Controls.Add(oVSB)
        'oVSB.Dock = DockStyle.Right
        oVSB.SendToBack()

        oHSB.SmallChange = 1
        oHSB.LargeChange = 25
        oHSB.Anchor = AnchorStyles.Left Or AnchorStyles.Right Or AnchorStyles.Bottom
        oHSB.Location = New Point(0, oPanelSize.Height - oHSB.Height)
        oHSB.Size = New Size(oPanelSize.Width - oVSB.Width, oHSB.Height)
        pnlDesigner.Controls.Add(oHSB)
        'oHSB.Dock = DockStyle.Bottom
        oHSB.SendToBack()

        picMap.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right Or AnchorStyles.Bottom
        picMap.Location = New Point(0, 0)
        picMap.Size = New Size(oPanelSize.Width - oVSB.Width, oPanelSize.Height - oHSB.Height)

        Call pnlDesigner.ResumeLayout()

        'tbPen.Visible = False
        Call pFloatingToolbarHide()

        Call picMap.BringToFront()

        For i As Integer = 1 To 60
            Call cboTrigpointCoordinateZone.Items.Add(i)
        Next
        For i As Integer = Asc("A") To Asc("Z")
            Call cboTrigpointCoordinateBand.Items.Add(Chr(i))
        Next

        Call pFirstRun()
        Call pSettingsLoad()

        Call cboPropCategories.Items.Clear()
        For Each iCategory As cIItem.cItemCategoryEnum In [Enum].GetValues(GetType(cIItem.cItemCategoryEnum))
            Call cboPropCategories.Items.Add(iCategory.ToString)
        Next
        cboPropCategories.Enabled = False

        '-------------------------------------------
        tblObjectProp.Visible = False
        tblDesignProp.Visible = False
        tbl3DProp.Visible = False
        modControls.RemoveTableLayoutCellPadding(tblObjectProp)
        modControls.RemoveTableLayoutCellPadding(tblDesignProp)
        modControls.RemoveTableLayoutCellPadding(tbl3DProp)
        tblObjectProp.Padding = New Padding(0, 0, 0, 0)
        tblDesignProp.Padding = New Padding(0, 0, 0, 0)
        tbl3DProp.Padding = New Padding(0, 0, 0, 0)

        For Each oChildControl As Control In tblDesignProp.Controls
            oChildControl.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right
        Next

        For Each oChildControl As Control In tblObjectProp.Controls
            oChildControl.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right
        Next

        For Each oChildControl As Control In tbl3DProp.Controls
            oChildControl.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right
        Next

        tblObjectProp.Parent = dockProperties
        tblObjectProp.Dock = DockStyle.Fill
        'tblObjectProp.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right Or AnchorStyles.Bottom
        'tblObjectProp.Location = New Point(0, 0)
        'tblObjectProp.Size = New Size(pnlProperties.Width - SystemInformation.VerticalScrollBarWidth, pnlProperties.Height - SystemInformation.HorizontalScrollBarHeight)
        tblDesignProp.Parent = dockProperties
        tblDesignProp.Dock = DockStyle.Fill
        tbl3DProp.Parent = dockProperties
        tbl3DProp.Dock = DockStyle.Fill
        ControlContainer10.Controls.Remove(tabObjectProp)
        '-------------------------------------------

        'Call pSurveyLoadTreeLayers()
        Call pZoomReset()
        '-------------------------------------------
        'oClipboardViewer = New clipboardChangeNotifier
        'oClipboardViewer.AssignHandle(Handle)
        'oClipboardViewer.Install()
        'Call oClipboardViewer_ClipboardChanged(Nothing, Nothing)

        Call ResumeLayout()

        Dim iAlpha As Integer = 0

        iAlpha = 10
        oMultiSelBrush1 = Nothing
        oMultiSelPen1 = New Pen(SystemColors.Highlight)
        iAlpha = 50
        oMultiSelBrush2 = New SolidBrush(Color.FromArgb(iAlpha, SystemColors.Highlight))
        oMultiSelPen2 = New Pen(SystemColors.Highlight)
        iAlpha = 120
        oMultiSelBrush3 = New SolidBrush(Color.FromArgb(iAlpha, SystemColors.Highlight))
        oMultiSelPen3 = New Pen(SystemColors.Highlight)

        bDisableFilterItemEvent = False
        bDisableSelectItemEvent = False
        bDisablePaintEvent = False
        bDisableZoomEvent = False
        bDisableSegmentsChangeEvent = False
        bDisableTrigpointsChangeEvent = False
        bDisabledObjectPropertyEvent = False
        bDisabledCaveBranchChangeEvent = False
        bDisabledAutosaveEvent = False
        '-------------------------------------------
        Dim bPrintEnabled As Boolean = modMain.IsPrintEnabled
        btnPrint.Enabled = bPrintEnabled

        '-------------------------------------------
        'starting timer for selection change
        oDelayedRedrawTimer = New Timer
        oDelayedRedrawTimer.Interval = 150
        oObjectPropertyTimer = New Timer
        oObjectPropertyTimer.Interval = 50

        '-------------------------------------------
        'starting new version check timer
        tmrCheckNewVersion = New Timer
        tmrCheckNewVersion.Interval = 5000
        Call tmrCheckNewVersion.Start()

        '-------------------------------------------
        If modMain.bIsModernOS AndAlso Not bIsInDebug Then
            Call pJumplistCreate()
        End If
    End Sub

    Private Sub cboPropMergeMode_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cboPropMergeMode.SelectedIndexChanged
        Dim oItemArea As cIItemMergeableArea = pGetCurrentDesignTools.CurrentItem
        oItemArea.MergeMode = cboPropMergeMode.SelectedIndex
        Call pMapInvalidate()
    End Sub

    Private Sub cmdPropBrushAlternativeBrushColor_Click(sender As System.Object, e As System.EventArgs) Handles cmdPropBrushAlternativeBrushColor.Click
        Using oCD As ColorDialog = New ColorDialog
            With oCD
                .FullOpen = True
                .AnyColor = True
                .Color = picPropBrushAlternativeBrushColor.BackColor
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    picPropBrushAlternativeBrushColor.BackColor = .Color
                    With pGetCurrentDesignTools()
                        .CurrentItem.Brush.ClipartAlternativeColor = picPropBrushAlternativeBrushColor.BackColor
                        Call .TakeUndoSnapshot()
                    End With
                    'todo: check how to redraw only preview
                    Call pObjectPropertyLoad()
                    Call pMapInvalidate()
                End If
            End With
        End Using
    End Sub

    Private Sub mnuDesignItemSegmentInvert_Click(sender As System.Object, e As System.EventArgs)
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        With oItemSegment.Segment
            If .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                .Direction = cSurvey.cSurvey.DirectionEnum.Right
            Else
                .Direction = cSurvey.cSurvey.DirectionEnum.Left
            End If
            Call .Save()
        End With
        If oItemSegment.Segment Is oTools.CurrentSegment Then
            Call oTools.SelectSegment(oItemSegment.Segment)
        End If
    End Sub

    Private Sub mnuFileAutoSettings_Click(sender As System.Object, e As System.EventArgs)
        Call pAutoSettings()
    End Sub

    Private Sub pAutoSettings()
        Using frmAS As frmAutoSettings = New frmAutoSettings
            If frmAS.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pSettingsLoad()
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyManageVisibility()
        Using frmCVM As frmCaveVisibilityManager = New frmCaveVisibilityManager(oSurvey, oSurvey.Properties.CaveVisibilityProfiles, oCurrentOptions.CurrentCaveVisibilityProfile)
            AddHandler frmCVM.OnChangeVisibility, AddressOf frmCVM_OnChangeVisibility
            If frmCVM.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
            End If
            RemoveHandler frmCVM.OnChangeVisibility, AddressOf frmCVM_OnChangeVisibility
        End Using
    End Sub

    Private Sub frmCVM_OnChangeVisibility(Sender As Object, CaveVisibilityProfiles As cSurvey.cCaveVisibilityProfiles, CurrentProfile As String)
        'qua permetto di cambiare i profili ma non di applicarli al designer...i profile servono solo in stampa/esportazione.
        Call oSurvey.Properties.CaveVisibilityProfiles.CopyFrom(CaveVisibilityProfiles)
    End Sub

    Private Sub cmdPropQuotaOtherOptions_Click(sender As System.Object, e As System.EventArgs) Handles cmdPropQuotaOtherOptions.Click
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemQuota = .CurrentItem
                    Using frmQP As frmQuotaProperties = New frmQuotaProperties(oItem)
                        If frmQP.ShowDialog(Me) = vbOK Then
                            Call .TakeUndoSnapshot()
                            Call pObjectPropertyLoad()
                            Call pMapInvalidate()
                        End If
                    End Using
                End With
            End If
        Catch
        End Try
    End Sub

    Private Sub cmdPropQuotaTrigpoint_Click(sender As Object, e As System.EventArgs) Handles cmdPropQuotaTrigpoint.Click
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemQuota = .CurrentItem
                    Using frmTB As frmTrigpointBrowser = New frmTrigpointBrowser(oSurvey, txtPropQuotaRelativeTrigpoint.Text, True)
                        If frmTB.ShowDialog(Me) = vbOK Then
                            oItem.QuotaRelativeTrigPoint = frmTB.cboTrigpoints.Text
                            Call .TakeUndoSnapshot()
                            Call pObjectPropertyLoad()
                            Call pMapInvalidate()
                        End If
                    End Using
                End With
            End If
        Catch
        End Try
    End Sub

    Private Sub mnuTrigPointsEntrance4_Click(sender As System.Object, e As System.EventArgs)
        Dim otrigpoint As cTrigPoint = pGetCurrentTools.CurrentTrigpoint
        If Not otrigpoint Is Nothing Then
            cboTrigpointEntrance.SelectedIndex = cTrigPoint.EntranceTypeEnum.OutSide
            Call pTrigPointSave(otrigpoint)
        End If
    End Sub

    Private Sub frmU_OnUndoRequest(ByVal Sender As frmUndoManager, ByVal e As Object) Handles frmU.OnUndoRequest
        Call pSurveyUndo()
    End Sub

    Private Sub pListviewInfoCopy(ListViewItems As IEnumerable, OnlyValues As Boolean)
        Try
            Dim sText As String = ""
            For Each oItem As ListViewItem In ListViewItems
                If OnlyValues Then
                    If sText <> "" Then sText = sText & vbCrLf
                    sText = sText & oItem.SubItems(1).Text
                Else
                    If sText <> "" Then sText = sText & vbCrLf
                    sText = sText & oItem.Text & vbTab & oItem.SubItems(1).Text
                End If
            Next
            Call My.Computer.Clipboard.SetText(sText)
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private Sub mnuSegmentInfoCopyAll_Click(sender As System.Object, e As System.EventArgs) Handles mnuSegmentInfoCopyAll.Click
        Call pListviewInfoCopy(lvSegmentInfo.Items, False)
    End Sub

    Private Sub mnuSegmentsInsert_Click(sender As System.Object, e As System.EventArgs)
        Call pSegmentInsert(grdViewSegments.GetFocusedDataSourceRowIndex)
    End Sub

    Private Sub mnuSegmentsMoveUp_Click(sender As System.Object, e As System.EventArgs)
        Dim iNewIndex As Integer = oTools.CurrentSegment.Index - 1
        If iNewIndex >= 0 Then
            Call pSegmentMove(oTools.CurrentSegment, iNewIndex)
            Call pSegmentSelect(oTools.CurrentSegment, False, False)
        End If
    End Sub

    Private Sub mnuSegmentsMoveDown_Click(sender As System.Object, e As System.EventArgs)
        Dim iNewIndex As Integer = oTools.CurrentSegment.Index + 1
        If iNewIndex < oSurvey.Segments.Count Then
            Call pSegmentMove(oTools.CurrentSegment, iNewIndex)
            Call pSegmentSelect(oTools.CurrentSegment, False, False)
        End If
    End Sub

    Private Sub pSegmentMove(Segment As cSegment, NewIndex As Integer)
        Call grdSegments.BeginUpdate()
        Call oSurvey.Segments.MoveTo(NewIndex, Segment)
        Call grdSegments.EndUpdate()
        'Call pSurveySegmentsRefresh()
    End Sub

    Private Sub pnlSegment_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles pnlSegment.Enter
        bSegmentChanged = True
    End Sub

    Private Sub pnlSegment_Leave(sender As System.Object, e As System.EventArgs) Handles pnlSegment.Leave
        Call pSegmentSave(oTools.CurrentSegment)
    End Sub

    Private Sub pnlTrigPoint_Enter(sender As Object, e As System.EventArgs) Handles pnlTrigPoint.Enter
        bTrigpointChanged = True
    End Sub

    Private Sub pnlTrigPoint_Leave(sender As System.Object, e As System.EventArgs) Handles pnlTrigPoint.Leave
        Call pTrigPointSave(oTools.CurrentTrigpoint)
    End Sub

    'Private Sub grdTrigPoints_RowValidated(sender As Object, e As System.Windows.Forms.DataGridViewCellEventArgs) Handles grdTrigPoints.RowValidated
    '    If Not oSurvey Is Nothing Then
    '        Try
    '            Dim sTrigPoint As String = grdTrigPoints.Rows(e.RowIndex).Cells(0).Value
    '            If oSurvey.TrigPoints.Contains(sTrigPoint) Then
    '                Dim oTrigpoint As cTrigPoint = oSurvey.TrigPoints(sTrigPoint)
    '                If oTrigpoint.Changed Then
    '                    Call pTrigPointSave(oTrigpoint)
    '                    Call pTrigpointLoad(oTrigpoint)
    '                End If
    '            End If
    '        Catch
    '        End Try
    '    End If
    'End Sub

    'Private Sub grdTrigPoints_SelectionChanged(sender As Object, e As System.EventArgs) Handles grdTrigPoints.SelectionChanged
    '    Try
    '        If Not bDisableTrigpointsChangeEvent Then
    '            bDisableTrigpointsChangeEvent = True
    '            Dim iRowIndex As Integer = grdTrigPoints.SelectedCells(0).RowIndex
    '            Dim sTrigPoint As String = grdTrigPoints.Rows(iRowIndex).Cells(0).Value
    '            If oSurvey.TrigPoints.Contains(sTrigPoint) Then
    '                Dim oTrigpoint As cTrigPoint = oSurvey.TrigPoints(sTrigPoint)
    '                Call oTools.SelectTrigpoint(oTrigpoint)
    '            Else
    '                Call oTools.SelectTrigpoint(Nothing)
    '            End If
    '            Call pTrigpointsRefresh()
    '            bDisableTrigpointsChangeEvent = False
    '        End If
    '    Catch
    '    End Try
    'End Sub

    Private Sub btnPopupClose_Click(sender As System.Object, e As System.EventArgs)
        Call pPopupHide()
    End Sub

    Private Sub mnuFileSurface_Click(sender As System.Object, e As System.EventArgs)
        Call pSurveySurface()
    End Sub

    Private Sub pSurveySurface()
        Using frmS As frmSurface = New frmSurface(oSurvey)
            If frmS.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub oSurvey_OnSurfaceChanged(Sender As cSurvey.cSurvey, Args As cSurvey.cSurvey.OnSurfaceChangedEventArgs) Handles oSurvey.OnSurfaceChanged
        Call modWMSManager.WMSDownloadFileReset()
        Call pSurveyCalculate(False)
        Call pObjectPropertyLoad()
    End Sub

    Private Sub chkSegmentExclude_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentExclude.CheckedChanged
        If Not bDisableSegmentsChangeEvent Then
            If Not chkSegmentExclude.Checked Then
                chkSegmentCalibration.Checked = False
                chkSegmentDuplicate.Checked = False
                chkSegmentSplay.Checked = False
                chkSegmentSurface.Checked = False
                chkSegmentCutSplay.Checked = False
            End If
            Call pSegmentCheckFlags()
        End If
    End Sub

    Private Sub pSegmentCheckFlags()
        If Not bDisableSegmentsChangeEvent Then
            chkSegmentCutSplay.Checked = chkSegmentCutSplay.Checked And Not chkSegmentZSurvey.Checked
            chkSegmentSplay.Checked = (chkSegmentSplay.Checked OrElse chkSegmentCutSplay.Checked) And Not chkSegmentZSurvey.Checked
            chkSegmentExclude.Checked = (chkSegmentExclude.Checked OrElse chkSegmentCalibration.Checked OrElse chkSegmentDuplicate.Checked OrElse chkSegmentSplay.Checked OrElse chkSegmentSurface.Checked) And Not chkSegmentZSurvey.Checked
        End If
        chkSegmentUnbindable.Enabled = Not chkSegmentSplay.Checked
        chkSegmentVirtual.Enabled = Not chkSegmentSplay.Checked
        chkSegmentZSurvey.Enabled = Not chkSegmentSplay.Checked

        cboSessionList.Enabled = Not chkSegmentVirtual.Checked
        pnlSegmentCaveBranches.Enabled = Not chkSegmentCalibration.Checked
    End Sub

    Private Sub chkSegmentSplay_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentSplay.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentDuplicate_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentDuplicate.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentSurface_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentSurface.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentCutSplay_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentCutSplay.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentZSurvey_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentZSurvey.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Function pDesignItemFindCreateButton()
        For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
            If TypeOf oItem.Item.Tag Is cEditToolsBag Then
                Dim oBag As cEditToolsBag = oItem.Item.Tag
                oItem.Item.Visibility = modControls.VisibleToVisibility(oBag.AvaiableInProfile)
            Else
                oItem.Item.Visibility = True
            End If
        Next
    End Function

    Private Sub btnMapDropAttachment_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropAttachment.ItemClick
        Dim oBag As cEditToolsBag = RibbonControl.Items.FindByName("btnItemsAdd_btnDesignTools_Signs_Attachment").Tag
        Call pDesignTools_CreateItem(oBag, False, Nothing, mnuMapDrop.Tag)
    End Sub

    Private Sub btnMapDropGenericText_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropGenericText.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, mnuMapDrop.Tag, 6, True)
    End Sub

    Private Sub btnMapDropPocketTopo_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropPocketTopo.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, mnuMapDrop.Tag, 3, True)
    End Sub

    Private Sub btnMapDropCaveExplorer_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropCaveExplorer.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, mnuMapDrop.Tag, 5, True)
    End Sub

    Private Sub btnMapDropImage_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropImage.ItemClick
        Dim oBag As cEditToolsBag = RibbonControl.Items.FindByName("btnItemsAdd_btnDesignTools_Base_Image").Tag
        Call pDesignTools_CreateItem(oBag, False, Nothing, mnuMapDrop.Tag)
    End Sub

    Private Sub btnMapDropSketch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropSketch.ItemClick
        Dim oBag As cEditToolsBag = RibbonControl.Items.FindByName("btnItemsAdd_btnDesignTools_Base_Sketch").Tag
        Call pDesignTools_CreateItem(oBag, False, Nothing, mnuMapDrop.Tag)
    End Sub

    Private Sub grdSegments_DragOver(sender As Object, e As System.Windows.Forms.DragEventArgs) Handles grdSegments.DragOver
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                If (pDropExtensionCheck(sFilePaths(0)) And DropActionEnum.ImportData) = DropActionEnum.ImportData Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            Else
                e.Effect = DragDropEffects.None
            End If
        Else
            e.Effect = DragDropEffects.None
        End If
    End Sub

    Private Sub grdSegments_DragDrop(sender As Object, e As System.Windows.Forms.DragEventArgs) Handles grdSegments.DragDrop
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Select Case pDropExtensionCheck(sFilePaths(0))
                    Case DropActionEnum.ImportTextData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 4, True)

                    Case DropActionEnum.ImportVTopoData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 1, True)
                    Case DropActionEnum.ImportcSurveyData
                        If pSurveyIsEmpty() Then
                            Call pSurveyLoad(sFilePaths(0), False)
                        Else
                            Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 2, True)
                        End If

                End Select
            End If
        End If
    End Sub

    Private Sub pPopupsHide()
        'If Not frmCP Is Nothing Then If Not frmCP.IsDisposed Then frmCP.Hide()
        'If Not frmTP Is Nothing Then If Not frmTP.IsDisposed Then Call frmTP.Hide()
        'If Not frmF Is Nothing Then If Not frmF.IsDisposed Then Call frmF.Close()
        If Not frmThP Is Nothing Then If Not frmThP.IsDisposed Then Call frmThP.Close()
        If Not frmV Is Nothing Then If Not frmV.IsDisposed Then Call frmV.Close()
        'If Not frmJ Is Nothing Then If Not frmJ.IsDisposed Then Call frmJ.Hide()
        If Not frmU Is Nothing Then If Not frmU.IsDisposed Then Call frmU.Close()
    End Sub

    Private Sub pTrayHideIn()
        Call pPopupsHide()
        Call Hide()
        ntiMain.Visible = True
        Dim sCaption As String = "cSurvey - " & If(oSurvey.Name <> "", oSurvey.Name, "[" & sFilename & "]")
        If sCaption.Length > 64 Then sCaption = sCaption.Substring(0, 64)
        ntiMain.Text = sCaption
    End Sub

    Private Sub pTrayShowFrom()
        Call Show()
        ntiMain.Visible = False
    End Sub

    Private Sub mnnuTrayShowHide_Click(sender As System.Object, e As System.EventArgs)
        If Visible Then
            Call pTrayHideIn()
        Else
            Call pTrayShowFrom()
        End If
    End Sub

    Private Sub mnuFileHideInTray_Click(sender As System.Object, e As System.EventArgs)
        Call pTrayHideIn()
    End Sub

    Private Sub ntiMain_MouseDoubleClick(sender As System.Object, e As System.Windows.Forms.MouseEventArgs) Handles ntiMain.MouseDoubleClick
        Call pTrayShowFrom()
    End Sub

    Private Sub mnuSegmentsRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pSurveySegmentsRefresh()
    End Sub

    Private Sub mnuFileResurvey_Click(sender As System.Object, e As System.EventArgs)
        Call pResurvey()
    End Sub

    Private Sub pResurvey()
        Using frmRM As frmResurveyMain = New frmResurveyMain
            If frmRM.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Using frmIR As frmImportResurvey = New frmImportResurvey
                    If frmIR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        Dim sForcedCaveName As String = frmIR.txtCaveName.Text
                        Dim sPrefix As String = frmIR.txtPrefix.Text.Trim
                        Dim iNordType As cSegment.NordTypeEnum = frmIR.cboNordType.SelectedIndex

                        bDisableSegmentsChangeEvent = True
                        bDisableTrigpointsChangeEvent = True

                        Dim sCaveName As String = sForcedCaveName
                        Dim sCaveBranchName As String = ""

                        If Not oSurvey.Properties.CaveInfos.Contains(sCaveName) Then
                            Call oSurvey.Properties.CaveInfos.Add(sCaveName)
                        End If

                        Dim oSession As cSession = oSurvey.Properties.Sessions.Add(Date.Today, oSurvey.Properties.Sessions.GetUniqueID(Date.Today, GetLocalizedString("main.defaultresurveysessionname")))
                        If frmRM.Options.LRUDStation = cResurvey.cOptions.LRUDStationEnum.FromStation Then
                            oSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint
                            oSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToNext
                        Else
                            oSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.EndPoint
                            oSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToPrevious
                        End If
                        oSession.NordType = iNordType

                        For Each oShot As cResurvey.cShot In frmRM.Shots
                            Dim oSegment As cSegment = oSurvey.Segments.Append()
                            Call oSegment.SetCave(sCaveName, sCaveBranchName)
                            Call oSegment.SetSession(oSession)

                            oSegment.From = sPrefix & oShot.[From]
                            oSegment.To = sPrefix & oShot.[To]
                            oSegment.Distance = oShot.Distance
                            oSegment.Bearing = oShot.Bearing
                            oSegment.Inclination = oShot.Inclination

                            If frmRM.Options.LRUDStation = cResurvey.cOptions.LRUDStationEnum.FromStation OrElse frmRM.Options.LRUDStation = cResurvey.cOptions.LRUDStationEnum.ToStation Then
                                oSegment.Left = oShot.GetLeft
                                oSegment.Right = oShot.GetRight
                                oSegment.Up = oShot.GetUp
                                oSegment.Down = oShot.GetDown
                            End If

                            oSegment.Note = ""

                            oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                            oSegment.Exclude = False

                            Call oSegment.Save()
                        Next

                        If oSurvey.Properties.Origin = "" Then
                            oSurvey.Properties.Origin = sPrefix & frmRM.GetOrigin
                        End If

                        bDisableSegmentsChangeEvent = False
                        bDisableTrigpointsChangeEvent = False

                        Call pStatusProgress(0, GetLocalizedString("main.progressend2"))
                        Call oMousePointer.Pop()

                        Call pSurveyFillSessionList(False)
                        Call pSurveyFillCaveList(False)

                        Call pSurveyCaption()
                        Call pSurveySegmentsRefresh()
                        Call pSurveyTrigpointsRefresh()

                        Call pMapInvalidate()
                    End If
                End Using
            End If
        End Using
    End Sub

    'Private Sub grdSegments_RowValidating(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellCancelEventArgs)
    '    If bBeginEdit Then
    '        Try
    '            Dim oValue As Object = grdSegments.CurrentCell.FormattedValue
    '            Select Case e.ColumnIndex
    '                Case 2
    '                    cboSegmentFrom.Text = oValue  ' oSegment.From
    '                Case 3
    '                    cboSegmentTo.Text = oValue  ' oSegment.To
    '                Case 4
    '                    txtSegmentDistance.Text = oValue  'oSegment.Distance
    '                Case 5
    '                    txtSegmentBearing.Text = oValue  'oSegment.Bearing
    '                Case 6
    '                    txtSegmentInclination.Text = oValue ' oSegment.Inclination
    '                Case 7
    '                    txtSegmentLeft.Text = oValue ' oSegment.Left
    '                Case 8
    '                    txtSegmentRight.Text = oValue ' oSegment.Right
    '                Case 9
    '                    txtSegmentUp.Text = oValue 'oSegment.Up
    '                Case 10
    '                    txtSegmentDown.Text = oValue ' oSegment.Down
    '                Case 11  'inverti
    '                    'chkSegmentInverted.Checked = oValue ' oSegment.Inverted
    '                    cboSegmentDirection.SelectedIndex = If(oValue = CheckState.Unchecked, cSurvey.cSurvey.DirectionEnum.Right, If(oValue = CheckState.Checked, cSurvey.cSurvey.DirectionEnum.Left, cSurvey.cSurvey.DirectionEnum.Vertical)) ' oSegment.Direction
    '                Case 12 'escludi
    '                    chkSegmentExclude.Checked = oValue ' oSegment.Exclude
    '            End Select
    '            bBeginEdit = False
    '        Catch ex As Exception
    '            e.Cancel = True
    '        End Try
    '    End If
    'End Sub

    Private Sub txtSegmentBearing_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentBearing.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListBearing)
    End Sub

    Private Sub txtSegmentDistance_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentDistance.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListDistance)
    End Sub

    Private Sub txtSegmentInclination_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentInclination.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListInclination)
    End Sub

    Private Sub txtSegmentLeft_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentLeft.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListL)
    End Sub

    Private Sub txtSegmentRight_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentRight.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListR)
    End Sub

    Private Sub txtSegmentUp_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentUp.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListU)
    End Sub

    Private Sub txtSegmentDown_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentDown.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListD)
    End Sub

    Private Sub cboSegmentFrom_Validated(sender As Object, e As System.EventArgs) Handles cboSegmentFrom.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListFrom)
    End Sub

    Private Sub cboSegmentTo_Validated(sender As Object, e As System.EventArgs) Handles cboSegmentTo.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListTo)
    End Sub

    Private Sub chkSegmentExclude_Validated(sender As Object, e As System.EventArgs) Handles chkSegmentExclude.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListExclude)
    End Sub

    Private Sub cboSegmentDirection_Validated(sender As Object, e As System.EventArgs) Handles cboSegmentDirection.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListProfileDirection)
    End Sub

    Private Sub txtPropProfileSplayProjectionAngle_ValueChanged(sender As System.Object, e As System.EventArgs) Handles txtPropProfileSplayProjectionAngle.ValueChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemProfileSplayBorder = .CurrentItem
                    oItem.SplayBorderProjectionAngle = txtPropProfileSplayProjectionAngle.Value
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub chkPropProfileShowSplayBorder_CheckedChanged(sender As System.Object, e As System.EventArgs)
        'Try
        '    If Not bDisabledObjectPropertyEvent Then
        '        With pGetCurrentDesignTools
        '            If .CurrentItem.Type = cIItem.cItemTypeEnum.CrossSection Then
        '                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
        '                oItem.ShowSplayBorder = chkPropProfileShowSplayBorder.Checked
        '            Else
        '                Dim oItem As cIItemProfileSplayBorder = .CurrentItem
        '                oItem.ShowSplayBorder = chkPropProfileShowSplayBorder.Checked
        '            End If
        '            Call .TakeUndoSnapshot()
        '        End With
        '        Call pObjectPropertyLoad()
        '        Call pMapInvalidate()
        '    End If
        'Catch
        'End Try
    End Sub

    Private Sub cboPropProfileSplayLineStyle_SelectedIndexChanged(sender As System.Object, e As System.EventArgs)
        'Try
        '    If Not bDisabledObjectPropertyEvent Then
        '        With pGetCurrentDesignTools
        '            If .CurrentItem.Type = cIItem.cItemTypeEnum.CrossSection Then
        '                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
        '                oItem.SplayBorderLineStyle = cboPropProfileSplayLineStyle.SelectedIndex
        '            Else
        '                Dim oItem As cIItemProfileSplayBorder = .CurrentItem
        '                oItem.SplayBorderLineStyle = cboPropProfileSplayLineStyle.SelectedIndex
        '            End If
        '            Call .TakeUndoSnapshot()
        '        End With
        '        Call pObjectPropertyLoad()
        '        Call pMapInvalidate()
        '    End If
        'Catch
        'End Try
    End Sub

    Private Sub mnuSegmentsReverse_Click(sender As System.Object, e As System.EventArgs)
        Dim oRows As cSegmentCollection = pSegmentsFromGridSelection()
        If oRows.Count > 0 Then
            If MsgBox(GetLocalizedString("main.warning5"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = vbYes Then

                Dim oCurrentSegment As cSegment = oTools.CurrentSegment
                Call oTools.SelectSegment(Nothing)
                bDisableSegmentsChangeEvent = True

                For Each oSegment As cSegment In oRows
                    Call oSegment.Reverse()
                Next
                bDisableSegmentsChangeEvent = False

                Call pSurveyCalculate(False)

                Call pSurveySegmentsRefresh()
                Call pMapInvalidate()

                Call oTools.SelectSegment(oCurrentSegment)
                Call pSegmentSelect(oCurrentSegment, False, False)
            End If
        End If
    End Sub

    Private Sub frmGrades_OnApply(ByVal Sender As frmGrades)
        Call pSurveyCalculate(True)
    End Sub

    Private Sub picMap_Resize(sender As Object, e As System.EventArgs) Handles picMap.Resize
        Call picMap.Invalidate()
    End Sub

    Private Sub cmdPropImageView_Click(sender As Object, e As EventArgs) Handles cmdPropImageView.Click
        Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    End Sub

    Private Sub cmdPropSketchView_Click(sender As Object, e As EventArgs) Handles cmdPropSketchView.Click
        Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    End Sub

    'Private Sub mnuDesignItemImageView_Click(sender As Object, e As EventArgs) Handles mnuDesignItemImageView.Click
    '    Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    'End Sub

    'Private Sub mnuDesignItemSketchView_Click(sender As Object, e As EventArgs) Handles mnuDesignItemSketchView.Click
    '    Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    'End Sub

    Private Sub pTextsShow()
        Call pDockContentShow(dockTexts, True)
    End Sub

    Private Sub pLinkedSurveyShow()
        Call pDockContentShow(dockLS, True)
    End Sub

    Private Sub pImageViewerShow(Attachment As cAttachmentsLink)
        Call oDockIV.Open(Attachment)
        Call pDockContentShow(dockIV, True)
    End Sub

    Private Sub pImageViewerShow(Item As cItem)
        Call oDockIV.Open(Item)
        Call pDockContentShow(dockIV, True)
    End Sub

    'Private Sub mnuDesignItemSketchMorphing_DropDownOpening(sender As Object, e As EventArgs)
    '    With pGetCurrentDesignTools()
    '        Dim oItemSketch As cIItemSketch = .CurrentItem
    '        mnuDesignItemSketchMorphingDisabled.Checked = oItemSketch.MorphingDisabled
    '    End With
    'End Sub

    'Private Sub mnuDesignItemSketchMorphingEnableAll_Click(sender As Object, e As EventArgs) Handles mnuDesignItemSketchMorphingEnableAll.Click
    '    Try
    '        Call oMousePointer.Push(Cursors.WaitCursor)
    '        For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
    '            If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
    '                Dim oItemSketch As cIItemSketch = oItem
    '                oItemSketch.MorphingDisabled = False
    '                Call pGetCurrentDesignTools.TakeUndoSnapshot()
    '            End If
    '        Next
    '        Call oMousePointer.Pop()
    '        Call pObjectPropertyLoad()
    '        Call pMapInvalidate()
    '    Catch ex As Exception
    '        Call pLogAdd(ex)
    '    End Try
    'End Sub

    'Private Sub mnuDesignItemSketchMorphingDisabled_Click(sender As Object, e As EventArgs) Handles mnuDesignItemSketchMorphingDisabled.Click
    '    Try
    '        If Not bDisabledObjectPropertyEvent Then
    '            With pGetCurrentDesignTools()
    '                Dim oItemSketch As cIItemSketch = .CurrentItem
    '                oItemSketch.MorphingDisabled = mnuDesignItemSketchMorphingDisabled.Checked
    '                Call .TakeUndoSnapshot()
    '            End With
    '            Call pObjectPropertyLoad()
    '            Call pMapInvalidate()
    '        End If
    '    Catch
    '    End Try
    'End Sub

    'Private Sub mnuDesignItemSketchMorphingDisableAll_Click(sender As Object, e As EventArgs) Handles mnuDesignItemSketchMorphingDisableAll.Click
    '    Try
    '        Call oMousePointer.Push(Cursors.WaitCursor)
    '        For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
    '            If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
    '                Dim oItemSketch As cIItemSketch = oItem
    '                oItemSketch.MorphingDisabled = True
    '                Call pGetCurrentDesignTools.TakeUndoSnapshot()
    '            End If
    '        Next
    '        Call oMousePointer.Pop()
    '        Call pObjectPropertyLoad()
    '        Call pMapInvalidate()
    '    Catch ex As Exception
    '        Call pLogAdd(ex)
    '    End Try
    'End Sub

    'Private Sub mnuDesignItemSketchVisibleHideAll_Click(sender As System.Object, e As System.EventArgs) Handles mnuDesignItemSketchVisibleHideAll.Click
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
    '        If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
    '            oItem.HiddenInDesign = True
    '        End If
    '    Next
    '    Call oMousePointer.Pop()
    '    Call pObjectPropertyLoad()
    '    'Call pSurveyLoadTreeLayers()
    '    Call pMapInvalidate()
    'End Sub

    'Private Sub mnuDesignItemSketchVisibleShowAll_Click(sender As Object, e As System.EventArgs) Handles mnuDesignItemSketchVisibleShowAll.Click
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
    '        If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
    '            oItem.HiddenInDesign = False
    '        End If
    '    Next
    '    Call oMousePointer.Pop()
    '    Call pObjectPropertyLoad()
    '    'Call pSurveyLoadTreeLayers()
    '    Call pMapInvalidate()
    'End Sub

    'Private Sub mnuDesignItemImageVisibleHideAll_Click(sender As Object, e As System.EventArgs) Handles mnuDesignItemImageVisibleHideAll.Click
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
    '        If oItem.Type = cIItem.cItemTypeEnum.Image Then
    '            oItem.HiddenInDesign = True
    '        End If
    '    Next
    '    Call oMousePointer.Pop()
    '    Call pObjectPropertyLoad()
    '    'Call pSurveyLoadTreeLayers()
    '    Call pMapInvalidate()
    'End Sub

    'Private Sub mnuDesignItemImageVisibleShowAll_Click(sender As Object, e As System.EventArgs) Handles mnuDesignItemImageVisibleShowAll.Click
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
    '        If oItem.Type = cIItem.cItemTypeEnum.Image Then
    '            oItem.HiddenInDesign = False
    '        End If
    '    Next
    '    Call oMousePointer.Pop()
    '    Call pObjectPropertyLoad()
    '    'Call pSurveyLoadTreeLayers()
    '    Call pMapInvalidate()
    'End Sub

    Private Sub cboPropBrushClipartCrop_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropBrushClipartCrop.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.ClipartCrop = cboPropBrushClipartCrop.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cmdSegmentSetCaveBranch_Click(sender As Object, e As EventArgs) Handles cmdSegmentSetCaveBranch.Click
        Dim oSegment As cSegment = oTools.CurrentSegment
        If Not oSegment Is Nothing Then
            cboSegmentCaveList.SelectedItem = btnMainCaveList.EditValue
            cboSegmentCaveBranchList.SelectedItem = btnMainCaveBranchList.EditValue
            Call pSegmentSave(oSegment)
            Call pPropertyItemSegment()
        End If
    End Sub

    Private Sub btnPropObjectsRefresh_Click(sender As Object, e As EventArgs) Handles btnPropObjectsRefresh.Click
        Call lvPropObjectsBinded.Items.Clear()
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        Dim oItems As List(Of cItem) = oItemSegment.Design.GetBindedItems(oItemSegment.Segment)
        For Each oItem As cItem In oItems
            Dim oListViewItem As ListViewItem = New ListViewItem
            oListViewItem.Text = oItem.Type.ToString & If(oItem.Name <> "", " - " & oItem.Name, "")
            oListViewItem.ToolTipText = oListViewItem.Text
            oListViewItem.ImageKey = "generic"
            oListViewItem.Tag = oItem
            Call lvPropObjectsBinded.Items.Add(oListViewItem)
        Next
    End Sub

    Private Sub lvPropObjectsBinded_SelectedIndexChanged(sender As Object, e As EventArgs) Handles lvPropObjectsBinded.SelectedIndexChanged
        If lvPropObjectsBinded.SelectedItems.Count > 0 Then
            btnPropObjectsSelect.Enabled = True
        Else
            btnPropObjectsSelect.Enabled = False
        End If
    End Sub

    Private Sub btnPropObjectsSelect_Click(sender As Object, e As EventArgs) Handles btnPropObjectsSelect.Click
        If lvPropObjectsBinded.SelectedItems.Count > 0 Then
            Dim oItem As cItem = lvPropObjectsBinded.SelectedItems(0).Tag
            Call pGetCurrentDesignTools.SelectItem(oItem)
        End If
    End Sub

    Private Sub lvPropObjectsBinded_DoubleClick(sender As Object, e As EventArgs) Handles lvPropObjectsBinded.DoubleClick
        Call btnPropObjectsSelect.PerformClick()
    End Sub

    'Private Sub cmdSegmentObjectProperty_Click(sender As Object, e As EventArgs)
    '    If Not oTools.CurrentSegment Is Nothing Then
    '        Dim oItemSegment As cItemSegment = New cItemSegment(oSurvey, oCurrentDesign, oTools.CurrentSegment)
    '        Call pGetCurrentDesignTools.SelectItem(oItemSegment)

    '        Call tabObjectProp.SelectTab(tabObjectPropSegment)
    '        Call pObjectPropShow(True)
    '        Call tabObjectProp.SelectTab(tabObjectPropMain)
    '    End If
    'End Sub

    Private Sub pMapCenterAndFitSelection()
        If Not pGetCurrentDesignTools.CurrentItem Is Nothing Then
            Call pMapCenterAndFit(pGetCurrentDesignTools.CurrentItem.GetBounds)
        End If
    End Sub

    Private Sub picMap_GotFocus(sender As Object, e As System.EventArgs) Handles picMap.GotFocus
        Call oClipboardViewer_ClipboardChanged(Nothing, Nothing)
    End Sub

    Private bPicMapPreventChangeFocus As Boolean

    Private Sub picMap_PreviewKeyDown(sender As Object, e As System.Windows.Forms.PreviewKeyDownEventArgs) Handles picMap.PreviewKeyDown
        Dim bHandled As Boolean
        Dim sStep As Single
        Select Case e.KeyCode
            Case Keys.B
                If e.Control AndAlso e.Alt Then
                    bDisabledObjectPropertyEvent = False
                    Call pObjectPropertyLoad()
                End If
            Case Keys.Q
                btnSnapToPointNone.Down = True
            Case Keys.A
                btnSnapToPoint0.Down = True
            Case Keys.S
                btnSnapToPoint1.Down = True
            Case Keys.D
                btnSnapToPoint2.Down = True

            Case Keys.Oemplus
                With pGetCurrentDesignTools()
                    If .IsInPointEdit Then
                        Call pItemAddPoint()
                    End If
                End With
            Case Keys.Right
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = 5
                        Else
                            sStep = 1
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeRotated Then
                                    Call .CurrentItem.Rotate(sStep)
                                    Call .TakeUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(sStep, 0)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(sStep, 0)
                                End If
                            End If
                            Call .TakeUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Down
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = 1 / 1.1
                        Else
                            sStep = 1 / 1.05
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeResized Then
                                    Call .CurrentItem.ResizeBy(sStep, sStep)
                                    Call .TakeUndoSnapshot()
                                ElseIf .CurrentItem.HaveSign Then
                                    'DirectCast(.CurrentItem,cIItemSign ).SignSize =
                                    'Call .TakeUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(0, sStep)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(0, sStep)
                                End If
                            End If
                            Call .TakeUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Up
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = 1.1
                        Else
                            sStep = 1.05
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeResized Then
                                    Call .CurrentItem.ResizeBy(sStep, sStep)
                                    Call .TakeUndoSnapshot()
                                ElseIf .CurrentItem.HaveSign Then
                                    'DirectCast(.CurrentItem,cIItemSign ).SignSize =
                                    'Call .TakeUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(0, -sStep)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(0, -sStep)
                                End If
                            End If
                            Call .TakeUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Left
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = -5
                        Else
                            sStep = -1
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeRotated Then
                                    Call .CurrentItem.Rotate(sStep)
                                    Call .TakeUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(-sStep, 0)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(-sStep, 0)
                                End If
                            End If
                            Call .TakeUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Tab
                If e.Shift Then
                    cmdPropPrev_Click(Nothing, Nothing)
                Else
                    cmdPropNext_Click(Nothing, Nothing)
                End If
            Case Keys.Escape
                Call modWMSManager.WMSDownloadFileCancelAsync()
        End Select
        'If bHandled Then
        '    'e.SuppressKeyPress = True
        '    'e.Handled = True
        'End If
    End Sub

    Private Delegate Sub pWMSChangeStateDelegate(Args As modWMSManager.cWMSStateChangeArgs)

    Private Sub pWMSChangeState(Args As modWMSManager.cWMSStateChangeArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSChangeStateDelegate(AddressOf pWMSChangeState), oArgs)
        Else
            Call pSurveyMainPropertiesPanelsRefresh()
        End If
    End Sub

    Private Delegate Sub pWMSDownloadAsyncProgressDelegate(Args As modWMSManager.cWMSDownloadAsyncProgressArgs)

    Private Sub pWMSDownloadAsyncProgress(Args As modWMSManager.cWMSDownloadAsyncProgressArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSDownloadAsyncProgressDelegate(AddressOf pWMSDownloadAsyncProgress), oArgs)
        Else
            Call pStatusProgress(Args.Percentage, String.Format(modMain.GetLocalizedString("main.textpart83"), Args.WMSName))
        End If
    End Sub

    Private Delegate Sub pWMSLogDelegate(Args As modWMSManager.cWMSLogArgs)

    Private Sub pWMSLog(Args As modWMSManager.cWMSLogArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSLogDelegate(AddressOf pWMSLog), oArgs)
        Else
            Call pLogAdd(Args.Type, Args.Text, True)
        End If
    End Sub

    Private Delegate Sub pWMSDownloadAsyncCompletedDelegate(Args As modWMSManager.cWMSDownloadAsyncCompletedArgs)

    Private Sub pWMSDownloadAsyncCompleted(Args As modWMSManager.cWMSDownloadAsyncCompletedArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSDownloadAsyncCompletedDelegate(AddressOf pWMSDownloadAsyncCompleted), oArgs)
        Else
            If Args.Cancelled Then
                Call pStatusProgress(1, modMain.GetLocalizedString("main.textpart84"))
            Else
                Call pStatusProgress(1, modMain.GetLocalizedString("main.textpart85"))
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                    Call p3DInvalidate(cHolosViewer.InvalidateType.SurfaceTexture)
                Else
                    Call pMapInvalidate()
                End If
            End If
        End If
    End Sub

    Private Sub cmdPropPointsSequencesDivide_Click(sender As System.Object, e As System.EventArgs)
        Call pSequenceDivide()
    End Sub

    Private Sub cmdPropPointsSequencesCombine_Click(sender As System.Object, e As System.EventArgs)
        Call pSequenceCombine()
    End Sub

    Private Sub cmdPropPointsSequencesDelete_Click(sender As System.Object, e As System.EventArgs)
        Call pSequenceDelete()
    End Sub

    Private Sub cmdPropPointsSequencesClose_Click(sender As System.Object, e As System.EventArgs)
        Call pSequenceClose()
    End Sub

    Private Sub cmdPropPointsSequencesInvert_Click(sender As System.Object, e As System.EventArgs)
        Call pSequenceRevert()
    End Sub

    'Private Sub mnuDesignItemPoint_Opening(sender As System.Object, e As System.ComponentModel.CancelEventArgs) Handles mnuDesignItemPoint.Opening
    '    Dim bItemPointConvertVisible As Boolean = bIsInDebug And pGetCurrentDesignTools.CurrentItem.HaveLineType
    '    If pGetCurrentDesignTools.IsNewPoint Then
    '        mnuDesignItemPointDelete.Visible = False

    '        mnuDesignItemPointSegmentBar.Visible = False
    '        mnuDesignItemPointSegmentDivide.Visible = False             'to be enabled in future
    '        mnuDesignItemPointSegmentDivideAndJoin.Visible = False   'to be enabled in future
    '        mnuDesignItemPointSegmentCombine.Visible = False
    '        mnuDesignItemPointDeleteSegment.Visible = False
    '        mnuDesignItemPointCloseSegment.Visible = False
    '        mnuDesignItemPointRevertSegment.Visible = False

    '        mnuDesignItemPointConvertBar.Visible = False
    '        mnuDesignItemPointConvert.Visible = False

    '        mnuDesignItemAreaFromSequenceBar.Visible = False
    '        mnuDesignItemAreaFromSequence.Visible = False

    '        mnuDesignItemPointNewFromSequenceBar.Visible = False
    '        mnuDesignItemPointNewFromSequence0.Visible = False
    '        mnuDesignItemPointNewFromSequence1.Visible = False

    '        mnuDesignItemPointPlotBar.Visible = False
    '        mnuDesignItemPointPlot.Visible = False
    '    Else
    '        mnuDesignItemPointDelete.Visible = True

    '        Dim iType As cPoint.PointTypeEnum = pGetCurrentDesignTools.CurrentItemPoint.Type
    '        mnuDesignItemPointAdd.Enabled = Not cPoint.IsControlPoint(iType)
    '        mnuDesignItemPointDelete.Enabled = Not cPoint.IsControlPoint(iType)

    '        mnuDesignItemPointSegmentBar.Visible = True
    '        mnuDesignItemPointSegmentDivide.Visible = True
    '        mnuDesignItemPointSegmentDivideAndJoin.Visible = True
    '        mnuDesignItemPointSegmentCombine.Visible = True
    '        mnuDesignItemPointSegmentCombine.Enabled = Not (cPoint.IsFirstOfAll(iType) Or cPoint.IsLastOfAll(iType)) And (cPoint.IsFirst(iType) Or cPoint.IsLast(iType))
    '        mnuDesignItemPointDeleteSegment.Visible = True
    '        mnuDesignItemPointCloseSegment.Visible = True
    '        mnuDesignItemPointRevertSegment.Visible = True

    '        mnuDesignItemPointSegmentDivide.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)
    '        mnuDesignItemPointSegmentDivideAndJoin.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)

    '        mnuDesignItemPointConvertBar.Visible = bItemPointConvertVisible
    '        mnuDesignItemPointConvert.Visible = bItemPointConvertVisible

    '        Dim bAreaFromSequenceVisible As Boolean = pGetCurrentDesignTools.CurrentItem.HaveLineType And pGetCurrentDesignTools.CurrentItem.HaveEditablePoints And pGetCurrentDesignTools.CurrentItem.Layer.Type > cLayers.LayerTypeEnum.Soil
    '        mnuDesignItemAreaFromSequenceBar.Visible = bAreaFromSequenceVisible
    '        mnuDesignItemAreaFromSequence.Visible = bAreaFromSequenceVisible

    '        mnuDesignItemPointNewFromSequenceBar.Visible = True
    '        mnuDesignItemPointNewFromSequence0.Visible = True
    '        mnuDesignItemPointNewFromSequence1.Visible = True

    '        mnuDesignItemPointPlotBar.Visible = True
    '        mnuDesignItemPointPlot.Visible = True
    '    End If
    'End Sub

    Private Sub cboPropBrushPatternType_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropBrushPatternType.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.PatternType = cboPropBrushPatternType.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub cboPropBrushPatternPen_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropBrushPatternPen.SelectedIndexChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Brush.PatternPenStyle = cboPropBrushPatternPen.SelectedIndex
                    Call .TakeUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    'Private Sub mnuSegmentsTrigPoints_DropDownOpening(sender As Object, e As EventArgs)
    '    If pGetCurrentTools.CurrentSegment Is Nothing Then
    '        mnuSegmentsTrigPointsFrom.Enabled = False
    '        mnuSegmentsTrigPointsTo.Enabled = False
    '    Else
    '        Dim sPivotTrigPointFrom As String = "" & pGetCurrentTools.CurrentSegment.From
    '        mnuSegmentsTrigPointsFrom.Enabled = oSurvey.TrigPoints.Contains(sPivotTrigPointFrom)
    '        Dim sPivotTrigPointTo As String = "" & pGetCurrentTools.CurrentSegment.To
    '        mnuSegmentsTrigPointsTo.Enabled = oSurvey.TrigPoints.Contains(sPivotTrigPointTo)
    '    End If
    'End Sub

    Private Function pSegmentsIsProfileBinded(Segments As cSegmentCollection) As Boolean
        For Each oSegment As cSegment In Segments
            If oSegment.IsProfileBinded Then Return True
        Next
        Return False
    End Function

    Private Function pSegmentsIsPlanBinded(Segments As cSegmentCollection) As Boolean
        For Each oSegment As cSegment In Segments
            If oSegment.IsPlanBinded Then Return True
        Next
        Return False
    End Function

    Private Sub optPropTextAlignLeft_CheckedChanged(sender As Object, e As EventArgs) Handles optPropTextAlignLeft.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If optPropTextAlignLeft.Checked Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemLineableText = .CurrentItem
                    oItem.TextAlignment = cIItemLineableText.TextAlignmentEnum.Left
                    optPropTextAlignCenter.Checked = False
                    optPropTextAlignRight.Checked = False
                    Debug.Print(.CurrentItem.Name & ">SETLEFT")
                    Call .TakeUndoSnapshot()
                End With
                'Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Else
                If Not optPropTextAlignCenter.Checked AndAlso Not optPropTextAlignRight.Checked Then
                    optPropTextAlignLeft.Checked = True
                End If
            End If
        End If
    End Sub

    Private Sub optPropTextAlignCenter_CheckedChanged(sender As Object, e As EventArgs) Handles optPropTextAlignCenter.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If optPropTextAlignCenter.Checked Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemLineableText = .CurrentItem
                    oItem.TextAlignment = cIItemLineableText.TextAlignmentEnum.Center
                    optPropTextAlignLeft.Checked = False
                    optPropTextAlignRight.Checked = False
                    Debug.Print(.CurrentItem.Name & ">SETCENTER")
                    Call .TakeUndoSnapshot()
                End With
                'Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Else
                If Not optPropTextAlignLeft.Checked AndAlso Not optPropTextAlignRight.Checked Then
                    optPropTextAlignCenter.Checked = True
                End If
            End If
        End If
    End Sub

    Private Sub optPropTextAlignRight_CheckedChanged(sender As Object, e As EventArgs) Handles optPropTextAlignRight.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If optPropTextAlignRight.Checked Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemLineableText = .CurrentItem
                    oItem.TextAlignment = cIItemLineableText.TextAlignmentEnum.Right
                    optPropTextAlignLeft.Checked = False
                    optPropTextAlignCenter.Checked = False
                    Debug.Print(.CurrentItem.Name & ">SETRIGHT")
                    Call .TakeUndoSnapshot()
                End With
                'Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Else
                If Not optPropTextAlignLeft.Checked AndAlso Not optPropTextAlignCenter.Checked Then
                    optPropTextAlignRight.Checked = True
                End If
            End If
        End If
    End Sub

    Private Sub optPropTextVAlignTop_CheckedChanged(sender As Object, e As EventArgs) Handles optPropTextVAlignTop.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If optPropTextVAlignTop.Checked Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemVerticalLineableText = .CurrentItem
                    oItem.TextVerticalAlignment = cIItemVerticalLineableText.TextVerticalAlignmentEnum.Top
                    optPropTextVAlignCenter.Checked = False
                    optPropTextVAlignBottom.Checked = False
                    Debug.Print(.CurrentItem.Name & ">SETTOP")
                    Call .TakeUndoSnapshot()
                End With
                'Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Else
                If Not optPropTextVAlignCenter.Checked AndAlso Not optPropTextVAlignBottom.Checked Then
                    optPropTextVAlignTop.Checked = True
                End If
            End If
        End If
    End Sub

    Private Sub optPropTextVAlignCenter_CheckedChanged(sender As Object, e As EventArgs) Handles optPropTextVAlignCenter.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If optPropTextVAlignCenter.Checked Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemVerticalLineableText = .CurrentItem
                    oItem.TextVerticalAlignment = cIItemVerticalLineableText.TextVerticalAlignmentEnum.Middle
                    optPropTextVAlignTop.Checked = False
                    optPropTextVAlignBottom.Checked = False
                    Debug.Print(.CurrentItem.Name & ">SETCENTER")
                    Call .TakeUndoSnapshot()
                End With
                'Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Else
                If Not optPropTextVAlignTop.Checked AndAlso Not optPropTextVAlignBottom.Checked Then
                    optPropTextVAlignCenter.Checked = True
                End If
            End If
        End If
    End Sub

    Private Sub optPropTextVAlignBottom_CheckedChanged(sender As Object, e As EventArgs) Handles optPropTextVAlignBottom.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If optPropTextVAlignBottom.Checked Then
                With pGetCurrentDesignTools()
                    Dim oItem As cIItemVerticalLineableText = .CurrentItem
                    oItem.TextVerticalAlignment = cIItemVerticalLineableText.TextVerticalAlignmentEnum.Bottom
                    optPropTextVAlignTop.Checked = False
                    optPropTextVAlignCenter.Checked = False
                    Debug.Print(.CurrentItem.Name & ">SETBOTTOM")
                    Call .TakeUndoSnapshot()
                End With
                'Call pObjectPropertyLoad()
                Call pMapInvalidate()
            Else
                If Not optPropTextVAlignTop.Checked AndAlso Not optPropTextVAlignCenter.Checked Then
                    optPropTextVAlignBottom.Checked = True
                End If
            End If
        End If
    End Sub

    Private Sub pDesignSnapToGrid(SnapToGrid As Boolean)
        btnAlignToGrid.Checked = SnapToGrid
        btnAlignToGridSize.Enabled = SnapToGrid
        If SnapToGrid Then
            pnlStatusDesignSnapToGrid.ImageOptions.SvgImage = My.Resources.snap_to_grid
        Else
            pnlStatusDesignSnapToGrid.ImageOptions.SvgImage = Nothing
        End If
    End Sub

    Private Sub pItemHorizontalAlign(Alignment As cItemItems.HorizontalAlignmentEnum)
        With pGetCurrentDesignTools()
            Dim oItems As cItemItems = .CurrentItem
            Call oItems.HorizontalAlign(Alignment)
            Call .TakeUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub pItemVerticalAlign(Alignment As cItemItems.VerticalAlignmentEnum)
        With pGetCurrentDesignTools()
            Dim oItems As cItemItems = .CurrentItem
            Call oItems.VerticalAlign(Alignment)
            Call .TakeUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub picMap_Validating(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles picMap.Validating
        e.Cancel = bPicMapPreventChangeFocus
        bPicMapPreventChangeFocus = False
    End Sub

    Private Sub pItemSpaceH()
        With pGetCurrentDesignTools()
            Dim oItems As cItemItems = .CurrentItem
            If My.Computer.Keyboard.ShiftKeyDown Then
                Call oItems.HorizontalSpace(cItemItems.SpaceEnum.ToMaximum)
            Else
                Call oItems.HorizontalSpace(cItemItems.SpaceEnum.ToMinimum)
            End If
            Call .TakeUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub pItemSpaceV()
        With pGetCurrentDesignTools()
            Dim oItems As cItemItems = .CurrentItem
            If My.Computer.Keyboard.ShiftKeyDown Then
                Call oItems.VerticalSpace(cItemItems.SpaceEnum.ToMaximum)
            Else
                Call oItems.VerticalSpace(cItemItems.SpaceEnum.ToMinimum)
            End If
            Call .TakeUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub btnPropWarningClose_Click(sender As Object, e As EventArgs) Handles btnPropWarningClose.Click
        Call pPropPopupHide()
    End Sub

    Private Sub pPropPopupHide()
        If pnlPropPopup.Visible Then pnlPropPopup.Visible = False
    End Sub

    Private Sub pPropPopupShow(ByVal Type As String, ByVal Text As String)
        With pnlPropPopup
            Dim bShow As Boolean
            Select Case Type.ToLower
                Case "error"
                    'picPropPopupWarning.Image = imlPopup.Images("error")
                    .BackColor = Color.PeachPuff
                    bShow = True
                Case "warning"
                    'picPropPopupWarning.Image = imlPopup.Images("warning")
                    .BackColor = Color.LightYellow
                    bShow = True
            End Select
            'If Type.ToLower.EndsWith(".error") Then
            '    picPopupWarning.Image = imlNotify.Images("error")
            '    .BackColor = Color.PeachPuff
            '    bShow = True
            'End If
            'If Type.ToLower.EndsWith(".warning") Then
            '    picPopupWarning.Image = imlNotify.Images("warning")
            '    .BackColor = Color.LightYellow
            '    bShow = True
            'End If
            If bShow Then
                lblPropPopupWarning.Text = Text
                Call tipDefault.SetToolTip(lblPropPopupWarning, Text)
                .Visible = True
            End If
        End With
    End Sub

    'Private Sub mnuLayersAndItemsSelectAllInCurrentLevel_Click(sender As Object, e As EventArgs) Handles mnuLayersAndItemsSelectAllInCurrentLevel.Click
    '    Dim oLayer As cLayer
    '    If TypeOf tvLayers2.SelectedObject Is cItem Then
    '        Dim oItem As cItem = tvLayers2.SelectedObject
    '        oLayer = oItem.Layer
    '    ElseIf TypeOf tvLayers2.SelectedObject Is cLayer Then
    '        oLayer = tvLayers2.SelectedObject
    '    End If
    '    If Not IsNothing(oLayer) Then
    '        Call pGetCurrentDesignTools.SelectLayer(oLayer)
    '        Call pSurveyLayerSelectAllInCurrentLayer()
    '    End If
    'End Sub

    Private Sub mnuFileCleanUp_Click(sender As Object, e As EventArgs)
        Call pSurveyCleanUp()
    End Sub

    Private Sub pClipboardSelectAll()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart1"))
        If grdSegments.Focused Then
            Call grdViewSegments.SelectAll()
            Call pStatusSet(GetLocalizedString("main.textpart2"))
        ElseIf grdTrigPoints.Focused Then
            Call grdViewTrigpoints.SelectAll()
            Call pStatusSet(GetLocalizedString("main.textpart2"))
        ElseIf picMap.Focused Then
            Dim oItems As List(Of cItem) = pGetCurrentDesignTools.CurrentLayer.GetAllVisibleItems(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            If oItems.Count <> 0 Then
                Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oItemItems.AddRange(oItems)
                Call pGetCurrentDesignTools.SelectItem(oItemItems)
                Call pStatusSet(GetLocalizedString("main.textpart2"))
            Else
                Call pStatusSet(GetLocalizedString("main.textpart3"))
            End If
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub oSurvey_OnWarpingDetails(Sender As cSurvey.cSurvey, Args As cSurvey.cSurvey.OnWarpingDetailsEventArgs) Handles oSurvey.OnWarpingDetails
        If bDisablewarpingDetails Then
            Args.Result = DialogResult.OK
        Else
            Using frmWD As frmWarpingDetails = New frmWarpingDetails(Args.SegmentsToProcess, Args.DesignType)
                Args.Result = frmWD.ShowDialog(Me)
                oSurvey.Properties.ShowWarpingDetails = Not frmWD.chkDontShowWarpingDetails.Checked
            End Using
        End If
    End Sub


    Private Sub oSurvey_OnCleanUpFoundUndefinedCavesEvent(Sender As cSurvey.cSurvey, Args As cSurvey.cSurvey.OnCleanUpFoundUndefinedCavesEventArgs) Handles oSurvey.OnCleanUpFoundUndefinedCavesEvent
        Using frmSCUUC As frmSurveyCleanUpUndefinedCaves = New frmSurveyCleanUpUndefinedCaves(oSurvey, Args.Source, Args.ListOfUndefinedCaves)
            If Not frmSCUUC.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Args.Cancel = True
            End If
        End Using
    End Sub

    Private Sub pPointSequencesTo(NewLineType As cIItemLine.LineTypeEnum, TakeUndoSnapshot As Boolean)
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oSequence As cSequence = oPoint.GetSequence
            If Not oSequence Is Nothing Then
                Dim oNewSequence As cSequence = Nothing
                Select Case NewLineType
                    Case cIItemLine.LineTypeEnum.Splines
                        oNewSequence = oSequence.ToSpline()
                    Case cIItemLine.LineTypeEnum.Lines
                        oNewSequence = oSequence.ToLine()
                    Case cIItemLine.LineTypeEnum.Beziers
                        oNewSequence = oSequence.ToBezier()
                    Case Else

                End Select
                If Not oNewSequence Is Nothing Then
                    Call .SelectPoint(Nothing)
                    Call .TakeUndoSnapshot()
                End If
            End If
        End With
    End Sub

    'Private Sub pSequenceToBezier()
    '    With pGetCurrentDesignTools()
    '        Dim oItem As cItem = .CurrentItem
    '        Dim oPoint As cPoint = .CurrentItemPoint
    '        Dim oSequence As cSequence = oItem.Points.GetSequence(oPoint)
    '        If Not oSequence Is Nothing Then
    '            If Not oSequence.ToBezier Is Nothing Then
    '                Call .SelectPoint(Nothing)
    '                Call .TakeUndoSnapshot()
    '            End If
    '        End If
    '    End With
    'End Sub

    'Private Sub pSequenceToSpline()
    '    With pGetCurrentDesignTools()
    '        Dim oItem As cItem = .CurrentItem
    '        Dim oPoint As cPoint = .CurrentItemPoint
    '        Dim oSequence As cSequence = oItem.Points.GetSequence(oPoint)
    '        If Not oSequence Is Nothing Then
    '            If Not oSequence.ToSpline Is Nothing Then
    '                .SelectPoint(Nothing)
    '                Call .TakeUndoSnapshot()
    '            End If
    '        End If
    '    End With
    'End Sub

    'Private Sub pSequenceToLine()
    '    With pGetCurrentDesignTools()
    '        Dim oItem As cItem = .CurrentItem
    '        Dim oPoint As cPoint = .CurrentItemPoint
    '        Dim oSequence As cSequence = oItem.Points.GetSequence(oPoint)
    '        If Not oSequence Is Nothing Then
    '            If Not oSequence.ToLine Is Nothing Then
    '                .SelectPoint(Nothing)
    '                Call .TakeUndoSnapshot()
    '            End If
    '        End If
    '    End With
    'End Sub

    'used in designer when in bezier mode and for line type conversion...
    Private Sub pSequencesTo(NewLineType As cIItemLine.LineTypeEnum, AlsoCustomized As Boolean, TakeUndoSnapshot As Boolean)
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim iItemLineType As cIItemLine.LineTypeEnum = DirectCast(oItem, cIItemLine).LineType
            Dim oNewSequences As List(Of cSequence) = New List(Of cSequence)
            For Each oSequence As cSequence In oItem.Points.GetSequences
                If oSequence.GetLineType(iItemLineType) = NewLineType Then
                    Call oNewSequences.Add(oSequence)
                Else
                    If (oSequence.GetLineType(iItemLineType) = iItemLineType) OrElse (AlsoCustomized AndAlso oSequence.GetLineType(iItemLineType) <> iItemLineType) Then
                        Dim oNewSequence As cSequence = Nothing
                        Select Case NewLineType
                            Case cIItemLine.LineTypeEnum.Lines
                                oNewSequence = modPaint.ToStraightLine(oSurvey, oSequence, iItemLineType)
                            Case cIItemLine.LineTypeEnum.Splines
                                oNewSequence = modPaint.ToSpline(oSurvey, oSequence, iItemLineType)
                            Case cIItemLine.LineTypeEnum.Beziers
                                oNewSequence = modPaint.ToBezier(oSurvey, oSequence, iItemLineType)
                        End Select
                        If Not oNewSequence Is Nothing Then
                            Call oNewSequences.Add(oNewSequence)
                        End If
                    Else
                        Call oNewSequences.Add(oSequence)
                    End If
                End If
            Next
            Call oItem.Points.BeginUpdate()
            Call oItem.Points.Clear()
            For Each oNewSequence As cSequence In oNewSequences
                Call oItem.Points.AddRange(oNewSequence)
            Next
            DirectCast(oItem, cIItemLine).LineType = NewLineType
            Call oItem.Points.EndUpdate()
            If TakeUndoSnapshot Then Call .TakeUndoSnapshot()
        End With
    End Sub

    Private Sub mnuDesignItemPointPlot_Click(sender As Object, e As EventArgs)

    End Sub

    Private Sub frmProg_Disposed(sender As Object, e As EventArgs) Handles frmProg.Disposed
        frmProg = Nothing
    End Sub

    Private Sub frmProg_FormClosed(sender As Object, e As FormClosedEventArgs) Handles frmProg.FormClosed
        frmProg = Nothing
    End Sub

    Private Sub txtPropProfileSplayMaxVariationAngle_ValueChanged(sender As Object, e As EventArgs) Handles txtPropProfileSplayMaxVariationAngle.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileSplayBorder = .CurrentItem
                oItem.SplayBorderMaxAngleVariation = txtPropProfileSplayMaxVariationAngle.Value
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboTrigpointCoordinateGeo_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboTrigpointCoordinateGeo.SelectedIndexChanged
        Select Case cboTrigpointCoordinateGeo.SelectedIndex
            Case 0
                pnlTrigpointCoordinateWGS84.Visible = True
                pnlTrigpointCoordinateUTM.Visible = False
                If Not bDisableTrigpointsChangeEvent Then
                    Dim oCoordinate As cCoordinate = New cCoordinate(txtTrigpointCoordinateX.Text, txtTrigpointCoordinateY.Text, cboTrigpointCoordinateBand.Text, cboTrigpointCoordinateZone.Text, txtTrigpointCoordinateAlt.Text)
                    Call oCoordinate.Convert("WGS84", oSurvey.Properties.GPS.Format)
                    txtTrigpointCoordinateLat.Text = oCoordinate.Latitude
                    txtTrigpointCoordinateLong.Text = oCoordinate.Longitude
                    cboTrigpointCoordinateFormat.Text = oCoordinate.Format
                    txtTrigpointCoordinateAlt.Text = oCoordinate.Altitude
                End If
            Case Else
                pnlTrigpointCoordinateWGS84.Visible = False
                pnlTrigpointCoordinateUTM.Visible = True
                If Not bDisableTrigpointsChangeEvent Then
                    Dim oCoordinate As cCoordinate = New cCoordinate(txtTrigpointCoordinateLat.Text, txtTrigpointCoordinateLong.Text, txtTrigpointCoordinateAlt.Text, cboTrigpointCoordinateFormat.Text)
                    Call oCoordinate.Convert("WGS84/UTM")
                    txtTrigpointCoordinateX.Text = oCoordinate.X
                    txtTrigpointCoordinateY.Text = oCoordinate.Y
                    cboTrigpointCoordinateBand.Text = oCoordinate.Band
                    cboTrigpointCoordinateZone.Text = oCoordinate.Zone
                    txtTrigpointCoordinateAlt.Text = oCoordinate.Altitude
                End If
        End Select
    End Sub

    Private Sub cboPropPlanSplayLineStyle_SelectedIndexChanged(sender As Object, e As EventArgs)
        'Try
        '    If Not bDisabledObjectPropertyEvent Then
        '        With pGetCurrentDesignTools
        '            Dim oItem As cIItemPlanSplayBorder = .CurrentItem
        '            oItem.SplayBorderLineStyle = cboPropPlanSplayLineStyle.SelectedIndex
        '            Call .TakeUndoSnapshot()
        '        End With
        '        Call pObjectPropertyLoad()
        '        Call pMapInvalidate()
        '    End If
        'Catch
        'End Try
    End Sub

    Private Sub txtPropPlanSplayMaxVariationDelta_ValueChanged(sender As Object, e As EventArgs) Handles txtPropPlanSplayMaxVariationDelta.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanSplayBorder = .CurrentItem
                oItem.SplayBorderMaxDeltaVariation = txtPropPlanSplayMaxVariationDelta.Value
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropPlanSplayPlanDeltaZ_ValueChanged(sender As Object, e As EventArgs) Handles txtPropPlanSplayPlanDeltaZ.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanSplayBorder = .CurrentItem
                oItem.SplayBorderProjectionDeltaZ = txtPropPlanSplayPlanDeltaZ.Value
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    'Private Sub mnuSegmentsDataFields_Opening(sender As System.Object, e As System.ComponentModel.CancelEventArgs) Handles mnuSegmentsDataProperties.Opening
    '    If prpSegmentDataProperties.SelectedGridItem Is Nothing Then
    '        mnuSegmentsDataPropertiesDelete.Enabled = False
    '    Else
    '        If prpSegmentDataProperties.SelectedGridItem.PropertyDescriptor Is Nothing Then
    '            mnuSegmentsDataPropertiesDelete.Enabled = False
    '        Else
    '            mnuSegmentsDataPropertiesDelete.Enabled = prpSegmentDataProperties.SelectedGridItem.PropertyDescriptor.CanResetValue(prpSegmentDataProperties.SelectedObject)
    '        End If
    '    End If
    'End Sub

    'Private Sub mnuSegmentsDataPropertiesDelete_Click(sender As System.Object, e As System.EventArgs) Handles mnuSegmentsDataPropertiesDelete.Click
    '    Call prpSegmentDataProperties.SelectedGridItem.PropertyDescriptor.ResetValue(prpSegmentDataProperties.SelectedObject)
    '    Call prpSegmentDataProperties.Refresh()
    'End Sub

    'Private Sub mnuDesignDataPropertiesEdit_Click(sender As System.Object, e As System.EventArgs) Handles mnuDesignDataPropertiesEdit.Click
    '    Using frmDFE As frmDataFieldsEditor = New frmDataFieldsEditor(oSurvey.Properties.DataTables.DesignItems)
    '        If frmDFE.ShowDialog(Me) = vbOK Then
    '            prpPropDesignDataProperties.SelectedObject = pGetCurrentDesignTools.CurrentItem.DataProperties.GetClass
    '        End If
    '    End Using
    'End Sub

    'Private Sub mnuDesignDataPropertiesDelete_Click(sender As System.Object, e As System.EventArgs) Handles mnuDesignDataPropertiesDelete.Click
    '    Call prpPropDesignDataProperties.SelectedGridItem.PropertyDescriptor.ResetValue(prpPropDesignDataProperties.SelectedObject)
    '    Call prpPropDesignDataProperties.Refresh()
    'End Sub

    Private Sub chkPropShowDataProperties_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropShowDataProperties.CheckedChanged
        If chkPropShowDataProperties.Checked Then
            'chkPropShowDataProperties.ImageOptions.SvgImage = cSurveyPC.My.Resources.Resources.collapsefieldpivottable
            pnlPropDataProperties.Height = 200
        Else
            'chkPropShowDataProperties.ImageOptions.SvgImage = cSurveyPC.My.Resources.Resources.expandfieldpivottable
            pnlPropDataProperties.Height = 0
        End If
    End Sub

    'Private Sub mnuTrigpointDataPropertiesEdit_Click(sender As Object, e As EventArgs) Handles mnuTrigpointDataPropertiesEdit.Click
    '    Using frmDFE As frmDataFieldsEditor = New frmDataFieldsEditor(oSurvey.Properties.DataTables.Trigpoints)
    '        If frmDFE.ShowDialog(Me) = vbOK Then
    '            If oTools.CurrentTrigpoint Is Nothing Then
    '                prpTrigpointDataProperties.SelectedObject = Nothing
    '            Else
    '                prpTrigpointDataProperties.SelectedObject = oTools.CurrentTrigpoint.DataProperties.GetClass
    '            End If
    '        End If
    '    End Using
    'End Sub

    'Private Sub mnuTrigpointDataPropertiesDelete_Click(sender As Object, e As EventArgs) Handles mnuTrigpointDataPropertiesDelete.Click
    '    Call prpTrigpointDataProperties.SelectedGridItem.PropertyDescriptor.ResetValue(prpTrigpointDataProperties.SelectedObject)
    '    Call prpTrigpointDataProperties.Refresh()
    'End Sub

    Private Sub cboPropQuotaTextPosition_SelectedIndexChanged(sender As System.Object, e As System.EventArgs) Handles cboPropQuotaTextPosition.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemQuota = .CurrentItem
                oItem.QuotaTextPosition = cboPropQuotaTextPosition.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropSetCurrentCaveBranch_Click(sender As System.Object, e As System.EventArgs) Handles cmdPropSetCurrentCaveBranch.Click
        Call btnDesignSetCurrentCaveBranch.PerformClick()
    End Sub

    Private Sub pSurveyLayersFilterEdit()
        Using frmF As frmItemsFilter = New frmItemsFilter(oSurvey, pGetCurrentDesignTools.Filter)
            AddHandler frmF.OnApply, AddressOf frmItemsFilter_OnApply
            Call frmF.ShowDialog(Me)
        End Using
    End Sub

    Private Sub pSurveyLayersFilterApply(Optional FullRefresh As Boolean = True, Optional RefreshTreeLayers As Boolean = True)
        If Not bDisableFilterItemEvent Then
            bDisableFilterItemEvent = True
            Dim oDesignTools As cEditDesignTools = pGetCurrentDesignTools()
            If oDesignTools.IsFiltered Then
                If Not btnFilterFiltered.Checked Then btnFilterFiltered.Checked = True
                If btnFilterWhiteboard.Checked <> oDesignTools.FilterWhiteBoard Then btnFilterWhiteboard.Checked = oDesignTools.FilterWhiteBoard
                btnFilterWhiteboard.Enabled = btnFilterFiltered.Checked
                If btnFilterWhiteboard.Checked <> oDesignTools.FilterWhiteBoard Then btnFilterWhiteboard.Checked = oDesignTools.FilterWhiteBoard
                btnFilterWhiteboard.Enabled = btnFilterFiltered.Checked
                If btnFilterInvertFilter.Checked <> oDesignTools.FilterReversed Then btnFilterInvertFilter.Checked = oDesignTools.FilterReversed
                btnFilterInvertFilter.Enabled = btnFilterFiltered.Checked
                If FullRefresh Then
                    Call oMousePointer.Push(Cursors.WaitCursor)
                    Threading.Tasks.Parallel.ForEach(Of cItem)(oCurrentDesign.GetAllItems, Sub(oItem)
                                                                                               oItem.FilteredInDesign = oDesignTools.Filter.Apply(oItem)
                                                                                           End Sub)
                    Call oMousePointer.Pop()
                End If
            Else
                If btnFilterFiltered.Checked Then btnFilterFiltered.Checked = False
                If btnFilterWhiteboard.Checked Then btnFilterWhiteboard.Checked = False
                btnFilterWhiteboard.Enabled = False
                btnFilterInvertFilter.Enabled = False
                If FullRefresh Then
                    Call oMousePointer.Push(Cursors.WaitCursor)
                    Threading.Tasks.Parallel.ForEach(Of cItem)(oCurrentDesign.GetAllItems, Sub(oItem)
                                                                                               oItem.FilteredInDesign = False
                                                                                           End Sub)
                    'Dim oItems As List(Of cItem) = oCurrentDesign.GetAllItems
                    'For Each oItem As cItem In oItems
                    '    oItem.FilteredInDesign = False
                    'Next
                    Call oMousePointer.Pop()
                End If
            End If
            If RefreshTreeLayers Then
                Call pMapInvalidate()
            End If
            bDisableFilterItemEvent = False
        End If
    End Sub

    Private Sub frmItemsFilter_OnApply(ByVal Sender As frmItemsFilter)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pGetCurrentDesignTools.FilterApply()
        Call oMousePointer.Pop()
    End Sub

    'Private Sub mnuLayersAndItemsFiltered_Click(sender As System.Object, e As System.EventArgs) Handles mnuLayersAndItemsFiltered.Click
    '    mnuLayersAndItemsFiltered.Checked = Not mnuLayersAndItemsFiltered.Checked
    '    chkLayerFiltered.Checked = mnuLayersAndItemsFiltered.Checked
    'End Sub

    'Private Sub mnuLayersAndItemsFilterEdit_Click(sender As System.Object, e As System.EventArgs) Handles mnuLayersAndItemsFilterEdit.Click
    '    Call pSurveyLayersFilterEdit()
    'End Sub

    'Private Sub mnuLayersAndItemsSelectAll_Click(sender As System.Object, e As System.EventArgs) Handles mnuLayersAndItemsSelectAll.Click
    '    Call pSurveyLayerSelectAll()
    'End Sub

    Private Sub chkSegmentVirtual_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentVirtual.CheckedChanged
        If chkSegmentVirtual.Checked Then
            cboSessionList.Enabled = False
            txtSegmentDistance.Enabled = False
            txtSegmentBearing.Enabled = False
            txtSegmentInclination.Enabled = False
            txtSegmentLeft.Enabled = False
            txtSegmentRight.Enabled = False
            txtSegmentUp.Enabled = False
            txtSegmentDown.Enabled = False
        Else
            cboSessionList.Enabled = True
            txtSegmentDistance.Enabled = True
            txtSegmentBearing.Enabled = True
            txtSegmentInclination.Enabled = True
            txtSegmentLeft.Enabled = True
            txtSegmentRight.Enabled = True
            txtSegmentUp.Enabled = True
            txtSegmentDown.Enabled = True
        End If
    End Sub

    Private Sub cboPropPlanSplayPlanProjectionPlanType_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropPlanSplayPlanProjectionType.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanSplayBorder = .CurrentItem
                oItem.SplayBorderProjectionType = cboPropPlanSplayPlanProjectionType.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub mnuFileImportTracks_Click(sender As Object, e As EventArgs)
        Call pSurveyImport(ImportExportFormatEnum.Track, "", True)
    End Sub

    Private Sub cboPropSign_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropSign.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemSign = .CurrentItem
                oItem.Sign = New List(Of Items.cIItemSign.SignEnum)(System.Enum.GetValues(GetType(Items.cIItemSign.SignEnum))).Item(cboPropSign.SelectedIndex)
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub mnuViewWorkspacesData_Click(sender As Object, e As EventArgs)
        Call pWorkspaceData()
    End Sub

    Private Sub pWorkspaceData()
        Call pFieldDataShow(True)
        Call pDesignAreaShow(False)
        Call pObjectPropShow(False)
        Call pLevelsShow(False)
    End Sub

    Private Sub pWorkspaceDesign()
        Call pFieldDataShow(False)
        Call pDesignAreaShow(True)
        Call pObjectPropShow(True)
        Call pLevelsShow(True)
    End Sub

    Private Sub pWorkspaceAll()
        Call pFieldDataShow(True)
        Call pDesignAreaShow(True)
        Call pObjectPropShow(True)
        Call pLevelsShow(True)
    End Sub

    Private Sub mnuViewWorkspacesDesign_Click(sender As Object, e As EventArgs)
        Call pWorkspaceDesign()
    End Sub

    Private Sub txtPropCrossSectionSplayMaxVariationAngle_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionSplayMaxVariationAngle.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
                oItem.SplayBorderMaxAngleVariation = txtPropCrossSectionSplayMaxVariationAngle.Value
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionSplayProjectionAngle_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionSplayProjectionAngle.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
                oItem.SplayBorderProjectionAngle = txtPropCrossSectionSplayProjectionAngle.Value
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionShowSplayBorder_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionShowSplayBorder.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
                oItem.ShowSplayBorder = chkPropCrossSectionShowSplayBorder.Checked
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionSplayLineStyle_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionSplayLineStyle.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
                oItem.SplayBorderLineStyle = cboPropCrossSectionSplayLineStyle.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionSplayText_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionSplayText.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
                oItem.ShowSplayText = chkPropCrossSectionSplayText.Checked
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only splay preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    'Private Sub grdSegments_DefaultValuesNeeded(sender As Object, e As DataGridViewRowEventArgs)
    '    Call SetGridDefaultValueForColumnImage(grdSegments, e.Row)
    'End Sub

    'Private oLastDistoXEvent As frmDisto.cOnGetShotArgs

    'Private Sub pDistoXAddSegment()
    '    Dim oSegment As cSegment = pSegmentsAddNewRow()
    '    oSegment.Distance = oLastDistoXEvent.Distance
    '    oSegment.Bearing = oLastDistoXEvent.Azimuth
    '    oSegment.Inclination = oLastDistoXEvent.Inclination
    '    Call oSegment.Save()
    '    Call pSegmentUpdate(oSegment)
    'End Sub

    'Private Sub frmD_FormClosed(sender As Object, e As FormClosedEventArgs) Handles frmD.FormClosed
    '    Call frmD.Dispose()
    '    frmD = Nothing
    'End Sub

    'Private Sub frmD_OnGetShot(Sender As frmDisto, e As frmDisto.cOnGetShotArgs) Handles frmD.OnGetShot
    '    oLastDistoXEvent = e
    '    Call Me.BeginInvoke(New MethodInvoker(AddressOf pDistoXAddSegment))
    'End Sub

    Private Sub frmSplay_OnApply(Sender As Object, Arg As frmSplay.ApplySplayPropertiesEventArgs)
        bDisableSegmentsChangeEvent = True
        For Each oSegment As cSegment In oSurvey.Segments
            If Arg.ApplyToPlan Then
                oSegment.PlanSplayBorderProjectionType = Arg.PlanSplayPlanProjectionType
                oSegment.PlanSplayBorderProjectionDeltaZ = Arg.PlanSplayPlanDeltaZ
                oSegment.PlanSplayBorderMaxDeltaVariation = Arg.PlanSplayMaxVariationDelta
                oSegment.PlanSplayBorderInclinationRange = Arg.PlanSplayInclinationRange
            End If
            If Arg.ApplyToProfile Then
                oSegment.ProfileSplayBorderProjectionAngle = Arg.ProfileSplayProjectionAngle
                oSegment.ProfileSplayBorderMaxAngleVariation = Arg.ProfileSplayMaxVariationAngle
                oSegment.ProfileSplayBorderPosInclinationRange = Arg.ProfileSplayPosInclinationRange
                oSegment.ProfileSplayBorderNegInclinationRange = Arg.ProfileSplayNegInclinationRange
            End If
        Next
        If Arg.ApplyToCrossSection Then
            For Each oItem As cItem In Arg.Design.GetAllItems
                If oItem.Type = Items.cIItem.cItemTypeEnum.CrossSection Then
                    Dim oCrossSection As Items.cItemCrossSection = oItem
                    oCrossSection.ShowSplayBorder = Arg.CrossSectionShowSplayBorder
                    oCrossSection.ShowOnlyCutSplay = Arg.CrossSectionShowOnlyCutSplay
                    oCrossSection.SplayBorderProjectionAngle = Arg.CrossSectionSplayProjectionAngle
                    oCrossSection.SplayBorderMaxAngleVariation = Arg.CrossSectionSplayMaxVariationAngle
                    oCrossSection.SplayBorderLineStyle = Arg.CrossSectionSplayLineStyle
                    oCrossSection.ShowSplayText = Arg.CrossSectionSplayText
                End If
            Next
        End If
        bDisableSegmentsChangeEvent = False
        Call pSurveyCalculate(False)
        Call pObjectPropertyLoad()
    End Sub

    Private Sub pSplayReplicateData()
        Using frmS As frmSplay = New frmSplay(oSurvey, frmSplay.ContextEnum.Design, pGetCurrentDesignTools)
            AddHandler frmS.OnApply, AddressOf frmSplay_OnApply
            Call frmS.ShowDialog(Me)
        End Using
    End Sub

    Private Sub cmdPropPlanSplay_Click(sender As Object, e As EventArgs) Handles cmdPropPlanSplay.Click
        Call pSplayReplicateData()
    End Sub

    Private Sub cmdPropProfileSplay_Click(sender As Object, e As EventArgs) Handles cmdPropProfileSplay.Click
        Call pSplayReplicateData()
    End Sub

    Private Sub cmdPropCrossSectionSplay_Click(sender As Object, e As EventArgs) Handles cmdPropCrossSectionSplay.Click
        Call pSplayReplicateData()
    End Sub

    Private Sub cmdPropSignOtherOptions_Click(sender As Object, e As EventArgs) Handles cmdPropSignOtherOptions.Click
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemSign = .CurrentItem
                Using frmSP As frmSignProperties = New frmSignProperties(oItem)
                    If frmSP.ShowDialog(Me) = vbOK Then
                        Call .TakeUndoSnapshot()
                        Call pMapInvalidate()
                    End If
                End Using
            End With
        End If
    End Sub

    Private Sub pTrigpointSetCoordinate(TrigPoint As String, Coordinate As Calculate.cTrigPointCoordinate)
        Call pFieldDataShow(True)
        Call pSurveyFindTrigPoint(TrigPoint)
        tabTrigpointsProperty.SelectedTabPage = tabTrigpointsCoordinate
        cboTrigpointCoordinateFormat.SelectedIndex = 0
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
            With oSurvey.Calculate.TrigPoints(TrigPoint)
                txtTrigpointCoordinateLat.Text = modNumbers.NumberToCoordinate(Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S")
                txtTrigpointCoordinateLong.Text = modNumbers.NumberToCoordinate(Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W")
                'non imposto l'altitudine...la prendo dalle coordinate calcolate
                txtTrigpointCoordinateAlt.Text = modNumbers.MathRound(.Coordinate.Altitude, 0)
            End With
        Else
            With oSurvey.Calculate.TrigPoints(TrigPoint)
                'non imposto lat e lon ma solo l'altitudine dalle coordinate passate...
                txtTrigpointCoordinateLat.Text = modNumbers.NumberToCoordinate(.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S")
                txtTrigpointCoordinateLong.Text = modNumbers.NumberToCoordinate(.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W")
                txtTrigpointCoordinateAlt.Text = modNumbers.MathRound(Coordinate.Altitude, 0)
            End With
        End If
        cboTrigpointCoordinateFix.SelectedIndex = cTrigPoint.TrigPointFixEnum.Forced
        bTrigpointChanged = True
        Call pTrigPointSave(oTools.CurrentTrigpoint)
    End Sub

    Private Sub pTrigpointSetCoordinate(TrigPoint As String)
        Call pFieldDataShow(True)
        Call pSurveyFindTrigPoint(TrigPoint)
        tabTrigpointsProperty.SelectedTabPage = tabTrigpointsCoordinate
        With oSurvey.Calculate.TrigPoints(TrigPoint)
            txtTrigpointCoordinateLat.Text = modNumbers.NumberToCoordinate(.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S")
            txtTrigpointCoordinateLong.Text = modNumbers.NumberToCoordinate(.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W")
            cboTrigpointCoordinateFormat.SelectedIndex = 0
            txtTrigpointCoordinateAlt.Text = modNumbers.MathRound(.Coordinate.Altitude, 0)
            cboTrigpointCoordinateFix.SelectedIndex = cTrigPoint.TrigPointFixEnum.Forced
            bTrigpointChanged = True
        End With
        Call pTrigPointSave(oTools.CurrentTrigpoint)
    End Sub

    Private Sub txtPropCrossSectionWidth_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionWidth.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSection = .CurrentItem
                oItem.CrossWidth = txtPropCrossSectionWidth.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionHeight_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionHeight.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSection = .CurrentItem
                oItem.CrossHeight = txtPropCrossSectionHeight.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    'Private Sub frmMFT_OnBringFocus(sender As frmMainFloatingToolbar, Arg As frmMainFloatingToolbar.MainFloatingToolbarItemBringFocusArgs) Handles frmMFT.OnBringFocus
    '    Arg.Cancel = mnuDesignItemOLD.Visible
    'End Sub

    'Private Sub frmMFT_OnItemClick(sender As frmMainFloatingToolbar, Arg As frmMainFloatingToolbar.MainFloatingToolbarItemClickArgs) Handles frmMFT.OnItemClick
    '    Call pFloatingToolbarItemClick(Arg.ItemKey)
    'End Sub

    'Private Sub frmMFT_OnRestoreFocus(sender As frmMainFloatingToolbar) Handles frmMFT.OnRestoreFocus
    '    Call picMap.Focus()
    'End Sub

    Private Sub mnuDesignItemPaste_Click(sender As Object, e As EventArgs)
        Call pClipboardPaste("", modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
    End Sub

    Private Delegate Sub pSurveyMainPropertiesPanelsRefreshDelegate()

    Private Sub pSurveyMainPropertiesPanelsRefresh()
        If InvokeRequired Then
            Call BeginInvoke(New pSurveyMainPropertiesPanelsRefreshDelegate(AddressOf pSurveyMainPropertiesPanelsRefresh))
        Else
            If oSurvey.Properties.GPS.Enabled Then
                pnlStatusDesignGeographicState.ImageOptions.SvgImage = My.Resources.bo_localization
                pnlStatusDesignGeographicState.Description = modMain.GetLocalizedString("main.textpart62")
            Else
                pnlStatusDesignGeographicState.ImageOptions.SvgImage = My.Resources.warning
                pnlStatusDesignGeographicState.Description = modMain.GetLocalizedString("main.textpart61")
            End If
            If oSurvey.Properties.DesignWarpingMode = cSurvey.cSurvey.DesignWarpingModeEnum.None OrElse IsNothing(oCurrentDesign) Then
                pnlStatusDesignWarping.ImageOptions.SvgImage = My.Resources.warning
                pnlStatusDesignWarpingState.ImageOptions.Image = My.Resources.control_stop_blue
                pnlStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart59")
                pnlStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart59")
                pnlStatusDesignWarping.Visibility = BarItemVisibility.Never
                pnlStatusDesignWarpingState.Visibility = BarItemVisibility.Never
            Else
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan AndAlso Not oSurvey.Properties.PlanWarpingDisabled Then
                    pnlStatusDesignWarping.ImageOptions.Image = My.Resources.transform_path
                    pnlStatusDesignWarpingState.ImageOptions.Image = If(oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Active, My.Resources.control_play_blue, My.Resources.control_pause_blue)
                    pnlStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart60")
                    pnlStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart60")
                    pnlStatusDesignWarping.Visibility = BarItemVisibility.Always
                    pnlStatusDesignWarpingState.Visibility = BarItemVisibility.Always
                ElseIf oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile AndAlso Not oSurvey.Properties.ProfileWarpingDisabled Then
                    pnlStatusDesignWarping.ImageOptions.Image = My.Resources.transform_path
                    pnlStatusDesignWarpingState.ImageOptions.Image = If(oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Active, My.Resources.control_play_blue, My.Resources.control_pause_blue)
                    pnlStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart60")
                    pnlStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart60")
                    pnlStatusDesignWarping.Visibility = BarItemVisibility.Always
                    pnlStatusDesignWarpingState.Visibility = BarItemVisibility.Always
                ElseIf oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                    pnlStatusDesignWarping.Visibility = BarItemVisibility.Never
                    pnlStatusDesignWarpingState.Visibility = BarItemVisibility.Never
                Else
                    pnlStatusDesignWarping.ImageOptions.SvgImage = My.Resources.warning
                    pnlStatusDesignWarpingState.ImageOptions.Image = My.Resources.control_stop_blue
                    pnlStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart59")
                    pnlStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart59")
                    pnlStatusDesignWarping.Visibility = BarItemVisibility.Always
                    pnlStatusDesignWarpingState.Visibility = BarItemVisibility.Always
                End If
            End If
            If oSurvey.Properties.HistoryEnabled Then
                pnlStatusHistoryEnabled.ImageOptions.Image = My.Resources.clock_history_frame
                pnlStatusHistoryEnabled.Description = modMain.GetLocalizedString("main.textpart74")
            Else
                pnlStatusHistoryEnabled.ImageOptions.SvgImage = My.Resources.warning
                pnlStatusHistoryEnabled.Description = modMain.GetLocalizedString("main.textpart73")
            End If

            If modWMSManager.State = WMSStateEnum.Online Then
                pnlStatusWMSOnLine.ImageOptions.Image = My.Resources.connect
                pnlStatusWMSOnLine.Description = modMain.GetLocalizedString("main.textpart89")
            Else
                pnlStatusWMSOnLine.ImageOptions.Image = My.Resources.disconnect
                pnlStatusWMSOnLine.Description = modMain.GetLocalizedString("main.textpart90")
            End If

            If oSurvey.MasterSlave.IsMaster Then
                pnlStatusMasterSlave.Caption = "Master survey"
                pnlStatusMasterSlave.Visibility = BarItemVisibility.Always
            ElseIf oSurvey.MasterSlave.IsSlave Then
                pnlStatusMasterSlave.Caption = "Slave survey"
                pnlStatusMasterSlave.Visibility = BarItemVisibility.Always
            Else
                pnlStatusMasterSlave.Visibility = BarItemVisibility.Never
            End If
        End If
    End Sub

    Private Sub pnlStatusHistoryEnabled_DoubleClick(sender As Object, e As EventArgs)
        Call pSurveyProperty(0)
    End Sub

    Private Sub pnlStatusDesignWarpingState_DoubleClick(sender As Object, e As EventArgs)
        Call pSurveyProperty(3)
    End Sub

    Private Sub pnlStatusDesignWarping_DoubleClick(sender As Object, e As EventArgs)
        Call pSurveyProperty(3)
    End Sub

    Private Sub pnlStatusDesignGeographicState_DoubleClick(sender As Object, e As EventArgs)
        Call pSurveyProperty(4)
    End Sub

    Private Sub cboPropQuotaFormat_TextChanged(sender As Object, e As EventArgs) Handles cboPropQuotaFormat.TextChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemQuota = .CurrentItem
                oItem.QuotaFormat = cboPropQuotaFormat.Text
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnDesignPlotSplay_Click(sender As Object, e As EventArgs)
        Call pSplayReplicateData()
    End Sub

    Private Sub cmdPropPointsJoin_Click(sender As Object, e As EventArgs)
        Call pDesignPointsJoin(False)
    End Sub

    Private Sub cmdPropPointsUnjoin_Click(sender As Object, e As EventArgs)
        Call pDesignPointsUnjoin()
    End Sub

    Private Sub oDockJoinPoints_OnPointRemoved(Sender As Object, e As cDockJoinPoints.cPointEventArgs) Handles oDockJoinPoints.OnPointRemoved
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oDockJoinPoints_OnPointClear(Sender As Object, e As EventArgs) Handles oDockJoinPoints.OnPointClear
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oDockJoinPoints_OnPointLink(Sender As Object, e As EventArgs) Handles oDockJoinPoints.OnPointLink
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub oDockJoinPoints_OnPointSelect(Sender As Object, e As cDockJoinPoints.cPointEventArgs) Handles oDockJoinPoints.OnPointSelect
        Dim oItem As cItem = e.Point.Item
        If Not pGetCurrentDesignTools.CurrentItem Is oItem Then
            Call pGetCurrentDesignTools.SelectItem(oItem)
        End If
        Call pGetCurrentDesignTools.SelectPoint(e.Point)
        Call pMapInvalidate()
    End Sub

    Private Sub cmdPropPointsUnjoinAll_Click(sender As Object, e As EventArgs)
        Call pDesignPointsUnjoin(True)
    End Sub

    Private Sub mnuFileHistory_Click(sender As Object, e As EventArgs)
        Using frmH As frmHistory = New frmHistory(oSurvey, sFilename)
            AddHandler frmH.OnRestore, AddressOf oHistory_OnRestore
            AddHandler frmH.OnAdd, AddressOf oHistory_OnAdd
            Call frmH.ShowDialog(Me)
        End Using
    End Sub

    Private Sub oHistory_OnAdd(Sender As frmHistory, Args As frmHistory.OnAddEventArgs)
        Try
            Call pSurveySave(sFilename, False, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.NoHistory)
            Select Case Args.HistoryMode
                Case HistoryModeEnum.Folder
                    Call pHistorySaveMode0(sFilename)
                Case HistoryModeEnum.WebStorage
                    Call pHistorySaveMode1(sFilename)
            End Select
        Catch ex As Exception
            Call pLogAdd(ex)
            Args.Cancelled = True
            Args.LastException = ex
        End Try
    End Sub

    Private Sub oHistory_OnRestore(Sender As frmHistory, Args As EventArgs)
        Call pSurveyLoad(sFilename, False)
    End Sub

    Private Sub cmdPropPointsJoinAndConnect_Click(sender As Object, e As EventArgs)
        Call pDesignPointsJoin(True)
    End Sub

    Private Sub cboPropBrushClipartPosition_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropBrushClipartPosition.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                .CurrentItem.Brush.ClipartPosition = cboPropBrushClipartPosition.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropPointsSequencesDivideAndJoin_Click(sender As Object, e As EventArgs)
        Call pSequenceDivide(True)
    End Sub

    Private Sub pCurrentMarkedDesktopPointUnset()
        Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Unset()
        If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemMarker Then
            Call pGetCurrentDesignTools.SelectItem(Nothing)
        End If
    End Sub

    Private Sub pCurrentMarkedDesktopPointSet(Point As PointF)
        If oSurvey.Properties.GPS.Enabled Then
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                Dim dMC As Single = oSurvey.Calculate.GeoMagDeclinationData.MeridianConvergenceRadians
                Dim oNoGeoMagPoint = modPaint.RotatePointByRadians(Point, dMC)
                Dim oOriginCoordinate As Calculate.cTrigPointCoordinate = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Coordinate
                Dim dNewLat As Decimal
                Dim dNewLon As Decimal
                'occhio...l'altitudine non va gestita...
                Dim dNewAlt As Decimal
                Call modExport.CalculateCoordinatesFromXYZ(oSurvey, oOriginCoordinate.Latitude, oOriginCoordinate.Longitude, oOriginCoordinate.Altitude, oNoGeoMagPoint.X, oNoGeoMagPoint.Y, 0, dNewLat, dNewLon, dNewAlt)
                If Not oSurvey.Properties.SurfaceProfileElevation Is Nothing Then
                    With oSurvey.Properties.SurfaceProfileElevation
                        dNewAlt = .GetElevation(Point)
                        If dNewAlt = .NoDataValue Then dNewAlt = 0
                    End With
                End If
                Dim oNewCoordinate As Calculate.cTrigPointCoordinate = New Calculate.cTrigPointCoordinate(dNewLat, dNewLon, dNewAlt)
                Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Set(Point, oNewCoordinate)
            Else
                Dim oOriginCoordinate As Calculate.cTrigPointCoordinate = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Coordinate
                'occhio...lon lat non vanno gestite...
                Dim dNewLat As Decimal
                Dim dNewLon As Decimal
                Dim dNewAlt As Decimal
                Call modExport.CalculateCoordinatesFromXYZ(oSurvey, oOriginCoordinate.Latitude, oOriginCoordinate.Longitude, oOriginCoordinate.Altitude, 0, 0, -Point.Y, dNewLat, dNewLon, dNewAlt)
                Dim oNewCoordinate As Calculate.cTrigPointCoordinate = New Calculate.cTrigPointCoordinate(dNewLat, dNewLon, dNewAlt)
                Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Set(Point, oNewCoordinate)
            End If
        Else
            Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Set(Point, Nothing)
        End If
    End Sub

    Private Sub btnTrigpointCoordinateClear_Click(sender As Object, e As EventArgs) Handles btnTrigpointCoordinateClear.Click
        Dim oTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
        Call oTrigpoint.Coordinate.Clear()
        pTrigpointCoordinateLoad(oTrigpoint)
    End Sub

    Private Sub pSurveyScriptEditor()
        If frmS Is Nothing Then
            frmS = New frmScriptEditor(oSurvey, "", iFunctionLanguage)
            Call frmS.Show(Me)
        End If
        Call frmS.BringToFront()
        Call frmS.Focus()
    End Sub

    Private Sub pScriptEditorHide()
        If Not frmS Is Nothing Then
            Call frmS.Close()
            frmS = Nothing
        End If
    End Sub

    Private Sub cmdPropTrigpointFix_Click(sender As Object, e As EventArgs) Handles cmdPropTrigpointFix.Click
        Call pTrigpointSetCoordinate(oTools.CurrentTrigpoint.Name)
    End Sub

    Private Sub cmdPropTrigpointFixToMarker_Click(sender As Object, e As EventArgs) Handles cmdPropTrigpointFixToMarker.Click
        Call pTrigpointSetCoordinate(oTools.CurrentTrigpoint.Name, pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Coordinate)
    End Sub

    'Private Sub cmdPropSegmentInvert_Click(sender As Object, e As EventArgs) Handles cmdPropSegmentInvert.Click
    '    'If oSurvey.Properties.InversionMode = cSurvey.cSurvey.InversioneModeEnum.Relative Then
    '    '    Call mnuDesignItemSegmentInvert_Click(Nothing, Nothing)
    '    'Else
    '    Call mnuDesignItemSegmentDirection0_Click(Nothing, Nothing)
    '    'End If
    'End Sub

    Private Sub cmdPropSegmentBeginShot_Click(sender As Object, e As EventArgs) Handles cmdPropSegmentBeginShot.Click
        Call oTools.SelectTrigpoint(oTools.CurrentSegment.GetFromTrigPoint)
    End Sub

    Private Sub cmdPropSegmentEndShot_Click(sender As Object, e As EventArgs) Handles cmdPropSegmentEndShot.Click
        Call oTools.SelectTrigpoint(oTools.CurrentSegment.GetToTrigPoint)
    End Sub

    Private Sub oTools_OnMarkedDesktopPointSet(Sender As Object, Args As EventArgs) Handles oPlanTools.OnMarkedDesktopPointSet, oProfileTools.OnMarkedDesktopPointSet
        Dim oPoint As cMarkedDesktopPoint = Sender.CurrentMarkedDesktopPoint
        If oPoint.IsSet Then
            If oPoint.Coordinate Is Nothing Then
                Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart78"), Strings.Format(oPoint.Point.X, "0.00"), Strings.Format(oPoint.Point.Y, "0.00")))
            Else
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                    Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart77"), Strings.Format(oPoint.Point.X, "0.00"), Strings.Format(oPoint.Point.Y, "0.00"), modNumbers.NumberToCoordinate(oPoint.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds, "E", "W"), modNumbers.NumberToCoordinate(oPoint.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds, "N", "S")))
                Else
                    Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart79"), Strings.Format(oPoint.Point.X, "0.00"), Strings.Format(oPoint.Point.Y, "0.00"), Strings.Format(oPoint.Coordinate.Altitude, "0")))
                End If
            End If
        End If
        Call pMapInvalidate()
    End Sub

    Private Sub oTools_OnMarkedDesktopPointGetPaintInfo(Sender As Object, Args As cEditDesignTools.cMarkedDesktopPointPaintInfoEventArgs) Handles oPlanTools.OnMarkedDesktopPointGetPaintInfo, oProfileTools.OnMarkedDesktopPointGetPaintInfo
        Args.Scale = sPaintZoom
    End Sub

    Private Sub oTools_OnMarkedDesktopPointMove(Sender As Object, Args As cEditDesignTools.cMarkedDesktopPointMoveEventArgs) Handles oPlanTools.OnMarkedDesktopPointMove, oProfileTools.OnMarkedDesktopPointMove
        Call pCurrentMarkedDesktopPointSet(Args.NewPoint)
    End Sub

    Private Sub p3DInvalidate(Invalidate As cHolosViewer.InvalidateType)
        Call oHolos.Invalidate(Invalidate)
    End Sub

    Private Sub pSurvey3DRedraw(Invalidate As cHolosViewer.InvalidateType)
        Call p3DInvalidate(Invalidate)
    End Sub

    Private Sub pnl3D_SizeChanged(sender As Object, e As EventArgs) Handles pnl3D.SizeChanged
        Call pHolosResize()
    End Sub

    Private Sub oHolos_OnRedrawRequest(Sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnRedrawRequest
        Call oMousePointer.Push(Cursors.WaitCursor)
        If oSurvey.Invalidated Then Call pSurveyCalculate(True)
        Call oHolos.Redraw(oSurvey, oCurrentOptions, o3DTools)
        Call oMousePointer.Pop()
    End Sub

    Private Sub oHolos_OnSceneInfoChange(Sender As cHolosViewer, Args As cHolosViewer.cSceneInfoChangeEventArgs) Handles oHolos.OnSceneInfoChange
        pnlStatusDesignInfo.Caption = String.Format(modMain.GetLocalizedString("main.textpart82"), Math.Round(Args.Bearing, 0), Math.Round(Args.Inclination, 0))
    End Sub

    Private Sub mnuFileExport3D_Click(sender As Object, e As EventArgs)
        Call pSurveyExport(ImportExportFormatEnum.threedD)
    End Sub

    Private Sub pnlStatusWMSOnLine_Click(sender As Object, e As EventArgs)
        If modWMSManager.State = WMSStateEnum.Online Then
            Call modWMSManager.WMSSetState(WMSStateEnum.ForcedOffline)
            Call pMapInvalidate()
        Else
            Call modWMSManager.WMSSetState(WMSStateEnum.Online)
            Call pMapInvalidate()
        End If
        Call pSurveyMainPropertiesPanelsRefresh()
    End Sub

    Private Sub o3DTools_OnItemSelect(Sender As Object, ToolEventArgs As cEditDesignTools.cEditDesignToolsEventArgs) Handles o3DTools.OnItemSelect
        btnZoomZoomToSelection.Enabled = False

        Call pClipboardAlign()
    End Sub

    Private Sub cboTrigpointEntrance_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboTrigpointEntrance.SelectedIndexChanged
        chkTrigpointShowEntrance.Enabled = cboTrigpointEntrance.SelectedIndex > 0
    End Sub

    'Private Sub chkDesignPlotShowHLs_CheckedChanged(sender As Object, e As EventArgs)
    '    If Not bDisabledObjectPropertyEvent Then
    '        oCurrentOptions.DrawHighlights = chkDesignPlotShowHLs.Checked
    '        lvDesignPlotShowHLsDett.Enabled = oCurrentOptions.DrawHighlights
    '        Call pSurveyRedraw()
    '    End If
    'End Sub

    Private Sub oPlanTools_OnFilterRemoved(Sender As Object, ToolEventArgs As EventArgs) Handles oPlanTools.OnFilterRemoved
        Call pSurveyLayersFilterApply()
    End Sub

    Private Sub oProfileTools_OnFilterRemoved(Sender As Object, ToolEventArgs As EventArgs) Handles oProfileTools.OnFilterRemoved
        Call pSurveyLayersFilterApply()
    End Sub

    Private Sub mnuSegmentsManageLRUD_Click(sender As Object, e As EventArgs)
        Call pSegmentsLRUDManage()
    End Sub

    Private Sub bwMain_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles bwMain.DoWork
        Select Case e.Argument.ToString
            Case "pCheckNewVersion"
                Call pCheckNewVersion()
        End Select
    End Sub

    Private Sub btnDesignRings_Click(sender As Object, e As EventArgs)
        Call pSurveyInfoRing()
    End Sub

    'Private Sub lvDesignPlotShowHLsDett_ItemCheck(sender As Object, e As ItemCheckEventArgs)
    '    If Not bDisabledObjectPropertyEvent Then
    '        Call oCurrentOptions.HighlightsOptions.Set(lvDesignPlotShowHLsDett.Items(e.Index).Name, e.NewValue)
    '        Call pSurveyRedraw()
    '    End If
    'End Sub

    Private Sub btnDesignHighlights_Click(sender As Object, e As EventArgs)
        Call pSurveyProperty(12)
    End Sub

    Private Sub pGetHeaderValue(Column As DataGridViewColumn, ByRef Value As Object)
        If Column.Name = "colSegmentSession" Then
            Value = modMain.GetLocalizedString("main.textpart13")
        End If
        If Column.Name = "colCaveBranchColor" Then
            Value = modMain.GetLocalizedString("main.textpart11") & cCaveInfoBranches.sBranchSeparator & modMain.GetLocalizedString("main.textpart12")
        End If
    End Sub

    Private Sub pGetCellValue(Cell As DataGridViewCell, ByRef Value As Object)
        If Cell.OwningColumn.Name = "colSegmentSession" Then
            Dim oSegment As cSegment = oSurvey.Segments(Cell.RowIndex)
            If Not IsNothing(oSegment) Then Value = "" & oSegment.Session
        End If
        If Cell.OwningColumn.Name = "colCaveBranchColor" Then
            Dim oSegment As cSegment = oSurvey.Segments(Cell.RowIndex)
            If Not IsNothing(oSegment) Then Value = oSegment.Cave & If(oSegment.Branch = "", "", cCaveInfoBranches.sBranchSeparator & oSegment.Branch)
        End If
        If Cell.OwningColumn.Name = "colTo" Then
            If Not bGridExportSplayNames Then
                Dim oSegment As cSegment = oSurvey.Segments(Cell.RowIndex)
                If Not IsNothing(oSegment) Then Value = If(oSegment.Splay, "", oSegment.To)
            End If
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerPosition_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerPosition.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.CrossSectionItem.MarkerPosition = txtPropCrossSectionMarkerPosition.Value / 100
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionShowMarker_CheckedChanged(sender As Object, e As EventArgs)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSection = .CurrentItem
                'oItem.ShowMarker = chkPropCrossSectionShowMarker.Checked
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerL_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerL.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                oItem.Left = txtPropCrossSectionMarkerL.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerR_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerR.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                oItem.Right = txtPropCrossSectionMarkerR.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerU_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerU.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                oItem.Up = txtPropCrossSectionMarkerU.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerD_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerD.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                oItem.Down = txtPropCrossSectionMarkerD.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionMarkerArrowScaleEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerArrowSizeEnabled.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.ArrowSizeEnabled = chkPropCrossSectionMarkerArrowSizeEnabled.Checked
                cboPropCrossSectionMarkerArrowSize.Enabled = chkPropCrossSectionMarkerArrowSizeEnabled.Checked
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionMarkerArrowScale_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionMarkerArrowSize.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.ArrowSize = cboPropCrossSectionMarkerArrowSize.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionMarkerAlign_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionMarkerAlign.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                oItem.PlanAlignment = cboPropCrossSectionMarkerAlign.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionMarkerProfileAlign_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionMarkerProfileAlign.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                oItem.ProfileAlignment = cboPropCrossSectionMarkerProfileAlign.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerDeltaAngle_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerDeltaAngle.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If TypeOf .CurrentItem Is cIItemPlanCrossSectionMarker Then
                    Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                    oItem.PlanDeltaAngle = txtPropCrossSectionMarkerDeltaAngle.Value
                ElseIf TypeOf .CurrentItem Is cIItemProfileCrossSectionMarker Then
                    Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                    oItem.ProfileDeltaAngle = txtPropCrossSectionMarkerDeltaAngle.Value
                End If
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropCrossSectionMarkerUDFromDesign_Click(sender As Object, e As EventArgs) Handles cmdPropCrossSectionMarkerUDFromDesign.Click
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                Call oItem.SetUDFromDesign(oCurrentOptions)
                txtPropCrossSectionMarkerU.Value = oItem.Up
                txtPropCrossSectionMarkerD.Value = oItem.Down
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropCrossSectionMarkerLRFromDesign_Click(sender As Object, e As EventArgs) Handles cmdPropCrossSectionMarkerLRFromDesign.Click
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                Call oItem.SetLRFromDesign(oCurrentOptions)
                txtPropCrossSectionMarkerL.Value = oItem.Left
                txtPropCrossSectionMarkerR.Value = oItem.Right
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionPlanMarker_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionPlanMarker.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cItemCrossSection = .CurrentItem
                Dim oCrossSection As cDesignCrossSection = oItem.DesignCrossSection 'oSurvey.CrossSections.Find(oItem)
                If Not oCrossSection Is Nothing Then
                    If oCrossSection.HavePlanMarker Then
                        Call oCrossSection.DeletePlanMarker()
                        chkPropCrossSectionPlanMarker.Checked = False
                    Else
                        Call oCrossSection.CreatePlanMarker()
                        chkPropCrossSectionPlanMarker.Checked = True
                    End If
                    cmdPropCrossSectionPlanMarker.Enabled = chkPropCrossSectionPlanMarker.Checked
                    'todo: undo
                End If
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionProfileMarker_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionProfileMarker.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cItemCrossSection = .CurrentItem
                Dim oCrossSection As cDesignCrossSection = oItem.DesignCrossSection 'oSurvey.CrossSections.Find(oItem)
                If Not oCrossSection Is Nothing Then
                    If oCrossSection.HaveProfileMarker Then
                        Call oCrossSection.DeleteProfileMarker()
                        chkPropCrossSectionProfileMarker.Checked = False
                    Else
                        Call oCrossSection.CreateProfileMarker()
                        chkPropCrossSectionProfileMarker.Checked = True
                    End If
                    cmdPropCrossSectionProfileMarker.Enabled = chkPropCrossSectionProfileMarker.Checked
                    'todo: undo
                End If
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropCrossSectionItem_Click(sender As Object, e As EventArgs) Handles cmdPropCrossSectionItem.Click
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                Call pGetCurrentDesignTools.SelectItem(oItem.CrossSectionItem)
                Call pMapCenterAndFitSelection()
            End With
        End If
    End Sub

    Private Sub chkPropCrossSectionMarkerLabel_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerLabel.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.TextShow = chkPropCrossSectionMarkerLabel.Checked
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerLabelDistance_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerLabelDistance.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.TextDistance = txtPropCrossSectionMarkerLabelDistance.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionMarkerLabelPosition_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionMarkerLabelPosition.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.TextPosition = cboPropCrossSectionMarkerLabelPosition.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionMarkerScale_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionMarkerScale.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.TextSize = cboPropCrossSectionMarkerScale.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionMarkerDirection_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionMarkerDirection.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.CrossSectionItem.Direction = cboPropCrossSectionMarkerDirection.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cboPropCrossSectionMarkerLabelRotation_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropCrossSectionMarkerLabelRotation.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If TypeOf .CurrentItem Is cIItemPlanCrossSectionMarker Then
                    Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                    oItem.RotateMode = cboPropCrossSectionMarkerLabelRotation.SelectedIndex
                ElseIf TypeOf .CurrentItem Is cIItemProfileCrossSectionMarker Then
                    Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                    oItem.RotateMode = cboPropCrossSectionMarkerLabelRotation.SelectedIndex
                End If
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropCrossSectionPlanMarker_Click(sender As Object, e As EventArgs) Handles cmdPropCrossSectionPlanMarker.Click
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSection = .CurrentItem
                Call pGetCurrentDesignTools.SelectItem(oItem.DesignCrossSection.PlanMarker)
                Call pMapCenterAndFitSelection()
            End With
        End If
    End Sub

    Private Sub cmdPropCrossSectionProfileMarker_Click(sender As Object, e As EventArgs) Handles cmdPropCrossSectionProfileMarker.Click
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSection = .CurrentItem
                Call pGetCurrentDesignTools.SelectItem(oItem.DesignCrossSection.ProfileMarker)
                Call pMapCenterAndFitSelection()
            End With
        End If
    End Sub

    Private Sub cboSegmentCaveBranchList_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboSegmentCaveBranchList.SelectedIndexChanged
        Call pSegmentSetCaveBranchesColor()
    End Sub

    Private Sub pPropSetCaveBranchesColor()
        Dim sCave As String = cboPropCaveList.Text
        Dim sBranch As String = cboPropCaveBranchList.Text
        Dim oColor As Color = oSurvey.Properties.CaveInfos.GetColor(sCave, sBranch, Color.LightGray)
        'Dim oLightColor = modPaint.LightColor(oColor, 0.85)
        pnlPropCaveBranchesColor.BackColor = oColor
        'pnlPropCaveBranches.BackColor = oLightColor
    End Sub

    Private Sub pSegmentSetCaveBranchesColor()
        Dim sCave As String = cboSegmentCaveList.Text
        Dim sBranch As String = cboSegmentCaveBranchList.Text
        Dim oColor As Color = oSurvey.Properties.CaveInfos.GetColor(sCave, sBranch, Color.LightGray)
        'Dim oLightColor = modPaint.LightColor(oColor, 0.85)
        pnlSegmentCaveBranchesColor.BackColor = oColor
        'pnlSegmentCaveBranches.BackColor = oLightColor
    End Sub

    Private Sub pSegmentSetSessionColor()
        If cboSessionList.SelectedItem Is Nothing Then
            Dim oColor As Color = Color.LightGray
            'Dim oLightColor = modPaint.LightColor(oColor, 0.85)
            pnlSegmentSessionColor.BackColor = oColor
            'pnlSegmentSession.BackColor = oLightColor
        Else
            Dim sSession As String = DirectCast(cboSessionList.SelectedItem, cSession).ID
            Dim oColor As Color = oSurvey.Properties.Sessions.GetColor(sSession, Color.LightGray)
            'Dim oLightColor = modPaint.LightColor(oColor, 0.85)
            pnlSegmentSessionColor.BackColor = oColor
            'pnlSegmentSession.BackColor = oLightColor
        End If
    End Sub

    Private Sub cboSessionList_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboSessionList.SelectedIndexChanged
        Call pSegmentSetSessionColor()
    End Sub

    Private Sub pPropDefaultPenStyle()
        Select Case oSurvey.Properties.DesignProperties.GetValue("LineType", cIItemLine.LineTypeEnum.Splines)
            Case cIItemLine.LineTypeEnum.Splines
                btnPenLine.Down = False
                btnPenSpline.Down = True
                btnPenBezier.Down = False
            Case cIItemLine.LineTypeEnum.Lines
                btnPenLine.Down = True
                btnPenSpline.Down = False
                btnPenBezier.Down = False
            Case cIItemLine.LineTypeEnum.Beziers
                btnPenLine.Down = False
                btnPenSpline.Down = False
                btnPenBezier.Down = True
        End Select
    End Sub

    Private WithEvents oAreaFromSequence As cAreaFromSequence

    Private Sub pSurveyCreateSequenceToArea()
        If oAreaFromSequence Is Nothing Then
            oAreaFromSequence = New cAreaFromSequence()
        End If
    End Sub

    'Private Sub mnuDesignItemAreaFromSequence_DropDownOpening(sender As Object, e As EventArgs)
    '    Dim oHost As ToolStripControlHost = New ToolStripControlHost(oAreaFromSequence)
    '    'mnuDesignItemAreaFromSequence.DropDownItems.Clear()
    '    'mnuDesignItemAreaFromSequence.DropDownItems.Add(oHost)
    'End Sub

    Private Sub oAreaFromSequence_OnCreate(Sender As cAreaFromSequence, Args As EventArgs) Handles oAreaFromSequence.OnCreate
        Call oMousePointer.Push(Cursors.WaitCursor)
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oNewSequence As cSequence = modPaint.WidenSequence(oItem, oPoint, oAreaFromSequence.txtWidth.Value, oAreaFromSequence.txtReductionFactor.Value)
            Dim oBag As cConvertToToolsBag = oAreaFromSequence.lvItemToCreate.SelectedItems(0).Tag
            Dim oLayer As cLayer = oCurrentDesign.Layers(oBag.Layer)
            oItem = oLayer.GetType.GetMethod(oBag.Method).Invoke(oLayer, oBag.GetInvokeParameters("cave", oItem.Cave, "branch", oItem.Branch))
            If oItem.HaveLineType Then
                DirectCast(oItem, cIItemLine).LineType = oAreaFromSequence.cboLineType.SelectedIndex  'oSurvey.Properties.DesignProperties.GetValue("LineType", oSurvey.GetGlobalSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
            End If
            Call oItem.Points.BeginUpdate()
            Call oItem.Points.AddRange(oNewSequence)
            Call oItem.Points.CloseSequences()
            Call oItem.Points.EndUpdate()
            Call .TakeUndoSnapshot()
        End With
        Call oMousePointer.Pop()
        Call pMapInvalidate()
    End Sub

    Private Sub o3DTools_OnCaveBranchSelect(Sender As Object, ToolEventArgs As cEditDesignTools.cCaveBranchSelectEventArgs) Handles o3DTools.OnCaveBranchSelect
        If Not bDisabledCaveBranchChangeEvent Then
            Call pSurveyHighlightCurrentCave(False)
            Call pSurveySetCurrentCaveBranch(o3DTools.CurrentCave, o3DTools.CurrentBranch)
            Call pSurveyFillCrossSectionsList(o3DTools.CurrentCave, o3DTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            Call pSurveyRestoreCaveBranchLockstate(o3DTools.CurrentCave, o3DTools.CurrentBranch)
        End If
    End Sub

    Private Sub oPlanTools_OnCaveBranchSelect(Sender As Object, ToolEventArgs As cEditDesignTools.cCaveBranchSelectEventArgs) Handles oPlanTools.OnCaveBranchSelect
        If Not bDisabledCaveBranchChangeEvent Then
            Call pSurveyHighlightCurrentCave(False)
            Call pSurveySetCurrentCaveBranch(oPlanTools.CurrentCave, oPlanTools.CurrentBranch)
            Call pSurveyFillCrossSectionsList(oPlanTools.CurrentCave, oPlanTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            Call pSurveyRestoreCaveBranchLockstate(oPlanTools.CurrentCave, oPlanTools.CurrentBranch)
        End If
    End Sub

    Private Sub pSurveyRestoreCaveBranchLockstate(Cave As String, Branch As String)
        Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(Cave, Branch)
        Dim bEnabled As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
        btnSegmentAdd.Enabled = bEnabled
        btnSegmentInsert.Enabled = bEnabled
        btnSegmentDelete.Enabled = bEnabled
    End Sub

    Private Sub oProfileTools_OnCaveBranchSelect(Sender As Object, ToolEventArgs As cEditDesignTools.cCaveBranchSelectEventArgs) Handles oProfileTools.OnCaveBranchSelect
        If Not bDisabledCaveBranchChangeEvent Then
            Call pSurveyHighlightCurrentCave(False)
            Call pSurveySetCurrentCaveBranch(oProfileTools.CurrentCave, oProfileTools.CurrentBranch)
            Call pSurveyFillCrossSectionsList(oProfileTools.CurrentCave, oProfileTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            Call pSurveyRestoreCaveBranchLockstate(oProfileTools.CurrentCave, oProfileTools.CurrentBranch)
        End If
    End Sub

    Private Sub pMapInfoMenu(Point As Point)
        Dim oPoint As PointF = modPaint.FromPaintPoint(Point, sPaintZoom, oPaintTranslation)
        btnCurrentItemPointInfo.Caption = "x: " & Strings.Format(oPoint.X, "0.00") & " m - y: " & Strings.Format(-1 * oPoint.Y, "0.00") & " m"
        mnuDesignItem.Tag = picMap.PointToScreen(Point)
    End Sub

    'Private Sub pMapInfoMenu(Point As Point, InfoMenu As ToolStripMenuItem)
    '    Dim oPoint As PointF = modPaint.FromPaintPoint(picMap.PointToClient(Point), sPaintZoom, oPaintTranslation)
    '    InfoMenu.Text = "x: " & Strings.Format(oPoint.X, "0.00") & " m - y: " & Strings.Format(-1 * oPoint.Y, "0.00") & " m"
    'End Sub

    'Private Sub pMapInfoObjectsUnder(Point As Point, DesignItemItemUnder As ToolStripMenuItem)
    '    Dim oPoint As PointF = modPaint.FromPaintPoint(picMap.PointToClient(Point), sPaintZoom, oPaintTranslation)
    '    Dim oItems As List(Of cItem) = oCurrentDesign.HitTest(oCurrentOptions, pGetCurrentDesignTools, oPoint, sWide / sPaintZoom, False)
    '    If oItems.Count > 0 Then
    '        Call DesignItemItemUnder.DropDownItems.Clear()
    '        For Each oItem As cItem In oItems
    '            Dim oMenu As ToolStripMenuItem = New ToolStripMenuItem()
    '            With oMenu
    '                .Text = oItem.Type.ToString & If(oItem.Name <> "", " - " & oItem.Name, "")
    '                If oItem.HaveText Then
    '                    Dim oItemText As cIItemText = oItem
    '                    .Text = .Text & " " & Chr(34) & oItemText.Text & Chr(34) '& " (points: " & oItem.Points.Count & ")"
    '                End If
    '                .ImageScaling = ToolStripItemImageScaling.None
    '                .Image = oItem.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, 32, 32)
    '                .Tag = oItem
    '                AddHandler oMenu.Click, AddressOf mnuDesignItemItemUnderItem_Click
    '                AddHandler oMenu.MouseHover, AddressOf mnuDesignItemItemUnderItem_MouseHover
    '            End With
    '            Call DesignItemItemUnder.DropDownItems.Add(oMenu)
    '        Next
    '    Else
    '        Call DesignItemItemUnder.DropDownItems.Clear()
    '        Dim oMenu As ToolStripMenuItem = New ToolStripMenuItem()
    '        oMenu.Text = modMain.GetLocalizedString("main.textpart96")
    '        oMenu.Enabled = False
    '        Call DesignItemItemUnder.DropDownItems.Add(oMenu)
    '    End If
    'End Sub

    'Private Sub mnuDesignItemItemUnder_DropDownOpening(sender As Object, e As EventArgs) Handles mnuDesignItemItemUnder.DropDownOpening
    '    Call pMapInfoObjectsUnder(mnuDesignItemOLD.Location, mnuDesignItemItemUnder)
    'End Sub

    'Private Sub mnuDesignItemItemUnderItem_MouseHover(Sender As Object, e As EventArgs)
    '    Dim oItem As cItem = Sender.tag
    '    Call pGetCurrentDesignTools.SelectItem(oItem)
    'End Sub

    'Private Sub mnuDesignItemItemUnderItem_Click(Sender As Object, e As EventArgs)
    '    Call pItemBringToTop()
    'End Sub

    'Private Sub mnuDesignNoneItemUnder_DropDownOpening(sender As Object, e As EventArgs) Handles mnuDesignNoneItemUnder.DropDownOpening
    '    Call pMapInfoObjectsUnder(mnuDesignNone.Location, mnuDesignNoneItemUnder)
    'End Sub

    Private Sub mnuTrigpointInfoCopyAll_Click(sender As Object, e As EventArgs) Handles mnuTrigpointInfoCopyAll.Click
        Call pListviewInfoCopy(lvTrigpointInfo.Items, False)
    End Sub

    Private Sub mnuTrigpointInfoCopy_Click(sender As Object, e As EventArgs) Handles mnuTrigpointInfoCopy.Click
        Call pListviewInfoCopy(lvTrigpointInfo.SelectedItems, False)
    End Sub

    Private Sub mnuTrigpointInfoCopyValue_Click(sender As Object, e As EventArgs) Handles mnuTrigpointInfoCopyValue.Click
        Call pListviewInfoCopy(lvTrigpointInfo.SelectedItems, True)
    End Sub

    Private Sub mnuTrigpointInfoCopyAllValue_Click(sender As Object, e As EventArgs) Handles mnuTrigpointInfoCopyAllValue.Click
        Call pListviewInfoCopy(lvTrigpointInfo.Items, True)
    End Sub

    Private Sub mnuSegmentInfoCopyValue_Click(sender As Object, e As EventArgs) Handles mnuSegmentInfoCopyValue.Click
        Call pListviewInfoCopy(lvSegmentInfo.SelectedItems, True)
    End Sub

    Private Sub mnuSegmentInfoCopyAllValue_Click(sender As Object, e As EventArgs) Handles mnuSegmentInfoCopyAllValue.Click
        Call pListviewInfoCopy(lvSegmentInfo.Items, True)
    End Sub

    Private Sub cmdPropSegmentGoto_Click(sender As Object, e As EventArgs) Handles cmdPropSegmentGoto.Click
        Call pFieldDataShow(True)
        Call pSegmentSelect(pGetCurrentTools.CurrentSegment, True, True)
    End Sub

    Private Sub cmdPropTrigpointGoto_Click(sender As Object, e As EventArgs) Handles cmdPropTrigpointGoto.Click
        Call pFieldDataShow(True)
        Call pTrigPointSelect(pGetCurrentTools.CurrentTrigpoint, True, True)
    End Sub

    Private Sub mnuDesignItemSegmentSplay_Click(sender As Object, e As EventArgs) Handles mnuDesignItemSegmentSplay.Click
        mnuDesignItemSegmentSplayCreateBorder.Visible = bIsInDebug
    End Sub

    Private WithEvents oBorderFromSplay As cBorderFromSplay

    Private Sub pSurveyCreateBorderFromSplay()
        If oBorderFromSplay Is Nothing Then
            oBorderFromSplay = New cBorderFromSplay()
        End If
    End Sub

    Private Sub mnuDesignItemSegmentSplayCreateBorder_DropDownOpening(sender As Object, e As EventArgs) Handles mnuDesignItemSegmentSplayCreateBorder.DropDownOpening
        Dim oHost As ToolStripControlHost = New ToolStripControlHost(oBorderFromSplay)
        mnuDesignItemSegmentSplayCreateBorder.DropDownItems.Clear()
        mnuDesignItemSegmentSplayCreateBorder.DropDownItems.Add(oHost)
    End Sub

    Private Sub oBorderFromSplay_OnCreate(Sender As cBorderFromSplay, Args As EventArgs) Handles oBorderFromSplay.OnCreate
        Call oMousePointer.Push(Cursors.WaitCursor)
        If oBorderFromSplay.optAllSplays.Checked Then
            If oBorderFromSplay.optCaveBranch.Checked Then
                Call modSegmentsTools.CreatePlanBorderFromSplay(oSurvey, oTools.CurrentSegment.Cave, oTools.CurrentSegment.Branch, oBorderFromSplay.cboLineType.SelectedIndex, oBorderFromSplay.txtAngPrec.Value, oBorderFromSplay.cboUseHull.SelectedIndex)
            Else
                Call modSegmentsTools.CreatePlanBorderFromSplay(oSurvey, oTools.CurrentSegment, oBorderFromSplay.cboLineType.SelectedIndex, oBorderFromSplay.txtAngPrec.Value, oBorderFromSplay.cboUseHull.SelectedIndex)
            End If
        ElseIf oBorderFromSplay.optCutAndLRUD.Checked Then
            If oBorderFromSplay.optCaveBranch.Checked Then
                Call modSegmentsTools.CreateBorder3DOutline(oSurvey, oTools.CurrentSegment.Cave, oTools.CurrentSegment.Branch, If(oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan, False, True))
            Else
                Call modSegmentsTools.CreateBorder3DOutline(oSurvey, oTools.CurrentSegment, If(oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan, False, True))
            End If
        End If
        Call oMousePointer.Pop()
        Call pMapInvalidate()
        Call mnuDesignItemOLD.Close()
    End Sub

    Private Sub txtPropPlanSplayInclinationRangeMin_ValueChanged(sender As Object, e As EventArgs) Handles txtPropPlanSplayInclinationRangeMin.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanSplayBorder = .CurrentItem
                oItem.SplayBorderInclinationRange = New SizeF(txtPropPlanSplayInclinationRangeMin.Value, oItem.SplayBorderInclinationRange.Height)
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropPlanSplayInclinationRangeMax_ValueChanged(sender As Object, e As EventArgs) Handles txtPropPlanSplayInclinationRangeMax.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanSplayBorder = .CurrentItem
                oItem.SplayBorderInclinationRange = New SizeF(oItem.SplayBorderInclinationRange.Width, txtPropPlanSplayInclinationRangeMax.Value)
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropProfileSplayPosInclinationRangeMin_ValueChanged(sender As Object, e As EventArgs) Handles txtPropProfileSplayPosInclinationRangeMin.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileSplayBorder = .CurrentItem
                oItem.SplayBorderPosInclinationRange = New SizeF(txtPropProfileSplayPosInclinationRangeMin.Value, oItem.SplayBorderPosInclinationRange.Height)
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropProfileSplayPosInclinationRangeMax_ValueChanged(sender As Object, e As EventArgs) Handles txtPropProfileSplayPosInclinationRangeMax.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileSplayBorder = .CurrentItem
                oItem.SplayBorderPosInclinationRange = New SizeF(oItem.SplayBorderPosInclinationRange.Width, txtPropProfileSplayPosInclinationRangeMax.Value)
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropProfileSplayNegInclinationRangeMin_ValueChanged(sender As Object, e As EventArgs) Handles txtPropProfileSplayNegInclinationRangeMin.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileSplayBorder = .CurrentItem
                oItem.SplayBorderNegInclinationRange = New SizeF(txtPropProfileSplayNegInclinationRangeMin.Value, oItem.SplayBorderNegInclinationRange.Height)
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropProfileSplayNegInclinationRangeMax_ValueChanged(sender As Object, e As EventArgs) Handles txtPropProfileSplayNegInclinationRangeMax.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileSplayBorder = .CurrentItem
                oItem.SplayBorderNegInclinationRange = New SizeF(oItem.SplayBorderNegInclinationRange.Width, txtPropProfileSplayNegInclinationRangeMax.Value)
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionShowOnlyCutSplay_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionShowOnlyCutSplay.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
                oItem.ShowOnlyCutSplay = chkPropCrossSectionShowOnlyCutSplay.Checked
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionMarkerUH_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerUH.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                oItem.AutoUpHeight = chkPropCrossSectionMarkerUH.Checked
                txtPropCrossSectionMarkerUH.Enabled = Not chkPropCrossSectionMarkerUH.Checked
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionMarkerRW_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerRW.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                oItem.AutoRightWidth = chkPropCrossSectionMarkerRW.Checked
                txtPropCrossSectionMarkerRW.Enabled = Not chkPropCrossSectionMarkerRW.Checked
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionMarkerLW_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerLW.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                oItem.AutoLeftWidth = chkPropCrossSectionMarkerLW.Checked
                txtPropCrossSectionMarkerLW.Enabled = Not chkPropCrossSectionMarkerLW.Checked
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionMarkerDH_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerDH.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                oItem.AutoDownHeight = chkPropCrossSectionMarkerDH.Checked
                txtPropCrossSectionMarkerDH.Enabled = Not chkPropCrossSectionMarkerDH.Checked
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerDH_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerDH.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                oItem.DownHeight = txtPropCrossSectionMarkerDH.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerUH_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerUH.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                oItem.UpHeight = txtPropCrossSectionMarkerUH.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerLW_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerLW.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                oItem.LeftWidth = txtPropCrossSectionMarkerLW.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionMarkerRW_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionMarkerRW.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                oItem.RightWidth = txtPropCrossSectionMarkerRW.Value
                Call .TakeUndoSnapshot()
            End With
            'Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub cmdPropTrigpointDistancesCalculate_Click(sender As Object, e As EventArgs) Handles cmdPropTrigpointDistancesCalculate.Click
        Call pPropertyItemTrigpointCalculateDistance()
    End Sub

    Private Sub pPropertyItemTrigpointCalculateDistance_callback(State As Object)
        Call pPropertyItemTrigpointCalculateDistance()
    End Sub

    Private Delegate Sub pPropertyItemTrigpointCalculateDistanceDelegate()

    Friend Class cDistance
        Public Station As cTrigPoint
        Public Distance As Single

        Public Sub New(Station As cTrigPoint, Distance As Single)
            Me.Station = Station
            Me.Distance = Distance
        End Sub
    End Class

    Private Sub pPropertyItemTrigpointCalculateDistance()
        If InvokeRequired Then
            Call BeginInvoke(New pPropertyItemTrigpointCalculateDistanceDelegate(AddressOf pPropertyItemTrigpointCalculateDistance))
        Else
            Dim bSplay As Boolean = chkPropTrigpointDistancesSplays.Checked
            lvPropTrigpointDistances.Enabled = False
            Call lvPropTrigpointDistances.BeginUpdate()
            Call lvPropTrigpointDistances.Items.Clear()
            If Not IsNothing(oTools.CurrentTrigpoint) Then
                Dim oCurrentTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
                Dim oPlanPoint1 As PointD = New PointD(oCurrentTrigpoint.Data.X, oCurrentTrigpoint.Data.Y)
                Dim oDistances As List(Of cDistance) = New List(Of cDistance)
                For Each oStation As cTrigPoint In oSurvey.TrigPoints
                    If Not oStation Is oTools.CurrentTrigpoint Then
                        If (bSplay AndAlso oStation.Data.IsSplay) OrElse Not oStation.Data.IsSplay Then
                            Dim oPlanPoint2 As PointD = New PointD(oStation.Data.X, oStation.Data.Y)
                            Dim sPlanDistance As Single = modPaint.DistancePointToPoint(oPlanPoint1, oPlanPoint2)
                            Dim sDrop As Single = oCurrentTrigpoint.Data.Z - oStation.Data.Z
                            Dim sDistance As Single = Math.Sqrt(sPlanDistance ^ 2 + sDrop ^ 2)
                            Call oDistances.Add(New cDistance(oStation, sDistance))
                        End If
                    End If
                Next
                oDistances = oDistances.OrderBy(Function(item) item.Distance).Take(20).ToList
                For Each oDistance As cDistance In oDistances
                    Dim oItem As ListViewItem = New ListViewItem(oDistance.Station.Name)
                    Call oItem.SubItems.Add(Strings.Format(oDistance.Distance, "0.00"))
                    oItem.Tag = oDistance.Station
                    If oDistance.Station.Data.IsSplay Then
                        oItem.ForeColor = SystemColors.GrayText
                    End If
                    Call lvPropTrigpointDistances.Items.Add(oItem)
                Next
                lvPropTrigpointDistances.Tag = oDistances
                Call lvPropTrigpointDistances.EndUpdate()
                lvPropTrigpointDistances.Enabled = True
            End If
        End If
    End Sub

    Private Sub lvPropTrigpointDistances_DoubleClick(sender As Object, e As EventArgs) Handles lvPropTrigpointDistances.DoubleClick
        If Not IsNothing(lvPropTrigpointDistances.FocusedItem) Then
            Dim oStation As cTrigPoint = lvPropTrigpointDistances.FocusedItem.Tag
            If Not oStation.Data.IsSplay Then
                Call oTools.SelectTrigpoint(oStation)
            End If
        End If
    End Sub

    'Private Sub tvLayers2_FormatCell(sender As Object, e As FormatCellEventArgs)
    '    If TypeOf e.Item.RowObject Is cItem Then
    '        If e.Column Is colLayersCaveBranchColor Then
    '            Dim oItem As cItem = e.Item.RowObject
    '            e.SubItem.BackColor = oSurvey.Properties.CaveInfos.GetColor(oItem, Color.LightGray)
    '        ElseIf e.Column Is colLayersPreview Then
    '            If bLayersShowItemPreview Then
    '                Dim oItem As cItem = e.Item.RowObject
    '                Dim oItemThumb As Image = oItem.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, 16, 16)
    '                If Not oItemThumb Is Nothing Then
    '                    e.SubItem.ImageSelector = oItemThumb
    '                End If
    '            End If
    '        End If
    '    End If
    'End Sub

    'Private Sub tvLayers2_SelectionChanged(sender As Object, e As EventArgs)
    '    Dim oSelectedItem As Object = tvLayers2.SelectedObject
    '    If TypeOf oSelectedItem Is cItem Then
    '        Dim oItem As cItem = oSelectedItem
    '        If oItem.Deleted Then
    '            piclayerItemPreview.Image = imlLayers.Images("cross")
    '            lbLayerItemTitle.Text = GetLocalizedString("main.textpart5")
    '            lbLayerItemCaption.Text = ""
    '            cmdLayerObjectProperty.Enabled = False
    '            cmdLayerObjectSelect.Enabled = False
    '        Else
    '            Dim oItemThumb As Image = oItem.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, 48, 48)
    '            If oItemThumb Is Nothing Then
    '                piclayerItemPreview.Image = imlLayers.Images("generic_error")
    '            Else
    '                piclayerItemPreview.Image = oItemThumb
    '            End If
    '            lbLayerItemTitle.Text = tvLayers2.SelectedItem.Text
    '            Dim oBounds As RectangleF = oItem.GetBounds
    '            lbLayerItemCaption.Text = "x: " & Strings.Format(oBounds.Left, "0.00") & " y: " & Strings.Format(oBounds.Top, "0.00") & "" & vbCrLf & "w: " & Strings.Format(oBounds.Width, "0.00") & " h: " & Strings.Format(oBounds.Height, "0.00")
    '            cmdLayerObjectProperty.Enabled = True
    '            cmdLayerObjectSelect.Enabled = True
    '        End If
    '    ElseIf TypeOf oSelectedItem Is cLayer Then
    '        piclayerItemPreview.Image = Nothing
    '        lbLayerItemTitle.Text = tvLayers2.SelectedItem.Text
    '        lbLayerItemCaption.Text = ""
    '        cmdLayerObjectProperty.Enabled = False
    '        cmdLayerObjectSelect.Enabled = True
    '    Else
    '        piclayerItemPreview.Image = Nothing
    '        lbLayerItemTitle.Text = ""
    '        lbLayerItemCaption.Text = ""
    '        cmdLayerObjectProperty.Enabled = False
    '        cmdLayerObjectSelect.Enabled = False
    '    End If
    'End Sub

    'Private Sub tvLayers2_DoubleClick(sender As Object, e As EventArgs)
    '    Dim oSelectedItem As Object = tvLayers2.SelectedObject
    '    If TypeOf oSelectedItem Is cItem Then
    '        Dim oItem As cItem = oSelectedItem
    '        If Not oItem.Deleted Then
    '            Call pGetCurrentDesignTools.SelectItem(oItem)
    '            If My.Computer.Keyboard.CtrlKeyDown Then
    '                Call pMapCenterAndFitSelection()
    '            End If
    '            Call pMapInvalidate()
    '        End If
    '    ElseIf TypeOf oSelectedItem Is cLayer Then
    '        Dim oLayer As cLayer = oSelectedItem
    '        Call pGetCurrentDesignTools.SelectLayer(oLayer)
    '    End If
    'End Sub

    'Private Sub cmdLayerSync_Click(sender As Object, e As EventArgs)
    '    If Not IsNothing(oCurrentDesign) Then
    '        If Not IsNothing(pGetCurrentDesignTools.CurrentItem) Then
    '            Call tvLayers2.Reveal(pGetCurrentDesignTools.CurrentItem, True)
    '            Call tvLayers2.EnsureModelVisible(tvLayers2.SelectedObject)
    '        End If
    '    End If
    'End Sub

    'Private Sub mnuLayersAndItemsCollapse_Click(sender As Object, e As EventArgs) Handles mnuLayersAndItemsCollapse.Click
    '    If Not IsNothing(tvLayers2.FocusedItem) Then
    '        Call tvLayers2.Collapse(tvLayers2.FocusedObject)
    '    End If
    'End Sub

    'Private Sub mnuLayersAndItemsCollapseAll_Click(sender As Object, e As EventArgs) Handles mnuLayersAndItemsCollapseAll.Click
    '    Call pSurveyLayersCollapse()
    'End Sub

    'Private Sub oDockDesigner_VisibleChanged(sender As Object, e As EventArgs) Handles oDockDesigner.VisibleChanged
    '    If Not oDockDesigner.Visible Then
    '        If Not IsNothing(frmMFT) AndAlso frmMFT.Visible Then
    '            frmMFT.Visible = False
    '        End If
    '    End If
    'End Sub

    'Private Sub oDockDesigner_Leave(sender As Object, e As EventArgs) Handles oDockDesigner.Leave
    '    If Not IsNothing(frmMFT) AndAlso frmMFT.Visible Then
    '        frmMFT.Visible = False
    '    End If
    'End Sub

    Private Sub chkPropCrossSectionMarkerScaleEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerScaleEnabled.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionMarker = .CurrentItem
                oItem.TextSizeEnabled = chkPropCrossSectionMarkerScaleEnabled.Checked
                cboPropCrossSectionMarkerScale.Enabled = chkPropCrossSectionMarkerScaleEnabled.Checked
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub chkPropCrossSectionMarkerPlanDeltaAngleEnabled_CheckedChanged(sender As Object, e As EventArgs) Handles chkPropCrossSectionMarkerDeltaAngleEnabled.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If TypeOf .CurrentItem Is cIItemPlanCrossSectionMarker Then
                    Dim oItem As cIItemPlanCrossSectionMarker = .CurrentItem
                    oItem.PlanDeltaAngleEnabled = chkPropCrossSectionMarkerDeltaAngleEnabled.Checked
                    'txtPropCrossSectionMarkerDeltaAngle.Enabled = chkPropCrossSectionMarkerDeltaAngleEnabled.Checked
                ElseIf TypeOf .CurrentItem Is cIItemProfileCrossSectionMarker Then
                    Dim oItem As cIItemProfileCrossSectionMarker = .CurrentItem
                    oItem.ProfileDeltaAngleEnabled = chkPropCrossSectionMarkerDeltaAngleEnabled.Checked
                    'txtPropCrossSectionMarkerDeltaAngle.Enabled = chkPropCrossSectionMarkerDeltaAngleEnabled.Checked
                End If

                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub txtPropCrossSectionSplayProjectionVerticalAngle_ValueChanged(sender As Object, e As EventArgs) Handles txtPropCrossSectionSplayProjectionVerticalAngle.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemCrossSectionSplayBorder = .CurrentItem
                oItem.SplayBorderProjectionVerticalAngle = txtPropCrossSectionSplayProjectionVerticalAngle.Value
                Call .TakeUndoSnapshot()
            End With
            'todo: check how to redraw only preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    'Private Sub tvLayers2_KeyUp(sender As Object, e As KeyEventArgs)
    '    If e.KeyCode = Keys.H Then
    '        If e.Shift Then
    '            Dim oSelectedItem As Object = tvLayers2.SelectedObject
    '            If TypeOf oSelectedItem Is cItem Then
    '                Dim oItem As cItem = oSelectedItem
    '                oItem.HiddenInPreview = Not oItem.HiddenInPreview
    '            ElseIf TypeOf oSelectedItem Is cLayer Then
    '                Dim oLayer As cLayer = oSelectedItem
    '                oLayer.HiddenInPreview = Not oLayer.HiddenInPreview
    '            End If
    '        Else
    '            Dim oSelectedItem As Object = tvLayers2.SelectedObject
    '            If TypeOf oSelectedItem Is cItem Then
    '                Dim oItem As cItem = oSelectedItem
    '                oItem.HiddenInDesign = Not oItem.HiddenInDesign
    '            ElseIf TypeOf oSelectedItem Is cLayer Then
    '                Dim oLayer As cLayer = oSelectedItem
    '                oLayer.HiddenInDesign = Not oLayer.HiddenInDesign
    '            End If
    '        End If
    '        Call tvLayers2.RefreshSelectedObjects()
    '        Call pMapInvalidate()
    '    End If
    'End Sub

    Private Sub chkSegmentCalibration_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentCalibration.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub pSegmentAttachmentOpen()
        Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
        If Not IsNothing(oAttachment) Then
            Call pAttachmentOpen(oAttachment)
        End If
    End Sub

    Private Sub pAudioViewerShow(Attachment As cAttachmentsLink)
        Call oDockAV.Open(Attachment, True)
        Call pDockContentShow(dockAV, True)
    End Sub

    Private Sub pAttachmentOpen(Attachment As cAttachmentsLink)
        If bAlwaysUseShellForAttachments Then
            Call Attachment.Attachment.OpenInShell()
        Else
            Select Case Attachment.GetCategory
                Case FTTLib.FileCategory.Audio
                    Call pAudioViewerShow(Attachment)
                Case FTTLib.FileCategory.Image
                    Call pImageViewerShow(Attachment)
                Case Else
                    Call Attachment.Attachment.OpenInShell()
            End Select
        End If
    End Sub

    Private Sub oDockAV_OnGotoOwner(Sender As Object, Args As cDockAudioViewer.cGotoOWnerEventArgs) Handles oDockAV.OnGotoOwner
        Dim oOwner As Object = Args.Owner
        If TypeOf oOwner Is cSegment Then
            Call pSegmentSelect(oOwner, True, True)
        ElseIf TypeOf oOwner Is cItemAttachment Then
            Call pGetCurrentDesignTools.SelectItem(oOwner)
        End If
    End Sub

    Private Sub cmdPropAttachmentBrowse_Click(sender As Object, e As EventArgs) Handles cmdPropAttachmentBrowse.Click
        With pGetCurrentDesignTools()
            Using oOFD As OpenFileDialog = New OpenFileDialog
                oOFD.Filter = modMain.GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                oOFD.FilterIndex = 1
                If oOFD.ShowDialog(Me) = DialogResult.OK Then
                    Dim oItem As cItemAttachment = pGetCurrentDesignTools.CurrentItem
                    Call oItem.SetAttachment(oOFD.FileName)
                    Call .TakeUndoSnapshot()
                    Call pMapInvalidate()
                End If
            End Using
        End With
    End Sub

    Private Sub cmdPropAttachmentOpen_Click(sender As Object, e As EventArgs) Handles cmdPropAttachmentOpen.Click
        Dim oItem As cItemAttachment = pGetCurrentDesignTools.CurrentItem
        Call pAttachmentOpen(oItem.Attachment)
    End Sub

    Private Sub txtPropAttachmentName_Validated(sender As Object, e As EventArgs) Handles txtPropAttachmentName.Validated
        With pGetCurrentDesignTools()
            Dim oItem As cItemAttachment = .CurrentItem
            If Not oItem Is Nothing Then
                oItem.Attachment.Attachment.Name = txtPropAttachmentName.Text
                Call .TakeUndoSnapshot()
                Call pMapInvalidate()
            End If
        End With
    End Sub

    Private Sub txtPropAttachmentNote_Validated(sender As Object, e As EventArgs) Handles txtPropAttachmentNote.Validated
        With pGetCurrentDesignTools()
            Dim oItem As cItemAttachment = .CurrentItem
            If Not oItem Is Nothing Then
                oItem.Attachment.Attachment.Note = txtPropAttachmentNote.Text
                Call .TakeUndoSnapshot()
            End If
        End With
        Call pMapInvalidate()
    End Sub

    Private Function pGetCurrentTools() As Helper.Editor.cEditTools
        Return oTools
    End Function

    Private Function pGetCurrentDesignTools() As Helper.Editor.cEditDesignTools
        If oCurrentDesign Is oSurvey.Plan Then
            Return oPlanTools
        ElseIf oCurrentDesign Is oSurvey.Profile Then
            Return oProfileTools
        Else
            Return o3DTools
        End If
    End Function

    Private Sub oSurvey_OnCrossSectionsChange(Sender As cSurvey.cSurvey, Args As cSurvey.cSurvey.OnCrossSectionChangeEventArgs) Handles oSurvey.OnCrossSectionsChange
        If Not IsNothing(oCurrentDesign) Then
            Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
        End If
    End Sub

    Private Sub oPlanTools_OnLastPointChange(Sender As Object, ToolEventArgs As EventArgs) Handles oPlanTools.OnLastPointChange, oProfileTools.OnLastPointChange
        Call pMapInvalidate()
    End Sub

    Private Sub ObjectProperty_OnMapInvalidate(Sender As Object, e As EventArgs) Handles cPropScaleItems.OnMapInvalidate, cPropName.OnMapInvalidate, cPropLegendItems.OnMapInvalidate, cPropCompassItems.OnMapInvalidate, cDesignPrintOrExportArea.OnMapInvalidate, cDesignLinkedSurveys.OnMapInvalidate, c3DLinkedSurveys.OnMapInvalidate, cPropVisibility.OnMapInvalidate, cPropTransparency.OnMapInvalidate, cPropLineType.OnMapInvalidate, cPropPointLineType.OnMapInvalidate, cDesignCenterline.OnMapInvalidate, cDesignSurfaceProfile.OnMapInvalidate, cDesignStyle.OnMapInvalidate, cDesignSurface.OnMapInvalidate, c3DDesignSurface.OnMapInvalidate, c3DAltitudeAmplification.OnMapInvalidate, c3DDesignModel.OnMapInvalidate
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call oHolos.Invalidate()
        Else
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub ObjectProperty_OnGetFlags(Sender As Object, e As FlagEventArgs) Handles cPropScaleItems.OnGetFlags, cPropName.OnGetFlags, cPropLegendItems.OnGetFlags, cPropCompassItems.OnGetFlags, cDesignPrintOrExportArea.OnGetFlags, cDesignLinkedSurveys.OnGetFlags, c3DLinkedSurveys.OnGetFlags, cPropVisibility.OnGetFlags, cPropTransparency.OnGetFlags, cPropLineType.OnGetFlags, cPropPointLineType.OnGetFlags, cDesignCenterline.OnGetFlags, cDesignSurfaceProfile.OnGetFlags, cDesignStyle.OnGetFlags, cDesignSurface.OnGetFlags, c3DDesignSurface.OnGetFlags, c3DAltitudeAmplification.OnGetFlags, c3DDesignModel.OnGetFlags
        Select Case e.Flag
            Case FlagEventArgs.Flags.DisabledObjectPropertyEvent
                e.Value = bDisabledObjectPropertyEvent
        End Select
    End Sub

    Private Sub ObjectProperty_OnDrawInvalidate(Sender As Object, e As EventArgs) Handles cPropScaleItems.OnDrawInvalidate, cPropName.OnDrawInvalidate, cPropLegendItems.OnDrawInvalidate, cPropCompassItems.OnDrawInvalidate, cDesignPrintOrExportArea.OnDrawInvalidate, cDesignLinkedSurveys.OnDrawInvalidate, c3DLinkedSurveys.OnDrawInvalidate, cPropVisibility.OnDrawInvalidate, cPropTransparency.OnDrawInvalidate, cPropLineType.OnDrawInvalidate, cPropPointLineType.OnDrawInvalidate, cDesignCenterline.OnDrawInvalidate, cDesignSurfaceProfile.OnDrawInvalidate, cDesignStyle.OnDrawInvalidate, cDesignSurface.OnDrawInvalidate, c3DDesignSurface.OnDrawInvalidate, c3DAltitudeAmplification.OnDrawInvalidate, c3DDesignModel.OnDrawInvalidate
        Call oCurrentDesign.Caches.Invalidate()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Dim oArgs As cHolosViewer.cDrawInvalidateEventArgs = e
            Call oHolos.Invalidate(oArgs.Invalidate)
        Else
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub ObjectProperty_OnSetFlags(Sender As Object, e As FlagEventArgs) Handles cPropScaleItems.OnGetFlags, cPropName.OnSetFlags, cPropLegendItems.OnSetFlags, cPropCompassItems.OnSetFlags, cDesignPrintOrExportArea.OnSetFlags, cDesignLinkedSurveys.OnSetFlags, c3DLinkedSurveys.OnSetFlags, cPropVisibility.OnSetFlags, cPropTransparency.OnSetFlags, cPropLineType.OnSetFlags, cPropPointLineType.OnSetFlags, cDesignCenterline.OnSetFlags, cDesignSurfaceProfile.OnSetFlags, cDesignStyle.OnSetFlags, cDesignSurface.OnSetFlags, c3DDesignSurface.OnSetFlags, c3DAltitudeAmplification.OnSetFlags, c3DDesignModel.OnSetFlags
        Select Case e.Flag
            Case FlagEventArgs.Flags.DisabledObjectPropertyEvent
                bDisabledObjectPropertyEvent = e.Value
        End Select
    End Sub

    Private Sub ObjectProperty_OnDoCommand(Sender As Object, e As DoCommandEventArgs) Handles cPropScaleItems.OnDoCommand, cPropName.OnDoCommand, cPropLegendItems.OnDoCommand, cPropCompassItems.OnDoCommand, cDesignPrintOrExportArea.OnDoCommand, cDesignLinkedSurveys.OnDoCommand, c3DLinkedSurveys.OnDoCommand, cPropVisibility.OnDoCommand, cPropTransparency.OnDoCommand, cPropLineType.OnDoCommand, cPropPointLineType.OnDoCommand, cDesignCenterline.OnDoCommand, cDesignSurfaceProfile.OnDoCommand, cDesignStyle.OnDoCommand, cDesignSurface.OnDoCommand, c3DDesignSurface.OnDoCommand, c3DAltitudeAmplification.OnDoCommand, c3DDesignModel.OnDoCommand
        Select Case e.Command.ToLower
            Case "surfacedetails"
                Call pSurveySurface()
            Case "linkedsurveys"
                Call pLinkedSurveyShow()
            Case "ringsdetails"
                Call pSurveyInfoRing()
            Case "edithighlights"
                Call pSurveyProperty(12)
            Case "splayreplicatedata"
                Call pSplayReplicateData()
        End Select
    End Sub

    Private Sub ObjectProperty_OnObjectPropertyLoad(Sender As Object, e As EventArgs) Handles c3DLinkedSurveys.OnMapInvalidate, cPropScaleItems.OnObjectPropertyLoad, cPropLegendItems.OnObjectPropertyLoad, cPropCompassItems.OnObjectPropertyLoad, cDesignPrintOrExportArea.OnObjectPropertyLoad, cDesignLinkedSurveys.OnObjectPropertyLoad, c3DLinkedSurveys.OnObjectPropertyLoad, cPropVisibility.OnObjectPropertyLoad, cPropTransparency.OnObjectPropertyLoad, cPropLineType.OnObjectPropertyLoad, cPropPointLineType.OnObjectPropertyLoad, cDesignCenterline.OnObjectPropertyLoad, cDesignSurfaceProfile.OnObjectPropertyLoad, cDesignStyle.OnObjectPropertyLoad, cDesignSurface.OnObjectPropertyLoad, c3DDesignSurface.OnObjectPropertyLoad, c3DAltitudeAmplification.OnObjectPropertyLoad, c3DDesignModel.OnObjectPropertyLoad
        Call pObjectPropertyLoad()
    End Sub

    Private Sub btnCurrentItemLegendAddToItem_ItemClick(sender As Object, e As ItemClickEventArgs)
        Dim oLegendItem As BarButtonItem = e.Item
        Dim oItem As cItemLegend = oLegendItem.Tag
        Call oItem.AddItem(pGetCurrentDesignTools.CurrentItem)
        Call pMapInvalidate()
    End Sub

    Private Sub mnuAliases_Opening(sender As Object, e As CancelEventArgs)
        'mnuAliasesRemove.Enabled = (Not IsNothing(grdTrigPointAliases.CurrentRow) AndAlso Not grdTrigPointAliases.CurrentRow.IsNewRow)
    End Sub

    Private Sub oProfileTools_OnChangeDesign(Sender As Object, ChangeDesignEventArgs As cEditDesignTools.cChangeDesignEventArgs) Handles oProfileTools.OnChangeDesign
        Select Case ChangeDesignEventArgs.NewTool.Design.Type
            Case cIDesign.cDesignTypeEnum.Plan
                Call pSurveyShowPlan()
            Case cIDesign.cDesignTypeEnum.Profile
                Call pSurveyShowProfile()
            Case cIDesign.cDesignTypeEnum.ThreeDModel
                Call pSurveyShow3D()
        End Select
    End Sub

    Private Sub oPlanTools_OnChangeDesign(Sender As Object, ChangeDesignEventArgs As cEditDesignTools.cChangeDesignEventArgs) Handles oPlanTools.OnChangeDesign
        Select Case ChangeDesignEventArgs.NewTool.Design.Type
            Case cIDesign.cDesignTypeEnum.Plan
                Call pSurveyShowPlan()
            Case cIDesign.cDesignTypeEnum.Profile
                Call pSurveyShowProfile()
            Case cIDesign.cDesignTypeEnum.ThreeDModel
                Call pSurveyShow3D()
        End Select
    End Sub

    Private Sub oSurvey_onLinkedSurveysAdd(Sender As cSurvey.cSurvey, Args As cSurvey.cSurvey.OnLinkedSurveysAddEventargs) Handles oSurvey.OnLinkedSurveysAdd
        If bLinkedSurveysSelectOnAdd Then
            Call Args.NewItem.SetSelected("loch", True)
            Call Args.NewItem.SetSelected("design.plan", True)
            Call Args.NewItem.SetSelected("design.profile", True)
            Call Args.NewItem.SetSelected("design.3d", True)
        End If
        Args.RecursiveLoad = bLinkedSurveysRecursiveLoad
        Args.PrioritizeChildren = bLinkedSurveysRefreshOnLoadPrioritizeChildren
    End Sub

    Private Sub oSurvey_OnLinkedSurveysLoad(Sender As cSurvey.cSurvey, Args As cSurvey.cSurvey.OnLinkedSurveysLoadEventargs) Handles oSurvey.OnLinkedSurveysLoad
        Args.RefreshOnLoad = bLinkedSurveysRefreshOnLoad
    End Sub

    Private Sub oSurvey_OnLinkedSurveysRefresh(Sender As cSurvey.cSurvey, Args As EventArgs) Handles oSurvey.OnLinkedSurveysRefresh
        Call pMapInvalidate()
    End Sub

    Private Sub tabTrigpointCoordinate_DragDrop(sender As Object, e As DragEventArgs)
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Dim iDropAction As DropActionEnum = pDropExtensionCheck(sFilePaths(0))
                If iDropAction = DropActionEnum.ImportKMLData OrElse iDropAction = DropActionEnum.ImportGPXData Then
                    Dim oCoordinate As cCoordinate = Nothing
                    Select Case iDropAction
                        Case DropActionEnum.ImportGPXData
                            oCoordinate = modImport.ImportWaypointGPX(sFilePaths(0))
                        Case DropActionEnum.ImportKMLData
                            oCoordinate = modImport.ImportWaypointKML(sFilePaths(0))
                    End Select
                    If Not IsNothing(oCoordinate) Then
                        cboTrigpointCoordinateFormat.SelectedIndex = 2
                        cboTrigpointCoordinateGeo.SelectedIndex = 0
                        txtTrigpointCoordinateLat.Text = oCoordinate.Latitude
                        txtTrigpointCoordinateLong.Text = oCoordinate.Longitude
                        txtTrigpointCoordinateAlt.Text = oCoordinate.Altitude
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub tabTrigpointCoordinate_DragOver(sender As Object, e As DragEventArgs)
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Dim iDropAction As DropActionEnum = pDropExtensionCheck(sFilePaths(0))
                If iDropAction = DropActionEnum.ImportKMLData OrElse iDropAction = DropActionEnum.ImportGPXData Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            Else
                e.Effect = DragDropEffects.None
            End If
        End If
    End Sub

    Private Sub lblPopupWarning_Click(sender As Object, e As EventArgs) Handles lblPopupWarning.Click
        Call pConsoleShow(True)
    End Sub

    Private Sub pWorkspacesManage()
        Using frmMW As frmManageWorkspaces = New frmManageWorkspaces()
            AddHandler frmMW.OnGetWorkspaceState, AddressOf frmManagekWorkspaces_OnGetWorkspaceState
            AddHandler frmMW.OnSetWorkspaceState, AddressOf frmManagekWorkspaces_OnSetWorkspaceState
            AddHandler frmMW.OnRestoreDefaultWorkspace, AddressOf frmManagekWorkspaces_OnRestoreDefaultWorkspace
            Call frmMW.ShowDialog(Me)
            'refresh workspace menu...
            Call pWorkspacesMenuAndToolbarUpdate()
            RemoveHandler frmMW.OnGetWorkspaceState, AddressOf frmManagekWorkspaces_OnGetWorkspaceState
            RemoveHandler frmMW.OnSetWorkspaceState, AddressOf frmManagekWorkspaces_OnSetWorkspaceState
            RemoveHandler frmMW.OnRestoreDefaultWorkspace, AddressOf frmManagekWorkspaces_OnRestoreDefaultWorkspace
        End Using
    End Sub

    Private Sub mnuViewWorkspacesManage_Click(sender As Object, e As EventArgs)
        Call pWorkspacesManage()
    End Sub

    Private Sub mnuViewWorkspacesItem_click(sender As Object, e As EventArgs)
        Try
            Call pWorkspaceApply(frmManageWorkspaces.LoadWorkspace(DirectCast(sender, ToolStripItem).Name.Substring(18)))
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private Sub WorkspaceManager_PropertyDeserializing(sender As Object, ea As DevExpress.Utils.PropertyCancelEventArgs) Handles WorkspaceManager.PropertyDeserializing
        If ea.PropertyName.ToLower = "text" Then
            ea.Cancel = True
        End If
    End Sub

    Private oBottomDataBar As Bar
    Private oTopGlobalFilterBar As Bar
    Private oTopDesignLevelBar As Bar
    Private oTopDesignItemsBar As Bar
    Private oBottomDesignBar As Bar

    Private Sub pWorkspacesMenuAndToolbarUpdate()
        barDesignerItemFloat.ItemLinks.Add(btnItemsEndEdit, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.Add(btnDesignSetCurrentCaveBranch, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.Add(btnCut, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.AddRange({btnCopy, btnPaste}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.Add(btnDelete, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.Add(btnItemsLayouts, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.Add(btnCurrentItemGenericCombine, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.Add(btnCurrentItemSegmentDirection, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemFloat.ItemLinks.Add(btnCurrentItemLock, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)

        barDesignerItemPointFloat.ItemLinks.AddRange({btnCurrentItemPointAdd, btnCurrentItemPointDelete}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemPointFloat.ItemLinks.Add(btnCurrentItemPointsJoin, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemPointFloat.ItemLinks.AddRange({btnCurrentItemPointsJoinAndConnect, btnCurrentItemPointsUnjoinAll}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        barDesignerItemPointFloat.ItemLinks.AddRange({btnCurrentItemPointSequenceDivide, btnCurrentItemPointSequenceDivideAndJoin, btnCurrentItemPointRevertSequence, btnCurrentItemPointDeleteSequence}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)


        dockBottomSegmentsAndTrigpoints.Manager = RibbonControl.Manager
        oBottomDataBar = New Bar(RibbonControl.Manager, "Data bar")
        oBottomDataBar.OptionsBar.AllowQuickCustomization = False
        oBottomDataBar.OptionsBar.DisableCustomization = False
        oBottomDataBar.OptionsBar.DrawSizeGrip = False
        oBottomDataBar.OptionsBar.UseWholeRow = True
        oBottomDataBar.OptionsBar.DisableClose = True
        oBottomDataBar.OptionsBar.DrawDragBorder = False
        oBottomDataBar.StandaloneBarDockControl = dockBottomSegmentsAndTrigpoints
        oBottomDataBar.DockStyle = BarDockStyle.Standalone
        'oBottomDataBar.ItemLinks.AddRange({btnSegments, btnTrigpoints, btnSegmentsAndTrigPoints}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oBottomDataBar.ItemLinks.AddRange({btnSegments, btnTrigpoints}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oBottomDataBar.ItemLinks.Add(btnSegmentAndTrigpointGridColor, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)

        dockTopGlobalBar.Manager = RibbonControl.Manager
        oTopGlobalFilterBar = New Bar(RibbonControl.Manager, "Main filter bar")
        oTopGlobalFilterBar.OptionsBar.AllowQuickCustomization = False
        oTopGlobalFilterBar.OptionsBar.DisableCustomization = True
        oTopGlobalFilterBar.OptionsBar.DrawSizeGrip = False
        oTopGlobalFilterBar.OptionsBar.UseWholeRow = True
        oTopGlobalFilterBar.OptionsBar.DisableClose = True
        oTopGlobalFilterBar.OptionsBar.DrawDragBorder = False
        oTopGlobalFilterBar.StandaloneBarDockControl = dockTopGlobalBar
        oTopGlobalFilterBar.DockStyle = BarDockStyle.Standalone
        oTopGlobalFilterBar.ItemLinks.AddRange({btnMainCaveList, btnMainCaveBranchList}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopGlobalFilterBar.ItemLinks.Add(btnGroupCaveFilters, False, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        'oTopGlobalFilterBar.ItemLinks.Add(btnGroupDesignFilters, True)
        oTopGlobalFilterBar.ItemLinks.Add(btnMainBindDesignType, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopGlobalFilterBar.ItemLinks.AddRange({btnMainBindCrossSections}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopGlobalFilterBar.ItemLinks.Add(btnObjectSetCaveBranch, True)
        oTopGlobalFilterBar.ItemLinks.Add(btnViewSplayShowMode, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)

        dockTopDesignerBar.Manager = RibbonControl.Manager
        oTopDesignLevelBar = New Bar(RibbonControl.Manager, "Designer level bar")
        oTopDesignLevelBar.OptionsBar.AllowQuickCustomization = False
        oTopDesignLevelBar.OptionsBar.DisableCustomization = False
        oTopDesignLevelBar.OptionsBar.DrawSizeGrip = False
        oTopDesignLevelBar.OptionsBar.UseWholeRow = True
        oTopDesignLevelBar.OptionsBar.DisableClose = True
        oTopDesignLevelBar.OptionsBar.DrawDragBorder = False
        oTopDesignLevelBar.StandaloneBarDockControl = dockTopDesignerBar
        oTopDesignLevelBar.DockStyle = BarDockStyle.Standalone
        oTopDesignLevelBar.ItemLinks.AddRange({btnLayer_Base, btnLayer_Soil, btnLayer_Water, btnLayer_Rocks, btnLayer_TerrainLevel, btnLayer_Borders, btnLayer_Signs}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)

        oTopDesignItemsBar = New Bar(RibbonControl.Manager, "Designer new items bar")
        oTopDesignItemsBar.OptionsBar.AllowQuickCustomization = False
        oTopDesignItemsBar.OptionsBar.DisableCustomization = False
        oTopDesignItemsBar.OptionsBar.DrawSizeGrip = False
        oTopDesignItemsBar.OptionsBar.UseWholeRow = True
        oTopDesignItemsBar.OptionsBar.DisableClose = True
        oTopDesignItemsBar.OptionsBar.DrawDragBorder = False
        oTopDesignItemsBar.StandaloneBarDockControl = dockTopDesignerBar
        oTopDesignItemsBar.DockStyle = BarDockStyle.Standalone
        oTopDesignItemsBar.ItemLinks.AddRange(grpDesignItemsAdd.ItemLinks.Select(Function(oitem) oitem.Item).ToList)

        dockBottomDesignerBar.Manager = RibbonControl.Manager
        'Dim oBottomPenBar As Bar = New Bar(RibbonControl.Manager, "Pen tools bar")
        'oBottomPenBar.OptionsBar.AllowQuickCustomization = False
        'oBottomPenBar.OptionsBar.DisableCustomization = False
        'oBottomPenBar.OptionsBar.DrawSizeGrip = False
        'oBottomPenBar.OptionsBar.UseWholeRow = True
        'oBottomPenBar.OptionsBar.DisableClose = True
        'oBottomPenBar.OptionsBar.DrawDragBorder = False
        'oBottomPenBar.StandaloneBarDockControl = dockBottomDesignerBar
        'oBottomPenBar.DockStyle = BarDockStyle.Standalone
        'oBottomPenBar.ItemLinks.AddRange({btnPenLine, btnPenSpline, btnPenBezier})
        'oBottomPenBar.ItemLinks.Add(btnPenSmooting, True)
        'oBottomPenBar.ItemLinks.AddRange({btnPenSmootingFactor})

        oBottomDesignBar = New Bar(RibbonControl.Manager, "Designer tools bar")
        oBottomDesignBar.OptionsBar.AllowQuickCustomization = False
        oBottomDesignBar.OptionsBar.DisableCustomization = False
        oBottomDesignBar.OptionsBar.DrawSizeGrip = False
        oBottomDesignBar.OptionsBar.UseWholeRow = True
        oBottomDesignBar.OptionsBar.DisableClose = True
        oBottomDesignBar.OptionsBar.DrawDragBorder = False
        oBottomDesignBar.StandaloneBarDockControl = dockBottomDesignerBar
        oBottomDesignBar.DockStyle = BarDockStyle.Standalone
        oBottomDesignBar.ItemLinks.AddRange({btnViewPlan, btnViewProfile, btnView3D})
        oBottomDesignBar.ItemLinks.Add(btnItemsEndEdit, True)
        oBottomDesignBar.ItemLinks.Add(btnCursorMode, True)
        oBottomDesignBar.ItemLinks.AddRange({btnAltMode, btnMultiSelMode1, btnMultiSelMode2})
        oBottomDesignBar.ItemLinks.Add(btnSnapToPointNone, True)
        oBottomDesignBar.ItemLinks.AddRange({btnSnapToPoint0, btnSnapToPoint1, btnSnapToPoint2})
        oBottomDesignBar.ItemLinks.Add(btnViewRulers, True)
        oBottomDesignBar.ItemLinks.AddRange({btnViewMetricGrid}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btnEditDrawing, True)
        oBottomDesignBar.ItemLinks.AddRange({btnEditPointToPoint})
        oBottomDesignBar.ItemLinks.Add(btn3DViewTop, True)
        oBottomDesignBar.ItemLinks.AddRange({btn3DViewBottom, btn3dViewNS, btn3dViewSN, btn3dViewEW, btn3dViewWE})
        oBottomDesignBar.ItemLinks.Add(btn3DCameraType, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btn3DCameraMode, False, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btnDesignPlotShowBindings, True)
        oBottomDesignBar.ItemLinks.Add(btnGroupDesignFilters, True)
        oBottomDesignBar.ItemLinks.Add(btnGrpPensType, True)
        oBottomDesignBar.ItemLinks.Add(btnGrpPenSmooting, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btnAlignToGridOptions, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)

        'oBottomDesignBar.ItemLinks.Add(btnPenLine, True)
        'oBottomDesignBar.ItemLinks.AddRange({btnPenSpline, btnPenBezier})
        'oBottomDesignBar.ItemLinks.Add(btnPenSmooting, True)
        'oBottomDesignBar.ItemLinks.AddRange({btnPenSmootingFactor}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)

        'here update workspaces menu and toolbar
        'Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
        '    Dim oShowInToolbar As List(Of String) = New List(Of String)
        '    Call oShowInToolbar.AddRange(oReg.GetValue("workspaces.showintoolbar", "").ToString.Split({";"}, StringSplitOptions.RemoveEmptyEntries))

        '    For iIndex As Integer = mnuViewWorkspaces.DropDownItems.Count - 1 To 0 Step -1
        '        If mnuViewWorkspaces.DropDownItems(iIndex).Name Like "mnuworkspacesitem_*" Then
        '            mnuViewWorkspaces.DropDownItems.RemoveAt(iIndex)
        '        End If
        '    Next
        '    For Each sShowInToolbar As String In oShowInToolbar
        '        Dim oNewItem As ToolStripMenuItem = New ToolStripMenuItem(sShowInToolbar, Nothing, AddressOf mnuViewWorkspacesItem_click, "mnuworkspacesitem_" & sShowInToolbar)
        '        mnuViewWorkspaces.DropDownItems.Insert(mnuViewWorkspaces.DropDownItems.IndexOf(mnuViewWorkspacesSep2), oNewItem)
        '    Next
        '    mnuViewWorkspacesSep2.Visible = oShowInToolbar.Count > 0

        '    For iIndex As Integer = tbWorkspaces.Items.Count - 1 To 0 Step -1
        '        If tbWorkspaces.Items(iIndex).Name Like "btnworkspacesitem_*" Then
        '            tbWorkspaces.Items.RemoveAt(iIndex)
        '        End If
        '    Next

        '    For Each sShowInToolbar As String In oShowInToolbar
        '        Dim oNewItem As ToolStripButton = New ToolStripButton(sShowInToolbar, Nothing, AddressOf mnuViewWorkspacesItem_click, "btnworkspacesitem_" & sShowInToolbar)
        '        tbWorkspaces.Items.Insert(tbWorkspaces.Items.IndexOf(btnWorkspaceSep2), oNewItem)
        '    Next
        'End Using

        RibbonControl.SelectedPage = pageHome
    End Sub

    Private Sub frmManagekWorkspaces_OnRestoreDefaultWorkspace(sender As Object, e As EventArgs)
        Call pWorkspacesRestore()
    End Sub

    'Private Sub pDockStateSave()
    '    Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
    '        Using oMS As MemoryStream = New MemoryStream
    '            Call oDockPanel.SaveAsXml(oMS, System.Text.Encoding.UTF8)
    '            Call oReg.SetValue("user.dockstate", oMS.ToArray, Microsoft.Win32.RegistryValueKind.Binary)
    '            Call oReg.Close()
    '        End Using
    '    End Using
    'End Sub

    'Private Sub pToolbarStateSave()
    'End Sub

    Private Sub pWorkspaceApply(Document As XmlDocument)
        'Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
        '    Call oReg.SetValue("user.viewmainbar", modXML.GetAttributeValue(Document.DocumentElement, "viewmainbar", 1))
        '    Call oReg.SetValue("user.viewviewbar", modXML.GetAttributeValue(Document.DocumentElement, "viewviewbar", 1))
        '    Call oReg.SetValue("user.viewlayerbar", modXML.GetAttributeValue(Document.DocumentElement, "viewlayerbar", 1))
        '    Call oReg.SetValue("user.viewtoolsbar", modXML.GetAttributeValue(Document.DocumentElement, "viewtoolsbar", 1))
        '    Call oReg.SetValue("user.viewpensbar", modXML.GetAttributeValue(Document.DocumentElement, "viewpensbar", 0))
        '    Call oReg.SetValue("user.viewworkspacesbar", modXML.GetAttributeValue(Document.DocumentElement, "viewworkspacesbar", 0))
        '    Call oReg.SetValue("user.viewpenbar", modXML.GetAttributeValue(Document.DocumentElement, "viewpensbar", 0))

        '    Call oReg.SetValue("user.viewmainbar.position", modXML.GetAttributeValue(Document.DocumentElement, "viewmainbar_position", ""))
        '    Call oReg.SetValue("user.viewviewbar.position", modXML.GetAttributeValue(Document.DocumentElement, "viewviewbar_position", ""))
        '    Call oReg.SetValue("user.viewlayerbar.position", modXML.GetAttributeValue(Document.DocumentElement, "viewlayerbar_position", ""))
        '    Call oReg.SetValue("user.viewtoolsbar.position", modXML.GetAttributeValue(Document.DocumentElement, "viewtoolsbar_position", ""))
        '    Call oReg.SetValue("user.viewpensbar.position", modXML.GetAttributeValue(Document.DocumentElement, "viewpensbar_position", ""))
        '    Call oReg.SetValue("user.viewworkspacesbar.position", modXML.GetAttributeValue(Document.DocumentElement, "viewworkspacesbar_position", ""))

        '    Using oMS As MemoryStream = New MemoryStream
        '        Call oReg.SetValue("user.dockstate", Convert.FromBase64String(Document.DocumentElement.GetAttribute("dockstate")), Microsoft.Win32.RegistryValueKind.Binary)
        '    End Using

        '    Call oReg.Close()
        'End Using
    End Sub

    Private Sub frmManagekWorkspaces_OnSetWorkspaceState(Sender As Object, e As frmManageWorkspaces.cManageWorkspacesStateEventArgs)
        Call pWorkspaceApply(e.Document)
    End Sub

    Private Sub frmManagekWorkspaces_OnGetWorkspaceState(Sender As Object, e As frmManageWorkspaces.cManageWorkspacesStateEventArgs)
        '    Dim oXmlRoot As XmlElement = e.Document.DocumentElement
        '    Call oXmlRoot.SetAttribute("viewlogbar", If(oDockConsole.Visible, 1, 0))

        '    Using oMS As MemoryStream = New MemoryStream
        '        Call oDockPanel.SaveAsXml(oMS, System.Text.Encoding.UTF8)
        '        Call oXmlRoot.SetAttribute("dockstate", Convert.ToBase64String(oMS.ToArray))
        '    End Using
    End Sub

    Private Sub btnWorkspacesManage_Click(sender As Object, e As EventArgs)
        Call pWorkspacesManage()
    End Sub

    Private Sub btnExport_DropDownOpening(sender As Object, e As EventArgs)
        btnExport3D.Enabled = oHolos.RedrawCount > 0
        Dim oGPSBase As cTrigPoint = oSurvey.TrigPoints.GetGPSBaseReferencePoint
        btnExportTrack.Enabled = oSurvey.Properties.GPS.Enabled AndAlso Not oGPSBase Is Nothing AndAlso Not oGPSBase.Coordinate.IsEmpty
    End Sub

    'Private Sub chkLayerWhiteboard_CheckedChanged(sender As Object, e As EventArgs)
    '    If Not bDisableFilterItemEvent Then
    '        pGetCurrentDesignTools.FilterWhiteBoard = chkLayerWhiteboard.Checked
    '        Call pMapInvalidate()
    '    End If
    'End Sub

    'Private Sub chkLayerInvertFilter_Click(sender As Object, e As EventArgs)
    '    If Not bDisableFilterItemEvent Then
    '        pGetCurrentDesignTools.Filter.Reversed = Not pGetCurrentDesignTools.Filter.Reversed
    '        Call pGetCurrentDesignTools.FilterApply()
    '        Call pMapInvalidate()
    '    End If
    'End Sub

    Private oGalleryIndex As Dictionary(Of cIItemSign.SignEnum, String)

    Private Sub oSurvey_OnGetDefaultSignFromGallery(Sender As cSurvey.cSurvey, Args As cSurvey.cSurvey.OnGetDefaultSignFromGalleryEventArgs) Handles oSurvey.OnGetDefaultSignFromGallery
        If oGalleryIndex Is Nothing Then
            Call oDockClipart.LoadGalleries()
            Dim oGallery As List(Of cGalleryItem) = oDockClipart.GetGalleryItems(oDockClipart.GalleryIndexByCategory(cIItem.cItemCategoryEnum.Sign))
            oGalleryIndex = cSingsImportHelper.CreateIndex(oGallery)
        End If
        If oGalleryIndex.ContainsKey(Args.Sign) Then
            sFilename = oGalleryIndex(Args.Sign)
            If sFilename.StartsWith("file://") Then
                Args.Filename = sFilename.Substring(7)
                Args.DataFormat = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
            ElseIf sFilename.StartsWith("id://") Then
                Args.Filename = sFilename.Substring(5)
                Args.DataFormat = cIItemClipartBase.cClipartDataFormatEnum.SVGResource
            End If
        End If
    End Sub

    Private Sub cboPropSignFlip_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboPropSignFlip.SelectedIndexChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItem As cIItemSign = .CurrentItem
                oItem.SignFlip = cboPropSignFlip.SelectedIndex
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub mnuFileSaveAsTemplate_Click(sender As Object, e As EventArgs)
        Using frmT As frmTemplates = New frmTemplates(sTemplatesPath, oTemplates, True)
            With frmT
                If .ShowDialog() = DialogResult.OK Then
                    Dim sTemplateFilename As String = IO.Path.Combine(sTemplatesPath, frmT.txtName.Text) & ".csz"
                    Call pSurveySave(sTemplateFilename, True, cSurvey.cSurvey.SaveOptionsEnum.NoHistory Or cSurvey.cSurvey.SaveOptionsEnum.Silent)
                End If
                'always enumerate cause default could be changed...
                Call pTemplatesEnumerate()
            End With
        End Using
    End Sub

    Private Sub mnuFileManageTemplates_Click(sender As Object, e As EventArgs)
        Using frmT As frmTemplates = New frmTemplates(sTemplatesPath, oTemplates, False)
            With frmT
                Call .ShowDialog()
                'always enumerate cause default could be changed...
                Call pTemplatesEnumerate()
            End With
        End Using
    End Sub

    Private Sub txtPropImageRotateAngle_ValueChanged(sender As Object, e As EventArgs) Handles txtPropImageRotateAngle.ValueChanged
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Dim oItemImage As cIItemImage = .CurrentItem
                oItemImage.RotateBy = txtPropImageRotateAngle.Value
                Call .TakeUndoSnapshot()
            End With
            'todo: refresh preview
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub oDockLS_OnFilenameRequest(sender As Object, e As cDockLinkedSurveys.cFilenameRequestEventArgs) Handles oDockLS.OnFilenameRequest
        e.Filename = sFilename
    End Sub

    Private Sub oDockLevels_onItemSelected(Sender As Object, e As cDockLevels.cItemSelectedEventargs) Handles oDockLevels.OnItemSelected
        If Not pGetCurrentDesignTools.CurrentItem Is e.Item Then
            Call pGetCurrentDesignTools.SelectItem(e.Item)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    Private Sub oDockLevels_onLayerSelected(Sender As Object, e As cDockLevels.cLayerSelectedEventargs) Handles oDockLevels.OnLayerSelected
        If Not pGetCurrentDesignTools.CurrentLayer Is e.Layer Then
            Call pGetCurrentDesignTools.SelectLayer(e.Layer)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    Private Sub oDockLevels_OnShowProperties(Sender As Object, e As EventArgs) Handles oDockLevels.OnShowProperties
        Call pObjectPropShow(True)
        'Call tabObjectProp.SelectTab(tabObjectPropMain)
    End Sub

    Private Sub oDockLevels_OnMapInvalidate(Sender As Object, e As EventArgs) Handles oDockLevels.OnMapInvalidate
        Call pMapInvalidate()
    End Sub

    Private Sub oDockLevels_OnFilterEdit(Sender As Object, e As EventArgs) Handles oDockLevels.OnFilterEdit
        Call pSurveyLayersFilterEdit()
    End Sub

    Private Sub btnNew_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnNew.ItemClick
        Call pSurveyNew()
    End Sub

    Private Sub btnLoad_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnLoad.ItemClick
        Call pSurveyLoad()
    End Sub

    Private Sub btnRollback_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnRollback.ItemClick
        If MsgBox(GetLocalizedString("main.warning6"), MsgBoxStyle.Exclamation Or MsgBoxStyle.YesNo, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Call pSurveyLoad(sFilename, False)
        End If
    End Sub

    Private Sub btnSave_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSave.ItemClick
        Call pSurveySave(sFilename)
    End Sub

    Private Sub btnSaveAs_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSaveAs.ItemClick
        Call pSurveySave()
    End Sub

    Private Sub btnSaveAsTemplate_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSaveAsTemplate.ItemClick
        Using frmT As frmTemplates = New frmTemplates(sTemplatesPath, oTemplates, True)
            With frmT
                If .ShowDialog() = DialogResult.OK Then
                    Dim sTemplateFilename As String = IO.Path.Combine(sTemplatesPath, frmT.txtName.Text) & ".csz"
                    Call pSurveySave(sTemplateFilename, True, cSurvey.cSurvey.SaveOptionsEnum.NoHistory Or cSurvey.cSurvey.SaveOptionsEnum.Silent)
                End If
                'always enumerate cause default could be changed...
                btnLoad.ButtonStyle = If(pTemplatesEnumerate(), BarButtonStyle.DropDown, BarButtonStyle.Default)
            End With
        End Using
    End Sub

    Private Sub btnPrint_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnPrint.ItemClick
        Call pSurveyPrint()
    End Sub

    Private Sub btnProperties_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnProperties.ItemClick
        Call pSurveyProperty()
    End Sub

    Private Sub btnSurface_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSurface.ItemClick
        Call pSurveySurface()
    End Sub

    Private Sub btnCleanUp_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnCleanUp.ItemClick
        Call pSurveyCleanUp()
    End Sub

    Private Sub btnHistory_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnHistory.ItemClick
        Using frmH As frmHistory = New frmHistory(oSurvey, sFilename)
            AddHandler frmH.OnRestore, AddressOf oHistory_OnRestore
            AddHandler frmH.OnAdd, AddressOf oHistory_OnAdd
            Call frmH.ShowDialog(Me)
        End Using
    End Sub

    Private Sub btnResurvey_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnResurvey.ItemClick
        Call pResurvey()
    End Sub

    Private Sub btnLoch_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnLoch.ItemClick
        Call pSurveyLoch()
    End Sub

    Private Sub btnTherionPad_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnTherionPad.ItemClick
        Call pSurveyTherionPad()
    End Sub

    Private Sub btnHide_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnHide.ItemClick
        Call pTrayHideIn()
    End Sub

    Private Sub btnExit_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExit.ItemClick
        Call Close()
    End Sub

    Private Sub btnExport3D_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExport3D.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.threedD)
    End Sub

    Private Sub btnExportImage_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExportImage.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.Image)
    End Sub

    Private Sub btnExportData_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExportData.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.Survey)
    End Sub

    Private Sub btnExportTrack_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExportTrack.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.Track)
    End Sub

    Private Sub btnImportData_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnImportData.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, "", True)
    End Sub

    Private Sub btnImportTrack_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnImportTrack.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Track, "", True)
    End Sub

    Private Sub btnImportDesign_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnImportDesign.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Design, "", True)
    End Sub

    Private Sub mnuRecents_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuRecents.BeforePopup
        Dim oRecents As List(Of String) = pSurveyRecentsLoad()
        Dim iRecentIndex As Integer = 1
        Call mnuRecents.ClearItems
        If oRecents.Count > 0 Then
            For Each sRecent As String In oRecents
                Dim oItem As BarButtonItem = New BarButtonItem(Ribbon.Manager, iRecentIndex & " " & sRecent)
                oItem.Tag = sRecent
                AddHandler oItem.ItemClick, AddressOf oRecentItem_ItemClick
                mnuRecents.AddItem(oItem)

                iRecentIndex += 1
            Next
        End If
    End Sub

    Private Sub mnuTemplates_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuTemplates.BeforePopup
        Call mnuTemplates.ClearItems
        For Each oTemplate As cTemplateEntry In oTemplates
            Dim oItem As BarButtonItem = New BarButtonItem(Ribbon.Manager, oTemplate.Name)
            oItem.Tag = oTemplate
            AddHandler oItem.ItemClick, AddressOf oNewFromTemplate_ItemClick
            mnuTemplates.AddItem(oItem)
        Next
    End Sub

    Private Sub btnRemoveOrphans_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnRemoveOrphans.ItemClick
        Call pTrigpointRemoveOrphans()
    End Sub

    Private Sub btnPlotCalculate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotCalculate.ItemClick
        Call pSurveyCalculate(True)
    End Sub

    Private Sub btnPlotRebind_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotRebind.ItemClick
        Call pSurveyTrigpointsRefresh()
    End Sub

    Private Sub btnPlotInfoCave_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotInfoCave.ItemClick
        Call pSurveyInfoCave()
    End Sub

    Private Sub btnZoomIn_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomIn.ItemClick
        Call pMapZoomIn()
    End Sub

    Private Sub btnZoomOut_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomOut.ItemClick
        Call pMapZoomOut()
    End Sub

    Private Sub btnZoomToFit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomToFit.ItemClick
        Call pMapCenterAndFit()
    End Sub

    Private Sub btnLayerManageLevels_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnLayerManageLevels.ItemClick
        Call pObjectPropShow(True)
        Call pLevelsShow(True)
        Call pLevelsShow(True)
    End Sub

    Private Sub btnLayer_Base_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Base.CheckedChanged
        If btnLayer_Base.Checked Then
            'btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base))
            Call pLayerTools_EnabledByLevel("btnDesignTools_Base_")
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Soil_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Soil.CheckedChanged
        If btnLayer_Soil.Checked Then
            btnLayer_Base.Checked = False
            'btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Soil))
            Call pLayerTools_EnabledByLevel("btnDesignTools_Soil_")
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Water_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Water.CheckedChanged
        If btnLayer_Water.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            'btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.WaterAndFloorMorphologies))
            Call pLayerTools_EnabledByLevel("btnDesignTools_Water_")
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Rocks_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Rocks.CheckedChanged
        If btnLayer_Rocks.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            'btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.RocksAndConcretion))
            Call pLayerTools_EnabledByLevel("btnDesignTools_Rocks_")
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_TerrainLevel_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_TerrainLevel.CheckedChanged
        If btnLayer_TerrainLevel.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            'btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.CeilingMorphologies))
            Call pLayerTools_EnabledByLevel("btnDesignTools_TerrainLevel_")
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Borders_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Borders.CheckedChanged
        If btnLayer_Borders.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            'btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Borders))
            Call pLayerTools_EnabledByLevel("btnDesignTools_Borders_")
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Signs_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Signs.CheckedChanged
        If btnLayer_Signs.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            'btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Signs))
            Call pLayerTools_EnabledByLevel("btnDesignTools_Signs_")
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignEndEdit()
        If pGetCurrentDesignTools.IsInEdit Then
            Call pGetCurrentDesignTools.EndAndSelectItem()
            'frmMFT.btnPenEndEdit.Enabled = False
            btnItemsEndEdit.Enabled = False
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnItemsEndEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsEndEdit.ItemClick
        Call pDesignEndEdit()
    End Sub

    Private Sub btnSurveyInfoSession_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoSession.ItemClick
        Call pSurveyInfoSession()
    End Sub

    Private Sub btnSurveyInfoEntrance_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoEntrance.ItemClick
        Call pSurveyInfoEntrance()
    End Sub

    Private Sub btnSurveyInfoOrientation_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoOrientation.ItemClick
        Call pSurveyInfoBearing()
    End Sub

    Private Sub btnSurveyInfoRing_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoRing.ItemClick
        Call pSurveyInfoRing()
    End Sub

    Private Sub pSurveyInfoDistance()
        Using frmID As frmInfoDistances = New frmInfoDistances(oSurvey, pGetCurrentDesignTools.CurrentCave)
            Call frmID.ShowDialog(Me)
        End Using
    End Sub

    Private Sub btnSurveyInfoDistances_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoDistances.ItemClick
        Call pSurveyInfoDistance()
    End Sub

    Private Sub btnCopy_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCopy.ItemClick
        Call pClipboardCopy()
    End Sub

    Private Sub btnCut_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCut.ItemClick
        Call pClipboardCut()
    End Sub

    Private Sub btnDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDelete.ItemClick
        Call pClipboardDelete()
    End Sub

    Private Sub btnPasteService_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPasteService.ItemClick
        If Not btnPasteService.ActAsDropDown Then
            If picMap.Focused Then
                Call pClipboardPaste("", modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
            Else
                Call pClipboardPaste()
            End If
        End If
    End Sub

    Private Sub btnSettings_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSettings.ItemClick
        Call pSettings()
    End Sub

    Public Sub pSettings()
        Call pSettingsSave()
        Using frmS As frmSettings = New frmSettings()
            If frmS.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pSettingsLoad()
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub btnDesignDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignDeleteAll.ItemClick
        Call pDesignDeleteAll()
    End Sub

    Private Sub pDesignDeleteAll()
        If MsgBox(GetLocalizedString("main.warning12"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Call pGetCurrentDesignTools.SelectItem(Nothing)
            Call oCurrentDesign.Clear()
            Call pGetCurrentTools.Undo.Clear()
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignLockAll()
        If MsgBox(GetLocalizedString("main.warning14"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            For Each oItem As cItem In oCurrentDesign.GetAllItems()
                Call oItem.LockSegments()
            Next
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignUnlockAll()
        If MsgBox(GetLocalizedString("main.warning13"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            For Each oItem As cItem In oCurrentDesign.GetAllItems()
                Call oItem.UnlockSegments()
            Next
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnDesignPlotUnlockAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotUnlockAll.ItemClick
        Call pDesignUnlockAll()
    End Sub

    Private Sub btnDesignPlotLockAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotLockAll.ItemClick
        Call pDesignLockAll()
    End Sub

    Private Sub pDesignRemoveBindings()
        If MsgBox(GetLocalizedString("main.warning16"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oItems As List(Of cItem) = oCurrentDesign.GetAllItems()
            Dim iIndex As Integer = 0
            Dim iCount As Integer = oItems.Count
            Call oSurvey.RaiseOnProgressEvent("design.removebindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, GetLocalizedString("main.progressbegin4"), 0, cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageCalculate Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
            For Each oItem As cItem In oItems
                Call oSurvey.RaiseOnProgressEvent("design.removebindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, GetLocalizedString("main.progress4"), iIndex / iCount)
                Call oItem.UnbindSegments()
                iIndex += 1
            Next
            Call oSurvey.RaiseOnProgressEvent("design.removebindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, GetLocalizedString("main.progressend4"), 0)
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
            Call oMousePointer.Pop()
        End If
    End Sub

    Private Sub btnDesignPlotRemoveBindings_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotRemoveBindings.ItemClick
        Call pDesignRemoveBindings()
    End Sub

    Private Sub pDesignRebindAll()
        If MsgBox(GetLocalizedString("main.warning15"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oItems As List(Of cItem) = oCurrentDesign.GetAllItems()
            Dim iIndex As Integer = 0
            Dim iCount As Integer = oItems.Count
            Call oSurvey.RaiseOnProgressEvent("design.bindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, GetLocalizedString("main.progressbegin3"), 0, cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageCalculate Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
            For Each oItem As cItem In oItems
                If iIndex Mod 20 = 0 Then Call oSurvey.RaiseOnProgressEvent("design.bindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, GetLocalizedString("main.progress3"), iIndex / iCount)
                Call oItem.BindSegments()
                iIndex += 1
            Next
            Call oSurvey.RaiseOnProgressEvent("design.bindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, GetLocalizedString("main.progressend3"), 0)
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
            Call oMousePointer.Pop()
        End If
    End Sub

    Private Sub btnDesignPlotRebindAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotRebindAll.ItemClick
        Call pDesignRebindAll()
    End Sub

    Private Sub btnDesignPlotShowBindings_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotShowBindings.CheckedChanged
        Call pDesignShowBindings(btnDesignPlotShowBindings.Checked)
    End Sub

    Private Sub btnDesignEditScaleRules_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignEditScaleRules.ItemClick
        Call pScaleRulesEdit()
    End Sub

    Private Sub btnViewFieldData_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewFieldData.ItemClick
        Call pFieldDataShow(True)
    End Sub

    Private Sub btnViewDesign_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewDesignArea.ItemClick
        Call pDesignAreaShow(True)
    End Sub

    Private Sub btnViewObjectProp_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewObjectProp.ItemClick
        Call pObjectPropShow(True)
    End Sub

    Private Sub btnViewPlan_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewPlan.ItemClick
        Call pSurveyShowPlan()
    End Sub

    Private Sub btnViewProfile_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewProfile.ItemClick
        Call pSurveyShowProfile()
    End Sub

    Private Sub btnView3D_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnView3D.ItemClick
        Call pSurveyShow3D()
    End Sub

    Private Sub btnViewViewer_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewViewer.ItemClick
        Call pSurveyViewer()
    End Sub

    Private Sub btnMainSessionList_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainSessionList.EditValueChanged
        Call pSegmentSetSessionColor()
    End Sub

    Private Sub btnMainBindDesignType_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainBindDesignType.EditValueChanged
        cboMainBindCrossSections.Enabled = btnMainBindDesignType.EditValue > 0
        If Not bDisabledCaveBranchChangeEvent Then
            Call pGetCurrentDesignTools.SelectBindDesignType(btnMainBindDesignType.EditValue)
            If cboMainBindCrossSections.Enabled Then
                Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            End If
        End If
    End Sub

    Private Sub btnMainBindCrossSections_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainBindCrossSections.EditValueChanged
        If Not bDisabledCaveBranchChangeEvent Then
            If Not IsNothing(btnMainBindCrossSections.EditValue) Then Call pGetCurrentDesignTools.SelectCrossSection(btnMainBindCrossSections.EditValue.id)
        End If
    End Sub

    Private Sub btnMainCaveBranchList_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainCaveBranchList.EditValueChanged
        If Not bDisabledCaveBranchChangeEvent Then
            Dim sCurrentCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
            Dim sCurrentBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
            Call pGetCurrentDesignTools.SelectCave(sCurrentCave, sCurrentBranch)
        End If
    End Sub

    Private Sub btnMainCaveList_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainCaveList.EditValueChanged
        Call pSurveyFillCaveBranchList(CType(btnMainCaveList.EditValue, cCaveInfo), btnMainCaveBranchList)
        If Not bDisabledCaveBranchChangeEvent Then
            Dim sCurrentCave As String = pCaveBarEditToString(btnMainCaveList.EditValue)
            Dim sCurrentBranch As String = pCaveBranchBarEditToString(btnMainCaveBranchList.EditValue)
            Call pGetCurrentDesignTools.SelectCave(sCurrentCave, sCurrentBranch)
        End If
    End Sub

    Private Sub btnViewScript_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewScript.ItemClick
        Call pSurveyScriptEditor()
    End Sub

    Private Sub btnViewSharedTexts_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewSharedTexts.ItemClick
        Call pTextsShow()
    End Sub

    Private Sub btnViewConsole_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewConsole.ItemClick
        Call pConsoleShow(True)
    End Sub

    Private Sub btnViewLinkedSurveys_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewLinkedSurveys.ItemClick
        Call pLinkedSurveyShow()
    End Sub

    Private Sub btnViewSplayShowMode0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewSplayShowMode1.CheckedChanged
        If btnViewSplayShowMode1.Checked Then
            oCurrentOptions.SplayEditMode = cOptionsDesign.SplayEditModeEnum.All
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub btnViewSplayShowMode1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewSplayShowMode0.CheckedChanged
        If btnViewSplayShowMode0.Checked Then
            oCurrentOptions.SplayEditMode = cOptionsDesign.SplayEditModeEnum.OnlyCurrentSegment
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub btnViewSplayShowMode_Popup(sender As Object, e As EventArgs) Handles btnViewSplayShowMode.Popup
        Select Case oCurrentOptions.SplayEditMode
            Case cOptionsDesign.SplayEditModeEnum.All
                btnViewSplayShowMode1.Checked = True
                btnViewSplayShowMode0.Checked = False
            Case cOptionsDesign.SplayEditModeEnum.OnlyCurrentSegment
                btnViewSplayShowMode1.Checked = False
                btnViewSplayShowMode0.Checked = True
        End Select
    End Sub

    Private Sub btnDesignHighlightMode_Popup(sender As Object, e As EventArgs) Handles btnDesignHighlightMode.Popup
        Select Case oCurrentOptions.HighlightMode
            Case cOptions.HighlightModeEnum.Default
                btnDesignHighlightMode0.Checked = True
                btnDesignHighlightMode1.Checked = False
                btnDesignHighlightMode2.Checked = False
            Case cOptions.HighlightModeEnum.Hierarchic
                btnDesignHighlightMode0.Checked = False
                btnDesignHighlightMode1.Checked = True
                btnDesignHighlightMode2.Checked = False
            Case cOptions.HighlightModeEnum.ExactMatch
                btnDesignHighlightMode0.Checked = False
                btnDesignHighlightMode1.Checked = False
                btnDesignHighlightMode2.Checked = True
        End Select
    End Sub

    Private Sub btnDesignHighlightMode0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightMode0.CheckedChanged
        If btnDesignHighlightMode0.Checked Then
            If oCurrentOptions.HighlightMode <> cOptions.HighlightModeEnum.Default Then
                oCurrentOptions.HighlightMode = cOptions.HighlightModeEnum.Default
                Call pSurveyHighlightCurrentCave(False)
            End If
        End If
    End Sub

    Private Sub btnDesignHighlightMode1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightMode1.CheckedChanged
        If btnDesignHighlightMode1.Checked Then
            If oCurrentOptions.HighlightMode <> cOptions.HighlightModeEnum.Hierarchic Then
                oCurrentOptions.HighlightMode = cOptions.HighlightModeEnum.Hierarchic
                Call pSurveyHighlightCurrentCave(False)
            End If
        End If
    End Sub

    Private Sub btnDesignHighlightMode2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightMode2.CheckedChanged
        If btnDesignHighlightMode2.Checked Then
            If oCurrentOptions.HighlightMode <> cOptions.HighlightModeEnum.ExactMatch Then
                oCurrentOptions.HighlightMode = cOptions.HighlightModeEnum.ExactMatch
                Call pSurveyHighlightCurrentCave(False)
            End If
        End If
    End Sub

    Private Sub btnDesignHighlight0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlight0.CheckedChanged
        If btnDesignHighlight0.Checked Then
            oCurrentOptions.HighlightCurrentCave = False
        End If
    End Sub

    Private Sub btnDesignHighlight1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlight1.CheckedChanged
        If btnDesignHighlight1.Checked Then
            oCurrentOptions.HighlightCurrentCave = True
        End If
    End Sub

    'Private Sub btnDesignHighlightSegmentsAndTrigpoints_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightSegmentsAndTrigpoints.CheckedChanged
    '    oCurrentOptions.HighlightSegmentsAndTrigpoints = btnDesignHighlightSegmentsAndTrigpoints.Checked
    'End Sub

    'Private Sub btnDesignHighlight0_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    oCurrentOptions.HighlightCurrentCave = False
    '    Call pSurveyHighlightCurrentCave(True)
    'End Sub

    'Private Sub btnDesignHighlight1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    oCurrentOptions.HighlightCurrentCave = True
    '    Call pSurveyHighlightCurrentCave(True)
    'End Sub

    'Private Sub btnDesignHighlightSegmentsAndTrigpoints_Click(sender As Object, e As EventArgs)
    '    oCurrentOptions.HighlightSegmentsAndTrigpoints = Not oCurrentOptions.HighlightSegmentsAndTrigpoints
    '    Call pSurveyHighlightCurrentCave(oCurrentOptions.HighlightCurrentCave)
    'End Sub

    'Private Sub btnDesignHighlight_DropDownOpening(ByVal sender As Object, ByVal e As System.EventArgs)
    '    If oCurrentOptions.HighlightCurrentCave Then
    '        btnDesignHighlight0.Checked = False
    '        btnDesignHighlight1.Checked = True
    '        'btnDesignHighlightSegmentsAndTrigpoints.Enabled = True
    '    Else
    '        btnDesignHighlight0.Checked = True
    '        btnDesignHighlight1.Checked = False
    '        'btnDesignHighlightSegmentsAndTrigpoints.Enabled = False
    '    End If
    '    btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
    'End Sub

    Private Sub oCurrentOptions_OnPropertyChanged(sender As Object, e As PropertyChangeEventArgs) Handles oCurrentOptions.OnPropertyChanged
        Select Case e.Name
            Case "HighlightSegmentsAndTrigpoints"
                btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
                Call pSurveySegmentsAndTrigpointVisibility()
            Case "HighlightCurrentCave"
                btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
                btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
                Call pSurveyHighlightCurrentCave(True)
        End Select
    End Sub

    Private Sub oCurrentOptions_OnMapInvalidate(Sender As Object, e As EventArgs) Handles oCurrentOptions.OnMapInvalidate
        Call pMapInvalidate()
    End Sub

    Private Sub btnSegmentAdd_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentAdd.ItemClick
        Call pSegmentAdd()
    End Sub

    Private Sub btnSegmentDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentDelete.ItemClick
        Call pSegmentDelete()
    End Sub

    Private Sub btnPlotDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotDeleteAll.ItemClick
        Call pSurveyWipeData()
    End Sub

    Private Sub pSurveyGrades()
        Using frmG As frmGrades = New frmGrades(oSurvey)
            With frmG
                AddHandler frmG.OnApply, AddressOf frmGrades_OnApply
                If .ShowDialog(Me) = vbOK Then
                    'nulla
                End If
            End With
        End Using
    End Sub

    Private Sub btnPlotGrades_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotGrades.ItemClick
        Call pSurveyGrades()
    End Sub

    Private Sub btnPlotManageLRUD_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotManageLRUD.ItemClick
        Call pSegmentsLRUDManage()
    End Sub

    Private Sub btnPlotPrefixTrigpoints_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotPrefixTrigpoints.ItemClick
        Call pTrigpointsTrigpointPrefix()
    End Sub

    Private Sub btnPlotRenameTrigpoints_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotRenameTrigpoints.ItemClick
        Call pSegmentsTrigPointRename()
    End Sub

    Private Sub btnPlotReplicateData_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotReplicateData.ItemClick
        Call pSegmentsDataReplicate()
    End Sub

    Private Sub btnPlotSplayReplicate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotSplayReplicate.ItemClick
        Call pSplayReplicateData()
    End Sub

    Private Sub btnPlotManageVisibility_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotManageVisibility.ItemClick
        Call pSurveyManageVisibility()
    End Sub

    Private Sub btnEditFind_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnEditFind.ItemClick
        Call pFind()
    End Sub

    Private Sub btnZoomZoomCenter_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomZoomCenter.ItemClick
        Call pMapCenter()
    End Sub

    Private Sub btnZoomZoomToFitCaveBranch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomZoomToFitCaveBranch.ItemClick
        Call pMapCenterAndFitCaveBranch()
    End Sub

    Private Sub btnZoomZoomToSelection_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomZoomToSelection.ItemClick
        Call pMapCenterAndFitSelection()
    End Sub

    Private Sub btnZoomAutoZoomToFit_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnZoomAutoZoomToFit.CheckedChanged
        bAutoZoomToFit = btnZoomAutoZoomToFit.Checked
    End Sub

    Private Sub btnHelpCheckUpdate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnHelpCheckUpdate.ItemClick
        Call pSurveyCheckNewVersion()
    End Sub

    Private Sub btnHelpInfo_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnHelpInfo.ItemClick
        Call pSurveyAbout()
    End Sub

    Private Sub pSurveyAbout()
        Using frmA As frmAbout = New frmAbout
            Call frmA.ShowDialog(Me)
        End Using
    End Sub

    Private Sub btnWorkspacesManage_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnWorkspacesManage.ItemClick
        Call pWorkspacesManage()
    End Sub

    Private Sub pWorkspacesRestore()
        If MsgBox(modMain.GetLocalizedString("main.warning33"), MsgBoxStyle.OkCancel, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Ok Then
        End If
    End Sub

    Private Sub btnViewWorkspacesRestore_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewWorkspacesRestore.ItemClick
        Call pWorkspacesRestore()
    End Sub

    Private Sub btnViewWorkspaceAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewWorkspaceAll.ItemClick
        Call pWorkspaceAll()
    End Sub

    Private Sub btnViewWorkspaceData_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewWorkspaceData.ItemClick
        Call pWorkspaceData()
    End Sub

    Private Sub btnViewWorkspaceDesign_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewWorkspaceDesign.ItemClick
        Call pWorkspaceDesign()
    End Sub

    Private Sub btnEditSelectAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnEditSelectAll.ItemClick
        Call pClipboardSelectAll()
    End Sub

    Private Sub pnlStatusCurrentRule_ItemClick(sender As Object, e As ItemClickEventArgs) Handles pnlStatusCurrentRule.ItemClick
        Call pScaleRulesEdit()
    End Sub

    Private Sub btnDesignGraphics_Popup(sender As Object, e As EventArgs) Handles btnDesignGraphicsQuality.Popup
        btnDesignGraphics0.Checked = iDesignQuality = DesignQualityLevelEnum.Base
        btnDesignGraphics1.Checked = iDesignQuality = DesignQualityLevelEnum.MediumQuality
        btnDesignGraphics2.Checked = iDesignQuality = DesignQualityLevelEnum.HighQuality
    End Sub

    Private Sub btnDesignGraphics0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignGraphics0.CheckedChanged
        Call pSettingsSetDesignQuality(DesignQualityLevelEnum.Base)
    End Sub

    Private Sub btnDesignGraphics1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignGraphics1.CheckedChanged
        Call pSettingsSetDesignQuality(DesignQualityLevelEnum.MediumQuality)
    End Sub

    Private Sub btnDesignGraphics2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignGraphics2.CheckedChanged
        Call pSettingsSetDesignQuality(DesignQualityLevelEnum.HighQuality)
    End Sub

    Private Sub btnObjectSetCaveBranch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnObjectSetCaveBranch.ItemClick
        Call pObjectSetCaveBranch()
    End Sub

    Private Sub btnCursorMode_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnCursorMode.DownChanged
        If btnCursorMode.Down Then
            btnScrollMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode1.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnSnapToPoint0_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPoint0.DownChanged
        If btnSnapToPoint0.Down Then
            btnSnapToPointNone.Down = False
            btnSnapToPoint1.Down = False
            btnSnapToPoint2.Down = False
            iSnapToPoint = 1
        End If
    End Sub

    Private Sub btnSnapToPoint1_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPoint1.DownChanged
        If btnSnapToPoint1.Down Then
            btnSnapToPointNone.Down = False
            btnSnapToPoint0.Down = False
            btnSnapToPoint2.Down = False
            iSnapToPoint = 2
        End If
    End Sub

    Private Sub btnSnapToPoint2_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPoint2.DownChanged
        If btnSnapToPoint2.Down Then
            btnSnapToPointNone.Down = False
            btnSnapToPoint0.Down = False
            btnSnapToPoint1.Down = False
            iSnapToPoint = 3
        End If
    End Sub

    Private Sub btnSnapToPointNone_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPointNone.DownChanged
        If btnSnapToPointNone.Down Then
            btnSnapToPoint0.Down = False
            btnSnapToPoint1.Down = False
            btnSnapToPoint2.Down = False
            iSnapToPoint = 0
        End If
    End Sub

    Private Sub btnScrollMode_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnScrollMode.DownChanged
        If btnScrollMode.Down Then
            btnCursorMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode1.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnAltMode_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnAltMode.DownChanged
        If btnAltMode.Down Then
            btnCursorMode.Down = False
            btnScrollMode.Down = False
            btnMultiSelMode1.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnMultiSelMode1_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnMultiSelMode1.DownChanged
        If btnMultiSelMode1.Down Then
            btnCursorMode.Down = False
            btnScrollMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnMultiSelMode2_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnMultiSelMode2.DownChanged
        If btnMultiSelMode2.Down Then
            btnCursorMode.Down = False
            btnScrollMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode1.Down = False
        End If
    End Sub

    Private Sub btnViewRulers_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewRulers.CheckedChanged
        Call pRulersSetVisible(btnViewRulers.Checked)
    End Sub

    Private Sub btnEditDrawing_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnEditDrawing.DownChanged
        If btnEditDrawing.Down Then
            bEditPointByPoint = False
            btnEditPointToPoint.Down = False
        End If
    End Sub

    Private Sub btnEditPointToPoint_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnEditPointToPoint.DownChanged
        bEditPointByPoint = True
        btnEditDrawing.Down = False
        btnEditPointToPoint.Down = True
    End Sub

    Private Sub btnFilterEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnFilterEdit.ItemClick
        Call pSurveyLayersFilterEdit()
    End Sub

    Private Sub btnPenSpliner_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenSpline.DownChanged
        Call oSurvey.Properties.DesignProperties.SetValue("LineType", cIItemLine.LineTypeEnum.Splines)
        Call pPropDefaultPenStyle()
    End Sub

    Private Sub btnPenBezier_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenBezier.DownChanged
        Call oSurvey.Properties.DesignProperties.SetValue("LineType", cIItemLine.LineTypeEnum.Beziers)
        Call pPropDefaultPenStyle()
    End Sub

    Private Sub btnPenLine_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenLine.DownChanged
        Call oSurvey.Properties.DesignProperties.SetValue("LineType", cIItemLine.LineTypeEnum.Lines)
        Call pPropDefaultPenStyle()
    End Sub

    Private Sub btnViewMetricGrid2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewMetricGrid2.CheckedChanged
        If btnViewMetricGrid2.Checked Then
            If iDrawMetricGrid <> 2 Then
                iDrawMetricGrid = 2
                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub btnViewMetricGrid0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewMetricGrid0.CheckedChanged
        If btnViewMetricGrid0.Checked Then
            If iDrawMetricGrid <> 0 Then
                iDrawMetricGrid = 0
                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub btnViewMetricGrid1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewMetricGrid1.CheckedChanged
        If btnViewMetricGrid1.Checked Then
            If iDrawMetricGrid <> 1 Then
                iDrawMetricGrid = 1
                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub btnViewMetricGrid_Popup(sender As Object, e As EventArgs) Handles btnViewMetricGrid.Popup
        Select Case iDrawMetricGrid
            Case 0
                btnViewMetricGrid0.Checked = True
                btnViewMetricGrid1.Checked = False
                btnViewMetricGrid2.Checked = False
            Case 1
                btnViewMetricGrid0.Checked = False
                btnViewMetricGrid1.Checked = True
                btnViewMetricGrid2.Checked = False
            Case 2
                btnViewMetricGrid0.Checked = False
                btnViewMetricGrid1.Checked = False
                btnViewMetricGrid2.Checked = True
        End Select
    End Sub

    Private Sub btn3DCameraType_Popup(sender As Object, e As EventArgs) Handles btn3DCameraType.Popup
        If Not oHolos Is Nothing Then
            If oHolos.CameraType = cHolosViewer.CameraTypeEnum.Perspective Then
                btn3DCameraType0.Checked = True
                btn3DCameraType1.Checked = False
            Else
                btn3DCameraType0.Checked = False
                btn3DCameraType1.Checked = True
            End If
        Else
            btn3DCameraType0.Enabled = False
            btn3DCameraType1.Enabled = False
        End If
    End Sub

    Private Sub btn3DCameraType1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraType1.CheckedChanged
        If btn3DCameraType1.Checked Then
            If oHolos.CameraType <> cHolosViewer.CameraTypeEnum.Orthographic Then
                oHolos.CameraType = cHolosViewer.CameraTypeEnum.Orthographic
                Call pMapCenterAndFit()
            End If
        End If
    End Sub

    Private Sub btn3DCameraType0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraType0.CheckedChanged
        If btn3DCameraType0.Checked Then
            If oHolos.CameraType <> cHolosViewer.CameraTypeEnum.Perspective Then
                oHolos.CameraType = cHolosViewer.CameraTypeEnum.Perspective
                Call pMapCenterAndFit()
            End If
        End If
    End Sub

    Private Sub btn3DCameraMode_Popup(sender As Object, e As EventArgs) Handles btn3DCameraMode.Popup
        If Not oHolos Is Nothing Then
            If oHolos.CameraMode = cHolosViewer.cameraModeEnum.Inspect Then
                btn3DCameraMode0.Checked = True
                btn3DCameraMode1.Checked = False
            Else
                btn3DCameraMode0.Checked = False
                btn3DCameraMode1.Checked = True
            End If
        Else
            btn3DCameraMode0.Enabled = False
            btn3DCameraMode1.Enabled = False
        End If
    End Sub

    Private Sub btn3DCameraMode0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraMode0.CheckedChanged
        If btn3DCameraMode0.Checked Then
            If oHolos.CameraMode <> cHolosViewer.cameraModeEnum.Inspect Then
                oHolos.CameraMode = cHolosViewer.cameraModeEnum.Inspect
            End If
        End If
    End Sub

    Private Sub btn3DCameraMode1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraMode1.CheckedChanged
        If btn3DCameraMode1.Checked Then
            If oHolos.CameraMode <> cHolosViewer.cameraModeEnum.Walkaround Then
                oHolos.CameraMode = cHolosViewer.cameraModeEnum.Walkaround
            End If
        End If
    End Sub

    Private Sub btnFilterFiltered_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnFilterFiltered.CheckedChanged
        If Not bDisableFilterItemEvent Then
            Call pGetCurrentDesignTools.FilterToggle()
        End If
    End Sub

    Private Sub btnFilterWhiteboard_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnFilterWhiteboard.CheckedChanged
        If Not bDisableFilterItemEvent Then
            pGetCurrentDesignTools.FilterWhiteBoard = btnFilterWhiteboard.Checked
        End If
    End Sub

    Private Sub btnFilterInvertFilter_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnFilterInvertFilter.CheckedChanged
        If Not bDisableFilterItemEvent Then
            pGetCurrentDesignTools.FilterReversed = btnFilterInvertFilter.Checked
        End If
    End Sub

    Private Sub btnSegmentAndTrigpointGridColor_Popup(sender As Object, e As EventArgs) Handles btnSegmentAndTrigpointGridColor.Popup
        Select Case iGridColorBy
            Case 0
                btnSegmentAndTrigpointGridColor0.Checked = True
                btnSegmentAndTrigpointGridColor1.Checked = False
                btnSegmentAndTrigpointGridColor2.Checked = False
                btnSegmentAndTrigpointGridColor3.Checked = False
            Case 1
                btnSegmentAndTrigpointGridColor0.Checked = False
                btnSegmentAndTrigpointGridColor1.Checked = True
                btnSegmentAndTrigpointGridColor2.Checked = False
                btnSegmentAndTrigpointGridColor3.Checked = False
            Case 2
                btnSegmentAndTrigpointGridColor0.Checked = False
                btnSegmentAndTrigpointGridColor1.Checked = False
                btnSegmentAndTrigpointGridColor2.Checked = True
                btnSegmentAndTrigpointGridColor3.Checked = False
            Case 3
                btnSegmentAndTrigpointGridColor0.Checked = False
                btnSegmentAndTrigpointGridColor1.Checked = False
                btnSegmentAndTrigpointGridColor2.Checked = False
                btnSegmentAndTrigpointGridColor3.Checked = True
        End Select
    End Sub

    Private Sub btnSegmentAndTrigpointGridColor0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentAndTrigpointGridColor0.CheckedChanged
        If btnSegmentAndTrigpointGridColor0.Checked Then
            If iGridColorBy <> 0 Then
                iGridColorBy = 0
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub btnSegmentAndTrigpointGridColor1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentAndTrigpointGridColor1.CheckedChanged
        If btnSegmentAndTrigpointGridColor1.Checked Then
            If iGridColorBy <> 1 Then
                iGridColorBy = 1
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub btnSegmentAndTrigpointGridColor2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentAndTrigpointGridColor2.CheckedChanged
        If btnSegmentAndTrigpointGridColor2.Checked Then
            If iGridColorBy <> 2 Then
                iGridColorBy = 2
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub btnSegmentAndTrigpointGridColor3_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentAndTrigpointGridColor3.CheckedChanged
        If btnSegmentAndTrigpointGridColor3.Checked Then
            If iGridColorBy <> 3 Then
                iGridColorBy = 3
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles grdViewTrigpoints.CustomUnboundColumnData
        If e.IsGetData Then
            Dim oTrigpoint As cTrigPoint = DirectCast(e.Row, cTrigPoint)
            If Not oTrigpoint Is Nothing Then
                Select Case e.Column.FieldName
                    Case "_X"
                        e.Value = Strings.Format(oTrigpoint.Data.X, "0.00")
                    Case "_Y"
                        e.Value = Strings.Format(oTrigpoint.Data.Y, "0.00")
                    Case "_Z"
                        e.Value = Strings.Format(oTrigpoint.Data.Z, "0.00")
                    Case "_Splay"
                        e.Value = Not oTrigpoint.Data.IsSplay
                    Case "_Special"
                        e.Value = oTrigpoint.IsSpecial
                    Case "_InExploration"
                        e.Value = oTrigpoint.IsInExploration ' If(oTrigpoint.IsInExploration, My.Resources.Actions_Question, Nothing)
                    Case "_Entrance"
                        e.Value = oTrigpoint.Entrance
                    Case "_Coordinate"
                        e.Value = If(oTrigpoint.Coordinate.IsEmpty, 0, If(oTrigpoint.Coordinate.IsInError, 1, 2))
                    Case "_Note"
                        e.Value = If(oTrigpoint.Note = "", Nothing, My.Resources.sticky_note_1)
                    Case "_Latitude"
                        e.Value = oTrigpoint.Coordinate.Latitude
                    Case "_Longitude"
                        e.Value = oTrigpoint.Coordinate.Longitude
                    Case "_Altitude"
                        e.Value = oTrigpoint.Coordinate.Altitude
                    Case "_Connections"
                        If oTrigpoint.Data.IsSplay Then
                            e.Value = Nothing
                        Else
                            Select Case oTrigpoint.Connections.Count
                                Case 0
                                    e.Value = Nothing
                                Case 1
                                    e.Value = My.Resources.connections_1_0
                                Case 2
                                    e.Value = My.Resources.connections_1_1
                                Case 3
                                    e.Value = My.Resources.connections_1_2
                                Case Else
                                    e.Value = My.Resources.connections_1_3ormore
                            End Select
                        End If
                    Case "_ConnectionsCount"
                        If oTrigpoint.Data.IsSplay Then
                            e.Value = Nothing
                        Else
                            e.Value = oTrigpoint.Connections.Count
                        End If
                    Case "_CustomConnections"
                        If oTrigpoint.Connections.Count > 0 Then
                            If oTrigpoint.Connections.IsCustomized Then
                                e.Value = My.Resources.connections_custom
                            Else
                                e.Value = My.Resources.connections_default
                            End If
                        End If
                End Select
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_RowStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowStyleEventArgs) Handles grdViewTrigpoints.RowStyle
        Dim oTrigpoint As cTrigPoint = grdViewTrigpoints.GetRow(e.RowHandle)
        If Not oTrigpoint Is Nothing Then
            If oTrigpoint.Data.IsSplay Then
                e.Appearance.ForeColor = SystemColors.GrayText
                e.Appearance.BackColor = SystemColors.ControlLight
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_CustomRowFilter(sender As Object, e As RowFilterEventArgs) Handles grdViewTrigpoints.CustomRowFilter
        If Not oCurrentOptions Is Nothing Then
            If oCurrentOptions.HighlightCurrentCave AndAlso oCurrentOptions.HighlightSegmentsAndTrigpoints Then
                Dim oTrigpoint As cTrigPoint = DirectCast(grdViewTrigpoints.DataSource(e.ListSourceRow), cTrigPoint)
                If Not oTrigpoint Is Nothing Then
                    Dim oDataController As DevExpress.Data.BaseGridController = grdViewTrigpoints.DataController
                    Dim oEx As Exception
                    Dim oEval As DevExpress.Data.Filtering.Helpers.ExpressionEvaluator = oDataController.CreateExpressionEvaluator(oDataController.FilterCriteria, True, oEx)
                    If oEval Is Nothing Then
                        e.Visible = oVisibleStations.Contains(oTrigpoint.Name)
                    Else
                        e.Visible = oVisibleStations.Contains(oTrigpoint.Name) AndAlso oEval.Fit(e.ListSourceRow)
                    End If
                    e.Handled = True
                End If
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_FocusedRowChanged(sender As Object, e As FocusedRowChangedEventArgs) Handles grdViewTrigpoints.FocusedRowChanged
        Try
            If Not bDisableTrigpointsChangeEvent Then
                bDisableTrigpointsChangeEvent = True
                Dim oTrigpoint As cTrigPoint = grdViewTrigpoints.GetFocusedRow
                If oTrigpoint Is Nothing Then
                    Call oTools.SelectTrigpoint(Nothing)
                Else
                    Call oTools.SelectTrigpoint(grdViewTrigpoints.GetFocusedRow)
                End If
                Call pTrigpointsRefresh()
                bDisableTrigpointsChangeEvent = False
            End If
        Catch
        End Try
    End Sub

    Private Sub btnDesignHighlightSegmentsAndTrigpoints_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightSegmentsAndTrigpoints.CheckedChanged
        oCurrentOptions.HighlightSegmentsAndTrigpoints = btnDesignHighlightSegmentsAndTrigpoints.Checked
    End Sub

    Private Sub btn3DViewTop_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3DViewTop.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromTop)
    End Sub
    Private Sub btn3dViewSN_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewSN.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromSouth)
    End Sub

    Private Sub btn3dViewBottom_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3DViewBottom.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromBottom)
    End Sub

    Private Sub btn3dViewEW_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewEW.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromEast)
    End Sub

    Private Sub btn3dViewWE_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewWE.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromWest)
    End Sub

    Private Sub btn3dViewNS_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewNS.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromNord)
    End Sub

    Private Sub grdViewSegmentsList_RowStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowStyleEventArgs) Handles grdViewSegments.RowStyle
        Dim oSegment As cSegment = grdViewSegments.GetRow(e.RowHandle)
        If Not oSegment Is Nothing Then
            Select Case iGridColorBy
                Case 3
                    Dim oColor As Color = oSurvey.Properties.CaveInfos.GetOriginColor(oSegment, Color.Transparent)
                    If (oColor <> Color.Transparent) Then
                        e.Appearance.BackColor = modPaint.LightColor(oColor, 0.85)
                    End If
                Case 2
                    Dim oColor As Color = oSurvey.Properties.CaveInfos.GetColor(oSegment, Drawing.Color.LightGray)
                    If (oColor <> Color.Transparent) Then
                        e.Appearance.BackColor = modPaint.LightColor(oColor, 0.85)
                    End If
                Case 1
                    Dim oColor As Color = oSurvey.Properties.Sessions.GetColor(oSegment, Drawing.Color.LightGray)
                    If (oColor <> Color.Transparent) Then
                        e.Appearance.BackColor = modPaint.LightColor(oColor, 0.85)
                    End If
            End Select
        End If
    End Sub

    Private Sub grdViewSegmentsList_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles grdViewSegments.RowCellStyle
        Dim oSegment As cSegment = grdViewSegments.GetRow(e.RowHandle)
        If Not oSegment Is Nothing Then
            If e.Column Is colSegmentsListCaveBranch Then
                e.Appearance.BackColor = oSurvey.Properties.CaveInfos.GetColor(oSegment, Drawing.Color.LightGray)
            ElseIf e.Column Is colSegmentsListSession Then
                e.Appearance.BackColor = oSurvey.Properties.Sessions.GetColor(oSegment, Drawing.Color.LightGray)
            ElseIf e.Column Is colSegmentsListTo Then
                If oSegment.To Like "*(*)" Then
                    e.Appearance.ForeColor = modPaint.LightColor(SystemColors.GrayText, 0.7) ' SystemColors.GrayText
                End If
            ElseIf e.Column Is colSegmentsListFrom Then
                If oSegment.From Like "*(*)" Then
                    e.Appearance.ForeColor = modPaint.LightColor(SystemColors.GrayText, 0.7) ' SystemColors.GrayText
                End If
            End If
        End If
    End Sub

    Private Sub grdViewSegments_DoubleClick(sender As Object, e As EventArgs) Handles grdViewSegments.DoubleClick
        If grdViewSegments.FocusedColumn Is colSegmentsListNote Then
            tabSegmentsProperty.SelectedTabPage = tabSegmentsNote
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListAttachment Then
            tabSegmentsProperty.SelectedTabPage = tabSegmentsAttachments
            If oTools.CurrentSegment.Attachments.Count = 1 Then
                'If IsNothing(tvSegmentAttachments.SelectedObject) Then tvSegmentAttachments.SelectedObject = DirectCast(tvSegmentAttachments.Objects, cAttachmentLinks).FirstOrDefault
                Call pSegmentAttachmentOpen()
            End If
        End If
    End Sub

    Private Sub grdViewSegments_FocusedRowChanged(sender As Object, e As FocusedRowChangedEventArgs) Handles grdViewSegments.FocusedRowChanged
        'If Not bDisableSegmentsChangeEvent Then
        '    bDisableSegmentsChangeEvent = True
        'Dim iIndex As Integer = grdSegments.CurrentCellAddress.Y
        'Dim oSegment As cSegment
        'If iIndex >= oSurvey.Segments.Count Then
        '    oSegment = oSurvey.Segments.Append()
        '    Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
        'Else
        '    oSegment = oSurvey.Segments(iIndex)
        'End If
        If e.FocusedRowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle Then
            Dim oSegment As cSegment = oSurvey.Segments.Append
            Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
            Call oSegment.SetSession(DirectCast(btnMainSessionList.EditValue, cSession))
            Call oSegment.Save()
            'DirectCast(grdSegments.DataSource, BindingList(Of cSegment)).Add(oSegment)
            grdViewSegments.FocusedRowHandle = grdViewSegments.FindRow(oSegment)
        Else
            Dim oSegment As cSegment = grdViewSegments.GetRow(e.FocusedRowHandle)
            If Not oSegment Is Nothing Then
                Call oTools.SelectSegment(oSegment)
                Call pSegmentsRefresh()
            End If
            'bDisableSegmentsChangeEvent = False
        End If
        'End If
    End Sub

    Private Sub grdViewSegments_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles grdViewSegments.CustomUnboundColumnData
        If e.IsGetData Then
            Dim oSegment As cSegment = DirectCast(e.Row, cSegment)
            If Not oSegment Is Nothing Then
                Select Case e.Column.FieldName
                    Case "_Attachments"
                        e.Value = oSegment.Attachments.Count > 0
                    Case "_Note"
                        e.Value = oSegment.Note <> ""
                End Select
            End If
        End If
    End Sub

    Private Sub grdViewSegments_InitNewRow(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles grdViewSegments.InitNewRow
        Dim oSegment As cSegment = oSurvey.Segments.Append
        Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
        Call oSegment.SetSession(DirectCast(btnMainSessionList.EditValue, cSession))
    End Sub

    Private Sub grdViewSegments_ValidateRow(sender As Object, e As ValidateRowEventArgs) Handles grdViewSegments.ValidateRow
        Dim oSegment As cSegment = e.Row
        pSegmentValidate(oSegment)
    End Sub

    Private Sub btnSegmentInsert_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentInsert.ItemClick
        Call pSegmentInsert(grdViewSegments.GetFocusedDataSourceRowIndex)
    End Sub

    Private Sub grdViewSegments_ShowingEditor(sender As Object, e As CancelEventArgs) Handles grdViewSegments.ShowingEditor
        Dim oSegment As cSegment = grdViewSegments.GetFocusedRow
        If Not oSegment Is Nothing Then
            Dim oCaveInfo As cICaveInfoBranches = oTools.CurrentSegment.GetCaveInfo
            If Not IsNothing(oCaveInfo) AndAlso oCaveInfo.GetLocked Then
                e.Cancel = True
            Else
                If grdViewSegments.FocusedColumn Is colSegmentsListFrom OrElse grdViewSegments.FocusedColumn Is colSegmentsListTo Then
                    With oTools.CurrentSegment
                        Dim bDisabledEdit As Boolean = (.IsBinded)
                        e.Cancel = bDisabledEdit
                    End With
                ElseIf grdViewSegments.FocusedColumn Is colSegmentsListProfileDirection Then
                    e.Cancel = oSegment.Splay OrElse oSegment.IsProfileBinded
                End If
            End If
            bSegmentChanged = True
        End If
    End Sub

    Private Sub grdSegments_Enter(sender As Object, e As EventArgs) Handles grdSegments.Enter
        Call oClipboardViewer_ClipboardChanged(Nothing, Nothing)
    End Sub

    Private Sub grdViewSegments_HiddenEditor(sender As Object, e As EventArgs) Handles grdViewSegments.HiddenEditor

    End Sub

    Private Sub grdViewSegments_ValidatingEditor(sender As Object, e As DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs) Handles grdViewSegments.ValidatingEditor
        If grdViewSegments.FocusedColumn Is colSegmentsListFrom Then
            cboSegmentFrom.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListTo Then
            cboSegmentTo.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListDistance Then
            txtSegmentDistance.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListBearing Then
            txtSegmentBearing.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListInclination Then
            txtSegmentInclination.Text = e.Value

        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListL Then
            txtSegmentLeft.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListR Then
            txtSegmentRight.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListU Then
            txtSegmentUp.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListD Then
            txtSegmentDown.Text = e.Value

        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListExclude Then
            chkSegmentExclude.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListProfileDirection Then
            cboSegmentDirection.SelectedIndex = e.Value
        End If
    End Sub

    Private Sub grdViewSegments_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewSegments.PopupMenuShowing
        If e.HitInfo.InRowCell OrElse e.HitInfo.HitTest = DevExpress.XtraGrid.Views.Grid.ViewInfo.GridHitTest.EmptyRow Then
            e.Allow = False
            Call mnuSegments.ShowPopup(grdSegments.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnSegmentMoveUp_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentMoveUp.ItemClick
        Dim iNewIndex As Integer = oTools.CurrentSegment.Index - 1
        If iNewIndex >= 0 Then
            Dim oSegment As cSegment = oTools.CurrentSegment
            Call pSegmentMove(oSegment, iNewIndex)
            Call pSegmentSelect(oSegment, False, False)
        End If
    End Sub

    Private Sub btnSegmentMoveDown_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentMoveDown.ItemClick
        Dim iNewIndex As Integer = oTools.CurrentSegment.Index + 1
        If iNewIndex < oSurvey.Segments.Count Then
            Dim oSegment As cSegment = oTools.CurrentSegment
            Call pSegmentMove(oSegment, iNewIndex)
            Call pSegmentSelect(oSegment, False, False)
        End If
    End Sub

    Private Sub btnSegmentsReverse_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentsReverse.ItemClick
        Dim oRows As cSegmentCollection = pSegmentsFromGridSelection()
        If oRows.Count > 0 Then
            If MsgBox(GetLocalizedString("main.warning5"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = vbYes Then

                Dim oCurrentSegment As cSegment = oTools.CurrentSegment
                Call oTools.SelectSegment(Nothing)
                bDisableSegmentsChangeEvent = True

                For Each oSegment As cSegment In oRows
                    Call oSegment.Reverse()
                Next
                bDisableSegmentsChangeEvent = False

                Call pSurveyCalculate(False)
                Call pSurveySegmentsRefresh()
                Call pMapInvalidate()

                Call oTools.SelectSegment(oCurrentSegment)
                Call pSegmentSelect(oCurrentSegment, False, False)
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewTrigpoints.PopupMenuShowing
        If e.HitInfo.InRowCell Then
            e.Allow = False
            Call mnuTrigpoint.ShowPopup(grdTrigPoints.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnGridRefresh_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnGridRefresh.ItemClick
        If e.Link.LinkedObject Is mnuSegments Then
            Call grdSegments.RefreshDataSource()
        ElseIf e.Link.LinkedObject Is mnuTrigpoint Then
            Call grdTrigPoints.RefreshDataSource()
        End If
    End Sub

    Private Sub btnGridExport_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnGridExport.ItemClick
        If e.Link.LinkedObject Is mnuSegments Then
            Call GridExportTo(oSurvey, grdSegments, btnSegments.Caption, "", Me)
        ElseIf e.Link.LinkedObject Is mnuTrigpoint Then
            Call GridExportTo(oSurvey, grdTrigPoints, btnTrigpoints.Caption, "", Me)
        End If
    End Sub

    Private Sub mnuSegments1_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuSegments.BeforePopup
        Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
        If oSegment Is Nothing Then
            btnCut.Enabled = False
            btnCopy.Enabled = False
            btnDelete.Enabled = False
            btnSegmentsReverse.Enabled = False
        Else
            Dim oSegments As cSegmentCollection = pSegmentsFromGridSelection(True)
            Dim bEnabled As Boolean = oSegments.Count > 0
            'btnCut.Enabled = btnCut.Enabled
            'btnCopy.Enabled = btnCopy.Enabled
            'btnDelete.Enabled = btnDelete.Enabled
            btnSegmentsReverse.Enabled = oSegment.IsValid
        End If
    End Sub

    Private Sub btnDataPropertiesDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDataPropertiesDelete.ItemClick
        Dim oOwner As DevExpress.XtraVerticalGrid.PropertyGridControl = mnuDataProperties.Tag
        If Not oOwner.FocusedRow Is Nothing Then
            Dim oDescriptor As PropertyDescriptor = oOwner.GetPropertyDescriptor(oOwner.FocusedRow)
            If Not oDescriptor Is Nothing Then
                Call oDescriptor.ResetValue(oOwner.SelectedObject)
                Call oOwner.Refresh()
            End If
        End If
    End Sub

    Private Sub btnDataPropertiesEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDataPropertiesEdit.ItemClick
        Dim oOwner As DevExpress.XtraVerticalGrid.PropertyGridControl = mnuDataProperties.Tag
        Dim oTable As Data.cDataFields
        If oOwner Is prpSegmentDataProperties Then
            oTable = oSurvey.Properties.DataTables.Segments
        ElseIf oOwner Is prpTrigpointDataProperties Then
            oTable = oSurvey.Properties.DataTables.Trigpoints
        Else
            oTable = oSurvey.Properties.DataTables.DesignItems
        End If
        Using frmDFE As frmDataFieldsEditor = New frmDataFieldsEditor(oTable)
            If frmDFE.ShowDialog(Me) = vbOK Then
                If oOwner Is prpSegmentDataProperties Then
                    If oTools.CurrentSegment Is Nothing Then
                        oOwner.SelectedObject = Nothing
                    Else
                        oOwner.SelectedObject = oTools.CurrentSegment.DataProperties.GetClass
                    End If
                ElseIf oOwner Is prpTrigpointDataProperties Then
                    If oTools.CurrentTrigpoint Is Nothing Then
                        oOwner.SelectedObject = Nothing
                    Else
                        oOwner.SelectedObject = oTools.CurrentTrigpoint.DataProperties.GetClass
                    End If
                Else
                    If pGetCurrentDesignTools.CurrentItem Is Nothing Then
                        oOwner.SelectedObject = Nothing
                    Else
                        oOwner.SelectedObject = pGetCurrentDesignTools.CurrentItem.DataProperties.GetClass
                    End If
                End If
            End If
        End Using
    End Sub

    Private Sub mnuDataProperties_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuDataProperties.BeforePopup
        Dim oOwner As DevExpress.XtraVerticalGrid.PropertyGridControl = mnuDataProperties.Tag
        If oOwner.FocusedRow Is Nothing Then
            btnDataPropertiesDelete.Enabled = False
        Else
            Dim oDescriptor As PropertyDescriptor = oOwner.GetPropertyDescriptor(oOwner.FocusedRow)
            If oDescriptor Is Nothing Then
                btnDataPropertiesDelete.Enabled = False
            Else
                btnDataPropertiesDelete.Enabled = oDescriptor.CanResetValue(oOwner.SelectedObject)
            End If
        End If
    End Sub

    Private Sub prpSegmentDataProperties_MouseUp(sender As Object, e As MouseEventArgs) Handles prpSegmentDataProperties.MouseUp
        If (e.Button And MouseButtons.Right) = MouseButtons.Right Then
            mnuDataProperties.Tag = prpSegmentDataProperties
            Call mnuDataProperties.ShowPopup(prpSegmentDataProperties.PointToScreen(e.Location))
        End If
    End Sub

    Private Sub prpTrigpointDataProperties_MouseUp(sender As Object, e As MouseEventArgs) Handles prpTrigpointDataProperties.MouseUp
        If (e.Button And MouseButtons.Right) = MouseButtons.Right Then
            mnuDataProperties.Tag = prpTrigpointDataProperties
            Call mnuDataProperties.ShowPopup(prpTrigpointDataProperties.PointToScreen(e.Location))
        End If
    End Sub

    Private Sub grdViewTrigPointAliases_FocusedRowChanged(sender As Object, e As FocusedRowChangedEventArgs) Handles grdViewTrigPointAliases.FocusedRowChanged
        If e.FocusedRowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle Then
            Dim oAliases As UIHelpers.cAliasBindingList = DirectCast(grdViewTrigPointAliases.DataSource, UIHelpers.cAliasBindingList)
            'If oAliases.Count = 0 OrElse oAliases.Last.Value <> "" Then
            Call oAliases.Add("")
            grdViewTrigPointAliases.FocusedRowHandle = grdViewTrigPointAliases.FindRow(oAliases.Last)
            'End If
        End If
    End Sub

    Private Sub grdViewTrigPointAliases_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewTrigPointAliases.PopupMenuShowing
        If e.HitInfo.InRowCell Then
            e.Allow = False
            btnAliasDelete.Enabled = Not grdViewTrigPointAliases.GetFocusedRow Is Nothing
            btnAliasDeleteAll.Enabled = grdViewTrigPointAliases.DataSource.count > 0
            Call mnuAliases.ShowPopup(grdTrigPointAliases.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnAliasDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAliasDelete.ItemClick
        Call grdViewTrigPointAliases.DeleteSelectedRows()
    End Sub

    Private Sub btnAliasDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAliasDeleteAll.ItemClick
        Call grdViewTrigPointAliases.DataSource.clear
    End Sub

    Private Sub grdViewTrigpointConnections_ShowingEditor(sender As Object, e As CancelEventArgs) Handles grdViewTrigpointConnections.ShowingEditor
        If grdViewTrigpointConnections.FocusedColumn Is colTrigpointConnectionsIgnore Then
            Dim sFrom As String = oTools.CurrentTrigpoint.Name
            Dim sTo As String = DirectCast(grdViewTrigpointConnections.GetFocusedRow, UIHelpers.cDescriptionValueItem(Of Boolean)).Description
            Dim oSegment As cSegment = oSurvey.Segments.Find(sFrom, sTo)
            If Not oSegment Is Nothing Then
                e.Cancel = oSegment.IsProfileBinded
            End If
        End If
    End Sub

    Private Sub grdViewSegmentAttachments_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewSegmentAttachments.PopupMenuShowing
        If e.HitInfo.InRowCell OrElse e.HitInfo.HitTest = DevExpress.XtraGrid.Views.Grid.ViewInfo.GridHitTest.EmptyRow Then
            e.Allow = False
            Call mnuAttachments.ShowPopup(grdSegmentAttachments.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnAttachmentsAdd_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsAdd.ItemClick
        Using oOFD As OpenFileDialog = New OpenFileDialog
            oOFD.Filter = modMain.GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
            oOFD.FilterIndex = 1
            If oOFD.ShowDialog(Me) = DialogResult.OK Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                DirectCast(grdSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Add(oOFD.FileName)
                'Call oTools.CurrentSegment.Attachments.Add(oOFD.FileName)
                'grdSegmentAttachments.RefreshDataSource()
                Call oMousePointer.Pop()
            End If
        End Using
    End Sub

    Private Sub btnAttachmentsDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsDelete.ItemClick
        If MsgBox(modMain.GetLocalizedString("main.warning30"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, modMain.GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
            If Not IsNothing(oAttachment) Then
                Dim oOwner As Object = oAttachment.Owner
                If TypeOf oOwner Is cSegment Then
                    DirectCast(grdSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Remove(oAttachment)
                    'DirectCast(oOwner, cSegment).Attachments.Remove(oAttachment)
                    'Call grdSegmentAttachments.RefreshDataSource()
                End If
            End If
        End If
    End Sub

    Private Sub btnAttachmentsDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsDeleteAll.ItemClick
        If MsgBox(modMain.GetLocalizedString("main.warning31"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, modMain.GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
            If Not IsNothing(oAttachment) Then
                Dim oOwner As Object = oAttachment.Owner
                If TypeOf oOwner Is cSegment Then
                    DirectCast(grdSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Clear()
                    'DirectCast(oOwner, cSegment).Attachments.Clear()
                    'Call grdSegmentAttachments.RefreshDataSource()
                End If
            End If
        End If
    End Sub

    Private Sub btnAttachmentsOpen_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsOpen.ItemClick
        Call pSegmentAttachmentOpen()
    End Sub

    Private Sub mnuAttachments_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuAttachments.BeforePopup
        Dim bEnabled As Boolean = Not grdViewSegmentAttachments.GetFocusedRow Is Nothing
        btnAttachmentsOpen.Enabled = bEnabled
        btnAttachmentsDelete.Enabled = bEnabled
        btnAttachmentsDeleteAll.Enabled = bEnabled
    End Sub

    Private Sub grdViewSegmentAttachments_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles grdViewSegmentAttachments.CustomUnboundColumnData
        If e.IsGetData Then
            If e.Column Is colSegmentAttachmentsImage Then
                e.Value = DirectCast(e.Row, cAttachmentsLink).Attachment.GetThumbnail
            End If
        End If
    End Sub

    Private Sub btnItemsSendToBottom_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsSendToBottom.ItemClick
        Call pItemSendToBottom()
    End Sub

    Private Sub btnItemsSendBehind_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsSendBehind.ItemClick
        Call pItemSendBehind()
    End Sub

    Private Sub btnItemsBringOnTop_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsBringOnTop.ItemClick
        Call pItemBringToTop()
    End Sub

    Private Sub btnItemsBringAhead_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsBringAhead.ItemClick
        Call pItemBringAhead()
    End Sub

    Private Sub grdViewSegmentAttachments_DoubleClick(sender As Object, e As EventArgs) Handles grdViewSegmentAttachments.DoubleClick
        Call pSegmentAttachmentOpen()
    End Sub

    Private Sub SegmentAttachmentsDragDrop_BeginDragDrop(sender As Object, e As DevExpress.Utils.DragDrop.BeginDragDropEventArgs)
        Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
        If oAttachment Is Nothing Then
            e.Cancel = True
        Else
            e.Data = grdViewSegmentAttachments.GetFocusedRow
        End If
    End Sub

    Private Sub grdSegmentAttachments_DragOver(sender As Object, e As DragEventArgs) Handles grdSegmentAttachments.DragOver
        e.Effect = If(e.Data.GetDataPresent(DataFormats.FileDrop), DragDropEffects.Copy, DragDropEffects.None)
    End Sub

    Private Sub grdSegmentAttachments_DragDrop(sender As Object, e As DragEventArgs) Handles grdSegmentAttachments.DragDrop
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFiles As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            For Each sFile As String In sFiles
                DirectCast(grdViewSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Add(sFile)
            Next
        End If
    End Sub

    Private Sub grdSegmentAttachments_MouseMove(sender As Object, e As MouseEventArgs) Handles grdSegmentAttachments.MouseMove
        If (e.Button And MouseButtons.Left) = MouseButtons.Left Then
            Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
            If Not oAttachment Is Nothing Then
                Call grdSegmentAttachments.DoDragDrop(oAttachment, DragDropEffects.Copy)
            End If
        End If
    End Sub

    Private Sub btnCurrentItemSignExport_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSignExport.ItemClick
        With oCurrentDesign
            Dim oItemSign As cItemSign = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    .Title = GetLocalizedString("main.saveclipartdialog")
                    .Filter = GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog = DialogResult.OK Then
                        Call oItemSign.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemSignSaveInGallery_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSignSaveInGallery.ItemClick
        With oCurrentDesign
            Dim oItemSign As cItemSign = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    Dim iGalleryIndex As Integer = oDockClipart.GalleryIndexByCategory(oItemSign.Category)
                    .InitialDirectory = oDockClipart.GetGalleryPath(iGalleryIndex)
                    If oSFD.ShowDialog = DialogResult.OK Then
                        Call oItemSign.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemGenericRevertAllSequences_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericRevertAllSequences.ItemClick
        Try
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                Call oItem.Points.Revert()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericReorderSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericReorderSequence.ItemClick
        Try
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                Call oItem.Points.ReorderSequences()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericDivide_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericDivide.ItemClick
        Try
            Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
            If oItem.CanBeDivided Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call pGetCurrentDesignTools.CurrentLayer.Items.Divide(oItem)
                Call oMousePointer.Pop()
                Call pGetCurrentDesignTools.EndItem()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericCombineAllSequences_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericCombineAllSequences.ItemClick
        Try
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                Call oItem.Points.CombineSequences()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericCombine_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericCombine.ItemClick
        Try
            Call pGetCurrentDesignTools.CombineItem(pGetCurrentDesignTools.CurrentItem)
            picMap.Cursor = Cursors.Help
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericCloseAllSequences_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericCloseAllSequences.ItemClick
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Call oItem.Points.CloseSequences()
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemItemsCombine_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombine.ItemClick
        With oCurrentDesign
            Dim oItemItems As cItemItems = pGetCurrentDesignTools.CurrentItem
            Dim oResultItem As cItem = oItemItems.SelfCombine()
            Call pGetCurrentDesignTools.Clear()
            Call pGetCurrentDesignTools.SelectItem(oResultItem)
            Call oResultItem.Points.ReorderSequences()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemItemsCombineConcretionClipart_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombineConcretionClipart.ItemClick
        With oCurrentDesign
            Dim oItemItems As cItemItems = pGetCurrentDesignTools.CurrentItem
            Call pGetCurrentDesignTools.SelectItem(oItemItems.ToConcretion)
        End With
    End Sub

    Private Sub btnCurrentItemItemsCombineRockClipart_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombineRockClipart.ItemClick
        With oCurrentDesign
            Dim oItemItems As cItemItems = pGetCurrentDesignTools.CurrentItem
            Call pGetCurrentDesignTools.SelectItem(oItemItems.ToRock)
        End With
    End Sub

    Private Sub btnCurrentItemItemsCombineSignClipart_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombineSignClipart.ItemClick
        With oCurrentDesign
            Dim oItemItems As cItemItems = pGetCurrentDesignTools.CurrentItem
            Call pGetCurrentDesignTools.SelectItem(oItemItems.ToSign)
        End With
    End Sub

    Private Sub btnCurrentItemPointAdd_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointAdd.ItemClick
        Call pItemAddPoint()
    End Sub

    Private Sub btnCurrentItemPointDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointDelete.ItemClick
        Call pItemDeletePoint()
    End Sub

    Private Sub btnCurrentItemPointSequenceDivide_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointSequenceDivide.ItemClick
        Call pSequenceDivide()
    End Sub

    Private Sub btnCurrentItemPointSequenceDivideAndJoin_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointSequenceDivideAndJoin.ItemClick
        Call pSequenceDivide(True)
    End Sub

    Private Sub btnCurrentItemPointSequenceCombine_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointSequenceCombine.ItemClick
        Call pSequenceCombine()
    End Sub

    Private Sub btnCurrentItemPointCloseSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointCloseSequence.ItemClick
        Call pSequenceClose()
    End Sub

    Private Sub btnCurrentItemPointDeleteSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointDeleteSequence.ItemClick
        Call pSequenceDelete()
    End Sub

    Private Sub btnCurrentItemPointRevertSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointRevertSequence.ItemClick
        Call pSequenceRevert()
    End Sub

    Private Sub btnCurrentItemPointNewFromSequence0_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointNewFromSequence0.ItemClick
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oNewItem As cItem = pGetCurrentDesignTools.CurrentLayer.Items.DivideOneSequence(oItem, oPoint, False)
            Call .SelectItem(oNewItem)
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemPointNewFromSequence1_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointNewFromSequence1.ItemClick
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oNewItem As cItem = pGetCurrentDesignTools.CurrentLayer.Items.DivideOneSequence(oItem, oPoint, True)
            Call .SelectItem(oNewItem)
            Call .TakeUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemPointPlotLockSegment_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointPlotLockSegment.ItemClick
        MsgBox("TODO")
    End Sub

    Private Sub btnCurrentItemPointPlotBindSegment_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointPlotBindSegment.ItemClick
        MsgBox("TODO")
    End Sub

    Private Sub btnCurrentItemClipartSaveInGallery_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemClipartSaveInGallery.ItemClick
        With oCurrentDesign
            Dim oItemClipart As cItemClipart = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    Dim iGalleryIndex As Integer = oDockClipart.GalleryIndexByCategory(oItemClipart.Category)
                    .InitialDirectory = oDockClipart.GetGalleryPath(iGalleryIndex)
                    If oSFD.ShowDialog = DialogResult.OK Then
                        Call oItemClipart.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemClipartExport_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemClipartExport.ItemClick
        With oCurrentDesign
            Dim oItemClipart As cItemClipart = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    .Title = GetLocalizedString("main.saveclipartdialog")
                    .Filter = GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog = DialogResult.OK Then
                        Call oItemClipart.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemLegendAddTo_Popup(sender As Object, e As EventArgs) Handles btnCurrentItemLegendAddTo.Popup
        Call btnCurrentItemLegendAddTo.ItemLinks.Clear()
        Dim iIndex As Integer = 1
        For Each oItem As cItemLegend In oCurrentDesign.Layers.Item(cLayers.LayerTypeEnum.Signs).Items.Where(Function(item) item.Type = cIItem.cItemTypeEnum.Legend)
            Dim oLegendItem As BarButtonItem = RibbonControl.CreateOrGetButton("btncurrentitemlegendaddto" & iIndex)
            oLegendItem.Caption = String.Format(modMain.GetLocalizedString("main.textpart105"), iIndex) & If(oItem.Name <> "", " [" & oItem.Name & "]", "") & If(oItem.ContainsItem(pGetCurrentDesignTools.CurrentItem), "*", "")
            oLegendItem.Tag = oItem
            oLegendItem.Enabled = oItem.ValidateItem(pGetCurrentDesignTools.CurrentItem)
            AddHandler oLegendItem.ItemClick, AddressOf btnCurrentItemLegendAddToItem_ItemClick
            Call btnCurrentItemLegendAddTo.AddItem(oLegendItem)
            iIndex += 1
        Next
    End Sub

    Private Sub btnCurrentItemSendCopyTo_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSendCopyTo.ItemClick
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                Call .EndAndSelectItem()
                Call .CloneItem(oSurvey.Profile)
                Call .SelectItem(oItem)
            End With
            Call pMapInvalidate()
        Else
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                Call .EndAndSelectItem()
                Call .CloneItem(oSurvey.Plan)
                Call .SelectItem(oItem)
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pItemSizeBy(Width As Single, Height As Single)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If .CurrentItem Is Nothing Then
                    Dim oRect As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)
                    Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                    Call oItem.AddRange(oCurrentDesign.GetAllItems)
                    If oItem.Count > 0 Then
                        Call oItem.ResizeBy(Width / 100, Height / 100)
                    End If
                Else
                    .CurrentItem.ResizeBy(Width / 100, Height / 100)
                End If
                Call pPropertyItemBounds()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pItemSizeTo(Width As Single, Height As Single)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If .CurrentItem Is Nothing Then
                    Dim oRect As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)
                    Dim sDiffW As Single = Width / oRect.Width
                    Dim sDiffH As Single = Height / oRect.Height
                    Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                    Call oItem.AddRange(oCurrentDesign.GetAllItems)
                    If oItem.Count > 0 Then
                        Call oItem.ResizeBy(sDiffW, sDiffH)
                    End If
                Else
                    .CurrentItem.ResizeTo(Width, Height)
                End If
                Call pPropertyItemBounds()
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pItemMoveTo(X As Single, Y As Single)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                If .IsInPointEdit AndAlso Not .CurrentItemPoint Is Nothing Then
                    Call .CurrentItemPoint.MoveTo(X, Y)
                    Call pPropertyItemPointBounds()
                Else
                    If .CurrentItem Is Nothing Then
                        Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                        Dim sDiffX As Single = X - oRect.Left
                        Dim sDiffY As Single = Y - oRect.Top
                        Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                        Call oItem.AddRange(oCurrentDesign.GetAllItems)
                        If oItem.Count > 0 Then
                            Call oItem.MoveBy(sDiffX, sDiffY)
                        End If
                    Else
                        Call .CurrentItem.MoveTo(X, Y)
                    End If
                    Call pPropertyItemBounds()
                End If
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnCurrentItemFlipH_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemFlipH.ItemClick
        Call pObjectFlipH()
    End Sub

    Private Sub btnCurrentItemFlipV_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemFlipV.ItemClick
        Call pObjectFlipV()
    End Sub

    Private Sub txtCurrentItemX_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemX.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemMoveTo(sender.EditValue, -btnCurrentItemY.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemX_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemX.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemMoveTo(sender.EditValue + sDelta, -btnCurrentItemY.EditValue)
    End Sub

    Private Sub txtCurrentItemY_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemY.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemMoveTo(btnCurrentItemX.EditValue, -sender.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemY_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemY.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemMoveTo(btnCurrentItemX.EditValue, -sender.EditValue + sDelta)
    End Sub

    Private Sub txtCurrentItemW_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemW.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeTo(sender.EditValue, btnCurrentItemH.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemW_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemW.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemSizeTo(sender.EditValue + sDelta, btnCurrentItemH.EditValue)
    End Sub

    Private Sub txtCurrentItemH_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemH.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeTo(btnCurrentItemW.EditValue, sender.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemH_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemH.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemSizeTo(btnCurrentItemW.EditValue, sender.EditValue + sDelta)
    End Sub

    Private Sub txtCurrentItemScaleH_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemScaleH.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeBy(100, sender.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemScaleW_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemScaleW.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeBy(sender.EditValue, 100)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemRotateBy_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemRotateBy.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemRotateBy(sender.EditValue, btnCurrentItemRotateCenteredOnOrigin.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemRotateBy_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemRotateBy.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        sender.EditValue += sDelta
    End Sub

    Private Sub btnCurrentItemRotateRight_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemRotateRight.ItemClick
        Call pItemRotateBy(90.0, btnCurrentItemRotateCenteredOnOrigin.EditValue)
    End Sub

    Private Sub btnCurrentItemRotateLeft_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemRotateLeft.ItemClick
        Call pItemRotateBy(-90.0, btnCurrentItemRotateCenteredOnOrigin.EditValue)
    End Sub

    Private Sub btnCurrentItemHAlignLeft_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemHAlignLeft.ItemClick
        Call pItemHorizontalAlign(cItemItems.HorizontalAlignmentEnum.Left)
    End Sub

    Private Sub btnCurrentItemHAlignCenter_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemHAlignCenter.ItemClick
        Call pItemHorizontalAlign(cItemItems.HorizontalAlignmentEnum.Center)
    End Sub

    Private Sub btnCurrentItemHAlignRight_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemHAlignRight.ItemClick
        Call pItemHorizontalAlign(cItemItems.HorizontalAlignmentEnum.Right)
    End Sub

    Private Sub btnCurrenItemVAlignTop_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrenItemVAlignTop.ItemClick
        Call pItemVerticalAlign(cItemItems.VerticalAlignmentEnum.Top)
    End Sub

    Private Sub btnCurrenItemVAlignCenter_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrenItemVAlignCenter.ItemClick
        Call pItemVerticalAlign(cItemItems.VerticalAlignmentEnum.Middle)
    End Sub

    Private Sub btnCurrenItemVAlignBottom_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrenItemVAlignBottom.ItemClick
        Call pItemVerticalAlign(cItemItems.VerticalAlignmentEnum.Bottom)
    End Sub

    Private Sub cmdCurrentItemVSpace_ItemClick(sender As Object, e As ItemClickEventArgs) Handles cmdCurrentItemVSpace.ItemClick
        Call pItemSpaceV()
    End Sub

    Private Sub cmdCurrentItemHSpace_ItemClick(sender As Object, e As ItemClickEventArgs) Handles cmdCurrentItemHSpace.ItemClick
        Call pItemSpaceH()
    End Sub

    Private Sub btnCurrentItemLock_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemLock.CheckedChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Locked = btnCurrentItemLock.Checked
                    Call pObjectPropertyLoad()
                    Call pMapInvalidate()
                End With
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    'Private Sub txtCurrentItemTransparency_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemTransparency.KeyDown
    '    If e.KeyCode = Keys.Enter Then
    '        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
    '        oItem.Transparency = sender.EditValue
    '        e.Handled = True
    '    End If
    'End Sub

    Private Sub btnCurrentItemTransparency_EditValueChanged(sender As Object, e As EventArgs)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                .CurrentItem.Transparency = sender.EditValue / 255
                Call .TakeUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnCurrentItemPointsJoin_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsJoin.ItemClick
        Call pDesignPointsJoin(False)
    End Sub

    Private Sub btnCurrentItemPointsJoinAndConnect_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsJoinAndConnect.ItemClick
        Call pDesignPointsJoin(True)
    End Sub

    Private Sub btnCurrentItemPointsUnjoin_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsUnjoin.ItemClick
        Call pDesignPointsUnjoin()
    End Sub

    Private Sub btnCurrentItemPointsUnjoinAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsUnjoinAll.ItemClick
        Call pDesignPointsUnjoin(True)
    End Sub

    Private Sub btnPenSmooting_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenSmooting.CheckedChanged
        btnPenSmootingFactor.Enabled = btnPenSmooting.Checked
    End Sub

    Private Sub btnItemsObjectProperties_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsObjectProperties.ItemClick
        Call pObjectPropShow(True)
    End Sub

    Private Sub DocumentManager_DocumentActivate(sender As Object, e As Docking2010.Views.DocumentEventArgs) Handles DocumentManager.DocumentActivate
        If Not e.Document Is Nothing Then
            Select Case e.Document.ControlName.ToLower
                Case "dockdata"
                    btnSegmentAdd.Visibility = BarItemVisibility.Always
                    btnSegmentInsert.Visibility = BarItemVisibility.Always
                    btnSegmentsReverse.Visibility = BarItemVisibility.Always
                    btnSegmentDelete.Visibility = BarItemVisibility.Always
                    btnSegmentMoveDown.Visibility = BarItemVisibility.Always
                    btnSegmentMoveUp.Visibility = BarItemVisibility.Always
                Case "dockdesigner"
                    btnSegmentAdd.Visibility = BarItemVisibility.Never
                    btnSegmentInsert.Visibility = BarItemVisibility.Never
                    btnSegmentsReverse.Visibility = BarItemVisibility.Never
                    btnSegmentDelete.Visibility = BarItemVisibility.Never
                    btnSegmentMoveDown.Visibility = BarItemVisibility.Never
                    btnSegmentMoveUp.Visibility = BarItemVisibility.Never
            End Select
        End If
    End Sub

    Private Sub btnViewImageViewer_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewImageViewer.ItemClick
        Call pDockContentShow(dockIV, True)
    End Sub

    Private Sub prpPropDesignDataProperties_MouseUp(sender As Object, e As MouseEventArgs) Handles prpPropDesignDataProperties.MouseUp
        If (e.Button And MouseButtons.Right) = MouseButtons.Right Then
            mnuDataProperties.Tag = prpPropDesignDataProperties
            Call mnuDataProperties.ShowPopup(prpPropDesignDataProperties.PointToScreen(e.Location))
        End If
    End Sub

    Private Sub pnlStatusZoomBar_EditValueChanged(sender As Object, e As EventArgs) Handles pnlStatusZoomBar.EditValueChanged
        If Not bDisableZoomEvent Then
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                oHolos.Zoom(pnlStatusZoomBar.EditValue / sZoomRatio)
            Else
                Call pMapRepaint()
            End If
        End If
    End Sub

    Private Sub btnViewAudioListener_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewAudioListener.ItemClick
        Call pDockContentShow(dockAV, True)
    End Sub

    Private Sub btnPasteStylePen_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPasteStylePen.ItemClick
        Call pGetCurrentDesignTools.PasteItem("", Location, cEditDesignTools.PasteSpecialEnum.Pen)
    End Sub

    Private Sub btnPasteStyleBrush_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPasteStyleBrush.ItemClick
        Call pGetCurrentDesignTools.PasteItem("", Location, cEditDesignTools.PasteSpecialEnum.Brush)
    End Sub

    Private Sub btnPaste_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPaste.ItemClick
        If picMap.Focused Then
            Call pClipboardPaste("", modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
        Else
            Call pClipboardPaste()
        End If
    End Sub

    Private Sub btnCurrentItemSketchDisableMorphingForAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchDisableMorphingForAll.ItemClick
        Call pItemSketchEnableMorphingForAll(False)
    End Sub

    Private Sub btnCurrentItemSketchEnableMorphingForAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchEnableMorphingForAll.ItemClick
        Call pItemSketchEnableMorphingForAll(True)
    End Sub

    Private Sub pItemSketchEnableMorphingForAll(Enabled As Boolean)
        Try
            Call oMousePointer.Push(Cursors.WaitCursor)
            For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
                If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
                    Dim oItemSketch As cIItemSketch = oItem
                    oItemSketch.MorphingDisabled = Enabled
                    Call pGetCurrentDesignTools.TakeUndoSnapshot()
                End If
            Next
            Call oMousePointer.Pop()
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private Sub btnCurrentItemSketchView_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchView.ItemClick
        Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    End Sub

    Private Sub btnCurrentItemSketchEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchEdit.ItemClick
        pItemSketchEdit()
    End Sub

    Private Sub btnCurrentItemSketchHideAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchHideAll.ItemClick
        Call pitemsketchHideAll
    End Sub

    Private Sub pItemSketchHideAll()
        Call oMousePointer.Push(Cursors.WaitCursor)
        For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
            If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
                oItem.HiddenInDesign = True
            End If
        Next
        Call oDockLevels.RefreshData()
        Call oMousePointer.Pop()
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemImageEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemImageEdit.ItemClick
        Call pItemImageEdit()
    End Sub

    Private Sub btnCurrentItemImageView_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemImageView.ItemClick
        Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    End Sub

    Private Sub btnCurrentItemUnderItems_Popup(sender As Object, e As EventArgs) Handles btnCurrentItemUnderItems.Popup
        Call pMapInfoObjectsUnder(mnuDesignItem.Tag)
    End Sub

    Private Sub btnCurrentItemUnderItems_Subitem_ItemClick(sender As Object, e As ItemClickEventArgs)
        Call pItemBringToTop()
    End Sub

    Private Sub RibbonControl_HighlightedLinkChanged(Sender As Object, e As HighlightedLinkChangedEventArgs)
        If Not e.Link Is Nothing Then
            If e.Link.Item.Name.StartsWith("btnCurrentItemUnderlying_") Then
                Dim oItem As cItem = e.Link.Item.Tag
                Call pGetCurrentDesignTools.SelectItem(oItem)
            End If
        End If
    End Sub

    Private Sub pMapInfoObjectsUnder(Point As Point)
        Dim oPoint As PointF = modPaint.FromPaintPoint(picMap.PointToClient(Point), sPaintZoom, oPaintTranslation)
        Dim oItems As List(Of cItem) = oCurrentDesign.HitTest(oCurrentOptions, pGetCurrentDesignTools, oPoint, sWide / sPaintZoom, False)
        Call btnCurrentItemUnderItems.ClearItems
        '        btnCurrentItemUnderItems.MenuDrawMode = MenuDrawMode.LargeImagesText
        If oItems.Count > 0 Then
            For Each oItem As cItem In oItems
                Dim oBarItem As BarButtonItem = New BarButtonItem
                oBarItem.Name = "btnCurrentItemUnderlying_" & oItem.GetHashCode
                oBarItem.Caption = oItem.Type.ToString & If(oItem.Name <> "", " - " & oItem.Name, "")
                oBarItem.ImageOptions.Image = oItem.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, 32, 32)
                oBarItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                oBarItem.Tag = oItem
                AddHandler oBarItem.ItemClick, AddressOf btncurrentitemunderitems_subitem_itemclick
                Call btnCurrentItemUnderItems.AddItem(oBarItem)
            Next
            'For Each oItem As cItem In oItems
            '    Dim oMenu As ToolStripMenuItem = New ToolStripMenuItem()
            '    With oMenu
            '        .Text = oItem.Type.ToString & if(oItem.Name <> "", " - " & oItem.Name, "")
            '        If oItem.HaveText Then
            '            Dim oItemText As cIItemText = oItem
            '            .Text = .Text & " " & Chr(34) & oItemText.Text & Chr(34) '& " (points: " & oItem.Points.Count & ")"
            '        End If
            '        .ImageScaling = ToolStripItemImageScaling.None
            '        .Image = oItem.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, 32, 32)
            '        .Tag = oItem
            '        AddHandler oMenu.Click, AddressOf mnuDesignItemItemUnderItem_Click
            '        AddHandler oMenu.MouseHover, AddressOf mnuDesignItemItemUnderItem_MouseHover
            '    End With
            '    Call DesignItemItemUnder.DropDownItems.Add(oMenu)
            'Next
        Else
            Dim oBarItem As BarStaticItem = New BarStaticItem
            oBarItem.Caption = modMain.GetLocalizedString("main.textpart96")
            oBarItem.Enabled = False
            Call btnCurrentItemUnderItems.AddItem(oBarItem)
            'Call DesignItemItemUnder.DropDownItems.Clear()
            'Dim oMenu As ToolStripMenuItem = New ToolStripMenuItem()
            'oMenu.Text = modMain.GetLocalizedString("main.textpart96")
            'oMenu.Enabled = False
            'Call DesignItemItemUnder.DropDownItems.Add(oMenu)
        End If
    End Sub

    Private Sub mnuDesignItem_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuDesignItem.BeforePopup
        If btnCurrentItemUnderItems.ItemLinks.Count = 0 Then
            Dim oBarItem As BarStaticItem = New BarStaticItem
            oBarItem.Caption = modMain.GetLocalizedString("main.textpart96")
            oBarItem.Enabled = False
            Call btnCurrentItemUnderItems.AddItem(oBarItem)
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection0_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection0.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        If Not oItemSegment.Segment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            With oItemSegment.Segment
                If .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                    Call pStatusSet(oItemSegment.Segment.ToString & " " & modMain.GetLocalizedString("main.textpart71"))
                    .Direction = cSurvey.cSurvey.DirectionEnum.Right
                Else
                    Call pStatusSet(oItemSegment.Segment.ToString & " " & modMain.GetLocalizedString("main.textpart72"))
                    .Direction = cSurvey.cSurvey.DirectionEnum.Left
                End If
                Call .Save()
            End With
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(True)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            If oItemSegment.Segment Is oTools.CurrentSegment Then
                Call oTools.SelectSegment(oItemSegment.Segment)
            End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection1_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection1.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        If Not oItemSegment.Segment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            With oItemSegment.Segment
                If .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                    .Direction = cSurvey.cSurvey.DirectionEnum.Right
                Else
                    .Direction = cSurvey.cSurvey.DirectionEnum.Left
                End If
                Call .Save()
            End With
            Dim sFrom As String = oItemSegment.Segment.Data.Data.From
            Dim sTo As String = oItemSegment.Segment.Data.Data.To
            If oSurvey.Calculate.TrigPoints(sTo).GetPoints.Count = 1 Then
                Dim iCurrentDirection As cSurvey.cSurvey.DirectionEnum = oItemSegment.Segment.Direction
                Dim sNextTo As String = ""
                Do
                    Dim sNexts As String() = oSurvey.Calculate.TrigPoints(sTo).GetNextPoints(sFrom)
                    If sNexts.Count = 1 Then
                        sNextTo = sNexts(0)
                        Dim oNextSegmnent As cSegment = oSurvey.Segments.Find(sTo, sNextTo)
                        If oNextSegmnent.IsProfileBinded Then
                            Exit Do
                        Else
                            oNextSegmnent.Direction = iCurrentDirection
                            Call oNextSegmnent.Save()
                            If oSurvey.Calculate.TrigPoints(sNextTo).GetPoints.Count = 1 Then
                                sFrom = sTo
                                sTo = sNextTo
                            Else
                                Exit Do
                            End If
                        End If
                    Else
                        Exit Do
                    End If
                Loop
            End If
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(True)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            If oItemSegment.Segment Is oTools.CurrentSegment Then
                Call oTools.SelectSegment(oItemSegment.Segment)
            End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection3_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection3.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        Dim oSegment As cSegment = oItemSegment.Segment
        If Not oSegment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            Dim iNewDirection As cSurvey.cSurvey.DirectionEnum = oItemSegment.Segment.Direction
            For Each oSegment In oSurvey.Segments.GetCaveSegments(oSegment.Cave, oSegment.Branch)
                With oSegment
                    If .Direction <> iNewDirection Then
                        If Not .IsProfileBinded Then
                            .Direction = iNewDirection
                            .Save()
                        End If
                    End If
                End With
            Next
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(True)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            If oItemSegment.Segment Is oTools.CurrentSegment Then
                Call oTools.SelectSegment(oItemSegment.Segment)
            End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection4_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection4.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        Dim oSegment As cSegment = oItemSegment.Segment
        If Not oSegment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            For Each oSegment In oSurvey.Segments.GetCaveSegments(oSegment.Cave, oSegment.Branch)
                With oSegment
                    If Not .IsProfileBinded Then
                        If .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                            .Direction = cSurvey.cSurvey.DirectionEnum.Right
                        Else
                            .Direction = cSurvey.cSurvey.DirectionEnum.Left
                        End If
                        .Save()
                    End If
                End With
            Next
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(False)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            If oItemSegment.Segment Is oTools.CurrentSegment Then
                Call oTools.SelectSegment(oItemSegment.Segment)
            End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentToProperty_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentToProperty.ItemClick
        Dim sTrigPoint As String = pGetCurrentTools.CurrentSegment.To
        Call pFieldDataShow(True)
        Call pTrigPointSelect(oSurvey.TrigPoints(sTrigPoint), True, True)
    End Sub

    Private Sub btnCurrentItemSegmentFromProperty_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentFromProperty.ItemClick
        Dim sTrigPoint As String = pGetCurrentTools.CurrentSegment.From
        Call pFieldDataShow(True)
        Call pTrigPointSelect(oSurvey.TrigPoints(sTrigPoint), True, True)
    End Sub

    Private Sub btnCurrentItemShot_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemShot.ItemClick
        Call btnSegments_Click(Nothing, Nothing)
        Call pFieldDataShow(True)
    End Sub

    Private Sub btnCurrentItemStationSetCoordinate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemStationSetCoordinate.ItemClick
        Call pTrigpointSetCoordinate(oTools.CurrentTrigpoint.Name)
    End Sub

    Private Sub btnCurrentItemStationSetCoordinateCP_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemStationSetCoordinateCP.ItemClick
        Call pTrigpointSetCoordinate(oTools.CurrentTrigpoint.Name, pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Coordinate)
    End Sub

    Private Sub btnCurrentItemStation_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemStation.ItemClick
        Call btnTrigPoints_Click(Nothing, Nothing)
        Call pFieldDataShow(True)
    End Sub

    Private Sub mnuDesignNone_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuDesignNone.BeforePopup
        If btnCurrentItemUnderItems.ItemLinks.Count = 0 Then
            Dim oBarItem As BarStaticItem = New BarStaticItem
            oBarItem.Caption = modMain.GetLocalizedString("main.textpart96")
            oBarItem.Enabled = False
            Call btnCurrentItemUnderItems.AddItem(oBarItem)
        End If

        'Dim bStandardFormat As Boolean = pClipboardCheckDesignFormat()
        'Dim bExtraFormat As Boolean = pClipboardCheckDesignExtraFormats()
        'Dim bEnabled As Boolean = bStandardFormat Or bExtraFormat
        'mnuDesignNonePaste.Enabled = bEnabled
        'If bExtraFormat Then
        '    mnuDesignNonePasteSpecial.Enabled = True
        '    mnuDesignNonePasteSpecial0.Enabled = False
        '    mnuDesignNonePasteSpecial1.Enabled = False
        '    mnuDesignNonePasteSpecial2.Enabled = False
        '    mnuDesignNonePasteSpecial3.Enabled = False
        '    If Clipboard.ContainsData("image/svg+xml") Then
        '        mnuDesignNonePasteSpecial0.Enabled = True
        '        mnuDesignNonePasteSpecial1.Enabled = True
        '        mnuDesignNonePasteSpecial2.Enabled = True
        '    End If
        '    If Clipboard.ContainsText Then
        '        mnuDesignNonePasteSpecial3.Enabled = True
        '    End If
        'Else
        '    mnuDesignNonePasteSpecial.Enabled = False
        'End If
    End Sub

    Private Sub mnuSegmentDirection_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuSegmentDirection.BeforePopup
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        Dim oSegment As cSegment = oItemSegment.Segment
        Dim oSegments As cSegmentCollection = oSurvey.Segments.GetCaveSegments(oSegment.Cave, oSegment.Branch)
        Dim bEnabled As Boolean = Not pSegmentsIsProfileBinded(oSegments)
        btnCurrentItemSegmentDirection1.Enabled = bEnabled
        btnCurrentItemSegmentDirection2.Enabled = bEnabled
        btnCurrentItemSegmentDirection3.Enabled = bEnabled
        btnCurrentItemSegmentDirection4.Enabled = bEnabled
        Call oMousePointer.Pop()
    End Sub

    Private Sub btnCurrentItemSegmentDirection_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection.ItemClick
        Call btnCurrentItemSegmentDirection0.PerformClick()
    End Sub

    Private Sub btnShow_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnShow.ItemClick
        Call pTrayShowFrom()
    End Sub

    Private Sub ntiMain_MouseClick(sender As Object, e As MouseEventArgs) Handles ntiMain.MouseClick
        If (e.Button And MouseButtons.Right) = MouseButtons.Right Then
            Call mnuTray.ShowPopup(e.Location)
        End If
    End Sub

    Private Sub barDesignerItemPointFloat_Hiding(sender As Object, e As CancelEventArgs) Handles barDesignerItemPointFloat.Hiding
        If Not bFloatingToolbarHiding Then
            e.Cancel = True
        End If
    End Sub

    Private Sub barDesignerItemFloat_Hiding(sender As Object, e As CancelEventArgs) Handles barDesignerItemFloat.Hiding
        If Not bFloatingToolbarHiding Then
            e.Cancel = True
        End If
    End Sub

    Private Sub btnDesignSetCurrentCaveBranch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignSetCurrentCaveBranch.ItemClick
        If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemSegment Then
            Dim oSegment As cSegment = DirectCast(pGetCurrentDesignTools.CurrentItem, cItemSegment).Segment
            Call pSurveySetCurrentCaveBranch(oSegment.Cave, oSegment.Branch)
            Call pSurveyRedraw()
        ElseIf TypeOf pGetCurrentDesignTools.CurrentItem Is cItem Then
            Call pSurveySetCurrentCaveBranch(cboPropCaveList.Text, cboPropCaveBranchList.Text)
            btnMainBindDesignType.EditValue = CType(cboPropBindDesignType.SelectedIndex, cItem.BindDesignTypeEnum)
            btnMainBindCrossSections.EditValue = cboPropBindCrossSections.SelectedItem
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub cmdSegmentSetCurrentCaveBranch_Click(sender As System.Object, e As System.EventArgs) Handles cmdSegmentSetCurrentCaveBranch.Click
        Call btnDesignSetCurrentCaveBranch.PerformClick()
    End Sub

    Private Sub frmMain2_Deactivate(sender As Object, e As EventArgs) Handles Me.Deactivate
        Call pFloatingToolbarHide()
    End Sub

    Private Sub btnAlignToGrid_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnAlignToGrid.CheckedChanged
        Call pDesignSnapToGrid(btnAlignToGrid.Checked)
    End Sub
End Class




