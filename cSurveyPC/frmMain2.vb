Imports System.ComponentModel
Imports System.Drawing.Drawing2D
Imports System.IO
Imports System.Reflection
Imports System.Xml
Imports cSurveyPC
Imports cSurveyPC.cSurvey
Imports cSurveyPC.cSurvey.Design
Imports cSurveyPC.cSurvey.Design.Items
Imports cSurveyPC.cSurvey.Design.Layers
Imports cSurveyPC.cSurvey.Design.Options
Imports cSurveyPC.cSurvey.Drawings
Imports cSurveyPC.cSurvey.Helper.Editor
Imports cSurveyPC.cSurvey.Net
Imports cSurveyPC.cSurvey.Properties
Imports cSurveyPC.cSurvey.Scripting
Imports DevExpress.XtraBars
Imports DevExpress.XtraBars.Docking2010
Imports DevExpress.XtraBars.Docking2010.Views
Imports DevExpress.XtraBars.Navigation
Imports DevExpress.XtraGrid.Columns
Imports DevExpress.XtraGrid.Views.Base
Imports HelixToolkit.Wpf
Imports DevExpress.XtraSplashScreen
Imports DevExpress.XtraEditors.Controls
Imports DevExpress.RichEdit.Export
Imports DevExpress.Utils.Extensions
Imports DevExpress.XtraBars.Ribbon
Imports DevExpress.Utils
Imports cSurveyPC.cSurvey.UIHelpers

Friend Class frmMain2
    Private sZoomDefault As Single = 15.1181107F
    'Private sZoomRatio As Single = 1.0F / Math.Log(sZoomDefault) * 50.0F
    Private sZoom As Single
    Private sZoomMax As Single = 377.952759F
    Private sZoomMin As Single = 0.02519685F

    Private sFilename As String
    'Private dlastLogEvent As DateTime

    Private WithEvents oSurvey As cSurvey.cSurvey

    Private WithEvents oTools As Helper.Editor.cEditTools
    Private WithEvents oPlanTools As Helper.Editor.cEditDesignTools
    Private WithEvents oProfileTools As Helper.Editor.cEditDesignTools
    Private WithEvents o3DTools As Helper.Editor.cEditDesignTools

    Private WithEvents oVSB As DevExpress.XtraEditors.VScrollBar
    Private WithEvents oHSB As DevExpress.XtraEditors.HScrollBar

    'Private WithEvents frmU As frmUndoManager

    Private WithEvents frmV As frmPreview
    Private WithEvents frmProg As frmProgress

    Private WithEvents oDelayedRedrawTimer As Timer
    Private WithEvents oObjectPropertyTimer As Timer
    Private oAutosaveThread As Threading.Thread

    Private sObjectsPath As String
    Private sClipartPath As String

    Private sNewHash As String
    Private sLastHash As String

    Private bMousePressed As Boolean

    Private oDefaultOptions As cOptions

    Private oMousePointer As cMousePointer

    Private oFrozenDesktop As Image
    Private WithEvents oCurrentPlanMarkedDesktopPoint As cMarkedDesktopPoint
    Private WithEvents oCurrentProfileMarkedDesktopPoint As cMarkedDesktopPoint

    Private oMultiSelBrush1 As SolidBrush
    Private oMultiSelPen1 As Pen
    Private oMultiSelBrush2 As SolidBrush
    Private oMultiSelPen2 As Pen
    Private oMultiSelBrush3 As SolidBrush
    Private oMultiSelPen3 As Pen

    Private iSnapToPoint As Integer = 0
    Private oSnapToPointPointTojoin As cPoint

    'Private bSnapToGrid As Boolean = False
    'Private sGridSnap As Single = 0.1

    Private Enum DropActionEnum
        None = &H0
        AddImageOrSketch = &H1
        AddText = &H2

        ImportData = &H10
        ImportVTopoData = &H12
        ImportcSurveyData = &H13
        ImportTextData = &H14
        ImportCompassData = &H15

        ImportDesign = &H20
        ImportSVGDesign = &H21

        ImportKMLData = &H30
        ImportGPXData = &H31

        AddAttachment = &H128
    End Enum

    Public Enum HistoryModeEnum
        Folder = 0
        WebStorage = 1
        Both = 2
    End Enum

    Private iGridSegmentColorBy As Integer
    Private iGridTrigpointColorBy As Integer

    Private bHistoryBusy As Boolean

    Private bHistory As Boolean
    Private iHistoryMode As HistoryModeEnum
    Private sHistoryWebURL As String
    Private sHistoryWebUsername As String
    Private sHistoryWebPassword As String
    Private sHistoryFolder As String
    Private iHistoryDailyCopies As Integer
    Private iHistoryMaxCopies As Integer
    Private bHistoryCreateOnSave As Boolean
    Private bHistoryWebCreateOnSave As Boolean

    Private bLinkedSurveysSelectOnAdd As Boolean
    Private bLinkedSurveysShowInCaveInfo As Boolean
    Private bLinkedSurveysRecursiveLoad As Boolean
    Private bLinkedSurveysRefreshOnLoad As Boolean
    Private bLinkedSurveysRefreshOnLoadPrioritizeChildren As Boolean

    Private WithEvents oClipboardViewer As clipboardChangeNotifier

    Private oCenterOfRotation As PointF

    Public Enum RulersStyleEnum
        Simple = 0
        Advanced = 1
    End Enum

    Public Enum ImportExportFormatEnum
        Survey = 0
        Track = 1
        Image = 2
        Design = 3
        threedD = 4
    End Enum

    Public Enum ImportExportFormatTypeEnum
        None = 0
        VTopo = 1
        Therion = 2
        CSV = 3
        Text = 4
    End Enum

    Public Enum ViewModeEnum
        Segments = 0
        Trigpoints = 1
    End Enum

    Public Enum DesignQualityLevelEnum
        Base = 0
        MediumQuality = 1
        HighQuality = 2
    End Enum

    Public Enum ZoomTypeEnum
        ZoomFactor = 0
        ScaleFactor = 1
    End Enum

    Private sDefaultClub As String
    Private sDefaultTeam As String
    Private sDefaultDesigner As String
    Private iDefaultCalculateMode As cSurveyPC.cSurvey.cSurvey.CalculateModeEnum
    Private iDefaultCalculateType As cSurveyPC.cSurvey.cSurvey.CalculateTypeEnum
    Private bDefaultShowLegacyPrintAndExportObjects As Boolean
    Private bDefaultArrangePriorityOnImport As Boolean

    Private sDefaultFolder As String

    'Private bLogEnabled As Boolean
    Private bUseOnlyAnchorToMove As Boolean
    Private iAdvancedSelectionMode As Integer
    Private sAdvancedSelectionPrecision As Single = 1000.0F
    Private sAdvancedSelectionWide As Single = 4.0F

    Private iZoomType As ZoomTypeEnum = ZoomTypeEnum.ScaleFactor

    Private bGridExportSplayNames As Boolean
    Private bGridDisableConstraint As Boolean

    Private bAlwaysUseShellForAttachments As Boolean

    Private iDesignQuality As DesignQualityLevelEnum
    Private bDrawRulers As Boolean
    Private iDrawRulesStyle As RulersStyleEnum
    Private iDrawMetricGrid As Integer

    Private bAllowResizablePanels As Boolean

    'Private bDesignBarShowLastUsedTools As Boolean
    Private Enum DesignBarPositionEnum
        [Default] = 0
        TopSide = 1
        NearCurrentItem = 2
        NearCurrentItemAndPoint = 3
        BottomSide = 4
    End Enum
    Private iDesignBarPosition As DesignBarPositionEnum
    'Private iDesignBarSize As Integer

    Private oCurrentDesign As cDesign
    Private WithEvents oCurrentOptions As cOptionsCenterline

    Private bDisableFilterItemEvent As Boolean = True
    Private bDisableSelectItemEvent As Boolean = True
    Private bDisablePaintEvent As Boolean = True
    Private bDisableZoomEvent As Boolean = True
    Private bDisableSegmentsChangeEvent As Boolean = True
    Private bDisableTrigpointsChangeEvent As Boolean = True
    Private bDisabledObjectPropertyEvent As Boolean = True
    Private bDisabledCaveBranchChangeEvent As Boolean = True
    Private bDisabledAutosaveEvent As Boolean = True
    Private bDisabledSurfaceEvent As Boolean = True
    Private bDisablewarpingDetails As Boolean = False

    Private oStartPaintDrawPosition As PointF

    Private bToolsEnabledByLevel As Boolean
    Private bToolsHiddenByLevel As Boolean

    Private iFunctionLanguage As LanguageEnum

    Private bAutoSaveUseHistorySettings As Boolean

    Private Enum MultiSelTypeEnum
        None = 0
        SingleLayer = 1
        MultiLayer = 2
        Zoom = 3
    End Enum

    Private iMultiSelEnabled As MultiSelTypeEnum
    Private oStartMultiselPosition As PointF
    Private oEndMultiselPosition As PointF

    Private bDrawing As Boolean

    Private sWide As Single = 0.001

    Private bAutoZoomToFit As Boolean

    'Private bShowFieldData As Boolean
    'Private bShowDesignArea As Boolean
    'Private bShowObjectProp As Boolean

    Private oOpenHandCursor As Cursor
    Private oClosedHandCursor As Cursor

    Private Enum PaintInfoIndexEnum
        Plan = 0
        Profile = 1
    End Enum

    Friend Structure sPaintInfo
        Public PaintTranslation As PointF
        Public PaintZoom As Single

        Public Sub Backup(ByVal BackupPaintTranslation As PointF, ByVal BackupPaintZoom As Single)
            PaintTranslation = BackupPaintTranslation
            PaintZoom = BackupPaintZoom
        End Sub

        Public Sub Restore(ByRef RestoredPaintTranslation As PointF, ByRef RestoredPaintZoom As Single)
            If Not (PaintZoom = 0 And PaintTranslation.IsEmpty) Then
                RestoredPaintTranslation = PaintTranslation
                RestoredPaintZoom = PaintZoom
            End If
        End Sub

        Public Function IsEmpty() As Boolean
            Return PaintZoom = 0 And PaintTranslation.IsEmpty
        End Function
    End Structure

    Private oPaintInfo(2) As sPaintInfo

    Private oPaintTranslation As PointF = New PointF(0, 0)
    Private sPaintZoom As Single

    Private bBeginEdit As Boolean
    Private bEditPointByPoint As Boolean

    Private bSegmentChanged As Boolean
    Private bTrigpointChanged As Boolean

    Private Sub pMapZoom(ByVal Zoom As Single)
        If sPaintZoom <> Zoom Then
            Dim sNewZoomValue As Single = Zoom '* sZoomRatio
            If sNewZoomValue > sZoomMax Then
                sNewZoomValue = sZoomMax
                Zoom = sNewZoomValue '/ sZoomRatio
            End If
            If sNewZoomValue < sZoomMin Then
                sNewZoomValue = sZoomMin
                Zoom = sNewZoomValue '/ sZoomRatio
            End If

            bDisableZoomEvent = True

            Dim sOldPaintZoom As Single = sPaintZoom
            If sOldPaintZoom = 0 Then sOldPaintZoom = 1
            sPaintZoom = Zoom
            sZoom = sNewZoomValue

            Dim iScale As Integer
            If oCurrentOptions Is Nothing Then
                pnlStatusZoomBar.Enabled = False
            Else
                If Me.DeviceDpi = 96 Then
                    iScale = Me.DeviceDpi / (sPaintZoom * 0.0254F)
                Else
                    iScale = 1 / (sPaintZoom * 0.000254F)
                End If
                oCurrentOptions.CurrentScale = iScale
                pnlStatusZoomBar.Enabled = True
                pnlStatusZoomBar.EditValue = Math.Log(iScale, 10) * 10000
            End If

            Dim sZoomText As String = ""
            Select Case iZoomType
                Case ZoomTypeEnum.ScaleFactor
                    sZoomText = "1:" & modNumbers.MathRound(iScale, 0)
                Case ZoomTypeEnum.ZoomFactor
                    sZoomText = Strings.Format(sPaintZoom, "0.00 x")
            End Select
            pnlStatusDesignZoom.Caption = sZoomText

            Try
                Dim oCurrentTranslation As PointF = New PointF(oPaintTranslation.X * sPaintZoom / sOldPaintZoom, oPaintTranslation.Y * sPaintZoom / sOldPaintZoom)
                Dim sX As Single = (picMap.Width - picMap.Width * sPaintZoom / sOldPaintZoom) / 2.0F
                Dim sY As Single = (picMap.Height - picMap.Height * sPaintZoom / sOldPaintZoom) / 2.0F
                oPaintTranslation = New PointF(sX + oCurrentTranslation.X, sY + oCurrentTranslation.Y)
            Catch
            End Try

            bDisableZoomEvent = False

            If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()

            Call pMapInvalidate()
        End If
    End Sub

    Private Delegate Sub pConsoleClearDelegate()

    Private Sub pConsoleClear()
        If InvokeRequired Then
            Call Invoke(New pConsoleClearDelegate(AddressOf pConsoleClear))
        Else
            Call oDockConsole.Clear()
        End If
    End Sub

    Private Sub pPreviewHide()
        If Not frmV Is Nothing Then
            frmV.Close()
            frmV = Nothing
        End If
    End Sub

    Private Sub pToolsCreate()
        oTools = New Helper.Editor.cEditTools(oSurvey)
        oPlanTools = oTools.PlanTools
        oProfileTools = oTools.ProfileTools
        o3DTools = oTools.ThreeDTools
    End Sub

    Private Sub pSurveySetDefaults()
        Dim sValue As String
        sValue = My.Application.Settings.GetSetting("design.penstylepattern.underlyingcavepen", "")
        If sValue <> "" Then oSurvey.Properties.DesignProperties.SetValue("penstylepattern.underlyingcavepen", sValue)

        sValue = My.Application.Settings.GetSetting("design.penstylepattern.toonarrowcavepen", "")
        If sValue <> "" Then oSurvey.Properties.DesignProperties.SetValue("penstylepattern.toonarrowcavepen", sValue)

        sValue = My.Application.Settings.GetSetting("design.penstylepattern.presumedcavepen", "")
        If sValue <> "" Then oSurvey.Properties.DesignProperties.SetValue("penstylepattern.presumedcavepen", sValue)
    End Sub

    Private Sub pSurveyNew(Optional Template As UIHelpers.cTemplateEntry = Nothing)
        Call pSurveyEndEdit()

        If pSurveySaveOnExit() Then
            Call modWMSManager.WMSDownloadFileCancelAsync()

            Call pPopupHide()
            Call pPreviewHide()

            bDisabledAutosaveEvent = True
            bDisabledObjectPropertyEvent = True

            oCurrentDesign = Nothing

            oSurvey = New cSurvey.cSurvey
            Call pSurveySetDefaults()

            '---------------------------------------------------------
            'added in v2 due to microsoft tips abound gc: some say this can be usefull, some no...
            If My.Application.Settings.GetSetting("debug.forcegc", False) Then Call GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced)

            Call pToolsCreate()

            Call pSegmentClear()
            Call pTrigpointClear()

            oDefaultOptions = oSurvey.Options("_design.plan").DefaultOptions
            Call My.Application.SetCurrent(oSurvey, "")

            Call oMousePointer.Push(Cursors.WaitCursor)

            Call modWMSManager.WMSDownloadFileCancelAsync()
            Call pPopupHide()
            Call pPreviewHide()

            bDisabledAutosaveEvent = True
            bDisabledObjectPropertyEvent = True

            bDisabledCaveBranchChangeEvent = True
            bDisabledObjectPropertyEvent = True
            bDisableSegmentsChangeEvent = True
            bDisableTrigpointsChangeEvent = True

            'template or default template...
            Template = oTemplates.GetDefaultTemplate(Template)
            If Not IsNothing(Template) Then
                Call oSurvey.Load(Template.File.FullName, cSurvey.cSurvey.LoadOptionsEnum.Update)
                Call oSurvey.NewID()
            End If

            bDisabledCaveBranchChangeEvent = False
            bDisabledObjectPropertyEvent = False
            bDisableSegmentsChangeEvent = False
            bDisableTrigpointsChangeEvent = False

            Call oMousePointer.Pop()

            sFilename = ""
            With oSurvey.Properties
                .Club = sDefaultClub
                .Team = sDefaultTeam
                .Designer = sDefaultDesigner
                .CalculateMode = iDefaultCalculateMode
                .CalculateType = iDefaultCalculateType
                .ShowLegacyPrintAndExportObjects = bDefaultShowLegacyPrintAndExportObjects
            End With

            Call pToolsCreate()

            Call oMousePointer.Pop()

            Call pSurveyMainProperties()
            Call pSurveyFillSessionList(True)
            Call pSurveyFillCaveList(True)

            Call pSurveyCaption()

            oCurrentDesign = Nothing
            oCurrentOptions = Nothing

            Call pDesignRestoreShowBinding()
            Call pSurveyRestoreCurrentWorkarea()

            If Not IsNothing(oDockConsole) Then oDockConsole.SetSurvey(oSurvey)
            If Not IsNothing(oDockScript) Then oDockScript.SetSurvey(oSurvey, iFunctionLanguage)
            If Not IsNothing(oDockClipart) Then oDockClipart.SetSurvey(oSurvey)
            If Not IsNothing(oDockBrushesAndPens) Then oDockBrushesAndPens.SetSurvey(oSurvey)
            If Not IsNothing(oDockText) Then oDockText.SetSurvey(oSurvey)
            If Not IsNothing(oDockAV) Then oDockAV.SetSurvey(oSurvey)
            If Not IsNothing(oDockIV) Then oDockIV.SetSurvey(oSurvey)
            If Not IsNothing(oDockLS) Then Call oDockLS.SetSurvey(oSurvey)
            If Not IsNothing(oDockTexts) Then Call oDockTexts.SetSurvey(oSurvey)
            If Not IsNothing(oDockLevels) Then Call oDockLevels.SetSurvey(oSurvey)
            If Not IsNothing(oDockDistances) Then Call oDockDistances.SetSurvey(oSurvey)

            'If Not IsNothing(frmU) Then frmU.SetSurvey(oSurvey, pGetCurrentTools)

            Call pSurveyShowPlan()

            Call pZoomReset()
            Call pMapCenterAndFit()

            Call pSurveySegmentsGridSetup()
            Call pSurveyTrigpointsGridSetup()

            Call oTools.SelectSegment(oSurvey.Segments.First)
            Call oTools.SelectTrigpoint(oSurvey.TrigPoints.First)

            Call pSurveyPenTypeRefresh()

            If bHolos Then oHolos.Reset()

            sLastHash = pSurveyGetHash()
            sNewHash = sLastHash

            Call pSurveyRedraw()
            Call pSurveyMainPropertiesPanelsRefresh()

            bDisabledAutosaveEvent = False
            bDisabledObjectPropertyEvent = False
        End If
    End Sub

    Private Sub pMapCenterAndFitCaveBranch()
        Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim oBounds As RectangleF = oCurrentDesign.GetCaveBounds(oCurrentOptions, sCave, sBranch, True)
        Call pMapCenterAndFit(oBounds)
    End Sub

    Private Sub pMapCenterAndFit()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call oHolos.ZoomExtents()
        Else
            Dim oBounds As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
            Call pMapCenterAndFit(oBounds)
        End If
    End Sub

    Private Sub pMapCenterAndFit(ByVal Bounds As RectangleF)
        Try
            Dim iMapWidth As Integer = picMap.Width
            Dim iMapHeight As Integer = picMap.Height
            Dim sWidth As Single = Bounds.Width * 1.1
            Dim sHeight As Single = Bounds.Height * 1.1
            Dim sdX As Single = iMapWidth / sWidth
            Dim sdY As Single = iMapHeight / sHeight
            Dim sD As Single
            If sdY < sdX Then
                sD = sdY
            Else
                sD = sdX
            End If
            If Single.IsInfinity(sD) OrElse Single.IsNaN(sD) Then sD = 10
            Call pMapZoom(sD)
            Dim sX As Single = -Bounds.Left * sPaintZoom + 0 + (picMap.Width - (Bounds.Width * sPaintZoom)) / 2
            Dim sY As Single = -Bounds.Top * sPaintZoom + 0 + (picMap.Height - (Bounds.Height * sPaintZoom)) / 2
            oPaintTranslation = New PointF(sX, sY)
        Catch
        End Try
        Call pMapInvalidate()
    End Sub

    Private Sub pMapCenter()
        Try
            Dim oBounds As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)
            Dim sX As Single = -oBounds.Left * sPaintZoom + 0 + (picMap.Width - (oBounds.Width * sPaintZoom)) / 2
            Dim sY As Single = -oBounds.Top * sPaintZoom + 0 + (picMap.Height - (oBounds.Height * sPaintZoom)) / 2
            oPaintTranslation = New PointF(sX, sY)
        Catch
        End Try
        Call pMapInvalidate()
    End Sub

    Private Sub pSurveyImport(ByVal ImportFormat As ImportExportFormatEnum, Optional Filename As String = "", Optional FilterIndex As Integer = 0, Optional ByVal Append As Boolean = False)
        Dim bSaveLastUsedFilter As Boolean = False
        Select Case ImportFormat
            Case ImportExportFormatEnum.Survey
                If Filename = "" Then
                    Using olfd As OpenFileDialog = New OpenFileDialog
                        With olfd
                            .Filter = GetLocalizedString("main.filetypeTRO") & " (*.TRO)|*.TRO|" & GetLocalizedString("main.filetypeCSURVEY") & " (*.CSX;*.CSZ)|*.CSX;*.CSZ|" & GetLocalizedString("main.filetypePOCKETTOPO") & " (*.TXT)|*.TXT|" & GetLocalizedString("main.filetypeCOMPASSDATA") & " (*.DAT)|*.dat|" & GetLocalizedString("main.filetypeCAVEEXPLORER") & " (*.TXT)|*.TXT|" & GetLocalizedString("main.filetypeTEXT") & " (*.CSV;*.TXT)|*.CSV;*.TXT|" & GetLocalizedString("main.filetypeXLSX") & " (*.XLSX)|*.XLSX|" & GetLocalizedString("main.filetypeERON") & " (*.XLSX)|*.XLSX|" & GetLocalizedString("main.filetypeMNEMO") & " (*.XLSX)|*.XLSX|" & GetLocalizedString("main.filetypeTH") & " (*.TH)|*.TH"
                            If FilterIndex > 0 Then
                                .FilterIndex = FilterIndex
                                bSaveLastUsedFilter = False
                            Else
                                .FilterIndex = modMain.FilterRestoreLast("import.data", 1)
                                bSaveLastUsedFilter = True
                            End If
                            If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                Filename = .FileName
                                FilterIndex = .FilterIndex
                                If bSaveLastUsedFilter Then
                                    Call modMain.FilterSaveLast("import.data", FilterIndex)
                                End If
                            End If
                        End With
                    End Using
                End If

                If Filename <> "" Then
                    Select Case FilterIndex
                        Case 1
                            'VISUALTOPO
                            Call pSurveyImportVisualTopo(Filename, Append)
                        Case 2
                            'cSurvey
                            Call pSurveyImportcSurvey(Filename, Append)
                        Case 3
                            'POCKETTOPO
                            Call pSurveyImportPocketTopo(Filename, Append)
                        Case 4
                            'COMPASS
                            Call pSurveyImportCompass(Filename, Append)
                        Case 5
                            'CAVEEXPLORER
                            Call pSurveyImportCaveExplorer(Filename, Append)
                        Case 6
                            'FILE DI TESTO GENERICO
                            Call pSurveyImportText(Filename, Append)
                        Case 7
                            'EXCEL FILE
                            Call pSurveyImportXLSX(Filename, Append)
                        Case 8
                            'ERON EXCEL FILE
                            Call pSurveyImportXLSXEron(Filename, Append)
                        Case 9
                            'MNEMO EXCEL FILE
                            Call pSurveyImportXLSXMNemo(Filename, Append)
                        Case 10
                            'Therion TH
                            Call pSurveyImportTherion(Filename, Append)
                    End Select
                End If
            Case ImportExportFormatEnum.Track
                If Filename = "" Then
                    Using olfd As OpenFileDialog = New OpenFileDialog
                        With olfd
                            .Filter = GetLocalizedString("main.filetypeKML") & " (*.KML)|*.KML|" & GetLocalizedString("main.filetypeGPX") & " (*.GPX)|*.GPX"
                            If FilterIndex > 0 Then
                                .FilterIndex = FilterIndex
                                bSaveLastUsedFilter = False
                            Else
                                .FilterIndex = modMain.FilterRestoreLast("import.track", 1)
                                bSaveLastUsedFilter = True
                            End If
                            If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                Filename = .FileName
                                FilterIndex = .FilterIndex
                                If bSaveLastUsedFilter Then
                                    Call modMain.FilterSaveLast("import.track", .FilterIndex)
                                End If
                            End If
                        End With
                    End Using
                End If

                If Filename <> "" Then
                    Select Case FilterIndex
                        Case 1, 2
                            'TRACCIA GPS
                            Call pSurveyImportTrack(Filename, FilterIndex, Append)
                    End Select
                End If
            Case ImportExportFormatEnum.Design
                If Filename = "" Then
                    Using olfd As OpenFileDialog = New OpenFileDialog
                        With olfd
                            .Filter = GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeCSURVEY") & " (*.CSX;*.CSZ)|*.CSX;*.CSZ|" & GetLocalizedString("main.filetypeTH") & " (*.TH;*.TH2)|*.TH;*.TH2"
                            If FilterIndex > 0 Then
                                .FilterIndex = FilterIndex
                                bSaveLastUsedFilter = False
                            Else
                                .FilterIndex = modMain.FilterRestoreLast("import.design", 1)
                                bSaveLastUsedFilter = True
                            End If
                            If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                Filename = .FileName
                                FilterIndex = .FilterIndex
                                If bSaveLastUsedFilter Then
                                    Call modMain.FilterSaveLast("import.design", .FilterIndex)
                                End If
                            End If
                        End With
                    End Using
                End If

                If Filename <> "" Then
                    Select Case FilterIndex
                        Case 1
                            'SVG
                            Call pSurveyImportSVG(Filename, Append)
                        Case 2
                            'cSurvey
                            Call pSurveyImportcSurvey(Filename, Append)
                        Case 3
                            'Therion TH2
                            Call pSurveyImportTherionGraphics(Filename, Append)
                    End Select
                End If
        End Select
    End Sub

    Private Delegate Sub pConsoleAddDelegate(ByVal Type As cSurvey.cSurvey.LogEntryType, Text As String, URI As String)

    Private Sub pConsoleAdd(ByVal Type As cSurvey.cSurvey.LogEntryType, Text As String, URI As String)
        If InvokeRequired Then
            Call Me.BeginInvoke(New pConsoleAddDelegate(AddressOf pConsoleAdd), {Type, Text, URI})
        Else
            Call oDockConsole.Append(Type, Text, URI)
        End If
    End Sub

    Private Sub pConsoleAdd(ByVal Type As cSurvey.cSurvey.LogEntryType, Text As String)
        Call pConsoleAdd(Type, Text, "")
    End Sub

    Private Sub pLogAdd(Exception As Exception)
        Call pConsoleAdd(cSurvey.cSurvey.LogEntryType.Error, Exception.Message & If(Exception.StackTrace Is Nothing, "", vbCrLf & "in" & Exception.StackTrace))
    End Sub

    Private Sub pLogAdd(Text As String, Exception As Exception)
        Call pConsoleAdd(cSurvey.cSurvey.LogEntryType.Error, Exception.Message & If(Exception.StackTrace Is Nothing, "", vbCrLf & "in" & Exception.StackTrace))
    End Sub

    Private Sub pLogAdd(ByVal Type As cSurvey.cSurvey.LogEntryType, ByVal Text As String, URI As String)
        Call pConsoleAdd(Type, Text, URI)
    End Sub

    Private Sub pLogAdd(ByVal Type As cSurvey.cSurvey.LogEntryType, ByVal Text As String) ', Optional ByVal ShowInConsole As Boolean = False, Optional ByVal ConsoleText As String = "")
        Call pConsoleAdd(Type, Text)
    End Sub

    Private Sub pSurveyEndEdit()
        If Not oCurrentDesign Is Nothing Then
            If pGetCurrentDesignTools.IsInEdit Then
                Call pGetCurrentDesignTools.EndItem()
            End If
            Call grdViewSegments.HideEditor()
            Call pSegmentSave(oTools.CurrentSegment)
            Call pTrigPointSave(oTools.CurrentTrigpoint)
        End If
    End Sub

    Private Function pSurveyLoad(Optional ByVal Filename As String = "", Optional ByVal SaveCurrent As Boolean = True) As Boolean
        Call pSurveyEndEdit()

        Filename = Filename.Trim.Replace(Chr(34), "")
        Dim bSaved As Boolean
        If SaveCurrent Then
            bSaved = pSurveySaveOnExit()
        Else
            bSaved = True
        End If
        If bSaved Then
            If Filename = "" Then
                Using olfd As OpenFileDialog = New OpenFileDialog
                    With olfd
                        .FileName = sFilename
                        .Filter = GetLocalizedString("main.filetypeCSURVEY") & " (*.CSZ;*.CSX)|*.CSZ;*.CSX|" & GetLocalizedString("resurvey.filetypeRESURVEY") & " (*.CRSZ;*.CRSX)|*.CRSZ;*.CRSX|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                        .FilterIndex = 1
                        .DefaultExt = ".CSZ"
                        If sDefaultFolder <> "" Then .InitialDirectory = sDefaultFolder
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Filename = .FileName
                        End If
                    End With
                End Using
            End If
            If Filename <> "" Then
                Select Case IO.Path.GetExtension(Filename).ToLower
                    Case ".crsx", ".crsz"
                        Call pResurvey(Filename)
                        Return False
                    Case Else
                        Dim oResult As cSurvey.cActionResult = cSurvey.cSurvey.Check(Filename)
                        If oResult.Result Then
                            oCurrentDesign = Nothing

                            oSurvey = New cSurveyPC.cSurvey.cSurvey

                            '---------------------------------------------------------
                            'added in v2 due to microsoft tips abound gc: some say this can be usefull, some no...
                            If My.Application.Settings.GetSetting("debug.forcegc", False) Then Call GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced)

                            Call pToolsCreate()

                            Call pSegmentClear()
                            Call pTrigpointClear()

                            oDefaultOptions = oSurvey.Options("_design.plan").DefaultOptions
                            Call My.Application.SetCurrent(oSurvey, "")

                            Call oMousePointer.Push(Cursors.WaitCursor)

                            Call modWMSManager.WMSDownloadFileCancelAsync()
                            Call pPopupHide()
                            Call pPreviewHide()

                            bDisabledAutosaveEvent = True
                            bDisabledObjectPropertyEvent = True

                            Call modOpeningFlags.SetFlags(Me)
                            bDisabledCaveBranchChangeEvent = True
                            bDisabledObjectPropertyEvent = True
                            bDisableSegmentsChangeEvent = True
                            bDisableTrigpointsChangeEvent = True

                            oResult = oSurvey.Load(Filename)

                            bDisabledCaveBranchChangeEvent = False
                            bDisabledObjectPropertyEvent = False
                            bDisableSegmentsChangeEvent = False
                            bDisableTrigpointsChangeEvent = False

                            Call modOpeningFlags.ResetFlags()
                            Call oMousePointer.Pop()

                            If oResult.Result Then
                                sFilename = Filename

                                Call UIHelpers.cRecentsHelper.AppendTo(sFilename, "Recent", oRecents, btnLoad)

                                Call pToolsCreate()

                                Call pSurveyMainProperties()
                                Call pSurveyFillSessionList(True)
                                Call pSurveyFillCaveList(True)

                                Call pSurveyCaption()

                                oCurrentDesign = Nothing
                                oCurrentOptions = Nothing

                                Call pDesignRestoreShowBinding()
                                Call pSurveyRestoreCurrentWorkarea()

                                If Not IsNothing(oDockConsole) Then oDockConsole.SetSurvey(oSurvey)
                                If Not IsNothing(oDockScript) Then oDockScript.SetSurvey(oSurvey, iFunctionLanguage)
                                If Not IsNothing(oDockClipart) Then oDockClipart.SetSurvey(oSurvey)
                                If Not IsNothing(oDockBrushesAndPens) Then oDockBrushesAndPens.SetSurvey(oSurvey)
                                If Not IsNothing(oDockText) Then oDockText.SetSurvey(oSurvey)
                                If Not IsNothing(oDockAV) Then oDockAV.SetSurvey(oSurvey)
                                If Not IsNothing(oDockIV) Then oDockIV.SetSurvey(oSurvey)
                                If Not IsNothing(oDockLS) Then oDockLS.SetSurvey(oSurvey)
                                If Not IsNothing(oDockTexts) Then oDockTexts.SetSurvey(oSurvey)
                                If Not IsNothing(oDockLevels) Then Call oDockLevels.SetSurvey(oSurvey)
                                If Not IsNothing(oDockDistances) Then Call oDockDistances.SetSurvey(oSurvey)

                                'If Not IsNothing(frmU) Then frmU.SetSurvey(oSurvey, pGetCurrentTools)

                                Call pSurveyShowPlan()

                                Call pSurveySegmentsGridSetup()
                                Call pSurveyTrigpointsRefresh()

                                Call oTools.SelectSegment(oSurvey.Segments.First)
                                Call oTools.SelectTrigpoint(oSurvey.TrigPoints.First)

                                Call pSurveyPenTypeRefresh()

                                If bHolos Then Call oHolos.Reset()

                                sLastHash = pSurveyGetHash()

                                Call pSurveyRedraw()
                                Call pSurveyMainPropertiesPanelsRefresh()

                                Call pSurveyCheckBezierLineType(oSurvey)

                                If oCurrentOptions.HighlightCurrentCave AndAlso oCurrentOptions.HighlightSegmentsAndTrigpoints Then Call pSurveySegmentsAndTrigpointVisibility()
                            Else
                                Call UIHelpers.Dialogs.Msgbox(String.Format(GetLocalizedString("main.warning19"), oResult.Exception.Message), MsgBoxStyle.Critical Or MsgBoxStyle.OkOnly, GetLocalizedString("main.warningtitle"))
                            End If
                            bDisabledObjectPropertyEvent = False
                            bDisabledAutosaveEvent = False
                            If oResult.Result Then
                                Return True
                            Else
                                Return False
                            End If
                        Else
                            Call UIHelpers.Dialogs.Msgbox(String.Format(GetLocalizedString("main.warning19"), oResult.Exception.Message), MsgBoxStyle.Critical Or MsgBoxStyle.OkOnly, GetLocalizedString("main.warningtitle"))
                            Return False
                        End If
                End Select
            End If
        Else
            Return False
        End If
    End Function

    Private Delegate Sub pStatusProgressDelegate(Percent As Single, Text As String)

    Private Sub pStatusProgress(ByVal Percent As Single, Optional ByVal Text As String = "")
        Try
            If InvokeRequired Then
                Call Me.BeginInvoke(New pStatusProgressDelegate(AddressOf pStatusProgress), {Percent, Text})
            Else
                If Percent >= 1 OrElse Percent <= 0 Then
                    pnlStatusProgress.Visibility = BarItemVisibility.Never
                    If oCurrentDesign Is Nothing Then
                        pnlStatusZoomBar.Visibility = BarItemVisibility.Never
                    Else
                        pnlStatusZoomBar.Visibility = modControls.VisibleToVisibility(oCurrentDesign.Type <= cIDesign.cDesignTypeEnum.Profile)
                    End If
                Else
                    pnlStatusProgress.Visibility = BarItemVisibility.Always
                    pnlStatusProgress.EditValue = Percent * 100
                    pnlStatusProgress.Refresh()
                    pnlStatusZoomBar.Visibility = BarItemVisibility.Never
                    Text = Text & " " & Strings.Format(Percent, "percent")
                End If
                Call pStatusSet(Text)
            End If
        Catch
        End Try
    End Sub

    Private Sub pStatusSet(ByVal Text As String)
        pnlStatusText.Caption = Text
        pnlStatusText.Refresh()
    End Sub

    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As cCaveInfo, Branch As cCaveInfoBranch, ByVal BindTypeCombo As DevExpress.XtraEditors.ComboBoxEdit, ByVal CrossSectionsCombo As DevExpress.XtraEditors.ComboBoxEdit)
        Dim sCave As String = ""
        If Not Cave Is Nothing Then
            sCave = Cave.Name
        End If
        Dim sBranch As String = ""
        If Not Branch Is Nothing Then
            sBranch = Branch.Name
        End If
        Call pSurveyFillCrossSectionsList(sCave, sBranch, BindTypeCombo, CrossSectionsCombo)
    End Sub

    'Private Sub pSurveyFillCrossSectionsList(Reset As Boolean)
    '    Call oMousePointer.Push(Cursors.WaitCursor)
    '    Dim oCurrentCrossSection As cDesignCrossSection = Nothing
    '    If Not Reset Then oCurrentCrossSection = btnMainBindCrossSections.editvalue
    '    Call cboMainBindCrossSections.Items.Clear()
    '    Call cboMainBindCrossSections.Items.Add(oSurvey.CrossSections.GetEmptyCrossSection)
    '    Call oMousePointer.Pop()
    'End Sub


    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As cCaveInfo, Branch As cCaveInfoBranch, ByVal BindTypeCombo As BarEditItem, ByVal CrossSectionsCombo As BarEditItem)
        Dim sCave As String = ""
        If Not Cave Is Nothing Then
            sCave = Cave.Name
        End If
        Dim sBranch As String = ""
        If Not Branch Is Nothing Then
            sBranch = Branch.Name
        End If
        Call pSurveyFillCrossSectionsList(sCave, sBranch, BindTypeCombo, CrossSectionsCombo)
    End Sub

    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As String, Branch As String, ByVal BindTypeCombo As BarEditItem, ByVal CrossSectionsCombo As BarEditItem)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oCurrentCrossSection As cDesignCrossSection = CrossSectionsCombo.EditValue
        Dim oEditCrossSectionsCombo As DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit = CrossSectionsCombo.Edit
        If Not IsNothing(oCurrentDesign) AndAlso oCurrentDesign.Type <= cIDesign.cDesignTypeEnum.Profile Then
            Dim oList As List(Of cDesignCrossSection) = New List(Of cDesignCrossSection)({oSurvey.CrossSections.GetEmptyCrossSection})
            oList.AddRange(oSurvey.CrossSections.GetAllItems(oCurrentDesign.Type).Where(Function(oCrossSection) Cave = "" OrElse (oCrossSection.Cave = Cave AndAlso (Branch = "" OrElse oCrossSection.Branch = Branch))).ToList)
            oEditCrossSectionsCombo.DataSource = oList
        Else
            oEditCrossSectionsCombo.DataSource = New List(Of cDesignCrossSection)({oSurvey.CrossSections.GetEmptyCrossSection})
        End If
        If oEditCrossSectionsCombo.DataSource.Count > 0 Then
            Try
                If oCurrentCrossSection Is Nothing OrElse Not oEditCrossSectionsCombo.DataSource.contains(oCurrentCrossSection) Then
                    CrossSectionsCombo.EditValue = oEditCrossSectionsCombo.DataSource(0)
                Else
                    CrossSectionsCombo.EditValue = oCurrentCrossSection
                End If
            Catch
                CrossSectionsCombo.EditValue = oEditCrossSectionsCombo.DataSource(0)
            End Try
            CrossSectionsCombo.Enabled = BindTypeCombo.EditValue > 0
        Else
            CrossSectionsCombo.Enabled = False
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyFillCrossSectionsList(ByVal Cave As String, Branch As String, ByVal BindTypeCombo As DevExpress.XtraEditors.ComboBoxEdit, ByVal CrossSectionsCombo As DevExpress.XtraEditors.ComboBoxEdit)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oCurrentCrossSection As cDesignCrossSection = CrossSectionsCombo.SelectedItem
        Call CrossSectionsCombo.Properties.Items.Clear()
        Call CrossSectionsCombo.Properties.Items.Add(oSurvey.CrossSections.GetEmptyCrossSection)
        If Not IsNothing(oCurrentDesign) AndAlso oCurrentDesign.Type <= cIDesign.cDesignTypeEnum.Profile Then
            For Each oCrossSection As cDesignCrossSection In oSurvey.CrossSections.GetAllItems(oCurrentDesign.Type)
                If Cave = "" OrElse (oCrossSection.Cave = Cave AndAlso (Branch = "" OrElse oCrossSection.Branch = Branch)) Then
                    Call CrossSectionsCombo.Properties.Items.Add(oCrossSection)
                End If
            Next
        End If
        If CrossSectionsCombo.Properties.Items.Count > 0 Then
            Try
                If oCurrentCrossSection Is Nothing OrElse Not CrossSectionsCombo.Properties.Items.Contains(oCurrentCrossSection) Then
                    CrossSectionsCombo.SelectedIndex = 0
                Else
                    CrossSectionsCombo.SelectedItem = oCurrentCrossSection
                End If
            Catch
                CrossSectionsCombo.SelectedIndex = 0
            End Try
            CrossSectionsCombo.Enabled = BindTypeCombo.SelectedIndex > 0
        Else
            CrossSectionsCombo.Enabled = False
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyFillCaveBranchList(ByVal Cave As cCaveInfo, ByVal BranchesCombo As BarEditItem)
        Dim sCave As String = ""
        If Not Cave Is Nothing Then
            sCave = Cave.Name
        End If
        Call pSurveyFillCaveBranchList(sCave, BranchesCombo)
    End Sub

    Private Sub pSurveyFillCaveBranchList(ByVal Cave As String, ByVal BranchesCombo As BarEditItem)
        Call oMousePointer.Push(Cursors.WaitCursor)

        Dim oBranchesComboEdit As DevExpress.XtraEditors.Repository.RepositoryItemGridLookUpEdit = BranchesCombo.Edit
        If Cave = "" Then
            oBranchesComboEdit.DataSource = New List(Of cCaveInfoBranch)({oSurvey.Properties.CaveInfos.GetEmptyCaveInfoBranch(Cave)})
            BranchesCombo.EditValue = oBranchesComboEdit.DataSource(0)
            BranchesCombo.Enabled = False
        Else
            Dim oCurrentBranch As cCaveInfoBranch = BranchesCombo.EditValue
            oBranchesComboEdit.DataSource = oSurvey.Properties.CaveInfos(Cave).Branches.GetAllBranchesWithEmpty.Select(Function(oitem) oitem.Value).ToList
            If oBranchesComboEdit.DataSource.Count > 0 Then
                Try
                    If oCurrentBranch Is Nothing OrElse Not oBranchesComboEdit.DataSource.contains(oCurrentBranch) Then
                        BranchesCombo.EditValue = oBranchesComboEdit.DataSource(0)
                    Else
                        BranchesCombo.EditValue = oCurrentBranch
                    End If
                Catch
                    BranchesCombo.EditValue = oBranchesComboEdit.DataSource(0)
                End Try
                BranchesCombo.Enabled = True
            Else
                BranchesCombo.Enabled = False
            End If
        End If

        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyFillSessionList(Reset As Boolean)
        Call cboSegmentSessionList.Rebind(oSurvey, Reset)

        Dim oMainSession As cSession = Nothing
        If Not Reset Then oMainSession = btnMainSessionList.EditValue
        cboMainSessionList.DataSource = oSurvey.Properties.Sessions.GetWithEmpty.Select(Function(oitem) oitem.Value).ToList
        Try
            If oMainSession Is Nothing Then
                btnMainSessionList.EditValue = oSurvey.Properties.Sessions.GetEmptySession
            Else
                btnMainSessionList.EditValue = oMainSession
            End If
        Catch
            btnMainSessionList.EditValue = Nothing
        End Try
    End Sub

    Private Sub pSurveyFillCaveList(Reset As Boolean)
        Call oMousePointer.Push(Cursors.WaitCursor)

        Call cboSegmentCaveList.Rebind(oSurvey, Reset)
        Call cboSegmentCaveBranchList.Rebind(oSurvey, cboSegmentCaveList, True)
        Call oPropCaveBranch.RefreshCavesAndBranches()

        Dim oMainCave As cCaveInfo = Nothing
        If Not Reset Then oMainCave = btnMainCaveList.EditValue
        cboMainCaveList.DataSource = oSurvey.Properties.CaveInfos.GetWithEmpty.Select(Function(oitem) oitem.Value).ToList
        Try
            If oMainCave Is Nothing OrElse Not cboMainCaveList.DataSource.contains(oMainCave) Then
                btnMainCaveList.EditValue = cboMainCaveList.DataSource(0)
            Else
                btnMainCaveList.EditValue = oMainCave
            End If
        Catch
            btnMainCaveList.EditValue = cboMainCaveList.DataSource(0)
        End Try

        Call oMousePointer.Pop()

        Call pSurveyFillCaveBranchList(CType(btnMainCaveList.EditValue, cCaveInfo), btnMainCaveBranchList)
    End Sub

    Private Function pSurveySave(Optional ByVal Filename As String = "", Optional ByVal SaveAsCopy As Boolean = False, Optional Options As cSurvey.cSurvey.SaveOptionsEnum = cSurvey.cSurvey.SaveOptionsEnum.None) As Boolean
        Call pSurveyEndEdit()

        Dim sSaveFilename As String = Filename
        If sSaveFilename = "" Then
            Using osfd As SaveFileDialog = New SaveFileDialog
                With osfd
                    .RestoreDirectory = True
                    If sFilename <> "" Then
                        .InitialDirectory = IO.Path.GetDirectoryName(sFilename)
                        .FileName = IO.Path.GetFileName(sFilename)
                    End If
                    .Filter = GetLocalizedString("main.filetypeCSZ") & " (*.CSZ)|*.CSZ|" & GetLocalizedString("main.filetypeCSX") & " (*.CSX)|*.CSX|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        sSaveFilename = .FileName
                    End If
                End With
            End Using
        End If
        If sSaveFilename <> "" Then
            bDisabledAutosaveEvent = True
            Call oMousePointer.Push(Cursors.WaitCursor)
            If Not SaveAsCopy Then
                sFilename = sSaveFilename
            End If
            If (Options And cSurvey.cSurvey.SaveOptionsEnum.NoHistory) <> cSurvey.cSurvey.SaveOptionsEnum.NoHistory Then
                Call UIHelpers.cRecentsHelper.AppendTo(sFilename, "Recent", oRecents, btnLoad)
            End If
            'save current workarea...
            Call pSurveySaveCurrentWorkarea()
            'and the file...
            Call oSurvey.SaveTo(sSaveFilename, Options)
            sLastHash = pSurveyGetHash()

            If bHistory And oSurvey.Properties.HistoryEnabled And (bHistoryCreateOnSave Or bHistoryWebCreateOnSave) Then
                If (Options And cSurvey.cSurvey.SaveOptionsEnum.NoHistory) <> cSurvey.cSurvey.SaveOptionsEnum.NoHistory Then
                    Call pHistorySave(sFilename)
                End If
            End If
            Call pStatusProgress(0, String.Format(GetLocalizedString("main.textpart46"), sSaveFilename))

            Call pSurveyCaption()
            Call oMousePointer.Pop()

            bDisabledAutosaveEvent = False

            Return True
        End If
        Return False
    End Function

    Private Sub pAutosaveThread_callback()
        Try
            Dim sFolder As String
            If bAutoSaveUseHistorySettings Then
                Select Case iHistoryMode
                    Case HistoryModeEnum.Folder, HistoryModeEnum.Both
                        sFolder = Path.GetDirectoryName(sHistoryFolder)
                        Call pSurveySave(Path.Combine(sFolder, Path.GetFileNameWithoutExtension(sFilename) & "_backup" & Path.GetExtension(sFilename)), True, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                End Select
            Else
                sFolder = Path.GetDirectoryName(sFilename)
                Call pSurveySave(Path.Combine(Path.GetDirectoryName(sFilename), Path.GetFileNameWithoutExtension(sFilename) & "_backup" & Path.GetExtension(sFilename)), True, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.NoHistory)
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private Function pHistoryGetFolder(Folder As String, Pattern As String) As SortedList(Of String, FileInfo)
        Dim oFolder As DirectoryInfo = New DirectoryInfo(Folder)
        Dim oFiles() As FileInfo = oFolder.GetFiles(Pattern)
        Dim oSortedFiles As SortedList(Of String, FileInfo) = New SortedList(Of String, FileInfo)
        For Each oFile As FileInfo In oFiles
            Call oSortedFiles.Add(oFile.Name, oFile)
        Next
        Return oSortedFiles
    End Function

    Private Sub pHistorySave(Filename As String)
        Dim oFi As FileInfo = My.Computer.FileSystem.GetFileInfo(Filename)
        If oFi.Exists Then
            If Not bHistoryBusy Then
                Dim oHistoryThread As Threading.Thread = New Threading.Thread(AddressOf oHistorySave_Callback)
                Call oHistoryThread.Start({iHistoryMode, Filename})
            End If
        End If
    End Sub

    Private Delegate Sub pPopupShowDelegate(Type As String, Text As String, Details As String)

    Private Sub pHistorySaveMode1(Filename As String)
        Dim oFi As FileInfo = My.Computer.FileSystem.GetFileInfo(Filename)
        If oFi.Exists Then
            Call pStatusProgress(0, GetLocalizedString("main.progressbegin12"))
            'leggo le info sul file corrente
            Dim dNow As Date = oFi.LastWriteTime
            Dim sHistoryFilename As String = Path.Combine(Path.GetTempPath, Strings.Format(dNow, "yyyyMMddHHmmss") & ".csz")
            'copio il file corrente in temp
            Call My.Computer.FileSystem.CopyFile(Filename, sHistoryFilename, True)
            'lo invio al remoto
            Dim oNetHistory As cNetHistory = New cNetHistory(sHistoryWebURL, iHistoryMaxCopies, iHistoryDailyCopies)
            If oNetHistory.Login(sHistoryWebUsername, sHistoryWebPassword) Then
                Dim iSetID As Integer
                If oNetHistory.CreateSet(oSurvey.ID, oSurvey.Name, iSetID) Then
                    Dim iDataID As Integer
                    Call oNetHistory.Upload(iSetID, 0, IO.Path.GetFileName(sHistoryFilename), sHistoryFilename, "application/octet-stream", dNow, iDataID)
                    'Dim iResult As Integer
                    'Call oNetHistory.Explode(iSetID, iDataID, iResult)
                End If
            End If
            Call pStatusProgress(0, GetLocalizedString("main.progressend12"))
            Try
                Call My.Computer.FileSystem.DeleteFile(sHistoryFilename)
            Catch
            End Try
        End If
    End Sub

    Private Sub pHistorySaveMode0(Filename As String)
        Dim oFi As FileInfo = My.Computer.FileSystem.GetFileInfo(Filename)
        If oFi.Exists Then
            Call pStatusProgress(0, GetLocalizedString("main.progressbegin12"))
            'leggo le info sul file corrente
            Dim dNow As Date = oFi.LastWriteTime
            Dim sHistoryFolderSubPath As String = Path.Combine(sHistoryFolder, oSurvey.ID)
            Dim sHistoryName As String = Strings.Format(dNow, "yyyyMMddHHmmss")
            Dim sHistoryFilename As String = Path.Combine(sHistoryFolderSubPath, sHistoryName & ".csz")
            'copio il file corrente nella cartella di storage
            Call My.Computer.FileSystem.CopyFile(Filename, sHistoryFilename, True)
            'verifico il numero di copie...
            If Not My.Computer.FileSystem.DirectoryExists(sHistoryFolderSubPath) Then
                Call My.Computer.FileSystem.CreateDirectory(sHistoryFolderSubPath)
            End If
            Dim oSortedFiles As SortedList(Of String, FileInfo)
            oSortedFiles = pHistoryGetFolder(sHistoryFolderSubPath, Strings.Format(dNow, "yyyyMMdd") & "*.csz")
            Do While oSortedFiles.Count > iHistoryDailyCopies
                Dim oItem As FileInfo = oSortedFiles.First.Value
                Call oItem.Delete()
                Call oSortedFiles.RemoveAt(0)
            Loop
            oSortedFiles = pHistoryGetFolder(sHistoryFolderSubPath, "*.csz")
            Do While oSortedFiles.Count > iHistoryMaxCopies
                Dim oItem As FileInfo = oSortedFiles.First.Value
                Call oItem.Delete()
                Call oSortedFiles.RemoveAt(0)
            Loop
            'salvo il file delle info aggiuntive
            Dim oXML As XmlDocument = New XmlDocument
            Dim oXMLRoot As XmlElement = oXML.CreateElement("csurvey")
            Dim oXMLHistoryDetails As XmlElement = oXML.CreateElement("historydetails")
            Dim oXMLItem As XmlElement = oXML.CreateElement("item")
            Call oXMLItem.SetAttribute("name", oSurvey.Name)
            Call oXMLItem.SetAttribute("origin", My.Computer.Name)
            Call oXMLItem.SetAttribute("datestamp", Now.ToString("O"))
            Call oXMLItem.SetAttribute("username", My.User.Name)
            Call oXMLHistoryDetails.AppendChild(oXMLItem)
            Call oXMLRoot.AppendChild(oXMLHistoryDetails)
            Call oXML.AppendChild(oXMLRoot)
            Call oXML.Save(Path.Combine(sHistoryFolderSubPath, sHistoryName & ".xml"))

            Call pStatusProgress(0, GetLocalizedString("main.progressend12"))
        End If
    End Sub

    Private Sub oHistorySave_Callback(ByVal State As Object)
        Try
            bHistoryBusy = True
            Dim iHistorySaveMode As HistoryModeEnum = State(0)
            Select Case iHistorySaveMode
                Case HistoryModeEnum.Folder
                    Dim sHistoryFilename As String = State(1)
                    If bHistoryCreateOnSave Then Call pHistorySaveMode0(sHistoryFilename)
                Case HistoryModeEnum.WebStorage
                    Dim sHistoryFilename As String = State(1)
                    If bHistoryWebCreateOnSave Then Call pHistorySaveMode1(sHistoryFilename)
                Case HistoryModeEnum.Both
                    Dim sHistoryFilename As String = State(1)
                    If bHistoryCreateOnSave Then Call pHistorySaveMode0(sHistoryFilename)
                    If bHistoryWebCreateOnSave Then Call pHistorySaveMode1(sHistoryFilename)
            End Select
            bHistoryBusy = False
        Catch ex As Exception
            bHistoryBusy = False
            Call pLogAdd(ex)

            Dim oArgs(2) As Object
            oArgs(0) = "error"
            oArgs(1) = GetLocalizedString("main.textpart47")
            oArgs(2) = String.Format(GetLocalizedString("main.textpart48"), ex.Message, ex.StackTrace)
            Call Me.BeginInvoke(New pPopupShowDelegate(AddressOf pPopupShow), oArgs)
        End Try
    End Sub

    Private Delegate Sub pSurveySegmentsAndTrigpointVisibilityDelegate()

    Private oVisibleStations As List(Of String) = New List(Of String)
    'Private oVisibleShots As List(Of cSegment) = New List(Of cSegment)

    Private Sub pSurveySegmentsAndTrigpointVisibility()
        If InvokeRequired Then
            Call Me.BeginInvoke(New pSurveySegmentsAndTrigpointVisibilityDelegate(AddressOf pSurveySegmentsAndTrigpointVisibility))
        Else
            If oCurrentOptions IsNot Nothing Then
                bDisableSegmentsChangeEvent = True
                Call oMousePointer.Push(Cursors.WaitCursor)
                If oCurrentOptions.HighlightCurrentCave AndAlso oCurrentOptions.HighlightSegmentsAndTrigpoints Then
                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = False

                    grdViewSegments.BeginUpdate()
                    grdViewTrigpoints.BeginUpdate()

                    Call pSurveyProgress("applyfilter", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin14"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageFilter Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
                    Dim iIndex As Integer = 0
                    Dim iCount As Integer = oSurvey.Segments.Count

                    Dim oSegments As UIHelpers.cSegmentsBindingList = grdSegments.DataSource
                    oSegments.ResetVisible()

                    Call oVisibleStations.Clear()

                    For Each oSegment As cSegment In oSurvey.Segments
                        If modDesign.GetIfSegmentMustBeDrawedByCaveAndBranch(oCurrentOptions, oSegment, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch) Then
                            Call oSegments.SetVisible(oSegment, True)
                            Dim sFrom As String = oSegment.From.ToUpper
                            Dim sTo As String = oSegment.To.ToUpper
                            If Not oVisibleStations.Contains(sFrom) Then Call oVisibleStations.Add(sFrom)
                            If Not oVisibleStations.Contains(sTo) Then Call oVisibleStations.Add(sTo)
                        Else
                            oSegments.SetVisible(oSegment, False)
                        End If
                        iIndex += 1
                        If iIndex Mod 100 = 0 Then Call oSurvey.RaiseOnProgressEvent("applyfilter", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, GetLocalizedString("main.progress14"), iIndex / iCount)
                    Next
                    '---------------------------------------------------------------
                    Call grdViewSegments.RefreshData()
                    grdViewSegments.EndUpdate()
                    Call grdViewTrigpoints.RefreshData()
                    grdViewTrigpoints.EndUpdate()

                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = True
                    Call pSurveyProgress("applyfilter", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend14"))
                    '---------------------------------------------------------------
                Else
                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = False

                    grdViewSegments.BeginUpdate()
                    grdViewTrigpoints.BeginUpdate()

                    Dim oSegments As UIHelpers.cSegmentsBindingList = grdSegments.DataSource
                    If oSegments IsNot Nothing Then Call oSegments.ResetVisible()

                    Call oVisibleStations.Clear()

                    Call grdViewSegments.RefreshData()
                    grdViewSegments.EndUpdate()
                    Call grdViewTrigpoints.RefreshData()
                    grdViewTrigpoints.EndUpdate()

                    '---------------------------------------------------------------
                    'lvTrigPoints.UseFiltering = False
                    '---------------------------------------------------------------
                    'is not userfull refreshing selected shot cause the selected shot have to be visible here...
                    '---------------------------------------------------------------
                    spSegmentsAndTrigpoints.Enabled = True
                    '---------------------------------------------------------------
                End If
                Call oMousePointer.Pop()
                bDisableSegmentsChangeEvent = False
            End If
        End If
    End Sub

    Private Sub pSurveyTrigpointsGridSetup()
        bDisableTrigpointsChangeEvent = True
        grdTrigPoints.BeginUpdate()
        grdTrigPoints.DataSource = oSurvey.TrigPoints.ToList
        If oTools.CurrentTrigpoint IsNot Nothing Then grdViewTrigpoints.FocusedRowHandle = grdViewTrigpoints.FindRow(oTools.CurrentTrigpoint)
        grdTrigPoints.EndUpdate()
        bDisableTrigpointsChangeEvent = False
    End Sub

    Private Sub pSurveySegmentsRefresh()
        Call grdSegments.BeginUpdate()
        Call grdSegments.RefreshDataSource()
        Call grdSegments.EndUpdate()
    End Sub

    Private Sub pSurveySegmentsGridSetup()
        bDisableSegmentsChangeEvent = True
        grdSegments.BeginUpdate()
        grdSegments.DataSource = oTools.Segments
        If oTools.CurrentSegment IsNot Nothing Then grdViewSegments.FocusedRowHandle = grdViewSegments.FindRow(oTools.CurrentSegment)
        grdSegments.EndUpdate()
        bDisableSegmentsChangeEvent = False
    End Sub

    Private Sub pSurveyTrigpointsRefresh(Optional ByVal RemoveOrphans As Boolean = False)
        bDisableTrigpointsChangeEvent = True
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call oSurvey.TrigPoints.Rebind(RemoveOrphans)
        Call pSurveyTrigpointsGridSetup()
        bDisableTrigpointsChangeEvent = False
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSegmentInsert(Index As Integer)
        Try
            grdSegments.BeginUpdate()

            Dim oSegment As cSegment = oSurvey.Segments.Insert(Index)
            If cboMainCaveList.Enabled Then
                Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
            End If
            If cboMainSessionList.Enabled Then
                Call oSegment.SetSession(If(IsNothing(btnMainSessionList.EditValue), "", btnMainSessionList.EditValue))
            End If
            Call oSegment.Save()

            grdSegments.RefreshDataSource()
            'grdViewSegments.FocusedRowHandle = grdViewSegments.FindRow(oSegment)
            Dim iRowHandle As Integer = grdViewSegments.FindRow(oSegment)
            Call grdViewSegments.FullFocusRow(iRowHandle)
            grdSegments.EndUpdate()

            Call pSegmentSelect(oSegment, False, False)

            Call pFieldDataShow(True)
            Call pSegmentsShow(True)
        Catch
        End Try
    End Sub

    Private Sub pSegmentAdd()
        Dim oSegment As cSegment = oSurvey.Segments.Append()

        grdSegments.BeginUpdate()

        If cboMainCaveList.Enabled Then
            Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
        End If
        If cboMainSessionList.Enabled Then
            Call oSegment.SetSession(If(IsNothing(btnMainSessionList.EditValue), "", btnMainSessionList.EditValue))
        End If
        Call oSegment.Save()

        grdSegments.RefreshDataSource()
        'grdViewSegments.FocusedRowHandle = grdViewSegments.FindRow(oSegment)
        Dim iRowHandle As Integer = grdViewSegments.FindRow(oSegment)
        Call grdViewSegments.FullFocusRow(iRowHandle)
        grdSegments.EndUpdate()

        Call pSegmentSelect(oSegment, False, False)

        Call pFieldDataShow(True)
        Call pSegmentsShow(True)
    End Sub

    Private Sub pTrigPointSelect(Trigpoint As cTrigPoint, [Select] As Boolean, BringToTop As Boolean)
        Dim iRowHandle As Integer = grdViewTrigpoints.FindRow(Trigpoint)
        Call grdViewTrigpoints.FullFocusRow(iRowHandle)
        If BringToTop AndAlso Not btnTrigpoints.Checked Then
            Call btnTrigpoints.PerformClick()
        End If
        If BringToTop Then
            Call grdTrigPoints.Focus()
        End If
    End Sub

    Private Sub pSegmentSelect(Segment As cSegment, [Select] As Boolean, BringToTop As Boolean)
        With grdSegments
            If Not Segment Is Nothing Then
                Dim iRowHandle As Integer = grdViewSegments.FindRow(Segment)
                If Not oTools.CurrentSegment Is Segment Then
                    Call oTools.SelectSegment(Segment)
                    Call pMapInvalidate()
                    Call pSegmentsRefresh()
                Else
                    Call grdViewSegments.FullFocusRow(iRowHandle)
                End If
            End If
        End With
        If BringToTop AndAlso Not btnSegments.Checked Then
            Call btnSegments.PerformClick()
        End If
        If BringToTop Then
            Call grdSegments.Focus()
        End If
    End Sub

    Private Sub pTrigpointsRefresh()
        Call pSurveyDelayedRedraw()
    End Sub

    Private Sub pSegmentsRefresh()
        Call pSurveyDelayedRedraw()
    End Sub

    Private Sub pSegmentDelete()
        Try
            Dim oSegments As cSegmentCollection = pSegmentsFromGridSelection(True)
            If oSegments.Count > 0 Then
                If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning20"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = vbYes Then
                    Call oTools.SelectSegment(Nothing)
                    bDisableSegmentsChangeEvent = True
                    bDisableSelectItemEvent = True
                    'Dim iLastIndex As Integer
                    For Each oSegment As cSegment In oSegments
                        Dim bEnabledEdit As Boolean = ((oSegment.Splay) OrElse (Not (oSegment.IsBinded OrElse oSegment.IsOrigin))) OrElse (pGetDisableDataGridConstraint())
                        If bEnabledEdit Then
                            'Dim iIndex As Integer = oSegment.Index
                            Call oTools.DeleteSegment(oSegment)
                            'iLastIndex = iIndex
                        End If
                    Next
                    bDisableSelectItemEvent = False
                    bDisableSegmentsChangeEvent = False
                    Call pSurveyCalculate(False)
                End If
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
            bDisableSelectItemEvent = False
            bDisableSegmentsChangeEvent = False
        End Try
    End Sub

    Private Sub pSegmentClear()
        Call oMousePointer.Push(Cursors.AppStarting)
        pnlSegment.Enabled = False

        cboSegmentSessionList.EditValue = oSurvey.Properties.Sessions.EmptySession ' cboSessionList.Properties.DataSource(0)
        cboSegmentCaveList.EditValue = Nothing
        cboSegmentCaveBranchList.EditValue = Nothing

        txtSegmentFrom.EditValue = ""
        txtSegmentTo.EditValue = ""

        txtSegmentDistance.Text = ""
        txtSegmentBearing.Text = ""
        txtSegmentInclination.Text = ""

        txtSegmentLeft.Text = ""
        txtSegmentRight.Text = ""
        txtSegmentUp.Text = ""
        txtSegmentDown.Text = ""

        'Select Case oSurvey.Properties.InversionMode
        '    Case cSurvey.cSurvey.InversioneModeEnum.Absolute
        cboSegmentDirection.SelectedIndex = 0
        cboSegmentDirection.Enabled = False
        '    Case cSurvey.cSurvey.InversioneModeEnum.Relative
        '        chkSegmentInverted.Checked = False
        '        chkSegmentInverted.Enabled = False
        'End Select

        chkSegmentExclude.Checked = False
        chkSegmentSplay.Checked = False
        chkSegmentDuplicate.Checked = False
        chkSegmentSurface.Checked = False
        chkSegmentCalibration.Checked = False
        chkSegmentCutSplay.Checked = False

        chkSegmentZSurvey.Checked = False

        chkSegmentUnbindable.Checked = False

        'picSegmentColor.BackColor = Nothing
        txtSegmentColor.EditValue = Nothing

        txtSegmentNote.Text = ""

        grdSegmentAttachments.DataSource = Nothing

        btnSegmentDelete.Enabled = False

        Call pGetCurrentTools.SelectSegment(Nothing)

        Call oMousePointer.Pop()
    End Sub

    Private Sub pSegmentLoad(Segment As cSegment)
        Call oMousePointer.Push(Cursors.AppStarting)
        If Segment Is Nothing Then
            Segment = oSurvey.Segments.GetEmptySegment
        End If
        If Segment Is Nothing Then
            pnlSegment.Enabled = False
        Else
            Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(Segment)
            Dim bUnlocked As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
            pnlSegment.Enabled = bUnlocked
            With Segment
                Try
                    cboSegmentSessionList.EditValue = oSurvey.Properties.Sessions(.Session)
                Catch
                    cboSegmentSessionList.EditValue = oSurvey.Properties.Sessions.EmptySession
                End Try
                Call pSegmentSetSessionColor()

                cboSegmentCaveList.EditValue = oSurvey.Properties.CaveInfos(.Cave)
                cboSegmentCaveBranchList.EditValue = If(cboSegmentCaveList.EditValue Is Nothing, Nothing, DirectCast(cboSegmentCaveList.EditValue, cCaveInfo).Branches(.Branch))
                Call pSegmentSetCaveBranchesColor()

                txtSegmentFrom.EditValue = .From
                txtSegmentTo.EditValue = .To

                '((oSegment.Splay) OrElse (Not (oSegment.IsBinded OrElse oSegment.IsOrigin))) OrElse (My.Computer.Keyboard.CtrlKeyDown AndAlso My.Computer.Keyboard.ShiftKeyDown)
                Dim bEnabledEdit As Boolean = (.Splay OrElse (Not (.IsBinded OrElse .IsOrigin))) OrElse (pGetDisableDataGridConstraint())
                txtSegmentFrom.Enabled = bEnabledEdit
                txtSegmentTo.Enabled = bEnabledEdit

                txtSegmentDistance.Text = .Distance
                txtSegmentBearing.Text = .Bearing
                txtSegmentInclination.Text = .Inclination

                txtSegmentLeft.Text = .Left
                txtSegmentRight.Text = .Right
                txtSegmentUp.Text = .Up
                txtSegmentDown.Text = .Down

                Dim bEnabledProfileEdit As Boolean = Not .IsProfileBinded
                If .Splay Then
                    lblSegmentDirection.Enabled = False
                    cboSegmentDirection.Enabled = False
                    chkSegmentUnbindable.Enabled = False
                    chkSegmentZSurvey.Enabled = False
                Else
                    cboSegmentDirection.SelectedIndex = Segment.Direction
                    lblSegmentDirection.Enabled = bEnabledProfileEdit
                    cboSegmentDirection.Enabled = bEnabledProfileEdit
                    chkSegmentUnbindable.Enabled = True
                    chkSegmentZSurvey.Enabled = True
                End If

                chkSegmentExclude.Checked = .Exclude
                chkSegmentSplay.Checked = .Splay
                chkSegmentDuplicate.Checked = .Duplicate
                chkSegmentSurface.Checked = .Surface
                chkSegmentCalibration.Checked = .Calibration
                chkSegmentCutSplay.Checked = .Cut
                chkSegmentZSurvey.Checked = .ZSurvey

                chkSegmentUnbindable.Checked = .Unbindable

                'picSegmentColor.BackColor = .Color
                txtSegmentColor.EditValue = .Color

                txtSegmentNote.Text = .Note

                grdSegmentAttachments.BeginUpdate()
                grdSegmentAttachments.DataSource = New UIHelpers.cAttachmentsBindingList(.Attachments)
                grdSegmentAttachments.EndUpdate()

                btnSegmentDelete.Enabled = bEnabledEdit

                chkSegmentVirtual.Checked = .Virtual

                Call pSegmentCheckFlags()

                '-----------------------------------------------------------------------------------------
                Dim sDistance As String = GetMeasureName(Segment, MeasureEnum.Distance)
                Dim sBearing As String = GetMeasureName(Segment, MeasureEnum.Bearing)
                Dim sInclination As String = GetMeasureName(Segment, MeasureEnum.Inclination)
                colSegmentsListDistance.Caption = sDistance
                colSegmentsListBearing.Caption = sBearing
                colSegmentsListInclination.Caption = sInclination
                lblSegmentDistance.Text = sDistance
                lblSegmentBearing.Text = sBearing
                lblSegmentInclination.Text = sInclination

                pnlSegmentSurfaceProfile.Visible = oSurvey.Properties.SurfaceProfile
                cboSegmentSurfaceProfileShow.SelectedIndex = .SurfaceProfileShow
                '-----------------------------------------------------------------------------------------
                prpSegmentDataProperties.BeginUpdate()
                prpSegmentDataProperties.SelectedObject = Nothing
                prpSegmentDataProperties.SelectedObject = .DataProperties.GetClass
                prpSegmentDataProperties.EndUpdate()
            End With
        End If
        Call pObjectPropertyDelayedLoad()
        Call oMousePointer.Pop()
    End Sub

    Private Sub pTrigpointClear()
        Call oMousePointer.Push(Cursors.AppStarting)
        pnlTrigPoint.Enabled = False

        bDisableTrigpointsChangeEvent = True

        txtTrigPointName.Text = ""

        'txtTrigPointX.Text = ""
        'txtTrigPointY.Text = ""
        'txtTrigPointZ.Text = ""

        cboTrigpointEntrance.SelectedIndex = 0
        cboTrigPointType.SelectedIndex = 0

        chkTrigpointShowEntrance.Checked = False
        chkTrigpointIsSpecial.Checked = False

        txtTrigpointNote.Text = ""

        cboTrigPointLabelPosition.SelectedIndex = 0
        txtTrigPointLabelDistance.Text = 0
        cboTrigPointLabelSymbol.SelectedIndex = 0

        cboTrigpointCoordinateGeo.Text = "WGS84"
        txtTrigpointCoordinateX.Text = ""
        txtTrigpointCoordinateY.Text = ""
        cboTrigpointCoordinateBand.Text = ""
        cboTrigpointCoordinateZone.Text = ""
        txtTrigpointCoordinateLat.Text = ""
        txtTrigpointCoordinateLong.Text = ""
        cboTrigpointCoordinateFormat.Text = ""
        txtTrigpointCoordinateAlt.Text = ""

        chkTrigpointIsInExploration.Checked = False
        chkTrigpointZTurn.Checked = False

        grdTrigPointAliases.DataSource = Nothing
        grdTrigpointConnections.DataSource = Nothing

        prpTrigpointDataProperties.SelectedObject = Nothing

        bDisableTrigpointsChangeEvent = False

        Call pGetCurrentTools.SelectTrigpoint(Nothing)

        Call oMousePointer.Pop()
    End Sub

    Private Sub pTrigpointCoordinateLoad(ByVal Trigpoint As cTrigPoint)
        If Not Trigpoint Is Nothing Then
            With Trigpoint
                cboTrigpointCoordinateGeo.Text = .Coordinate.System
                Select Case .Coordinate.System
                    Case "WGS84/UTM"
                        txtTrigpointCoordinateX.Text = .Coordinate.X
                        txtTrigpointCoordinateY.Text = .Coordinate.Y
                        cboTrigpointCoordinateBand.Text = .Coordinate.Band
                        cboTrigpointCoordinateZone.Text = .Coordinate.Zone
                    Case Else
                        txtTrigpointCoordinateLat.Text = .Coordinate.Latitude
                        txtTrigpointCoordinateLong.Text = .Coordinate.Longitude
                        cboTrigpointCoordinateFormat.Text = .Coordinate.Format
                End Select
                txtTrigpointCoordinateAlt.Text = .Coordinate.Altitude
                cboTrigpointCoordinateFix.SelectedIndex = .Coordinate.Fix
            End With
        End If
    End Sub

    Private Sub pTrigpointLoad(ByVal Trigpoint As cTrigPoint)
        Call oMousePointer.Push(Cursors.AppStarting)
        If Trigpoint Is Nothing Then
            pnlTrigPoint.Enabled = False
        Else
            bDisableTrigpointsChangeEvent = True
            pnlTrigPoint.Enabled = Not Trigpoint.IsSystem And Not Trigpoint.Data.IsSplay
            With Trigpoint
                txtTrigPointName.Text = .Name

                Dim bEnabledEdit As Boolean = Not .IsProfileBinded

                cboTrigpointEntrance.SelectedIndex = .Entrance
                cboTrigPointType.SelectedIndex = .Type

                chkTrigpointShowEntrance.Checked = .ShowEntrance
                chkTrigpointIsSpecial.Checked = .IsSpecial

                txtTrigpointNote.Text = .Note

                cboTrigPointLabelPosition.SelectedIndex = .LabelPosition
                txtTrigPointLabelDistance.Text = .LabelDistance
                cboTrigPointLabelSymbol.SelectedIndex = .LabelSymbol

                chkTrigpointDrawTranslationsLine.Checked = .DrawTranslationsLine

                Call pTrigpointCoordinateLoad(Trigpoint)

                chkTrigpointIsInExploration.Checked = .IsInExploration
                chkTrigpointZTurn.Checked = .ZTurn

                grdTrigPointAliases.DataSource = New UIHelpers.cAliasBindingList(Trigpoint.Aliases)
                grdTrigpointConnections.DataSource = New UIHelpers.cConnectionsBindingList(Trigpoint.Connections)

                prpTrigpointDataProperties.SelectedObject = .DataProperties.GetClass
            End With
            Call pTrigPointSelect(Trigpoint, True, False)
            bDisableTrigpointsChangeEvent = False
            Call pGetCurrentTools.SelectTrigpoint(Trigpoint)
        End If
        Call pObjectPropertyDelayedLoad()
        Call oMousePointer.Pop()
    End Sub

    Private Sub pTrigPointSave(Trigpoint As cTrigPoint)
        If Not oCurrentDesign Is Nothing Then
            If Not Trigpoint Is Nothing Then
                If bTrigpointChanged Then
                    If Not Trigpoint.IsSystem And Not Trigpoint.Data.IsSplay Then
                        Call oMousePointer.Push(Cursors.AppStarting)
                        With Trigpoint
                            .Entrance = cboTrigpointEntrance.SelectedIndex
                            .Type = cboTrigPointType.SelectedIndex

                            .ShowEntrance = chkTrigpointShowEntrance.Checked
                            .IsSpecial = chkTrigpointIsSpecial.Checked

                            .Note = txtTrigpointNote.Text

                            .LabelPosition = cboTrigPointLabelPosition.SelectedIndex
                            .LabelDistance = txtTrigPointLabelDistance.Text
                            .LabelSymbol = cboTrigPointLabelSymbol.SelectedIndex

                            .DrawTranslationsLine = chkTrigpointDrawTranslationsLine.Checked

                            .Coordinate.System = cboTrigpointCoordinateGeo.Text
                            Select Case .Coordinate.System
                                Case "WGS84/UTM"
                                    .Coordinate.X = txtTrigpointCoordinateX.Text
                                    .Coordinate.Y = txtTrigpointCoordinateY.Text
                                    .Coordinate.Band = cboTrigpointCoordinateBand.Text
                                    .Coordinate.Zone = cboTrigpointCoordinateZone.Text
                                Case Else
                                    .Coordinate.Format = cboTrigpointCoordinateFormat.Text
                                    .Coordinate.Latitude = txtTrigpointCoordinateLat.Text
                                    .Coordinate.Longitude = txtTrigpointCoordinateLong.Text
                            End Select
                            .Coordinate.Altitude = txtTrigpointCoordinateAlt.Text
                            .Coordinate.Fix = cboTrigpointCoordinateFix.SelectedIndex

                            .IsInExploration = chkTrigpointIsInExploration.Checked
                            .ZTurn = chkTrigpointZTurn.Checked

                            grdViewTrigPointAliases.CloseEditor()
                            DirectCast(grdTrigPointAliases.DataSource, UIHelpers.cAliasBindingList).Save(.Aliases)
                            grdViewTrigpointConnections.CloseEditor()
                            DirectCast(grdTrigpointConnections.DataSource, UIHelpers.cConnectionsBindingList).Save(.Connections)

                            Call .Save()

                            Call pStatusSet(String.Format(GetLocalizedString("main.textpart49"), .ToString))

                            Call pTrigPointUpdate(Trigpoint)
                        End With
                        Call oMousePointer.Pop()

                        bTrigpointChanged = False
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub pSegmentSave(Segment As cSegment)
        If Not oCurrentDesign Is Nothing Then
            If Not Segment Is Nothing Then
                If bSegmentChanged Then
                    Call oMousePointer.Push(Cursors.AppStarting)
                    With Segment
                        .From = txtSegmentFrom.EditValue.Trim.ToUpper
                        .To = txtSegmentTo.EditValue.Trim.ToUpper
                        .Distance = modNumbers.FormatFromEdit(txtSegmentDistance.Text, 2)
                        .Bearing = modNumbers.FormatFromEdit(txtSegmentBearing.Text, 2)
                        .Inclination = modNumbers.FormatFromEdit(txtSegmentInclination.Text, 2)

                        .Left = modNumbers.FormatFromEdit(txtSegmentLeft.Text, 2)
                        .Right = modNumbers.FormatFromEdit(txtSegmentRight.Text, 2)
                        .Up = modNumbers.FormatFromEdit(txtSegmentUp.Text, 2)
                        .Down = modNumbers.FormatFromEdit(txtSegmentDown.Text, 2)

                        .Direction = cboSegmentDirection.SelectedIndex

                        .Splay = chkSegmentSplay.Checked
                        .Cut = chkSegmentCutSplay.Checked
                        .Duplicate = chkSegmentDuplicate.Checked
                        .Exclude = chkSegmentExclude.Checked
                        .Surface = chkSegmentSurface.Checked
                        .Calibration = chkSegmentCalibration.Checked
                        .ZSurvey = chkSegmentZSurvey.Checked

                        .Unbindable = chkSegmentUnbindable.Checked

                        .Color = txtSegmentColor.EditValue 'picSegmentColor.BackColor
                        .Note = txtSegmentNote.Text

                        .Virtual = chkSegmentVirtual.Checked

                        .SurfaceProfileShow = cboSegmentSurfaceProfileShow.SelectedIndex

                        Call .SetSession(DirectCast(cboSegmentSessionList.EditValue, cSession))
                        Call .SetCave(DirectCast(cboSegmentCaveList.EditValue, cCaveInfo), DirectCast(cboSegmentCaveBranchList.EditValue, cCaveInfoBranch))

                        'Call .Save(False, cSegment.SaveOptionsEnum.EventRaisingDisable)
                        Call .Save(False)

                        Call pStatusSet(String.Format(GetLocalizedString("main.textpart50"), .ToString))

                        Call pSegmentUpdate(Segment)

                        If oTools.CurrentSegment Is Segment Then
                            Call pObjectPropertyDelayedLoad()
                        End If

                        If bAutoZoomToFit Then
                            Call pMapCenterAndFit()
                        End If
                    End With
                    Call oMousePointer.Pop()

                    bSegmentChanged = False
                End If
            End If
        End If
    End Sub

    Private Sub pTrigPointValidate(TrigPoint As cTrigPoint)
        Call grdViewTrigpoints.RefreshRow(grdViewTrigpoints.FindRow(TrigPoint))
    End Sub

    Private Function pSurveyCheckSession() As Boolean
        If oSurvey.Properties.Sessions.Count = 0 Then
            Dim dToday As Date = Today
            Dim oSession As cSession = oSurvey.Properties.Sessions.Add(dToday, oSurvey.Properties.Sessions.GetUniqueID(dToday, GetLocalizedString("main.textpart13")))
            Call pSurveyFillSessionList(False)
            btnMainSessionList.EditValue = oSession
        End If
    End Function

    Private Function pSurveyCheckOrigin() As Boolean
        Dim oOrigin As cTrigPoint = oSurvey.TrigPoints.GetOrigin
        If oOrigin Is Nothing Then
            Call oSurvey.TrigPoints.Rebind()

            Dim sOrigin As String = ""
            Dim oOriginSegment As cSegment = oSurvey.Segments.ToArray.FirstOrDefault(Function(segment) segment.IsSelfDefined And segment.IsValid)
            If oOriginSegment Is Nothing Then
                Dim oOriginTrigpoint As cTrigPoint = oSurvey.TrigPoints.ToArray.FirstOrDefault(Function(trigpoint) Not trigpoint.Data.IsSplay)
                If Not oOriginTrigpoint Is Nothing Then
                    sOrigin = oOriginTrigpoint.Name
                End If
            Else
                sOrigin = oOriginSegment.From
            End If
            If sOrigin <> "" Then
                If UIHelpers.Dialogs.Msgbox(String.Format(GetLocalizedString("main.warning24"), sOrigin), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
                    oSurvey.Properties.Origin = sOrigin
                    Return True
                End If
            End If
        Else
            Return True
        End If
    End Function

    Private Sub pSegmentValidate(ByVal Segment As cSegment)
        'Dim sErrorText As String = ""
        If Not Segment Is Nothing Then
            ''Dim oSessionColor As Color
            ''Dim oCaveBranchColor As Color
            'If Segment.Session = "" Then
            '    If Not Segment.IsEquate Then
            '        If sErrorText <> "" Then sErrorText = sErrorText & vbCrLf
            '        sErrorText = sErrorText & GetLocalizedString("main.textpart153")
            '    End If
            '    'Else
            '    '    Dim oColor As Color = oSurvey.Properties.Sessions.GetColor(oSegment, Color.Transparent)
            '    '    If Not (oColor = Color.Transparent) Then
            '    '        oSessionColor = oColor
            '    '    Else
            '    '        oSessionColor = grdSegments.BackgroundColor
            '    '    End If
            'End If
            ''.Cells(0).Style.BackColor = oSessionColor

            'If Segment.Cave = "" Then
            '    If sErrorText <> "" Then sErrorText = sErrorText & vbCrLf
            '    sErrorText = sErrorText & GetLocalizedString("main.textpart53")
            '    'oCaveBranchColor = grdSegments.BackgroundColor
            '    'Else
            '    '    Dim oColor As Color = oSurvey.Properties.CaveInfos.GetColor(oSegment, Color.Transparent)
            '    '    If Not (oColor = Color.Transparent) Then
            '    '        oCaveBranchColor = oColor
            '    '    Else
            '    '        oCaveBranchColor = grdSegments.BackgroundColor
            '    '    End If
            'End If
            ''.Cells(1).Style.BackColor = oCaveBranchColor

            'If Segment.From = "" Or Segment.To = "" Then
            '    If sErrorText <> "" Then sErrorText = sErrorText & vbCrLf
            '    sErrorText = sErrorText & GetLocalizedString("main.textpart52")
            'End If

            Call Segment.Save()
        End If
    End Sub

    Private Sub pTrigPointUpdate(TrigPoint As cTrigPoint)
        Call grdViewTrigpoints.RefreshRow(grdViewTrigpoints.FindRow(TrigPoint))
        Call pTrigPointValidate(TrigPoint)
    End Sub

    Private Sub pSegmentUpdate(ByVal Segment As cSegment)
        Call grdViewSegments.RefreshRow(grdViewSegments.FindRow(Segment))
        Call pSegmentValidate(Segment)
    End Sub

    Private Function pSurveyGetHash() As String
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim sHash As String = ""
        Try
            Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.DontSaveBinary)
                Call oSurvey.SaveTo(oFile, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                Using oMs As System.IO.MemoryStream = New System.IO.MemoryStream
                    Call oFile.Document.Save(oMs)
                    sHash = modMain.CalculateHash(oMs)
                End Using
            End Using
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
        Call oMousePointer.Pop()
        Return sHash
    End Function

    Private Function pSurveySaveOnExit() As Boolean
        If oSurvey Is Nothing Then
            Return True
        Else
            Dim sHash As String = pSurveyGetHash()
            If sLastHash <> sHash Then
                Select Case UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning23"), MsgBoxStyle.YesNoCancel Or MsgBoxStyle.Question, GetLocalizedString("main.warningtitle"))
                    Case MsgBoxResult.Yes
                        If pSurveySave(sFilename) Then
                            sLastHash = sHash
                            Return True
                        Else
                            Return False
                        End If
                    Case MsgBoxResult.No
                        Return True
                    Case MsgBoxResult.Cancel
                        Return False
                End Select
            Else
                Return True
            End If
        End If
    End Function

    Private Sub frmMain_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        e.Cancel = Not pSurveySaveOnExit()
        Call pSettingsSave()
        Call pWorkspacesSave()
    End Sub

    Private Sub pSurveyCleanUp()
        Using frmSCUP As frmSurveyCleanUp = New frmSurveyCleanUp
            If frmSCUP.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                With frmSCUP
                    If .chkPlotSegments.Checked Then
                        Call oSurvey.Segments.CleanUp()
                    End If
                    If .chkSplayNames.Checked Then
                        Call oSurvey.Segments.RefreshSplayNames()
                    End If
                    If .chkSplayFlagsAndNames.Checked Then
                        Call oSurvey.Segments.CheckSplayFlags()
                    End If
                    If .chkDesignClipart.Checked Then
                        Call oSurvey.Cliparts.Cliparts.CleanUp()
                    End If
                    If .chkDesignSign.Checked Then
                        Call oSurvey.Signs.Cliparts.CleanUp()
                    End If
                    Dim oFlags As cDesign.CleanUpFlagsEnum
                    If .chkDesignPointReduction.Checked Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.PointsReduction
                    If .chkDesignPointsCleanUp.Checked Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.PointsCleanUp
                    If .chkDesignCaveBranchCheck.Checked Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.CaveBranchCheck
                    'If .chkDesignConnectToCheck.Checked And .chkDesignConnectToCheck.Enabled Then oFlags = oFlags Or cDesign.CleanUpFlagsEnum.ConnectToCheck
                    Select Case .cboDesignContext.SelectedIndex
                        Case 0
                            Dim oUndefinedCave As Dictionary(Of String, cDesign.cCleanUpUndefinedCaveAndBranchItem) = New Dictionary(Of String, cDesign.cCleanUpUndefinedCaveAndBranchItem)
                            Call oSurvey.Plan.CleanUp(oFlags, .txtDesignPointReductionFactor.Value, oUndefinedCave)
                            Call oSurvey.Profile.CleanUp(oFlags, .txtDesignPointReductionFactor.Value, oUndefinedCave)
                        Case 1
                            Call oSurvey.Plan.CleanUp(oFlags, .txtDesignPointReductionFactor.Value)
                        Case 2
                            Call oSurvey.Profile.CleanUp(oFlags, .txtDesignPointReductionFactor.Value)
                    End Select
                    If .chkDesignRemoveInvalidItem.Checked Then
                        'delete item in wrong level...(some topodroid version create file with problem like this...)
                        For Each oItem As cItem In oSurvey.GetAllDesignItems(cIItem.cItemTypeEnum.CrossSection)
                            If oItem.Layer.Type <> cLayers.LayerTypeEnum.Signs Then
                                Call oItem.Layer.Items.Remove(oItem)
                            End If
                        Next
                    End If
                    Call pSurveySegmentsRefresh()
                    Call pMapInvalidate()
                End With
            End If
        End Using
    End Sub

    Private Sub pDesignPointsUnjoin(Optional All As Boolean = False)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo1"))
                Call .CurrentItemPoint.Unjoin(All)
                Call .CommitUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignPointsJoin(Connect As Boolean)
        Call pJoinPointsShow(True)
        Call oDockJoinPoints.AppendPoint()
        If Connect Then
            Call oDockJoinPoints.JoinPoints()
        End If
    End Sub

    Private bHolos As Boolean 'indica se il 3d è attivo...
    Private WithEvents oHolos As cHolosViewer

    Private Sub oHolos_OnDoubleClick(Sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnDoubleClick
        Call pObjectPropShow(True)
        'Call tabObjectProp.SelectTab(tabObjectPropMain)
    End Sub

    Private Sub pRebindDesignBar()
        If oCurrentDesign Is Nothing Then
            Call cDesignMessageCorner.PopupHide()
            'Call cDesignMessageBar.PopupHide()
        Else
            Select Case oCurrentDesign.Type
                Case cIDesign.cDesignTypeEnum.Plan, cIDesign.cDesignTypeEnum.Profile
                    If oSurvey.Invalidated <> Calculate.cCalculate.InvalidateEnum.None Then
                        cDesignMessageCorner.CustomButtonImageOptions.SvgImage = btnPlotCalculate.ImageOptions.SvgImage
                        cDesignMessageCorner.CustomButtonCaption = btnPlotCalculate.Caption
                        cDesignMessageCorner.PopupShow("warning", modMain.GetLocalizedString("main.textpart156"))
                        cDesignMessageCorner.BringToFront()

                        btnDesignBar3DRefresh.Visibility = BarItemVisibility.Never
                        btnDesignBarPlotCalculate.ItemAppearance.Normal.BackColor = modDevExpress.SkinBackcolor(cDesignMessageCorner.BackColor)
                        'btnDesignBarPlotCalculate.ItemAppearance.Normal.ForeColor = Drawing.Color.Black
                        btnDesignBarPlotCalculate.Visibility = BarItemVisibility.Always
                    Else
                        cDesignMessageCorner.PopupHide()
                        'cDesignMessageBar.PopupHide()
                        btnDesignBar3DRefresh.Visibility = BarItemVisibility.Never
                        btnDesignBarPlotCalculate.Visibility = BarItemVisibility.Never
                    End If
                Case cIDesign.cDesignTypeEnum.ThreeDModel
                    If oHolos.IsInvalidated Then
                        If oHolos.IsInError Then
                            cDesignMessageCorner.CustomButtonImageOptions.SvgImage = My.Resources.error2
                            cDesignMessageCorner.CustomButtonCaption = modMain.GetLocalizedString("holos.textpart1")
                            cDesignMessageCorner.PopupShow("error", modMain.GetLocalizedString("holos.error"))
                            cDesignMessageCorner.BringToFront()

                            btnDesignBar3DRefresh.ItemAppearance.Normal.BackColor = modDevExpress.SkinBackcolor(cDesignMessageCorner.BackColor)
                            'btnDesignBar3DRefresh.ItemAppearance.Normal.ForeColor = Drawing.Color.Black
                            btnDesignBar3DRefresh.Visibility = BarItemVisibility.Always
                            btnDesignBarPlotCalculate.Visibility = BarItemVisibility.Never
                        Else
                            cDesignMessageCorner.CustomButtonImageOptions.SvgImage = My.Resources.actions_refresh
                            cDesignMessageCorner.CustomButtonCaption = modMain.GetLocalizedString("holos.textpart1")
                            cDesignMessageCorner.PopupShow("warning", modMain.GetLocalizedString("holos.invalidate"))
                            cDesignMessageCorner.BringToFront()

                            btnDesignBar3DRefresh.ItemAppearance.Normal.BackColor = modDevExpress.SkinBackcolor(cDesignMessageCorner.BackColor)
                            'btnDesignBar3DRefresh.ItemAppearance.Normal.ForeColor = Drawing.Color.Black
                            btnDesignBar3DRefresh.Visibility = BarItemVisibility.Always
                            btnDesignBarPlotCalculate.Visibility = BarItemVisibility.Never
                        End If
                    Else
                        'Call cDesignMessageBar.PopupHide()
                        cDesignMessageCorner.PopupHide()

                        btnDesignBar3DRefresh.ItemAppearance.Normal.Reset()
                        btnDesignBar3DRefresh.Visibility = BarItemVisibility.Always
                        btnDesignBarPlotCalculate.Visibility = BarItemVisibility.Never
                    End If
            End Select
        End If
    End Sub

    Private Sub oHolos_OnInvalidate(sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnInvalidate
        Call pRebindDesignBar()
        Call pHolosResize()
    End Sub

    Private Sub oHolos_OnItemSelect(Sender As cHolosViewer, Args As cHolosViewer.cItemSelectEventArgs) Handles oHolos.OnItemSelect
        If Args.SelectedItem Is Nothing Then
            Call pGetCurrentDesignTools.SelectItem(Nothing)
        Else
            If TypeOf Args.SelectedItem Is cTrigPoint Then
                Dim oTrigpoint As cTrigPoint = Args.SelectedItem
                Call pTrigPointSelect(oTrigpoint, True, False)
                Call pTrigpointItemSelect()
            ElseIf TypeOf Args.SelectedItem Is cSegment Then
                Dim oSegment As cSegment = Args.SelectedItem
                Call pSegmentSelect(oSegment, True, False)
                Call pSegmentItemSelect()
            ElseIf TypeOf Args.SelectedItem Is cItemChunk3D Then
                Dim oChunk As cItemChunk3D = Args.SelectedItem
                Call pGetCurrentDesignTools.SelectItem(oChunk)
            End If
        End If
    End Sub

    Private Sub oHolos_OnRedrawComplete(Sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnRedrawComplete
        Call pHolosResize()
    End Sub

    Private Sub pHolosResize()
        If Not oHolos Is Nothing Then
            oHolos.Height = pnl3D.Height '/ DPIRatio
            oHolos.Width = pnl3D.Width '/ DPIRatio
        End If
    End Sub

    Private Sub frmMain_KeyDown(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles MyBase.KeyDown
        Select Case e.KeyCode
            Case Keys.L
                If e.Control And e.Alt Then
                    Call pLevelsShow()
                End If
            Case Keys.G
                If e.Control Then
                    Call pDesignSnapToGrid(Not btnAlignToGrid.Checked)
                End If
            'Case Keys.I
            '    If e.Control And e.Alt Then
            '        Call oHolos.Import()
            '    End If
            Case Keys.E
                If e.Control And e.Alt Then
                    Using frmE As frmExceptionManager = New frmExceptionManager(oSurvey, "", New Exception("PROVA"))
                        Call frmE.ShowDialog(Me)
                    End Using
                End If
            Case Keys.T
                If e.Control And e.Alt Then
                    Dim frmTs As frmMasterSlaveManager = New frmMasterSlaveManager(oSurvey)
                    Call frmTs.Show(Me)
                End If
            'Case Keys.M
            '    If e.Control And e.Alt Then
            '        If pGetCurrentDesignTools.CurrentItem.Type = cIItem.cItemTypeEnum.Clipart Then
            '            Dim oClipart As cItemClipart = DirectCast(pGetCurrentDesignTools.CurrentItem, cItemClipart)
            '            Dim sScale As Single
            '            Dim sAngle As String
            '            Call oClipart.GetScaleAndRotateFactors(oCurrentOptions, sScale, sAngle)
            '            Debug.Print("SCALE:" & sScale)
            '            Debug.Print("ANGLE:" & sAngle)
            '            'Call modMetapost.ClipartToMetapostFile(oSurvey, oClipart.Clipart, "d:\clipart.th2", "clip")
            '        End If
            '    End If
            Case Keys.F5
                If Not e.Control And Not e.Alt And Not e.Shift Then
                    If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                        Call p3DInvalidate(cHolosViewer.InvalidateType.All)
                    Else
                        Call pSurveyRedraw()
                    End If
                End If
                If e.Control Then
                    Call pSurveyCalculate(True)
                End If
            'Case Keys.F3
            '    If Not frmF Is Nothing Then
            '        Call frmF.cmdOk.PerformClick()
            '    End If
            Case Keys.PageUp
                If picMap.Focused Then
                    If e.Control Then
                        Call pItemBringAhead()
                    ElseIf e.Shift Then
                        Call pItemBringToTop()
                    End If
                End If
            Case Keys.PageDown
                If picMap.Focused Then
                    If e.Control Then
                        Call pItemSendBehind()
                    ElseIf e.Shift Then
                        Call pItemSendToBottom()
                    End If
                End If
            Case Keys.Escape
                With pGetCurrentDesignTools()

                    If .IsInEdit Then
                        Try
                            Call .CurrentItem.Points.Remove(.CurrentItem.Points.Last)
                        Catch
                        End Try
                        Call .EndItem()
                        Call pMapInvalidate()
                    End If
                    If .IsInCombine Then
                        Call .EndAndSelectItem()
                        Call pMapInvalidate()
                    End If
                End With
                Call modWMSManager.WMSDownloadFileReset()
            Case Keys.Shift, Keys.ControlKey, Keys.Alt, Keys.Menu
                If picMap.Focused Then
                    Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down
                    Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
                    Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down
                    Call pMapSetCursor(bCtrl, bShift, bAlt, Control.MouseButtons)
                End If
        End Select
    End Sub

    Private Function pGetDisableDataGridConstraint() As Boolean
        Return bGridDisableConstraint
    End Function

    Private Sub pSurveyCaption()
        Text = "cSurvey - " & oSurvey.Name & " [" & sFilename & "]" & If(modMain.bIsInDebug, " DEBUG - " & modMain.GetReleaseVersion(), "") '& If(Environment.Is64BitProcess, " - 64bit", " - 32bit")
        Call My.Application.SetCurrent(oSurvey, sFilename)
    End Sub

    Private Sub pZoomReset()
        Dim bBackupDisableZoomEvent As Boolean = bDisableZoomEvent
        bDisableZoomEvent = True
        Call pMapZoom(sZoomDefault) ' / sZoomRatio)
        bDisableZoomEvent = bBackupDisableZoomEvent
    End Sub

    Private Sub frmMain_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Handles MyBase.KeyUp
        Select Case e.KeyCode
            Case Keys.Shift, Keys.ControlKey, Keys.Alt, Keys.Menu
                If picMap.Focused Then
                    Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down
                    Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
                    Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down
                    Call pMapSetCursor(bCtrl, bShift, bAlt, Control.MouseButtons)
                End If
            'Case Keys.Z
            '    If e.Control And e.Shift Then
            '        Call pUndoManager()
            '    End If
            Case Keys.Add Or Keys.Oemplus
                If pGetCurrentDesignTools.IsNewItem Then

                End If
        End Select
    End Sub

    'Private Sub pUndoManager()
    '    If Not frmU.Visible Then
    '        Call frmU.Show(Me)
    '    End If
    'End Sub

    Private WithEvents oDockConsole As cDockConsole

    Private WithEvents oDockScript As cDockScript

    Private WithEvents oDockClipart As cDockClipart
    Private WithEvents oDockBrushesAndPens As cDockBrushesAndPens
    Private WithEvents oDockText As cDockText
    Private WithEvents oDockJoinPoints As cDockJoinPoints

    Private WithEvents oDockLevels As cDockLevels

    Private WithEvents oDockAV As cDockAudioViewer
    Private WithEvents oDockIV As cDockImageViewer

    Private WithEvents oDockLS As cDockLinkedSurveys

    Private WithEvents oDockTexts As cDockTexts

    Private WithEvents oDockDistances As cDockDistances

    Private Sub frmMain_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles MyBase.Load
        If Not bIsInDebug Then modDevExpress.PrepareSkinMenu(SkinDropDownButtonItem1.DropDownGallery.Gallery)

        If oCommandLine.Count = 1 Then
            If oCommandLine(0).Key <> "" AndAlso oCommandLine(0).Value = "" Then
                Call pSurveyLoad(oCommandLine(0).Key, False)
            Else
                Dim sFilename As String = oCommandLine.GetValue("filename", "")
                If sFilename <> "" Then
                    Call pSurveyLoad(sFilename, False)
                Else
                    Call pSurveyNew()
                End If
            End If
        Else
            Call pSurveyNew()
        End If
    End Sub

    Private Sub cboMainCaveBranchListView_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles cboMainCaveBranchListView.CustomUnboundColumnData
        If e.IsGetData Then
            If e.Column.Name = "cboMainBranchListPath" Then
                Dim oGridView As DevExpress.XtraGrid.Views.Grid.GridView = sender
                Dim oBranch As cCaveInfoBranch = e.Row
                If Not oBranch Is Nothing Then
                    e.Value = oBranch.Path
                End If
            End If
        End If
    End Sub

    Private Sub pJumplistCreate()
        Try
            Dim oJumpLink As DevExpress.Utils.Taskbar.JumpListItemTask
            Dim oRecent As List(Of String) = UIHelpers.cRecentsHelper.Load("Recent", btnLoad)
            For Each sRecent As String In oRecent
                oJumpLink = New DevExpress.Utils.Taskbar.JumpListItemTask(IO.Path.GetFileName(sRecent))
                oJumpLink.Path = Assembly.GetEntryAssembly().Location
                oJumpLink.WorkingDirectory = IO.Path.GetDirectoryName(oJumpLink.Path)
                oJumpLink.Arguments = Chr(34) & sRecent & Chr(34)
                TaskbarAssistant.JumpListTasksCategory.Add(oJumpLink)
            Next
            TaskbarAssistant.JumpListTasksCategory.Add(New DevExpress.Utils.Taskbar.JumpListItemSeparator)
            oJumpLink = New DevExpress.Utils.Taskbar.JumpListItemTask("www.csurvey.it")
            oJumpLink.Path = "http://www.csurvey.it"
            Call TaskbarAssistant.JumpListTasksCategory.Add(oJumpLink)
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private bFirstRun As Boolean

    Private Sub pFirstRun()
        bFirstRun = My.Application.Settings.Count = 0
        If bFirstRun Then
            Call pAutoSettings()
        End If
        Dim sMachineID As String = My.Application.Settings.GetSetting("debug.machineid", "")
        If sMachineID = "" Then
            sMachineID = Guid.NewGuid.ToString
            Call My.Application.Settings.SetSetting("debug.machineid", sMachineID)
        End If
        modMain.sMachineID = sMachineID
    End Sub

    Private Sub pForceInitialize(Parent As Control)
        For Each oControl As Control In Parent.Controls
            If oControl.HasMethod("ForceInitialize") Then
                Call pLogAdd(cSurvey.cSurvey.LogEntryType.Information, "Initialize " & oControl.Name)
                Call DirectCast(oControl, Object).ForceInitialize
            End If
            Call pForceInitialize(oControl)
        Next
    End Sub

    Private Sub pWorkspacesLoad()
        Call pForceInitialize(Me)

        Call WorkspaceManager.CaptureWorkspace("_default", True)
        Call WorkspaceManager.SaveWorkspace("_default", IO.Path.Combine(modMain.GetUserApplicationPath, "_default.cworkspace"), True)
        Call WorkspaceManager.RemoveWorkspace("_default")

        For Each sWorkspaceFile As String In My.Computer.FileSystem.GetFiles(modMain.GetUserApplicationPath, FileIO.SearchOption.SearchTopLevelOnly, {"*.cworkspace"})
            Dim sWorkspaceName As String = IO.Path.GetFileNameWithoutExtension(sWorkspaceFile)
            If Not sWorkspaceName.StartsWith("_") Then
                Call WorkspaceManager.LoadWorkspace(sWorkspaceName, sWorkspaceFile, False)
                If sWorkspaceName.ToLower = "default" Then
                    If (My.Computer.Keyboard.AltKeyDown And My.Computer.Keyboard.CtrlKeyDown) Then
                        Call pLogAdd(cSurvey.cSurvey.LogEntryType.Warning, "Skipped restore default workspace")
                    Else
                        Call WorkspaceManager.ApplyWorkspace("default")
                        Call pLogAdd(cSurvey.cSurvey.LogEntryType.Information, "Default workspace restored")
                    End If
                End If
            End If
        Next
        Call modDevExpress.UpdateFloatingForm(Me, DockManager)
    End Sub

    Private bChangeDecimalKey As Boolean
    Private bChangePeriodKey As Boolean

    Private Sub pSettingsLoad()
        'Call My.Application.Settings.Reset()

        Dim oTherionIni As cTherionINISettings = My.Application.RuntimeSettings.GetSetting("therion.ini", Nothing)
        If oTherionIni Is Nothing Then oTherionIni = New cTherionINISettings(My.Application.Settings.GetSetting("therion.inisettings", ""))
        Call My.Application.RuntimeSettings.SetSetting("therion.ini", oTherionIni)

        bChangeDecimalKey = My.Application.Settings.GetSetting("keys.changedecimalkey", "1")
        bChangePeriodKey = My.Application.Settings.GetSetting("keys.changeperiodkey", "0")

        Dim sSkinName As String = "" & My.Application.Settings.GetSetting("theme.name", "The Bezier")
        If sSkinName <> "" Then
            Dim sPaletteName As String = "" & My.Application.Settings.GetSetting("theme.palette", "cSurvey (red)")
            DevExpress.LookAndFeel.UserLookAndFeel.Default.SetSkinStyle(sSkinName, sPaletteName)
            DevExpress.LookAndFeel.UserLookAndFeel.Default.UpdateStyleSettings()
        End If

        Dim iFieldDataViewMode As Integer = My.Application.Settings.GetSetting("user.fieldDataviewmode", 0)
        Select Case iFieldDataViewMode
            Case 0
                btnSegments.Checked = True
                Call pSegmentsShow(True)
            Case 1
                btnTrigpoints.Checked = True
                Call pTrigpointsShow(True)
            Case 2
                btnSegmentsAndTrigPoints.Checked = True
                Call pSegmentsAndTrigPointsShow(True)
        End Select

        iDesignQuality = My.Application.Settings.GetSetting("design.quality", 0)
        Call pSettingsSetDesignQuality(iDesignQuality, True)
        Call pRulersSetVisible(My.Application.Settings.GetSetting("design.rulers", 1))
        iDrawRulesStyle = My.Application.Settings.GetSetting("design.rulers.style", RulersStyleEnum.Simple)
        iDrawMetricGrid = My.Application.Settings.GetSetting("design.metricgrid", 0)

        'bDesignBarShowLastUsedTools =  My.Application.Settings.GetSetting("design.designbar.showlastusedtools", 1)
        'oLastUsedBar.Visible = bDesignBarShowLastUsedTools
        iDesignBarPosition = My.Application.Settings.GetSetting("design.designbar.defaultposition", 0)

        'last used items
        Call oLastUsedItems.Clear()
        Dim sLui As String = My.Application.Settings.GetSetting("lui", "")
        If sLui <> "" Then
            Dim sLastUsedItems As String() = sLui.Split(",").Distinct.ToArray
            For Each sLuiItem As String In sLastUsedItems
                If sLuiItem <> "" Then
                    Dim oRealItem As DevExpress.XtraBars.BarItem = RibbonControl.Items.FindByName(sLuiItem)
                    If oRealItem IsNot Nothing Then
                        Call oLastUsedItems.Add(oRealItem)
                    End If
                End If
            Next
        End If

        bDesignLevelBarVisible = My.Application.Settings.GetSetting("levelsbar", "1")
        btnViewToolbarLevels.Checked = bDesignLevelBarVisible
        bDesignItemsBarVisible = My.Application.Settings.GetSetting("itemsbar", "1")
        btnViewToolbarItems.Checked = bDesignItemsBarVisible
        bLastUsedBarVisible = My.Application.Settings.GetSetting("lastusedbar", "1")
        btnViewToolbarLastUsedTools.Checked = bLastUsedBarVisible
        bFloatBarVisible = My.Application.Settings.GetSetting("floatbar", "1")
        btnViewToolbarFloatingBar.Checked = bFloatBarVisible

        Call pReloadUsedToolsBar()

        modMain.iMaxDrawItemCount = My.Application.Settings.GetSetting("design.maxdrawitemcount", 20)

        btnAlignToGrid.Checked = My.Application.Settings.GetSetting("snaptogrid", 0)
        btnAlignToGridSize.EditValue = modNumbers.StringToSingle(My.Application.Settings.GetSetting("snaptogrid.size", "0.1"))

        bEditPointByPoint = My.Application.Settings.GetSetting("user.editpointtopoint", 0)
        btnEditDrawing.Down = Not bEditPointByPoint
        btnEditPointToPoint.Down = bEditPointByPoint

        btnLoch.Visibility = modControls.VisibleToVisibility(My.Application.Settings.GetSetting("therion.loch.enabled", 1))

        sDefaultClub = My.Application.Settings.GetSetting("default.club", "")
        sDefaultTeam = My.Application.Settings.GetSetting("default.team", "")
        sDefaultDesigner = My.Application.Settings.GetSetting("default.designer", "")

        'defaultfolder (if not set...create it)
        sDefaultFolder = My.Application.Settings.GetSetting("default.folder", "")
        If sDefaultFolder = "" Then
            Call pDefaultFolderSetup()
        End If
        'templates (if not set...create it)
        oTemplates = New UIHelpers.cTemplatesBindingList(IO.Path.Combine(sDefaultFolder, "Templates"))
        btnNew.ButtonStyle = If(oTemplates.Count > 0, BarButtonStyle.DropDown, BarButtonStyle.Default)

        oRecents = UIHelpers.cRecentsHelper.Load("Recent", btnLoad)

        iDefaultCalculateMode = My.Application.Settings.GetSetting("default.calculatemode", 0)
        iDefaultCalculateType = My.Application.Settings.GetSetting("default.calculatetype", cSurvey.cSurvey.CalculateTypeEnum.Therion)

        bDefaultShowLegacyPrintAndExportObjects = My.Application.Settings.GetSetting("default.showlegacyextraprintandexportobjects", Not bFirstRun)

        bDefaultArrangePriorityOnImport = My.Application.Settings.GetSetting("default.arrangepriorityonimport", True)

        iZoomType = My.Application.Settings.GetSetting("zoom.type", 1)

        bGridExportSplayNames = My.Application.Settings.GetSetting("grid.shotsgrid.exportsplaynames", 1)
        bGridDisableConstraint = My.Application.Settings.GetSetting("grid.shotsgrid.disableconstraint", 0)

        'bLogEnabled = oReg.GetValue("debug.log", 0)

        bToolsEnabledByLevel = My.Application.Settings.GetSetting("environment.setdesigntoolsenabledbylevel", 1)
        bToolsHiddenByLevel = My.Application.Settings.GetSetting("environment.setdesigntoolshiddenbylevel", 0)
        iFunctionLanguage = My.Application.Settings.GetSetting("environment.functionlanguage", 0)

        bAlwaysUseShellForAttachments = My.Application.Settings.GetSetting("environment.alwaysuseshellforattachments", 0)

        tmrAutosave.Enabled = My.Application.Settings.GetSetting("debug.autosave", 0)
        bAutoSaveUseHistorySettings = My.Application.Settings.GetSetting("debug.autosave.usehistorysettings", 0)

        Dim sPointPrecision As Single = modNumbers.StringToSingle(My.Application.Settings.GetSetting("pens.smooth", "0.05"))
        If sPointPrecision < 0.01 Then sPointPrecision = 0.01
        btnPenSmooting.Checked = My.Application.Settings.GetSetting("pens.smooting", 0)
        btnPenSmootingFactor.EditValue = Math.Round(sPointPrecision, 2)

        Dim sToolsPrecision As Single = modNumbers.StringToSingle(My.Application.Settings.GetSetting("tools.smooth", "0.05"))
        If sToolsPrecision < 0.01F Then sToolsPrecision = 0.01F
        btnCurrentItemGenericReducePointFactor.EditValue = Math.Round(sToolsPrecision, 2)

        bUseOnlyAnchorToMove = My.Application.Settings.GetSetting("design.useonlyanchortomove", 1)
        iAdvancedSelectionMode = My.Application.Settings.GetSetting("design.selectionmode", 0)
        sAdvancedSelectionPrecision = modNumbers.StringToSingle(My.Application.Settings.GetSetting("design.selectionmode.precision", 1000.0F))
        sAdvancedSelectionWide = modNumbers.StringToSingle(My.Application.Settings.GetSetting("design.selectionmode.wide", 4.0F))

        Dim sAnchorScale As Single = modNumbers.StringToSingle(My.Application.Settings.GetSetting("design.anchorscale", 1.0F))
        If sAnchorScale < 1.0F Then sAnchorScale = 1.0F
        modPaint.AnchorsScale = sAnchorScale

        oPropObjectsBindingContainer.Expanded = My.Application.Settings.GetSetting("design.objectsbinding.expanded")
        oPropSegmentBindingContainer.Expanded = My.Application.Settings.GetSetting("design.segmentsbinding.expanded")
        oPropTrigpointsDistancesContainer.Expanded = My.Application.Settings.GetSetting("design.trigpointdistances.expanded")

        bHistory = My.Application.Settings.GetSetting("history.enabled", 0)
        iHistoryMode = My.Application.Settings.GetSetting("history.mode", 0)
        sHistoryWebURL = My.Application.Settings.GetSetting("history.web.url", "")
        sHistoryWebUsername = My.Application.Settings.GetSetting("history.web.username", "")
        sHistoryWebPassword = My.Application.Settings.GetSetting("history.web.password", "")
        If sHistoryWebPassword <> "" Then
            sHistoryWebPassword = New cLocalSecurity("csurvey").DecryptData(sHistoryWebPassword)
        End If
        sHistoryFolder = My.Application.Settings.GetSetting("history.folder", "")
        iHistoryDailyCopies = My.Application.Settings.GetSetting("history.maxdailycopies", 4)
        iHistoryMaxCopies = My.Application.Settings.GetSetting("history.maxcopies", 20)
        bHistoryCreateOnSave = My.Application.Settings.GetSetting("history.createonsave", 0)
        bHistoryWebCreateOnSave = My.Application.Settings.GetSetting("history.web.createonsave", 0)

        bLinkedSurveysSelectOnAdd = My.Application.Settings.GetSetting("linkedsurveys.selectonadd", "0")
        bLinkedSurveysShowInCaveInfo = My.Application.Settings.GetSetting("linkedsurveys.showincaveinfo", "0")
        bLinkedSurveysRecursiveLoad = My.Application.Settings.GetSetting("linkedsurveys.recursiveload", "0")
        bLinkedSurveysRefreshOnLoadPrioritizeChildren = My.Application.Settings.GetSetting("linkedsurveys.recursiveload.prioritizechildren", "0")
        bLinkedSurveysRefreshOnLoad = My.Application.Settings.GetSetting("linkedsurveys.refreshonload", "0")


        Dim sQAT As String = My.Application.Settings.GetSetting("qat.items", "")
        If sQAT <> "" Then
            Dim oXML As XmlDocument = New XmlDocument
            Call oXML.LoadXml(sQAT)
            Call RibbonControl.Toolbar.ItemLinks.Clear()
            Dim oXMLRoot As XmlElement = oXML.DocumentElement
            For Each oXMLItem As XmlElement In oXMLRoot.ChildNodes
                Dim oItem As BarItem = RibbonControl.Items.FindById(oXMLItem.GetAttribute("i"))
                If oItem IsNot Nothing Then
                    Dim oItemLink As BarItemLink = RibbonControl.Toolbar.ItemLinks.Add(oItem)
                    oItemLink.BeginGroup = modXML.GetAttributeValue(oXMLItem, "bg", "0")
                    oItemLink.Visible = modXML.GetAttributeValue(oXMLItem, "v", "1")
                End If
            Next
            RibbonControl.ToolbarLocation = modXML.GetAttributeValue(oXMLRoot, "tl", "0")
            RibbonControl.Minimized = modXML.GetAttributeValue(oXMLRoot, "m", "0")
        End If


        'TODO: remove this settings...have to be managed by cEditDesignEnviroment...
        Call pSurveyCheckBezierLineType()

        If My.Application.Settings.GetSetting("wms.cache.enabled", 0) Then
            modWMSManager.MaxCacheSize = My.Application.Settings.GetSetting("wms.cache.maxsize", 0) * 1048576
        End If

        bCheckNewVersion = My.Application.Settings.GetSetting("debug.checknewversion", 0)

        Call oMostUsedItems.Clear()
        Dim oMUIFolder As cEnvironmentSettingsFolder = My.Application.Settings.GetFolder("mui")
        For Each sMuiItem As String In oMUIFolder.GetKeys
            Dim iBaseCount As Integer = oMUIFolder.GetSetting(sMuiItem)
            Dim oRealItem As DevExpress.XtraBars.BarItem = RibbonControl.Items.FindByName(sMuiItem)
            If oRealItem IsNot Nothing Then
                Call oMostUsedItems.Add(oRealItem, New cMostUsedItemCounters(iBaseCount))
            End If
        Next

        oDockConsole.RestoreSettings()

        'Call ResumeLayout()
    End Sub

    Private Sub pSurveyCheckBezierLineType(Optional Survey As cSurvey.cSurvey = Nothing)
        If Survey Is Nothing Then
            Dim iLineType As Items.cIItemLine.LineTypeEnum = My.Application.Settings.GetSetting("design.linetype", Items.cIItemLine.LineTypeEnum.Splines)
            If iLineType = cIItemLine.LineTypeEnum.Beziers Then
                If My.Application.Settings.GetSetting("design.warning.beziers", 0) = 0 Then
                    'If UIHelpers.Dialogs.Msgbox(modMain.GetLocalizedString("main.warning27"), MsgBoxStyle.YesNo Or MsgBoxStyle.Critical, modMain.GetLocalizedString("main.warningtitle")) = vbYes Then
                    iLineType = cIItemLine.LineTypeEnum.Splines
                    Call My.Application.Settings.SetSetting("design.linetype", iLineType.ToString("D"))
                    Call My.Application.Settings.SetSetting("design.warning.beziers", 1)
                    'End If
                End If
            End If
        Else
            Dim iLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", My.Application.Settings.GetSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
            If iLineType = cIItemLine.LineTypeEnum.Beziers Then
                If oSurvey.Properties.DesignProperties.GetValue("design.warning.beziers", 0) = 0 Then
                    'If UIHelpers.Dialogs.Msgbox(modMain.GetLocalizedString("main.warning28"), MsgBoxStyle.YesNo Or MsgBoxStyle.Critical, modMain.GetLocalizedString("main.warningtitle")) = vbYes Then
                    iLineType = cIItemLine.LineTypeEnum.Splines
                    Call oSurvey.Properties.DesignProperties.SetValue("LineType", iLineType)
                    Call oSurvey.Properties.DesignProperties.SetValue("design.warning.beziers", 1)
                    Call pPropDefaultPenStyle()
                    'End If
                End If
            End If
        End If
    End Sub

    Private sNewVersion As String = ""
    Private bCheckNewVersion As Boolean
    Private WithEvents tmrCheckNewVersion As Timer

    Private Sub tmrCheckNewVersion_Tick(sender As Object, e As System.EventArgs) Handles tmrCheckNewVersion.Tick
        Call tmrCheckNewVersion.Stop()
        Call tmrCheckNewVersion.Dispose()
        tmrCheckNewVersion = Nothing

        If bCheckNewVersion Then
            Call bwMain.RunWorkerAsync("pCheckNewVersion")
        Else
            Dim iAskToCheckNewVersion As Integer
            iAskToCheckNewVersion = My.Application.Settings.GetSetting("debug.asktochecknewversion", 0)
            iAskToCheckNewVersion += 1
            Call My.Application.Settings.SetSetting("debug.asktochecknewversion", iAskToCheckNewVersion)
            If iAskToCheckNewVersion < 3 Then
                If UIHelpers.Dialogs.Msgbox(String.Format(GetLocalizedString("main.warning22"), sNewVersion), MsgBoxStyle.Question Or MsgBoxStyle.YesNo, "Attenzione: ") = MsgBoxResult.Yes Then
                    My.Application.Settings.SetSetting("debug.checknewversion", 1)
                    Call pCheckNewVersion()
                End If
            End If
        End If
    End Sub

    Private Sub pSurveyCheckNewVersion()
        If Not pCheckNewVersion() Then
            Call UIHelpers.Dialogs.Msgbox(modMain.GetLocalizedString("main.warning26"), vbOKOnly Or vbInformation, modMain.GetLocalizedString("main.warningtitle"))
        End If
    End Sub

    Private Function pCheckNewVersion(Optional NightBuild As Boolean = False) As Boolean
        Try
            Call oMousePointer.Push(Cursors.AppStarting)

            Dim sCurrentVersion As String = ""
            Try
                Dim sURL As String
                If NightBuild Then
                    sURL = "http://www.csurvey.it/download/nightbuild/version.xml"
                Else
                    sURL = "http://www.csurvey.it/download/version.xml"
                End If
                Using oWeb As System.Net.WebClient = New System.Net.WebClient
                    Dim oXML As XmlDocument = New XmlDocument
                    Call oXML.LoadXml(oWeb.DownloadString(sURL))
                    sNewVersion = oXML.Item("csurvey").GetAttribute("version")
                    sCurrentVersion = modMain.GetPackageVersion
                End Using
            Catch ex As Exception
                Call pLogAdd(ex)
            End Try

            Call oMousePointer.Pop()

            If modMain.CompareVersion(sNewVersion, sCurrentVersion) Then
                'la versione online è piu recente...avviso che esiste un aggiornamento
                Using frmNU As frmNotifyUpdate = New frmNotifyUpdate(NightBuild)
                    frmNU.lblMessage.Text = String.Format(GetLocalizedString("main.warning21"), sNewVersion)
                    Call frmNU.ShowDialog(Me)
                End Using
            End If
            Return True
        Catch ex As Exception
            'for now no warning in this case
            Call pLogAdd(ex)
        End Try
        Return False
    End Function

    Private Sub pSettingsSave()
        Try
            Call My.Application.Settings.SetSetting("theme.name", DevExpress.LookAndFeel.UserLookAndFeel.Default.SkinName)
            Call My.Application.Settings.SetSetting("theme.palette", DevExpress.LookAndFeel.UserLookAndFeel.Default.ActiveSvgPaletteName)
            Dim iFieldDataViewMode As Integer
            If btnSegments.Checked Then
                iFieldDataViewMode = 0
            ElseIf btnTrigpoints.Checked Then
                iFieldDataViewMode = 1
            ElseIf btnSegmentsAndTrigPoints.Checked Then
                iFieldDataViewMode = 2
            End If
            Call My.Application.Settings.SetSetting("user.fielddataviewmode", iFieldDataViewMode)

            Call My.Application.Settings.SetSetting("design.quality", Integer.Parse(iDesignQuality))
            Call My.Application.Settings.SetSetting("design.rulers", If(bDrawRulers, 1, 0))
            Call My.Application.Settings.SetSetting("design.metricgrid", iDrawMetricGrid)

            Call My.Application.Settings.SetSetting("design.objectsbinding.expanded", If(oPropObjectsBindingContainer.Expanded, 1, 0))
            Call My.Application.Settings.SetSetting("design.segmentsbinding.expanded", If(oPropSegmentBindingContainer.Expanded, 1, 0))
            Call My.Application.Settings.SetSetting("design.trigpointdistances.expanded", If(oPropTrigpointsDistancesContainer.Expanded, 1, 0))

            Dim oXml As XmlDocument = New XmlDocument
            Dim oXmlRoot As XmlElement = oXml.CreateElement("is")
            For Each oItemLink As BarItemLink In RibbonControl.Toolbar.ItemLinks
                Dim oXmlItem As XmlElement = oXml.CreateElement("i")
                Call oXmlItem.SetAttribute("i", oItemLink.ItemId)
                If oItemLink.BeginGroup Then Call oXmlItem.SetAttribute("bg", "1")
                If Not oItemLink.Visible Then Call oXmlItem.SetAttribute("v", "0")
                Call oXmlRoot.AppendChild(oXmlItem)
            Next
            Call oXmlRoot.SetAttribute("tl", RibbonControl.ToolbarLocation.ToString("D"))
            If RibbonControl.Minimized Then Call oXmlRoot.SetAttribute("m", "1")
            Call oXml.AppendChild(oXmlRoot)
            Call My.Application.Settings.SetSetting("qat.items", oXml.OuterXml)

            'last used items are barely overwritten each time...merging with other instance is not strategic
            Call My.Application.Settings.SetSetting("lui", String.Join(",", oLastUsedItems.Select(Function(oBarItem) oBarItem.Name)))

            Call My.Application.Settings.SetSetting("snaptogrid", If(btnAlignToGrid.Checked, "1", "0"))
            Call My.Application.Settings.SetSetting("snaptogrid.size", modNumbers.NumberToString(btnAlignToGridSize.EditValue))

            Call My.Application.Settings.SetSetting("pens.smooth", modNumbers.NumberToString(btnPenSmootingFactor.EditValue))
            Call My.Application.Settings.SetSetting("pens.smooting", If(btnPenSmooting.Checked, "1", "0"))
            Call My.Application.Settings.SetSetting("tools.smooth", modNumbers.NumberToString(btnCurrentItemGenericReducePointFactor.EditValue))
            Call My.Application.Settings.SetSetting("user.editpointtopoint", If(bEditPointByPoint, 1, 0))

            Dim oMUIFolder As cEnvironmentSettingsFolder = My.Application.Settings.GetFolder("mui")
            For Each oMostUsedItem As KeyValuePair(Of BarItem, cMostUsedItemCounters) In oMostUsedItems
                Dim oBarItem As BarItem = oMostUsedItem.Key
                Dim iCurrentCount As Integer = oMostUsedItem.Value.Value - oMostUsedItem.Value.BaseValue
                Dim iLastCount As Integer = oMUIFolder.GetSetting(oBarItem.Name, 0)
                Call oMUIFolder.SetSetting(oBarItem.Name, iLastCount + iCurrentCount)
            Next

            Call My.Application.Settings.Save()

        Catch ex As Exception
        End Try
    End Sub

    Private Sub pWorkspacesSave()
        'update default workspace
        Call WorkspaceManager.CaptureWorkspace("default", True)
        'save all workspaces in the application user folder
        For Each oWorkspace As DevExpress.Utils.IWorkspace In WorkspaceManager.Workspaces
            If oWorkspace.Name.ToLower <> "_default" Then
                Call WorkspaceManager.SaveWorkspace(oWorkspace.Name, IO.Path.Combine(modMain.GetUserApplicationPath, oWorkspace.Name & ".cworkspace"), True)
            End If
        Next
    End Sub

    'Private Sub grdSegments_CellValidating(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellValidatingEventArgs)
    '    If bBeginEdit Then
    '        Try
    '            Dim oValue As Object = e.FormattedValue
    '            Select Case e.ColumnIndex
    '                Case 2
    '                    cboSegmentFrom.Text = oValue
    '                Case 3
    '                    cboSegmentTo.Text = oValue
    '                Case 4
    '                    txtSegmentDistance.Text = oValue
    '                Case 5
    '                    txtSegmentBearing.Text = oValue
    '                Case 6
    '                    txtSegmentInclination.Text = oValue
    '                Case 7
    '                    txtSegmentLeft.Text = oValue
    '                Case 8
    '                    txtSegmentRight.Text = oValue
    '                Case 9
    '                    txtSegmentUp.Text = oValue
    '                Case 10
    '                    txtSegmentDown.Text = oValue
    '                Case 11  'inverti
    '                    'chkSegmentInverted.Checked = oValue
    '                    cboSegmentDirection.SelectedIndex = If(oValue = CheckState.Checked, 1, If(oValue = CheckState.Unchecked, 0, 2))
    '                Case 12 'escludi
    '                    chkSegmentExclude.Checked = oValue
    '            End Select
    '            bBeginEdit = False
    '        Catch ex As Exception
    '            e.Cancel = True
    '        End Try
    '    End If
    'End Sub

    'Private Function pSegmentsAddNewRow() As cSegment
    '    Dim oCurrentCell As Point = grdSegments.CurrentCellAddress
    '    Dim oSelection As List(Of Point) = New List(Of Point)
    '    For Each ocell As DataGridViewCell In grdSegments.SelectedCells
    '        Call oSelection.Add(New Point(ocell.RowIndex, ocell.ColumnIndex))
    '    Next

    '    bDisableSegmentsChangeEvent = True
    '    Dim oSegment As cSegment = oSurvey.Segments.Append
    '    Dim oData(14) As Object
    '    With oSegment
    '        If cboMainCaveList.Enabled Then
    '            Call .SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
    '            Call .Save()
    '        End If
    '        If cboMainSessionList.Enabled Then
    '            Call .SetSession(If(IsNothing(btnMainSessionList.EditValue), "", btnMainSessionList.EditValue))
    '            Call .Save()
    '        End If

    '        oData(2) = .[From]
    '        oData(3) = .[To]

    '        oData(4) = Strings.Format(.Distance, "0.00")
    '        oData(5) = Strings.Format(.Bearing, "0.00")
    '        oData(6) = Strings.Format(.Inclination, "0.00")

    '        oData(7) = Strings.Format(.Left, "0.00")
    '        oData(8) = Strings.Format(.Right, "0.00")
    '        oData(9) = Strings.Format(.Up, "0.00")
    '        oData(10) = Strings.Format(.Down, "0.00")

    '        oData(11) = If(.Direction = cSurvey.cSurvey.DirectionEnum.Right, CheckState.Unchecked, If(.Direction = cSurvey.cSurvey.DirectionEnum.Left, CheckState.Checked, CheckState.Indeterminate))
    '        oData(12) = .Exclude
    '        If .Note = "" Then
    '            oData(13) = Nothing
    '        Else
    '            oData(13) = My.Resources.note
    '        End If
    '        If .Attachments.Count > 0 Then
    '            oData(14) = My.Resources.attach
    '        Else
    '            oData(14) = Nothing
    '        End If
    '    End With

    '    Call grdSegments.Rows.Add(oData)

    '    Call grdSegments.ClearSelection()
    '    For Each oCell As Point In oSelection
    '        grdSegments.Rows(oCell.X).Cells(oCell.Y).Selected = True
    '    Next
    '    grdSegments.CurrentCell = grdSegments.Rows(oCurrentCell.Y).Cells(oCurrentCell.X)
    '    bDisableSegmentsChangeEvent = False

    '    Return oSegment
    'End Function

    Private Sub picMap_DoubleClick(ByVal sender As Object, ByVal e As System.EventArgs) Handles picMap.DoubleClick
        If My.Computer.Keyboard.ShiftKeyDown Then
            If My.Computer.Keyboard.CtrlKeyDown Then
                Call pCurrentMarkedDesktopPointUnset()
            Else
                Call pCurrentMarkedDesktopPointSet(modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
                Dim oItemMarker As cItemMarker = New cItemMarker(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentMarkedDesktopPoint)
                Call pGetCurrentDesignTools.SelectItem(oItemMarker)
            End If
        Else
            If Not pToolsEnd() Then
                Call pObjectPropertyLoad()
                Call pObjectPropShow(True)
                If pGetCurrentDesignTools.IsInPointEdit AndAlso Not IsNothing(pGetCurrentDesignTools.CurrentItemPoint) Then
                    Call pGetCurrentDesignTools.SelectLastPoint(pGetCurrentDesignTools.CurrentItemPoint)
                End If
            End If
        End If
    End Sub

    Private Sub picMap_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseDown
        Call picMap.Focus()

        Dim iButton As MouseButtons = e.Button
        If My.Computer.Keyboard.CtrlKeyDown And Not My.Computer.Keyboard.AltKeyDown And Not My.Computer.Keyboard.ShiftKeyDown Then
            If iButton = MouseButtons.Left Then iButton = MouseButtons.Middle
        End If

        Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down Or (iButton And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle
        Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
        Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down

        iSnapToPoint = If(System.Windows.Input.Keyboard.IsKeyDown(Windows.Input.Key.A) OrElse btnSnapToPoint0.Down, 1, iSnapToPoint)
        If iSnapToPoint = 0 Then iSnapToPoint = If(System.Windows.Input.Keyboard.IsKeyDown(Windows.Input.Key.S) OrElse btnSnapToPoint1.Down, 2, iSnapToPoint)
        If iSnapToPoint = 0 Then iSnapToPoint = If(System.Windows.Input.Keyboard.IsKeyDown(Windows.Input.Key.D) OrElse btnSnapToPoint2.Down, 3, iSnapToPoint)
        Debug.Print("snaptopoint:" & iSnapToPoint)

        Call pMapSetCursor(bCtrl, bShift, bAlt, iButton)

        bMousePressed = True

        Dim oPoint As PointF = e.Location
        Dim oMousePoint As PointF = modPaint.FromPaintPoint(oPoint, sPaintZoom, oPaintTranslation)

        'Dim bUndo As Boolean = False
        Dim bInvalidate As Boolean = False
        If bShift AndAlso Not pGetCurrentDesignTools.IsInEdit Then
            If bCtrl Then
                iMultiSelEnabled = MultiSelTypeEnum.Zoom
                oStartMultiselPosition = oPoint
                oEndMultiselPosition = oPoint
            Else
                'sto facendo una selezione multipla...
                If bAlt Then
                    iMultiSelEnabled = MultiSelTypeEnum.MultiLayer
                Else
                    iMultiSelEnabled = MultiSelTypeEnum.SingleLayer
                End If
                oStartMultiselPosition = oPoint
                oEndMultiselPosition = oPoint
            End If
            bInvalidate = True
        Else
            If bAlt And Not bCtrl Then
                If (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                    With oCurrentDesign
                        'controllo se c'è un marker e se sono li vicino...
                        If pGetCurrentDesignTools.CurrentMarkedDesktopPoint.IsSet AndAlso modPaint.DistancePointToPoint(pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Point, oMousePoint) < 10 / sPaintZoom Then
                            Dim oItemMarker As cItemMarker = New cItemMarker(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentMarkedDesktopPoint)
                            Call pGetCurrentDesignTools.SelectItem(oItemMarker)
                        Else
                            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                                Dim oItem As cPlot.cPlotHitTestResult = oSurvey.Plan.Plot.HitTest(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, oMousePoint)
                                With oItem
                                    If Not .Segment Is Nothing Then
                                        Call pSegmentSelect(.Segment, True, False)
                                        Call pSegmentItemSelect()
                                    ElseIf Not .TrigPoint Is Nothing Then
                                        Call pTrigPointSelect(.TrigPoint, True, False)
                                        Call pTrigpointItemSelect()
                                    End If
                                End With
                            Else
                                Dim oItem As cPlot.cPlotHitTestResult = oSurvey.Profile.Plot.HitTest(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, oMousePoint)
                                With oItem
                                    If Not .Segment Is Nothing Then
                                        Call pSegmentSelect(.Segment, True, False)
                                        Call pSegmentItemSelect()
                                    ElseIf Not .TrigPoint Is Nothing Then
                                        Call pTrigPointSelect(.TrigPoint, True, False)
                                        Call pTrigpointItemSelect()
                                    End If
                                End With
                            End If
                        End If
                    End With
                    bInvalidate = True
                End If
            Else
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    iMultiSelEnabled = MultiSelTypeEnum.None
                    bInvalidate = True
                End If
                If (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                    With oCurrentDesign
                        If pGetCurrentDesignTools.IsInEdit Then
                            'ho un tool attivo...imposto il punto
                            With pGetCurrentDesignTools()
                                Call .StartEditItem()
                                If (Not bEditPointByPoint) Or (bEditPointByPoint And .CurrentItem.Points.Count = 0) Then
                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                    If iSnapToPoint > 0 Then
                                        Call modPaint.PointSnap(oMousePoint, pGetCurrentDesignTools, iSnapToPoint, oSnapToPointPointTojoin, sPaintZoom, oPaintTranslation)
                                    End If
                                    Select Case .CurrentItem.Type
                                        Case cIItem.cItemTypeEnum.CrossSection
                                            Dim oItem As cItemCrossSection = .CurrentItem
                                            If oItem.Points.Count < oItem.MaxPointsCount Then
                                                Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                                Call .EndAndSelectItem()
                                                Call oItem.Calculate(False)
                                            Else
                                                Call oItem.Points.Last.MoveTo(oMousePoint)
                                                Call oItem.Calculate(False)
                                            End If

                                        Case cIItem.cItemTypeEnum.FreeHandLine, cIItem.cItemTypeEnum.FreeHandArea, cIItem.cItemTypeEnum.InvertedFreeHandArea
                                            Dim oItem As cItem = .CurrentItem
                                            Call oItem.Points.StartSequence()
                                            Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                        Case cIItem.cItemTypeEnum.Quota
                                            Dim oItem As cItem = .CurrentItem
                                            If oItem.Points.Count < oItem.MaxPointsCount Then
                                                Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                                Dim oNewPoint As PointF = oMousePoint
                                                Do While oItem.Points.Count < oItem.MaxPointsCount
                                                    oNewPoint = New PointF(oNewPoint.X + 0.1F, oNewPoint.Y + 0.1F)
                                                    Call oItem.Points.AddFromPaintPoint(oNewPoint)
                                                Loop
                                            Else
                                                If oItem.MaxPointsCount = 2 Then
                                                    If oItem.Points.First.Point <> oMousePoint Then
                                                        Call oItem.Points.Last.MoveTo(oMousePoint)
                                                    End If
                                                Else
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                End If
                                            End If
                                        Case cIItem.cItemTypeEnum.Text, cIItem.cItemTypeEnum.Sign, cIItem.cItemTypeEnum.Clipart, cIItem.cItemTypeEnum.Image, cIItem.cItemTypeEnum.Attachment, cIItem.cItemTypeEnum.Legend, cIItem.cItemTypeEnum.Scale, cIItem.cItemTypeEnum.Compass, cIItem.cItemTypeEnum.InformationBoxText
                                            Dim oItem As cItem = .CurrentItem
                                            If oItem.Points.Count < oItem.MaxPointsCount Then
                                                Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                            Else
                                                Call oItem.Points.Last.MoveTo(oMousePoint)
                                            End If
                                    End Select
                                    .LastPoint = oPoint
                                    bInvalidate = True
                                    'bUndo = True
                                End If
                            End With
                        ElseIf pGetCurrentDesignTools.IsInCombine Then
                            Dim oCombineItem As cItem = .HitTest(oCurrentOptions, pGetCurrentDesignTools, oMousePoint, sWide / sPaintZoom, True).FirstOrDefault()
                            If oCombineItem Is Nothing Then
                                Call pGetCurrentDesignTools.EndAndSelectItem()
                                picMap.Cursor = Cursors.Default
                            Else
                                pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo53"), {pGetCurrentDesignTools.CurrentItem, oCombineItem})
                                Call oCombineItem.Combine(pGetCurrentDesignTools.CurrentItem)
                                Call pGetCurrentDesignTools.EndItem()
                                Call pGetCurrentDesignTools.SelectItem(oCombineItem)
                                Call oCombineItem.Points.ReorderSequences()
                                Call pGetCurrentDesignTools.CommitUndoSnapshot()
                            End If
                            bInvalidate = True
                        Else
                            'altrimento seleziono un oggetto (a meno che non ci sia CTRL premuto, nel qual caso...faccio solo il pan)
                            Dim oSelectedItem As cItem = Nothing
                            Dim bLocked As Boolean = False

                            If Not bCtrl OrElse (bCtrl AndAlso bAlt) Then
                                'verifico se ho cliccato su un anchorpoint dell'oggetto selezionato (se esiste...)
                                Dim bNotClickedOnAnchor As Boolean
                                Try
                                    Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                    If oHitTestResult.ObjectAnchorRectangleType = AnchorRectangleTypeEnum.None Then
                                        bNotClickedOnAnchor = True
                                    Else
                                        oSelectedItem = pGetCurrentDesignTools.CurrentItem
                                    End If
                                Catch
                                    bNotClickedOnAnchor = True
                                End Try

                                'nel caso non abbia cliccato un anchorpoint...allora seleziono un eventuale oggetto
                                If bNotClickedOnAnchor Then
                                    oSelectedItem = pHitTest(oCurrentDesign, oMousePoint)
                                End If

                                If Not oSelectedItem Is Nothing Then
                                    bLocked = oSelectedItem.Locked Or Not oSelectedItem.CanBeMoved
                                End If
                            End If

                            If oSelectedItem Is Nothing Or (bCtrl And Not bAlt) Then
                                Call pGetCurrentDesignTools.EndItem()
                                bInvalidate = True
                                oStartPaintDrawPosition = New PointF(-oPaintTranslation.X + e.X, -oPaintTranslation.Y + e.Y)
                            Else
                                If pGetCurrentDesignTools.CurrentItem Is oSelectedItem Then
                                    'se ho cliccato su un area sensibile..inizio una modifica...
                                    With pGetCurrentDesignTools()
                                        .LastPoint = oPoint
                                        Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                        If Not bLocked Then
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.AnchorRectangle
                                                    .LastAnchor = oHitTestResult.ObjectAnchorRectangleType
                                                    Select Case oHitTestResult.ObjectAnchorRectangleType
                                                        Case AnchorRectangleTypeEnum.TopLeftCorner
                                                            picMap.Cursor = Cursors.SizeNWSE
                                                        Case AnchorRectangleTypeEnum.TopRightCorner
                                                            picMap.Cursor = Cursors.SizeNESW
                                                        Case AnchorRectangleTypeEnum.BottomLeftCorner
                                                            picMap.Cursor = Cursors.SizeNESW
                                                        Case AnchorRectangleTypeEnum.BottomRightCorner
                                                            picMap.Cursor = Cursors.SizeNWSE
                                                        Case AnchorRectangleTypeEnum.Rotator
                                                            picMap.Cursor = Cursors.Cross
                                                            .LastCenterPoint = .CurrentItem.GetCenterPoint()
                                                    End Select
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    .LastAnchor = AnchorRectangleTypeEnum.GenericPoint
                                                    picMap.Cursor = Cursors.Cross
                                                    Call .EditPoint(oHitTestResult.Object)
                                                    bInvalidate = True
                                                Case cHitTestResult.ObjectTypeEnum.None
                                                    If .IsInPointEdit Then
                                                        If pGetCurrentDesignTools.CurrentItem.HaveEditablePoints And pGetCurrentDesignTools.CurrentItem.HaveLineType Then
                                                            picMap.Cursor = Cursors.AppStarting
                                                            Dim oNearestPaintPoint As cPoint
                                                            Dim oRelativePoint As cPoint
                                                            Dim oSequence As cSequence = pGetCurrentDesignTools.CurrentItem.Points.GetSequence(pGetCurrentDesignTools.CurrentItem.Points.GetNearestPoint(oMousePoint))
                                                            If oSequence.GetNearestPaintPoint(oMousePoint, DirectCast(pGetCurrentDesignTools.CurrentItem, cIItemLine).LineType, False, 0.1 * sPaintZoom, oNearestPaintPoint, oRelativePoint) Then
                                                                If oNearestPaintPoint Is oRelativePoint Then
                                                                    Call .EditPoint(oNearestPaintPoint)
                                                                Else
                                                                    'If bShift Then
                                                                    '    pGetCurrentDesignTools.SelectPoint(oNearestPaintPoint, True, oRelativePoint)
                                                                    '    .LastAnchor = AnchorRectangleTypeEnum.NewPoint
                                                                    'End If
                                                                End If
                                                                picMap.Cursor = Cursors.Default
                                                                bInvalidate = True
                                                            Else
                                                                If Not bUseOnlyAnchorToMove Then
                                                                    .LastAnchor = AnchorRectangleTypeEnum.TopLeftCorner
                                                                End If
                                                                picMap.Cursor = Cursors.Default
                                                                Call .SelectItem(oSelectedItem)
                                                                If Not .IsInPointEdit Then
                                                                    Call .EndPoint()
                                                                End If
                                                            End If
                                                        End If
                                                    Else
                                                        If Not bUseOnlyAnchorToMove Then
                                                            .LastAnchor = AnchorRectangleTypeEnum.TopLeftCorner
                                                        End If
                                                        picMap.Cursor = Cursors.Default
                                                        Call .SelectItem(oSelectedItem)
                                                        If Not .IsInPointEdit Then
                                                            Call .EndPoint()
                                                        End If
                                                    End If
                                                    bInvalidate = True
                                                Case Else
                                                    picMap.Cursor = Cursors.Default
                                                    Call .EndPoint()
                                                    bInvalidate = True
                                            End Select
                                        Else
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    .LastAnchor = AnchorRectangleTypeEnum.GenericPoint
                                                    picMap.Cursor = Cursors.Cross
                                                    Call .EditPoint(oHitTestResult.Object)
                                                    bInvalidate = True
                                                Case cHitTestResult.ObjectTypeEnum.None
                                                    If .IsInPointEdit Then
                                                        If pGetCurrentDesignTools.CurrentItem.HaveEditablePoints And pGetCurrentDesignTools.CurrentItem.HaveLineType Then
                                                            picMap.Cursor = Cursors.AppStarting
                                                            Dim oNearestPaintPoint As cPoint
                                                            Dim oRelativePoint As cPoint
                                                            Dim oSequence As cSequence = pGetCurrentDesignTools.CurrentItem.Points.GetSequence(pGetCurrentDesignTools.CurrentItem.Points.GetNearestPoint(oMousePoint))
                                                            If oSequence.GetNearestPaintPoint(oMousePoint, DirectCast(pGetCurrentDesignTools.CurrentItem, cIItemLine).LineType, False, 0.1 * sPaintZoom, oNearestPaintPoint, oRelativePoint) Then
                                                                If oNearestPaintPoint Is oRelativePoint Then
                                                                    Call .EditPoint(oNearestPaintPoint)
                                                                Else
                                                                    'If bShift Then
                                                                    '    pGetCurrentDesignTools.SelectPoint(oNearestPaintPoint, True, oRelativePoint)
                                                                    '    .LastAnchor = AnchorRectangleTypeEnum.NewPoint
                                                                    'End If
                                                                End If
                                                                picMap.Cursor = Cursors.Default
                                                                bInvalidate = True
                                                            Else
                                                                .LastAnchor = AnchorRectangleTypeEnum.None
                                                                picMap.Cursor = Cursors.Default
                                                                Call .SelectItem(oSelectedItem)
                                                                If Not .IsInPointEdit Then
                                                                    Call .EndPoint()
                                                                End If
                                                            End If
                                                        End If
                                                    Else
                                                        .LastAnchor = AnchorRectangleTypeEnum.None
                                                        picMap.Cursor = Cursors.Default
                                                        Call .SelectItem(oSelectedItem)
                                                        If Not .IsInPointEdit Then
                                                            Call .EndPoint()
                                                        End If
                                                    End If
                                                    bInvalidate = True
                                                Case Else
                                                    picMap.Cursor = Cursors.Default
                                                    Call .EndPoint()
                                                    bInvalidate = True
                                            End Select
                                        End If
                                    End With
                                    'bUndo = True
                                Else
                                    'seleziono l'oggetto
                                    If bCtrl AndAlso bAlt AndAlso Not IsNothing(oSelectedItem) Then
                                        If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemItems Then
                                            Dim oNewItem As cItemItems = DirectCast(pGetCurrentDesignTools.CurrentItem, cItemItems)
                                            If oNewItem.Contains(oSelectedItem) Then
                                                Call oNewItem.Remove(oSelectedItem)
                                                If oNewItem.Count = 0 Then
                                                    Call pGetCurrentDesignTools.SelectItem(Nothing)
                                                End If
                                            Else
                                                Call oNewItem.Add(oSelectedItem)
                                            End If
                                        Else
                                            If IsNothing(pGetCurrentDesignTools.CurrentItem) Then
                                                Call pGetCurrentDesignTools.SelectItem(oSelectedItem)
                                            Else
                                                Dim oNewItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                                                Call oNewItem.Add(pGetCurrentDesignTools.CurrentItem)
                                                Call oNewItem.Add(oSelectedItem)
                                                Call pGetCurrentDesignTools.SelectItem(oNewItem)
                                            End If
                                        End If
                                    Else
                                        Call pGetCurrentDesignTools.SelectItem(oSelectedItem)
                                    End If
                                    If bLocked Then
                                        oStartPaintDrawPosition = New PointF(-oPaintTranslation.X + e.X, -oPaintTranslation.Y + e.Y)
                                    End If
                                    bInvalidate = True
                                End If
                            End If
                        End If
                    End With
                ElseIf (iButton And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                    With oCurrentDesign
                        If pGetCurrentDesignTools.IsInEdit Then
                            Call pGetCurrentDesignTools.EndAndSelectItem()
                            bInvalidate = True
                        Else
                            With pGetCurrentDesignTools()
                                .LastPoint = oPoint
                                Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                Select Case oHitTestResult.ObjectType
                                    Case cHitTestResult.ObjectTypeEnum.AnchorRectangle
                                        .LastAnchor = oHitTestResult.ObjectAnchorRectangleType
                                        Select Case oHitTestResult.ObjectAnchorRectangleType
                                            Case AnchorRectangleTypeEnum.TopLeftCorner
                                                picMap.Cursor = Cursors.SizeNWSE
                                            Case AnchorRectangleTypeEnum.TopRightCorner
                                                picMap.Cursor = Cursors.SizeNESW
                                            Case AnchorRectangleTypeEnum.BottomLeftCorner
                                                picMap.Cursor = Cursors.SizeNESW
                                            Case AnchorRectangleTypeEnum.BottomRightCorner
                                                picMap.Cursor = Cursors.SizeNWSE
                                        End Select
                                    Case cHitTestResult.ObjectTypeEnum.Point
                                        .LastAnchor = oHitTestResult.ObjectAnchorRectangleType
                                        picMap.Cursor = Cursors.Cross
                                        Call .EditPoint(oHitTestResult.Object)
                                        bInvalidate = True
                                    Case Else
                                        picMap.Cursor = Cursors.Default
                                End Select
                            End With
                        End If
                    End With
                ElseIf (iButton And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle Then
                    With oCurrentDesign
                        If bCtrl Then
                            bInvalidate = True
                            oStartPaintDrawPosition = New PointF(-oPaintTranslation.X + e.X, -oPaintTranslation.Y + e.Y)
                        End If
                    End With
                End If
            End If
        End If
        'If bUndo And Not pGetCurrentDesignTools.IsNewItem Then
        '    Call pGetCurrentDesignTools.TakeUndoSnapshot()
        'End If
        If bInvalidate Then
            Call pMapInvalidate()
        End If
    End Sub

    Private Function pHitTest(CurrentDesign As cDesign, Point As PointF) As cItem
        Dim oSelectedItem As cItem
        If iAdvancedSelectionMode > 0 Then
            Dim oHitTestResults As List(Of cItem) = CurrentDesign.HitTest(oCurrentOptions, pGetCurrentDesignTools, Point, sWide / sPaintZoom, False)
            For Each oHitTestResult As cItem In oHitTestResults
                If TypeOf oHitTestResult Is cItemImage OrElse TypeOf oHitTestResult Is cItemSketch OrElse TypeOf oHitTestResult Is cItemText Then
                    Return oHitTestResult
                    Exit For
                Else
                    Using oGraphics As Graphics = picMap.CreateGraphics
                        If oHitTestResult.Caches.Item(oCurrentOptions).Hittest(oGraphics, Point, sPaintZoom, sAdvancedSelectionPrecision, sAdvancedSelectionWide) Then
                            oSelectedItem = oHitTestResult
                            Exit For
                        End If
                    End Using
                End If
            Next
            If iAdvancedSelectionMode > 1 AndAlso IsNothing(oSelectedItem) Then
                oSelectedItem = oHitTestResults.FirstOrDefault()
            End If
        Else
            oSelectedItem = CurrentDesign.HitTest(oCurrentOptions, pGetCurrentDesignTools, Point, sWide / sPaintZoom, True).FirstOrDefault()
        End If
        Return oSelectedItem
    End Function

    Private Sub pMapSetCursor(ByVal Ctrl As Boolean, ByVal Shift As Boolean, ByVal Alt As Boolean, ByVal Button As MouseButtons)
        If Ctrl And Not Alt And Not Shift Then
            If (Button And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Or (Button And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle Then
                picMap.Cursor = oClosedHandCursor
            Else
                picMap.Cursor = oOpenHandCursor
            End If
        Else
            If Alt And Not Shift Then
                picMap.Cursor = Cursors.Hand
            Else
                If Ctrl And Alt Then
                    picMap.Cursor = Cursors.Help
                Else
                    If Ctrl And Shift Then
                        picMap.Cursor = Cursors.Cross
                    Else
                        If pGetCurrentDesignTools.IsInEdit Then
                            picMap.Cursor = Cursors.Cross
                        Else
                            picMap.Cursor = Cursors.Default
                        End If
                    End If
                End If
            End If
        End If
    End Sub

    Private Function pDefaultFolderSetup() As Boolean
        sDefaultFolder = IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "cSurvey")
        Try
            If My.Computer.FileSystem.DirectoryExists(sDefaultFolder) Then
                Return True
            Else
                Call My.Computer.FileSystem.CreateDirectory(sDefaultFolder)
                Return True
            End If
        Catch ex As Exception
            Return False
        End Try
    End Function

    Private oRecents As List(Of String) = New List(Of String)

    Private oTemplates As UIHelpers.cTemplatesBindingList

    Private Sub picMap_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseMove
        Dim iButton As MouseButtons = e.Button
        If My.Computer.Keyboard.CtrlKeyDown And Not My.Computer.Keyboard.AltKeyDown And Not My.Computer.Keyboard.ShiftKeyDown Then
            If iButton = MouseButtons.Left Then iButton = MouseButtons.Middle
        End If

        Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down Or (iButton And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle
        Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
        Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down

        If pGetCurrentDesignTools.IsInCombine Then
            picMap.Cursor = Cursors.Help
        Else
            Call pMapSetCursor(bCtrl, bShift, bAlt, iButton)
        End If

        If iButton <> Windows.Forms.MouseButtons.None Then
            bMousePressed = True
        End If

        Dim oPoint As PointF = e.Location
        Dim oMousePoint As PointF = modPaint.FromPaintPoint(oPoint, sPaintZoom, oPaintTranslation)

        pnlStatusDesignInfo.Caption = "x: " & Strings.Format(oMousePoint.X, "0.00") & " m - y: " & Strings.Format(-1 * oMousePoint.Y, "0.00") & " m"

        Dim bInvalidate As Boolean = False
        If iMultiSelEnabled <> MultiSelTypeEnum.None And bShift And (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
            If bCtrl Then
                iMultiSelEnabled = MultiSelTypeEnum.Zoom
                oEndMultiselPosition = oPoint
            Else
                If bAlt Then
                    iMultiSelEnabled = MultiSelTypeEnum.MultiLayer
                Else
                    iMultiSelEnabled = MultiSelTypeEnum.SingleLayer
                End If
                oEndMultiselPosition = oPoint
            End If
            bInvalidate = True
        Else
            If bAlt Then
            Else
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    iMultiSelEnabled = MultiSelTypeEnum.None
                    bInvalidate = True
                End If
                With oCurrentDesign
                    If pGetCurrentDesignTools.IsInEdit Then
                        If (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left OrElse bEditPointByPoint Then
                            With pGetCurrentDesignTools()
                                If .Started Then
                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                    If oMousePoint <> oLastPoint Then
                                        Select Case .CurrentItem.Type
                                            Case cIItem.cItemTypeEnum.CrossSection
                                                Dim oItem As cItemCrossSection = .CurrentItem
                                                If oItem.Points.Count < oItem.MaxPointsCount Then
                                                    Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                                Else
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                End If

                                            Case cIItem.cItemTypeEnum.FreeHandLine, cIItem.cItemTypeEnum.FreeHandArea, cIItem.cItemTypeEnum.InvertedFreeHandArea
                                                Dim oItem As cItem = .CurrentItem
                                                If bEditPointByPoint Then
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                Else
                                                    Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                                End If

                                            Case cIItem.cItemTypeEnum.Text, cIItem.cItemTypeEnum.Sign, cIItem.cItemTypeEnum.Clipart, cIItem.cItemTypeEnum.Image, cIItem.cItemTypeEnum.Attachment, cIItem.cItemTypeEnum.Quota, cIItem.cItemTypeEnum.Legend, cIItem.cItemTypeEnum.Scale, cIItem.cItemTypeEnum.Compass, cIItem.cItemTypeEnum.InformationBoxText
                                                Dim oItem As cItem = .CurrentItem
                                                If oItem.Points.Count < oItem.MaxPointsCount Then
                                                    Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                                    'If oItem.Points.Count >= oItem.MaxPointsCount Then Call .EndAndSelectItem()
                                                Else
                                                    If oItem.Points.Count = oItem.MaxPointsCount Then
                                                        If oItem.Points.First.Point <> oMousePoint Then
                                                            Call oItem.Points.Last.MoveTo(oMousePoint)
                                                        End If
                                                    End If
                                                End If
                                        End Select
                                        .LastPoint = oPoint
                                        bInvalidate = True
                                    End If
                                End If
                            End With
                        ElseIf ((iButton And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle) Then
                            Dim oOldPaintTranslation As PointF = oPaintTranslation
                            oPaintTranslation = New PointF(e.X - oStartPaintDrawPosition.X, e.Y - oStartPaintDrawPosition.Y)
                            If oOldPaintTranslation <> oPaintTranslation Then
                                If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()
                                bInvalidate = True
                            End If
                        End If
                    Else
                        With pGetCurrentDesignTools()
                            'l'oggetto è selezionato
                            If Not bCtrl Then
                                Dim bLocked As Boolean = False
                                If Not .CurrentItem Is Nothing Then
                                    bLocked = .CurrentItem.Locked Or Not .CurrentItem.CanBeMoved
                                End If
                                If Not .CurrentItem Is Nothing Then
                                    If (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                                        If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                        If bLocked Then
                                            Select Case .LastAnchor
                                                Case AnchorRectangleTypeEnum.GenericPoint
                                                    Call .CurrentItemPoint.MoveTo(oMousePoint)
                                                    Call .RefreshTools()
                                            End Select
                                        Else
                                            If .LastAnchor <> AnchorRectangleTypeEnum.None Then
                                                Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo2"))
                                            End If
                                            Select Case .LastAnchor
                                                Case AnchorRectangleTypeEnum.GenericPoint
                                                    If Not .CurrentItemPoint Is Nothing Then
                                                        Call .CurrentItemPoint.MoveTo(oMousePoint)
                                                        Call .RefreshTools()
                                                    End If
                                                Case AnchorRectangleTypeEnum.TopLeftCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Call .CurrentItem.MoveBy(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.TopRightCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width + oSize.Width
                                                    oSize.Height = oOldSize.Height - oSize.Height
                                                    Dim sDiffY As Single = oOldSize.Height - oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(0, sDiffY)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.BottomLeftCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width - oSize.Width
                                                    oSize.Height = oOldSize.Height + oSize.Height
                                                    Dim sDiffX As Single = oOldSize.Width - oSize.Width
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(sDiffX, 0)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.BottomRightCorner
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width + oSize.Width
                                                    oSize.Height = oOldSize.Height + oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.TopMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width
                                                    oSize.Height = oOldSize.Height - oSize.Height
                                                    Dim sDiffY As Single = oOldSize.Height - oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(0, sDiffY)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.RightMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width + oSize.Width
                                                    oSize.Height = oOldSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.LeftMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width - oSize.Width
                                                    oSize.Height = oOldSize.Height
                                                    Dim sDiffX As Single = oOldSize.Width - oSize.Width
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .CurrentItem.MoveBy(sDiffX, 0)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.BottomMiddle
                                                    Dim oLastPoint As PointF = modPaint.FromPaintPoint(.LastPoint, sPaintZoom, oPaintTranslation)
                                                    If btnAlignToGrid.Checked Then modPaint.PointToGrid(oLastPoint, btnAlignToGridSize.EditValue)
                                                    Dim oSize As SizeF = New SizeF(oMousePoint.X - oLastPoint.X, oMousePoint.Y - oLastPoint.Y) ' modPaint.FromPaintSize(oPoint.X - .LastPoint.X, oPoint.Y - .LastPoint.Y, sPaintZoom, oPaintTranslation)
                                                    Dim oOldSize As SizeF = .CurrentItem.Size
                                                    oSize.Width = oOldSize.Width
                                                    oSize.Height = oOldSize.Height + oSize.Height
                                                    Call .CurrentItem.ResizeTo(oSize)
                                                    Call .RefreshTools()
                                                Case AnchorRectangleTypeEnum.Rotator
                                                    Dim sAngle As Single = modPaint.GetBearing(.LastCenterPoint, oMousePoint)
                                                    Call .CurrentItem.RotateAt(.LastCenterPoint, sAngle - .LastAngle)
                                                    Call pStatusSet(String.Format(GetLocalizedString("main.textpart51"), Strings.Format(sAngle, "0.00")) & "°")
                                                    .LastAngle = sAngle
                                            End Select
                                        End If
                                        If .LastAnchor <> AnchorRectangleTypeEnum.None Then
                                            If oSurvey.Properties.DesignBindingMode = cSurvey.cSurvey.DesignBindingModeEnum.Automatic Then
                                                Call .CurrentItem.BindSegments()
                                            End If

                                            If .CurrentItemPoint Is Nothing Then
                                                Call pPropertyItemBounds()
                                            Else
                                                Call pPropertyItemPointBounds()
                                            End If
                                            Call pFloatingToolbarUpdate()

                                            bInvalidate = True
                                        End If
                                        .LastPoint = oPoint
                                    Else
                                        Dim oHitTestResult As cHitTestResult = modPaint.ObjectHitTest(oCurrentOptions, oMousePoint, pGetCurrentDesignTools, sPaintZoom)
                                        If Not bLocked Then
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    picMap.Cursor = Cursors.Cross
                                                Case cHitTestResult.ObjectTypeEnum.AnchorRectangle
                                                    Select Case oHitTestResult.ObjectAnchorRectangleType
                                                        Case AnchorRectangleTypeEnum.Rotator
                                                            picMap.Cursor = Cursors.Cross
                                                        Case AnchorRectangleTypeEnum.TopLeftCorner
                                                            picMap.Cursor = Cursors.SizeAll
                                                        Case AnchorRectangleTypeEnum.BottomRightCorner
                                                            picMap.Cursor = Cursors.SizeNWSE
                                                        Case AnchorRectangleTypeEnum.TopRightCorner, AnchorRectangleTypeEnum.BottomLeftCorner
                                                            picMap.Cursor = Cursors.SizeNESW
                                                        Case AnchorRectangleTypeEnum.TopMiddle, AnchorRectangleTypeEnum.BottomMiddle
                                                            picMap.Cursor = Cursors.SizeNS
                                                        Case AnchorRectangleTypeEnum.RightMiddle, AnchorRectangleTypeEnum.LeftMiddle
                                                            picMap.Cursor = Cursors.SizeWE
                                                    End Select
                                            End Select
                                        Else
                                            Select Case oHitTestResult.ObjectType
                                                Case cHitTestResult.ObjectTypeEnum.Point
                                                    picMap.Cursor = Cursors.Cross
                                            End Select
                                        End If
                                    End If
                                End If
                            End If
                            If (((iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left) And .CurrentItem Is Nothing) Or ((iButton And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle) Then
                                Dim oOldPaintTranslation As PointF = oPaintTranslation
                                oPaintTranslation = New PointF(e.X - oStartPaintDrawPosition.X, e.Y - oStartPaintDrawPosition.Y)
                                If oOldPaintTranslation <> oPaintTranslation Then
                                    Call pFloatingToolbarUpdate()
                                    bInvalidate = True
                                End If
                            End If
                        End With
                    End If
                End With
            End If
        End If
        If bInvalidate Then
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub picMap_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseUp
        Dim iButton As MouseButtons = e.Button
        If My.Computer.Keyboard.CtrlKeyDown And Not My.Computer.Keyboard.AltKeyDown And Not My.Computer.Keyboard.ShiftKeyDown Then
            If iButton = MouseButtons.Left Then iButton = MouseButtons.Middle
        End If

        Dim bCtrl As Boolean = My.Computer.Keyboard.CtrlKeyDown Or btnScrollMode.Down Or (iButton And Windows.Forms.MouseButtons.Middle) = Windows.Forms.MouseButtons.Middle
        Dim bShift As Boolean = My.Computer.Keyboard.ShiftKeyDown Or btnMultiSelMode1.Down Or btnMultiSelMode2.Down
        Dim bAlt As Boolean = My.Computer.Keyboard.AltKeyDown Or btnAltMode.Down Or btnMultiSelMode2.Down

        Call pMapSetCursor(bCtrl, bShift, bAlt, iButton)

        bMousePressed = False

        Dim oPoint As PointF = e.Location
        Dim oMousePoint As PointF = modPaint.FromPaintPoint(oPoint, sPaintZoom, oPaintTranslation)

        Dim bInvalidate As Boolean = False
        If iMultiSelEnabled <> MultiSelTypeEnum.None And bShift And (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
            If bCtrl Then
                'zoom al rettangolo...
                Dim oZoomRect As RectangleF = pGetMultiSelRect()
                oZoomRect = modPaint.FromPaintRectangle(oZoomRect, sPaintZoom, oPaintTranslation)
                Call pMapCenterAndFit(oZoomRect)
                iMultiSelEnabled = MultiSelTypeEnum.None
            Else
                If bAlt Then
                    iMultiSelEnabled = MultiSelTypeEnum.MultiLayer
                Else
                    iMultiSelEnabled = MultiSelTypeEnum.SingleLayer
                End If
                Dim oMultiSelRect As RectangleF = pGetMultiSelRect()
                Dim oItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Select Case iMultiSelEnabled
                    Case MultiSelTypeEnum.SingleLayer
                        Call oItems.AddRange(pGetCurrentDesignTools.CurrentLayer.GetItemsByRectangle(modPaint.FromPaintRectangle(oMultiSelRect, sPaintZoom, oPaintTranslation), oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch))
                    Case MultiSelTypeEnum.MultiLayer
                        'con alt premuto seleziono oggetti su piu livelli...
                        Call oItems.AddRange(oCurrentDesign.GetItemsByRectangle(modPaint.FromPaintRectangle(oMultiSelRect, sPaintZoom, oPaintTranslation), oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch))
                End Select
                iMultiSelEnabled = MultiSelTypeEnum.None
                If oItems.Count > 0 Then
                    If oItems.Count = 1 Then
                        Call pGetCurrentDesignTools.SelectItem(oItems.Item(0))
                    Else
                        Call pGetCurrentDesignTools.SelectItem(oItems)
                    End If
                End If
            End If
            bInvalidate = True
        Else
            If bAlt Then
                'If (iButton And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                '    Call mnuDesignSegment.Show(picMap, e.Location)
                'End If
            Else
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    iMultiSelEnabled = MultiSelTypeEnum.None
                    bInvalidate = True
                End If

                'Dim bUndoSnapshot As Boolean = False
                With oCurrentDesign
                    If pGetCurrentDesignTools.IsInEdit Then
                        If (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                            With pGetCurrentDesignTools()
                                If btnAlignToGrid.Checked Then modPaint.PointToGrid(oMousePoint, btnAlignToGridSize.EditValue)
                                'If bSnapToPoint Then modPaint.PointSnap(oMousePoint, oCurrentDesign, sGridSnap)
                                Select Case .CurrentItem.Type
                                    Case cIItem.cItemTypeEnum.InvertedFreeHandArea, cIItem.cItemTypeEnum.FreeHandLine, cIItem.cItemTypeEnum.FreeHandArea
                                        Dim oItem As cItem = .CurrentItem
                                        If bEditPointByPoint And bShift Then oItem.Points.StartSequence()
                                        If bEditPointByPoint Then
                                            Call .SelectLastPoint(oItem.Points.Last)
                                            Call oItem.Points.AddFromPaintPoint(oMousePoint)
                                        Else
                                            Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                        End If
                                        If bEditPointByPoint And oItem.Points.Count = 1 Then Call oItem.Points.AddFromPaintPoint(oMousePoint)

                                    Case cIItem.cItemTypeEnum.Text, cIItem.cItemTypeEnum.Sign, cIItem.cItemTypeEnum.Clipart, cIItem.cItemTypeEnum.Image, cIItem.cItemTypeEnum.Attachment, cIItem.cItemTypeEnum.Quota, cIItem.cItemTypeEnum.Legend, cIItem.cItemTypeEnum.Scale, cIItem.cItemTypeEnum.Compass, cIItem.cItemTypeEnum.InformationBoxText
                                        Dim oItem As cItem = .CurrentItem
                                        If oItem.Points.Count < oItem.MaxPointsCount Then
                                            Call .SelectLastPoint(oItem.Points.AddFromPaintPoint(oMousePoint))
                                        Else
                                            If oItem.Points.Count = oItem.MaxPointsCount Then
                                                If oItem.Points.First.Point <> oMousePoint Then
                                                    Call oItem.Points.Last.MoveTo(oMousePoint)
                                                End If
                                            End If
                                        End If
                                End Select
                                bInvalidate = True

                                Call pPropertyItemBounds()
                                Call pFloatingToolbarUpdate()

                                .LastPoint = oPoint
                                If iSnapToPoint = 2 Then
                                    Dim oSequence As cSequence = .CurrentItem.Points.GetSequence(.LastItemPoint)
                                    If Not IsNothing(oSnapToPointPointTojoin) AndAlso Not (oSequence.Contains(.LastItemPoint) AndAlso oSequence.Contains(oSnapToPointPointTojoin)) Then
                                        .CurrentItem.Points.GetSequence(.LastItemPoint).First.Join(oSnapToPointPointTojoin)
                                    End If
                                ElseIf iSnapToPoint = 3 Then
                                    Dim oLastItem As cItem = oSnapToPointPointTojoin.Item
                                    If oLastItem Is .LastItemPoint.Item Then

                                        If .CurrentItem.CanBeReduced Then
                                            If btnPenSmooting.Checked Then
                                                Dim oLineItem As Items.cIItemLine = .CurrentItem
                                                Call oLineItem.ReducePoints(btnPenSmootingFactor.EditValue)
                                            End If
                                            Dim iDefaultLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", My.Application.Settings.GetSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
                                            If iDefaultLineType = cIItemLine.LineTypeEnum.Beziers Then
                                                'sequence to bezier
                                                Call pSequencesTo(cIItemLine.LineTypeEnum.Beziers, True)
                                            End If
                                        End If

                                        Dim oFirstPoint As cPoint = .CurrentItem.Points.GetSequence(.LastItemPoint).First
                                        If Not oFirstPoint Is .CurrentItem.Points.First Then
                                            'the snap is in the same object
                                            oFirstPoint = .CurrentItem.Points.CombineSequences(oFirstPoint)
                                        End If
                                    Else
                                        If oLastItem.Type = .LastItemPoint.Item.Type Then
                                            If .CurrentItem.CanBeReduced Then
                                                If btnPenSmooting.Checked Then
                                                    Dim oLineItem As Items.cIItemLine = .CurrentItem
                                                    Call oLineItem.ReducePoints(btnPenSmootingFactor.EditValue)
                                                End If
                                                Dim iDefaultLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", My.Application.Settings.GetSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
                                                If iDefaultLineType = cIItemLine.LineTypeEnum.Beziers Then
                                                    'sequence to bezier
                                                    Call pSequencesTo(cIItemLine.LineTypeEnum.Beziers, True)
                                                End If
                                            End If

                                            'same object type...merge and then combine...
                                            Dim oFirstPoint As cPoint = .CurrentItem.Points.GetSequence(.LastItemPoint).First
                                            Dim oItem As cItem = .LastItemPoint.Item
                                            pGetCurrentDesignTools.ResetNewItem()
                                            pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo53"), {oLastItem})
                                            oItem.Combine(oLastItem, False)
                                            Call oItem.Points.CombineSequences(oFirstPoint, If(bEditPointByPoint, cPoints.cCombineSequenceParametersEnum.PreservePoints, cPoints.cCombineSequenceParametersEnum.None))
                                            pGetCurrentDesignTools.CommitUndoSnapshot()
                                            Call pUnfrozeDesktopImage()
                                        Else
                                            'if different object type...only snap, just done in mousedown, so nothing to do
                                        End If
                                    End If
                                End If
                                iSnapToPoint = 0
                                btnSnapToPointNone.Down = True
                                btnSnapToPoint0.Down = False
                                btnSnapToPoint1.Down = False
                                btnSnapToPoint2.Down = False
                            End With
                        ElseIf (iButton And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                            Call pMapInfoMenu(e.Location)
                            Call mnuDesignItem.ShowPopup(picMap.PointToScreen(e.Location))
                        ElseIf (iButton = 0) Then
                            With pGetCurrentDesignTools()
                                If .Started Then
                                    .LastPoint = oPoint
                                    Select Case .CurrentItem.Type
                                        Case cIItem.cItemTypeEnum.FreeHandLine
                                            Dim oItem As cItemFreeHandLine = .CurrentItem
                                            Call oItem.Points.Last.MoveTo(oMousePoint)
                                        Case cIItem.cItemTypeEnum.FreeHandArea
                                            Dim oItem As cItemFreeHandArea = .CurrentItem
                                            Call oItem.Points.Last.MoveTo(oMousePoint)
                                    End Select
                                    bInvalidate = True
                                    Call pPropertyItemBounds()
                                    Call pFloatingToolbarUpdate()
                                    .CommitUndoSnapshot(True)
                                End If
                            End With
                        End If
                    Else
                        With pGetCurrentDesignTools()
                            If (iButton And Windows.Forms.MouseButtons.Left) = Windows.Forms.MouseButtons.Left Then
                                .LastAnchor = AnchorRectangleTypeEnum.None
                                'bUndoSnapshot = True
                                If .Undo.IsBeginned Then
                                    .CommitUndoSnapshot()
                                End If

                            ElseIf (iButton And Windows.Forms.MouseButtons.Right) = Windows.Forms.MouseButtons.Right Then
                                If .CurrentItem Is Nothing Then
                                    Call pMapInfoMenu(e.Location)
                                    Call mnuDesignNone.ShowPopup(picMap.PointToScreen(e.Location))
                                Else
                                    If .LastAnchor = AnchorRectangleTypeEnum.GenericPoint OrElse .LastAnchor = AnchorRectangleTypeEnum.NewPoint Then
                                        Call pMapInfoMenu(e.Location)
                                        Call mnuDesignItemPoint.ShowPopup(picMap.PointToScreen(e.Location))
                                    Else
                                        Call pMapInfoMenu(e.Location)
                                        Call mnuDesignItem.ShowPopup(picMap.PointToScreen(e.Location))
                                    End If
                                    .LastAnchor = AnchorRectangleTypeEnum.None
                                End If
                            ElseIf (iButton = 0) Then
                            End If
                        End With
                    End If
                End With
            End If
        End If

        If bInvalidate Then
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub dockDesigner_SizeChanged(sender As Object, e As EventArgs) Handles dockDesigner.SizeChanged
        Call picMap.Invalidate()
    End Sub
    Private Sub pMapBindScrollbars()
        Dim oSize As Size = oCurrentDesign.GetVisibleBounds(oCurrentOptions).Size.ToSize
        If oSize.IsEmpty Then
            oSize = pnlDesigner.ClientSize
        End If
        Dim iWidth As Integer = oSize.Width * sPaintZoom * 2.0F
        Dim iHeight As Integer = oSize.Height * sPaintZoom * 2.0F
        Dim iCurrentX As Integer = oPaintTranslation.X
        Dim iCurrentY As Integer = oPaintTranslation.Y
        If iWidth < Math.Abs(iCurrentX) Then
            iWidth = Math.Abs(iCurrentX)
        End If
        If iHeight < Math.Abs(iCurrentY) Then
            iHeight = Math.Abs(iCurrentY)
        End If
        oVSB.Minimum = -iHeight
        oVSB.Maximum = iHeight
        oHSB.Minimum = -iWidth
        oHSB.Maximum = iWidth
        oVSB.Value = -iCurrentY
        oHSB.Value = -iCurrentX
    End Sub

    Private Sub picMap_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles picMap.Paint
        If Not oCurrentDesign Is Nothing Then
            If oCurrentDesign.Type <> cIDesign.cDesignTypeEnum.ThreeDModel Then
                Call pMapBindScrollbars()
                Call pSurveyDraw(e.Graphics)
            End If
        End If
    End Sub

    Private Function pGetMultiSelRect() As RectangleF
        Dim sLeft As Single = oStartMultiselPosition.X
        Dim [sTop] As Single = oStartMultiselPosition.Y
        Dim sWidth As Single = oEndMultiselPosition.X - oStartMultiselPosition.X
        Dim sHeight As Single = oEndMultiselPosition.Y - oStartMultiselPosition.Y
        If sWidth < 0 Then
            sWidth = -1 * sWidth
            sLeft = sLeft - sWidth
        End If
        If sHeight < 0 Then
            sHeight = -1 * sHeight
            [sTop] = [sTop] - sHeight
        End If
        Return New RectangleF(sLeft, [sTop], sWidth, sHeight)
    End Function

    Private Sub pMapZoomOut()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call oHolos.Zoom(0.1)
        Else
            Dim sDeltaIncrement As Single
            If My.Computer.Keyboard.ShiftKeyDown Then
                sDeltaIncrement = sZoom / 2.0F
            Else
                sDeltaIncrement = sZoom / 10.0F
            End If
            If sZoom - sDeltaIncrement >= sZoomMin Then
                sZoom -= sDeltaIncrement
            Else
                sZoom = sZoomMin
            End If
            Call pMapRepaint()
        End If
    End Sub

    Private Sub pMapZoomIn()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Call oHolos.Zoom(-0.1)
        Else
            Dim sDeltaIncrement As Single
            If My.Computer.Keyboard.ShiftKeyDown Then
                sDeltaIncrement = sZoom / 2.0F
            Else
                sDeltaIncrement = sZoom / 10.0F
            End If
            If sZoom + sDeltaIncrement <= sZoomMax Then
                sZoom += sDeltaIncrement
            Else
                sZoom = sZoomMax
            End If
            Call pMapRepaint()
        End If
    End Sub

    Private Sub pMapRepaint(Optional ByVal ZoomCenter As Boolean = False)
        'adjusting real zoom ratio from actual zoom value...
        'sZoomRatio = 1 / Math.Log(sZoom) * 50
        'If trkZoom.Value < 100 Then
        '    sZoomRatio = 50
        'ElseIf trkZoom.Value >= 100 And trkZoom.Value > 500 Then
        '    sZoomRatio = 25
        'Else
        '    sZoomRatio = 15
        'End If
        Call pMapZoom(sZoom) '/ sZoomRatio)
        If ZoomCenter Then
            Call pMapCenter()
        End If
    End Sub

    Private Sub pSurveyDelayedRedraw()
        Call oDelayedRedrawTimer.Stop()
        Call oDelayedRedrawTimer.Start()
    End Sub

    Private Sub oDelayedRedrawTimer_Tick(Sender As Object, e As EventArgs) Handles oDelayedRedrawTimer.Tick
        Call oDelayedRedrawTimer.Stop()
        'If InvokeRequired Then
        '    Call Me.BeginInvoke(New MethodInvoker(AddressOf pMapInvalidate))
        'Else
        Call pMapInvalidate()
        'End If
    End Sub

    Private Sub pPropertyItemSegment()
        If Not oCurrentDesign Is Nothing Then
            Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
            Dim oSegment As cSegment = oTools.CurrentSegment
            If Not oCurrentItem Is Nothing AndAlso TypeOf oCurrentItem Is cItemSegment AndAlso Not oSegment Is Nothing Then
                Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(oSegment)
                Dim bIsUnlocked As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
                'TODO: manage islocked for UI elements that can not be used in this context

                With oCurrentItem
                    grpCurrentItemLocation.SetVisible(False)
                    grpCurrentItemSize.SetVisible(False)
                    btnItemsLayouts.SetVisible(False)
                    btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
                    btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
                    grpCurrentItemRotate.SetVisible(False)
                    grpCurrentItemAlign.SetVisible(False)

                    oPropName.Visible = False
                    oPropTransparency.Visible = False
                    oPropLineType.Visible = False
                    oPropPointLineType.Visible = False
                    oPropCaveBranch.Visible = False
                    oPropCategoryAndProperties.Visible = False

                    oPropPenStyle.Visible = False
                    oPropBrushStyle.Visible = False
                    oPropImage.Visible = False
                    oPropTrigpoint.Visible = False
                    oPropMarker.Visible = False
                    oPropPointSegmentBinding.Visible = False
                    oPropSegmentBinding.Visible = False
                    oPropSign.Visible = False
                    oPropTextStyle.Visible = False
                    oPropClipping.Visible = False
                    oPropCrossSection.Visible = False
                    oPropQuota.Visible = False
                    oPropSketch.Visible = False
                    oPropMergeMode.Visible = False
                    oPropObjectsBinding.Visible = False
                    oPropTrigpointsDistances.Visible = False

                    oPropCrossSectionSplayBorder.Visible = False
                    oPropCategoryAndProperties.Visible = False
                    oPropCrossSectionMarker.Visible = False
                    oPropAttachment.Visible = False
                    oPropLegendItems.Visible = False
                    oPropScaleItems.Visible = False
                    oPropCompassItems.Visible = False

                    oPropChunck3d.Visible = False

                    grpCurrentItemStation.SetVisible(False)
                    grpCurrentItemShot.SetVisible(True)

                    With btnCurrentItemSegmentFromProperty
                        .Enabled = True
                        .Caption = oSegment.From
                        .Visibility = If(.Caption = "", BarItemVisibility.Never, BarItemVisibility.Always)
                    End With
                    With btnCurrentItemSegmentToProperty
                        .Enabled = True
                        .Caption = oSegment.To
                        .Visibility = If(.Caption = "", BarItemVisibility.Never, BarItemVisibility.Always)
                    End With
                    If oCurrentItem.Design.Type = cIDesign.cDesignTypeEnum.Profile AndAlso oSegment.IsValid Then
                        btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Always
                        btnCurrentItemSegmentDirection.Enabled = Not oSegment.IsProfileBinded 'AndAlso oSegment.Direction <> cSurvey.cSurvey.DirectionEnum.Vertical
                        Select Case DirectCast(oCurrentItem, cItemSegment).Segment.Direction
                            Case cSurvey.cSurvey.DirectionEnum.Left
                                btnCurrentItemSegmentDirection.ImageOptions.SvgImage = My.Resources.directionleft
                                btnCurrentItemSegmentDirection0.ImageOptions.SvgImage = My.Resources.directionright
                                btnCurrentItemSegmentDirection0.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection1.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection2.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection4.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection3.Enabled = btnCurrentItemSegmentDirection.Enabled
                            Case cSurvey.cSurvey.DirectionEnum.Right
                                btnCurrentItemSegmentDirection.ImageOptions.SvgImage = My.Resources.directionright
                                btnCurrentItemSegmentDirection0.ImageOptions.SvgImage = My.Resources.directionleft
                                btnCurrentItemSegmentDirection0.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection1.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection2.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection4.Enabled = btnCurrentItemSegmentDirection.Enabled
                                btnCurrentItemSegmentDirection3.Enabled = btnCurrentItemSegmentDirection.Enabled
                            Case cSurvey.cSurvey.DirectionEnum.Vertical
                                btnCurrentItemSegmentDirection.ImageOptions.SvgImage = My.Resources.directionvertical
                                btnCurrentItemSegmentDirection0.ImageOptions.SvgImage = Nothing
                                btnCurrentItemSegmentDirection0.Enabled = False
                                btnCurrentItemSegmentDirection1.Enabled = False
                                btnCurrentItemSegmentDirection2.Enabled = False
                                btnCurrentItemSegmentDirection4.Enabled = False
                                btnCurrentItemSegmentDirection3.Enabled = btnCurrentItemSegmentDirection.Enabled
                        End Select
                    Else
                        btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
                    End If

                    Call oPropVisibility.Rebind(oCurrentItem)
                    oPropVisibility.Visible = True
                    Call oPropSegment.Rebind(oCurrentItem)
                    oPropSegment.Visible = True

                    oPropTrigpoint.Visible = False
                    oPropMarker.Visible = False

                    If .HaveSplayBorder And oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                        Call oPropPlanSplayBorder.Rebind(oCurrentItem)
                        oPropPlanSplayBorder.Visible = True
                    Else
                        oPropPlanSplayBorder.Visible = False
                    End If

                    If .HaveSplayBorder And oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile Then
                        Call oPropProfileSplayBorder.Rebind(oCurrentItem)
                        oPropProfileSplayBorder.Visible = True
                    Else
                        oPropProfileSplayBorder.Visible = False
                    End If
                    oPropCrossSectionSplayBorder.Visible = False

                    oPropChunck3d.Visible = False

                    Call oPropObjectsBinding.Rebind(oCurrentItem)
                    oPropObjectsBinding.Visible = Not oSegment.Splay AndAlso (oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Or oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile) AndAlso "" & oSegment.Cave <> ""
                End With
            End If
        End If
        'End If
        Call pPropPopupHide()
    End Sub

    Private Sub pPropertyItemChunck3D()
        RibbonControl.Manager.BeginUpdate()

        Dim bPropPopupShowed As Boolean
        If Not oCurrentDesign Is Nothing Then
            Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
            Dim oCurrentMarkedDesktopPoint As cMarkedDesktopPoint = pGetCurrentDesignTools.CurrentMarkedDesktopPoint
            If Not oCurrentItem Is Nothing Then
                Dim bIsUnlocked As Boolean = True
                'TODO: manage islocked for UI elements that can not be used in this context

                With oCurrentItem
                    grpCurrentItemLocation.Visible = False
                    grpCurrentItemSize.SetVisible(False)
                    btnItemsLayouts.SetVisible(False)
                    btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
                    btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
                    grpCurrentItemRotate.SetVisible(False)
                    grpCurrentItemAlign.SetVisible(False)
                    grpCurrentItemShot.SetVisible(False)
                    grpCurrentItemStation.SetVisible(False)
                    btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never

                    Call oPropName.Rebind(oCurrentItem)
                    oPropName.Visible = True
                    oPropTransparency.Visible = False

                    Call oPropCaveBranch.Rebind(oCurrentItem, Nothing)
                    oPropCaveBranch.Visible = True
                    oPropCategoryAndProperties.Visible = False
                    oPropPenStyle.Visible = False
                    oPropBrushStyle.Visible = False
                    oPropImage.Visible = False
                    oPropSegment.Visible = False
                    oPropTrigpoint.Visible = False
                    oPropMarker.Visible = False
                    oPropPointSegmentBinding.Visible = False
                    oPropSegmentBinding.Visible = False
                    oPropSign.Visible = False
                    oPropTextStyle.Visible = False
                    oPropClipping.Visible = False
                    oPropCrossSection.Visible = False
                    oPropQuota.Visible = False
                    oPropSketch.Visible = False
                    oPropMergeMode.Visible = False
                    oPropObjectsBinding.Visible = False
                    oPropTrigpointsDistances.Visible = False

                    oPropPlanSplayBorder.Visible = False
                    oPropProfileSplayBorder.Visible = False
                    oPropCrossSectionSplayBorder.Visible = False
                    oPropCategoryAndProperties.Visible = False
                    oPropCrossSectionMarker.Visible = False

                    oPropVisibility.Rebind(oCurrentItem)
                    oPropVisibility.Visible = True
                    oPropLineType.Visible = False
                    oPropPointLineType.Visible = False

                    oPropChunck3d.Visible = True

                    btnCurrentItemLock.Visibility = BarItemVisibility.Never

                    Call oPropChunck3d.Rebind(oCurrentItem)
                End With
            End If
        End If
        RibbonControl.Manager.EndUpdate()

        If Not bPropPopupShowed Then pPropPopupHide()
    End Sub

    Private Sub pPropertyItemMarker()
        RibbonControl.Manager.BeginUpdate()

        Dim bPropPopupShowed As Boolean
        If Not oCurrentDesign Is Nothing Then
            Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
            Dim oCurrentMarkedDesktopPoint As cMarkedDesktopPoint = pGetCurrentDesignTools.CurrentMarkedDesktopPoint
            If Not oCurrentItem Is Nothing AndAlso oCurrentMarkedDesktopPoint.IsSet Then
                Dim bIsUnlocked As Boolean = True
                'TODO: manage islocked for UI elements that can not be used in this context

                With oCurrentItem
                    'grpCurrentItemLocation.Visible = False
                    grpCurrentItemSize.SetVisible(False)
                    btnItemsLayouts.SetVisible(False)
                    btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
                    btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
                    grpCurrentItemRotate.SetVisible(False)
                    grpCurrentItemAlign.SetVisible(False)
                    grpCurrentItemShot.SetVisible(False)
                    grpCurrentItemStation.SetVisible(False)
                    btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never

                    oPropName.Visible = False
                    oPropTransparency.Visible = False
                    oPropCaveBranch.Visible = False
                    oPropCategoryAndProperties.Visible = False
                    oPropPenStyle.Visible = False
                    oPropBrushStyle.Visible = False
                    oPropImage.Visible = False
                    oPropSegment.Visible = False
                    oPropPointSegmentBinding.Visible = False
                    oPropSegmentBinding.Visible = False
                    oPropSign.Visible = False
                    oPropTextStyle.Visible = False
                    oPropClipping.Visible = False
                    oPropCrossSection.Visible = False
                    oPropQuota.Visible = False
                    oPropSketch.Visible = False
                    oPropMergeMode.Visible = False
                    oPropObjectsBinding.Visible = False
                    oPropTrigpointsDistances.Visible = False

                    oPropPlanSplayBorder.Visible = False
                    oPropProfileSplayBorder.Visible = False
                    oPropCrossSectionSplayBorder.Visible = False
                    oPropCategoryAndProperties.Visible = False
                    oPropCrossSectionMarker.Visible = False

                    oPropVisibility.Visible = False
                    oPropLineType.Visible = False
                    oPropPointLineType.Visible = False

                    oPropChunck3d.Visible = False

                    Dim oBounds As RectangleF = .GetBounds
                    Dim oLocation As PointF = oBounds.Location
                    Call pPropertyItemBounds(bPropPopupShowed)

                    grpCurrentItemLocation.SetVisible(True)

                    btnCurrentItemLock.Visibility = BarItemVisibility.Never

                    grpCurrentItemSize.SetVisible(False)
                    grpCurrentItemRotate.SetVisible(False)

                    Call oPropMarker.Rebind(oCurrentItem)

                    oPropSegment.Visible = False
                    oPropTrigpoint.Visible = False
                    oPropMarker.Visible = True

                    oPropObjectsBinding.Visible = False
                    oPropTrigpointsDistances.Visible = False
                End With
            End If
        End If
        RibbonControl.Manager.EndUpdate()

        If Not bPropPopupShowed Then pPropPopupHide()
    End Sub

    Private Sub pPropertyItemTrigpoint()
        RibbonControl.Manager.BeginUpdate()
        If Not oCurrentDesign Is Nothing Then
            Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
            Dim oTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
            If Not oCurrentItem Is Nothing AndAlso TypeOf oCurrentItem Is cItemTrigpoint AndAlso Not oTrigpoint Is Nothing Then
                Dim bIsUnlocked As Boolean = True
                'TODO: manage islocked for UI elements that can not be used in this context

                grpCurrentItemLocation.SetVisible(False)
                grpCurrentItemSize.SetVisible(False)
                btnItemsLayouts.SetVisible(False)
                btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
                btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
                grpCurrentItemRotate.SetVisible(False)
                grpCurrentItemAlign.SetVisible(False)
                grpCurrentItemShot.SetVisible(False)
                grpCurrentItemStation.SetVisible(True)
                btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never

                oPropName.Visible = False
                oPropTransparency.Visible = False
                oPropCaveBranch.Visible = False
                oPropCategoryAndProperties.Visible = False
                oPropPenStyle.Visible = False
                oPropBrushStyle.Visible = False
                oPropImage.Visible = False
                oPropSegment.Visible = False
                oPropMarker.Visible = False
                oPropPointSegmentBinding.Visible = False
                oPropSegmentBinding.Visible = False
                oPropSign.Visible = False
                oPropTextStyle.Visible = False
                oPropClipping.Visible = False
                oPropCrossSection.Visible = False
                oPropQuota.Visible = False
                oPropSketch.Visible = False
                oPropMergeMode.Visible = False

                oPropPlanSplayBorder.Visible = False
                oPropProfileSplayBorder.Visible = False
                oPropCrossSectionSplayBorder.Visible = False
                oPropCategoryAndProperties.Visible = False
                oPropCrossSectionMarker.Visible = False
                oPropAttachment.Visible = False
                oPropLegendItems.Visible = False
                oPropScaleItems.Visible = False
                oPropCompassItems.Visible = False

                oPropVisibility.Rebind(oCurrentItem)
                oPropVisibility.Visible = True
                oPropLineType.Visible = False
                oPropPointLineType.Visible = False

                oPropChunck3d.Visible = False

                oPropTrigpoint.Visible = True
                oPropTrigpoint.Rebind(oCurrentItem)

                If oCurrentItem.Design.Type = cIDesign.cDesignTypeEnum.Plan Then
                    If oSurvey.Properties.GPS.Enabled AndAlso Not oTrigpoint.Data.IsSplay Then
                        btnCurrentItemStationSetCoordinate.Enabled = True
                        'cmdPropTrigpointFix.Enabled = True
                        If pGetCurrentDesignTools.CurrentMarkedDesktopPoint.IsSet Then
                            'cmdPropTrigpointFixToMarker.Enabled = True
                            btnCurrentItemStationSetCoordinateCP.Enabled = True
                        Else
                            'cmdPropTrigpointFixToMarker.Enabled = False
                            btnCurrentItemStationSetCoordinateCP.Enabled = False
                        End If
                    Else
                        btnCurrentItemStationSetCoordinate.Enabled = False
                        'cmdPropTrigpointFix.Enabled = False
                        'cmdPropTrigpointFixToMarker.Enabled = False
                    End If
                Else
                    btnCurrentItemStationSetCoordinate.Enabled = False
                    btnCurrentItemStationSetCoordinateCP.Enabled = False
                End If
                oPropObjectsBinding.Visible = False

                Call oPropTrigpointsDistances.Rebind(oCurrentItem)
                oPropTrigpointsDistances.Visible = True
            End If
        End If
        RibbonControl.Manager.EndUpdate()
        Call pPropPopupHide()
    End Sub

    Private Sub pObjectPropertyDelayedLoad()
        If InvokeRequired Then
            Call Me.BeginInvoke(New MethodInvoker(AddressOf pObjectPropertyDelayedLoad))
        Else
            pnl3DProp.Enabled = False
            pnlDesignProp.Enabled = False
            pnlObjectProp.Enabled = False

            Call oObjectPropertyTimer.Stop()
            Call oObjectPropertyTimer.Start()
        End If
    End Sub

    Private Sub oObjectPropertyTimer_Tick(sender As Object, e As EventArgs) Handles oObjectPropertyTimer.Tick
        Call oObjectPropertyTimer.Stop()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub pProperty3D()
        RibbonControl.Manager.BeginUpdate()

        grpCurrentItemLocation.SetVisible(False)
        grpCurrentItemSize.SetVisible(False)
        btnItemsLayouts.SetVisible(False)
        btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
        btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
        grpCurrentItemRotate.SetVisible(False)
        grpCurrentItemAlign.SetVisible(False)
        grpCurrentItemShot.SetVisible(False)
        grpCurrentItemStation.SetVisible(False)
        btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never
        grpCurrentItemSketch.SetVisible(False)
        grpCurrentItemImage.SetVisible(False)
        grpCurrentItemLegend.SetVisible(False)
        grpCurrentItemSign.SetVisible(False)
        grpCurrentItemClipart.SetVisible(False)
        grpCurrentItemShape.SetVisible(False)
        btnCurrentItemGenericCombine.Visibility = BarItemVisibility.Never
        grpCurrentItemItems.SetVisible(False)
        grpCurrentItemSequence.SetVisible(False)
        grpCurrentItemPoint.SetVisible(False)
        grpCurrentItemBindings.SetVisible(False)

        Call o3DAltitudeAmplification.Rebind(oCurrentDesign, oCurrentOptions)
        Call o3DLinkedSurveys.Rebind(oCurrentDesign, oCurrentOptions)
        Call o3DDesignSurface.Rebind(oCurrentDesign, oCurrentOptions)
        Call o3DDesignModel.Rebind(oCurrentDesign, oCurrentOptions)

        RibbonControl.Manager.EndUpdate()
    End Sub

    Private Sub pPropertyDesign()
        RibbonControl.Manager.BeginUpdate()

        Dim bHasItems As Boolean = oCurrentDesign.HasItems

        grpCurrentItemLocation.SetVisible(bHasItems)
        btnCurrentItemLock.Visibility = BarItemVisibility.Never
        grpCurrentItemSize.SetVisible(bHasItems)
        btnItemsLayouts.SetVisible(False)
        btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
        btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
        grpCurrentItemRotate.SetVisible(False)
        grpCurrentItemAlign.SetVisible(False)
        grpCurrentItemShot.SetVisible(False)
        grpCurrentItemStation.SetVisible(False)
        btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never

        grpCurrentItemLegend.SetVisible(False)
        grpCurrentItemSign.SetVisible(False)
        grpCurrentItemClipart.SetVisible(False)
        grpCurrentItemSketch.SetVisible(False)
        grpCurrentItemImage.SetVisible(False)
        grpCurrentItemShape.SetVisible(False)
        btnCurrentItemGenericCombine.Visibility = BarItemVisibility.Never
        grpCurrentItemItems.Visible = False

        grpCurrentItemSequence.SetVisible(False)
        grpCurrentItemPoint.SetVisible(False)
        grpCurrentItemBindings.SetVisible(False)

        chkViewShowShots.Checked = oCurrentOptions.DrawSegments
        chkViewShowLRUD.Checked = oCurrentOptions.DrawLRUD
        chkViewShowSplay.Checked = oCurrentOptions.DrawSplay

        If bHasItems Then Call pPropertyItemBounds(False)

        Call oDesignLinkedSurveys.Rebind(oCurrentDesign, oCurrentOptions)
        Call oDesignPrintOrExportArea.Rebind(oCurrentDesign, oCurrentOptions)
        Call oDesignCenterline.Rebind(oCurrentDesign, oCurrentOptions)
        Call oDesignSurfaceProfile.Rebind(oCurrentDesign, oCurrentOptions)
        Call oDesignStyle.Rebind(oCurrentDesign, oCurrentOptions)
        Call oDesignSurface.Rebind(oCurrentDesign, oCurrentOptions)

        RibbonControl.Manager.EndUpdate()
    End Sub

    Private Sub pPropertyItemPointBounds()
        With pGetCurrentDesignTools.CurrentItemPoint
            btnCurrentItemX.EditValue = modNumbers.MathRound(.X, 2)
            btnCurrentItemY.EditValue = modNumbers.MathRound(- .Y, 2)
        End With
    End Sub

    Private Sub pPropertyItemPoint()
        RibbonControl.Manager.BeginUpdate()

        With pGetCurrentDesignTools.CurrentItemPoint
            grpCurrentItemLocation.SetVisible(True)
            grpCurrentItemSize.SetVisible(False)
            btnItemsLayouts.SetVisible(False)
            btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
            btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
            grpCurrentItemRotate.SetVisible(False)
            grpCurrentItemAlign.SetVisible(False)
            grpCurrentItemShot.SetVisible(False)
            grpCurrentItemStation.SetVisible(False)
            btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never

            oPropName.Visible = False
            oPropTransparency.Visible = False
            oPropCaveBranch.Visible = True
            oPropCategoryAndProperties.Visible = False

            oPropBrushStyle.Visible = False
            oPropSegment.Visible = False
            oPropTrigpoint.Visible = False
            oPropMarker.Visible = False
            oPropSegmentBinding.Visible = False
            oPropSign.Visible = False
            oPropTextStyle.Visible = False
            oPropClipping.Visible = False
            oPropCrossSection.Visible = False
            oPropQuota.Visible = False
            oPropSketch.Visible = False
            oPropMergeMode.Visible = False
            oPropObjectsBinding.Visible = False
            oPropTrigpointsDistances.Visible = False

            oPropPlanSplayBorder.Visible = False
            oPropProfileSplayBorder.Visible = False
            oPropCrossSectionSplayBorder.Visible = False
            oPropCategoryAndProperties.Visible = False
            oPropCrossSectionMarker.Visible = False
            oPropAttachment.Visible = False
            oPropLegendItems.Visible = False
            oPropScaleItems.Visible = False
            oPropCompassItems.Visible = False

            oPropChunck3d.Visible = False

            oPropVisibility.Visible = False
            oPropLineType.Visible = False

            grpCurrentItemLegend.SetVisible(False)
            grpCurrentItemSign.SetVisible(False)
            grpCurrentItemClipart.SetVisible(False)
            grpCurrentItemSketch.SetVisible(False)
            grpCurrentItemImage.SetVisible(False)
            grpCurrentItemShape.SetVisible(False)
            btnCurrentItemGenericCombine.Visibility = BarItemVisibility.Never
            grpCurrentItemItems.SetVisible(False)
            grpCurrentItemBindings.SetVisible(False)

            grpCurrentItemSequence.SetVisible(True)
            grpCurrentItemPoint.SetVisible(True)

            Dim iType As cPoint.PointTypeEnum = .Type

            Dim bItemPointConvertVisible As Boolean = bIsInDebug And pGetCurrentDesignTools.CurrentItem.HaveLineType
            If pGetCurrentDesignTools.IsNewPoint Then
                btnCurrentItemPointDelete.Visibility = BarItemVisibility.Never

                btnCurrentItemPointSequenceDivide.Visibility = BarItemVisibility.Never            'to be enabled in future
                btnCurrentItemPointSequenceDivideAndJoin.Visibility = BarItemVisibility.Never   'to be enabled in future
                btnCurrentItemPointSequenceCombine.Visibility = BarItemVisibility.Never
                btnCurrentItemPointDeleteSequence.Visibility = BarItemVisibility.Never
                btnCurrentItemPointCloseSequence.Visibility = BarItemVisibility.Never
                btnCurrentItemPointRevertSequence.Visibility = BarItemVisibility.Never

                btnCurrentItemPointNewFromSequence0.Visibility = BarItemVisibility.Never
                btnCurrentItemPointNewFromSequence1.Visibility = BarItemVisibility.Never
            Else
                btnCurrentItemPointDelete.Visibility = BarItemVisibility.Always

                btnCurrentItemPointAdd.Enabled = Not cPoint.IsControlPoint(iType)
                btnCurrentItemPointDelete.Enabled = Not cPoint.IsControlPoint(iType)

                btnCurrentItemPointSequenceDivide.Visibility = BarItemVisibility.Always
                btnCurrentItemPointSequenceDivideAndJoin.Visibility = BarItemVisibility.Always
                btnCurrentItemPointSequenceCombine.Visibility = BarItemVisibility.Always
                btnCurrentItemPointSequenceCombine.Enabled = Not (cPoint.IsFirstOfAll(iType) Or cPoint.IsLastOfAll(iType)) And (cPoint.IsFirst(iType) Or cPoint.IsLast(iType))
                btnCurrentItemPointDeleteSequence.Visibility = BarItemVisibility.Always
                btnCurrentItemPointCloseSequence.Visibility = BarItemVisibility.Always
                btnCurrentItemPointRevertSequence.Visibility = BarItemVisibility.Always

                btnCurrentItemPointSequenceDivide.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)
                btnCurrentItemPointSequenceDivideAndJoin.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)

                btnCurrentItemPointNewFromSequence0.Visibility = BarItemVisibility.Always
                btnCurrentItemPointNewFromSequence1.Visibility = BarItemVisibility.Always
            End If

            Dim sCave As String = "" & .Item.Cave
            Dim sBranch As String = "" & .Item.Branch
            Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(sCave, sBranch)
            Dim bIsUnlocked As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
            'TODO: manage islocked for UI elements that can not be used in this context

            Call oPropCaveBranch.Rebind(pGetCurrentDesignTools.CurrentItem, pGetCurrentDesignTools.CurrentItemPoint)
            oPropCaveBranch.Visible = True

            Call pPropertyItemPointBounds()
            btnCurrentItemLock.Visibility = BarItemVisibility.Never

            oPropPointLineType.Rebind(pGetCurrentDesignTools.CurrentItemPoint, AddressOf pPointSequencesTo)
            oPropPointLineType.Visible = True

            Call oPropPenStyle.Rebind(pGetCurrentDesignTools.CurrentItem, pGetCurrentDesignTools.CurrentItemPoint, oCurrentOptions)
            oPropPenStyle.Visible = True

            oPropBrushStyle.Visible = False

            Call oPropPointSegmentBinding.Rebind(pGetCurrentDesignTools.CurrentItemPoint)
            If .BindedSegment Is Nothing Then
                oPropPointSegmentBinding.Enabled = False
            Else
                oPropPointSegmentBinding.Enabled = True
            End If
            oPropPointSegmentBinding.Visible = True

            btnCurrentItemPointDeleteSequence.Enabled = True
            btnCurrentItemPointCloseSequence.Enabled = True
            btnCurrentItemPointSequenceCombine.Enabled = Not (cPoint.IsFirstOfAll(iType) Or cPoint.IsLastOfAll(iType)) And (cPoint.IsFirst(iType) Or cPoint.IsLast(iType))
            btnCurrentItemPointSequenceDivide.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)
            btnCurrentItemPointSequenceDivideAndJoin.Enabled = Not cPoint.IsControlPoint(iType) And Not cPoint.IsFirstOfAll(iType) And Not cPoint.IsLastOfAll(iType) And Not cPoint.IsFirst(iType) And Not cPoint.IsLast(iType)

            If cPoint.IsControlPoint(iType) Then
                btnCurrentItemPointsJoin.Enabled = False
                btnCurrentItemPointsJoinAndConnect.Enabled = False
                btnCurrentItemPointsUnjoin.Enabled = False
                btnCurrentItemPointsUnjoinAll.Enabled = False
            Else
                Dim bNotIsInList As Boolean = Not oDockJoinPoints.IsPointInList(pGetCurrentDesignTools.CurrentItemPoint)
                If .IsJoined Then
                    btnCurrentItemPointsJoin.Enabled = bNotIsInList
                    btnCurrentItemPointsJoinAndConnect.Enabled = bNotIsInList AndAlso oDockJoinPoints.GetPointsCount > 0
                    btnCurrentItemPointsUnjoin.Enabled = True
                    btnCurrentItemPointsUnjoinAll.Enabled = True
                Else
                    btnCurrentItemPointsJoin.Enabled = bNotIsInList
                    btnCurrentItemPointsJoinAndConnect.Enabled = bNotIsInList AndAlso oDockJoinPoints.GetPointsCount > 0
                    btnCurrentItemPointsUnjoin.Enabled = False
                    btnCurrentItemPointsUnjoinAll.Enabled = False
                End If
            End If
        End With
        RibbonControl.Manager.EndUpdate()

        Call pPropPopupHide()
    End Sub

    Private Sub pPropertyItemBounds(Optional ByRef PropPopupShowed As Boolean = False)
        Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
        If oCurrentItem Is Nothing Then
            Dim oBounds As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)

            Dim oLocation As PointF = oBounds.Location
            btnCurrentItemX.EditValue = modNumbers.MathRound(oLocation.X, 2)
            btnCurrentItemY.EditValue = modNumbers.MathRound(-oLocation.Y, 2)

            Dim oSize As SizeF = oBounds.Size
            btnCurrentItemW.EditValue = modNumbers.MathRound(oSize.Width, 2)
            btnCurrentItemH.EditValue = modNumbers.MathRound(oSize.Height, 2)
        Else
            With oCurrentItem
                Dim oBounds As RectangleF = .GetBounds
                If modPaint.IsRectangleEmpty(oBounds) Then
                    Call pPropPopupShow("warning", modMain.GetLocalizedString("main.textpart54"))
                    PropPopupShowed = PropPopupShowed Or True
                End If

                Dim oLocation As PointF = oBounds.Location
                btnCurrentItemX.EditValue = modNumbers.MathRound(oLocation.X, 2)
                btnCurrentItemY.EditValue = modNumbers.MathRound(-oLocation.Y, 2)

                Dim oSize As SizeF = oBounds.Size
                btnCurrentItemW.EditValue = modNumbers.MathRound(oSize.Width, 2)
                btnCurrentItemH.EditValue = modNumbers.MathRound(oSize.Height, 2)
            End With
        End If
    End Sub

    Private Sub pPropertyItem()
        RibbonControl.Manager.BeginUpdate()

        Dim bPropPopupShowed As Boolean
        Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
        With oCurrentItem
            If .Type = cIItem.cItemTypeEnum.Segment Then
                Call pPropertyItemSegment()
            ElseIf .Type = cIItem.cItemTypeEnum.Trigpoint Then
                Call pPropertyItemTrigpoint()
            ElseIf .Type = cIItem.cItemTypeEnum.Marker Then
                Call pPropertyItemMarker()
            ElseIf .Type = cIItem.cItemTypeEnum.Chunk3D Then
                Call pPropertyItemChunck3D()
            Else
                grpCurrentItemClipart.SetVisible(TypeOf oCurrentDesign Is cIItemClipart)
                grpCurrentItemSign.SetVisible(TypeOf oCurrentItem Is cIItemSign)
                grpCurrentItemShape.SetVisible(.HaveEditablePoints)
                btnCurrentItemGenericCombine.Visibility = modControls.VisibleToVisibility(.HaveEditablePoints)

                btnCurrentItemSendCopyTo.Caption = If(oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan, modMain.GetLocalizedString("main.sendcopytoprofile"), modMain.GetLocalizedString("main.sendcopytoplan"))
                btnCurrentItemSendCopyTo.Visibility = modControls.VisibleToVisibility(.CanBeSendedToOtherDesign)

                grpCurrentItemLegend.SetVisible(oCurrentItem.Type <> cIItem.cItemTypeEnum.Legend AndAlso oCurrentDesign.Layers.Item(cLayers.LayerTypeEnum.Signs).Items.Where(Function(item) item.Type = cIItem.cItemTypeEnum.Legend).Count > 0)

                grpCurrentItemSequence.SetVisible(False)
                grpCurrentItemPoint.SetVisible(False)
                grpCurrentItemShot.SetVisible(False)
                grpCurrentItemStation.SetVisible(False)
                btnCurrentItemSegmentDirection.Visibility = BarItemVisibility.Never

                Dim sCave As String = "" & .Cave
                Dim sBranch As String = "" & .Branch
                Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(sCave, sBranch)
                Dim bUnlocked As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
                'TODO: manage islocked for UI elements that can not be used in this context

                Call oPropCaveBranch.Rebind(oCurrentItem, Nothing)
                oPropCaveBranch.Visible = True

                If sCave = "" And sBranch = "" Then
                    Call pPropPopupShow("warning", modMain.GetLocalizedString("main.textpart55"))
                    bPropPopupShowed = True
                End If

                Call oPropCategoryAndProperties.Rebind(oCurrentItem)
                oPropCategoryAndProperties.Visible = True

                Call oPropName.Rebind(oCurrentItem)
                oPropName.Visible = True

                Call pPropertyItemBounds(bPropPopupShowed)

                Dim bCanBeRaised As Boolean = pGetCurrentDesignTools.CurrentLayer.Items.Contains(oCurrentItem)
                btnItemsLayouts.SetVisible(True)
                btnItemsLayouts.Enabled = bCanBeRaised

                grpCurrentItemSize.SetVisible(.CanBeResized)
                grpCurrentItemLocation.SetVisible(.CanBeMoved)

                btnCurrentItemLock.Visibility = BarItemVisibility.Always
                btnCurrentItemLock.Enabled = .CanBeMoved
                btnCurrentItemLock.Checked = .Locked

                oPropVisibility.Rebind(oCurrentItem)
                oPropVisibility.Visible = True

                grpCurrentItemRotate.SetVisible(.CanBeRotated)

                If .HaveTransparency Then
                    Call oPropTransparency.Rebind(oCurrentItem)
                    oPropTransparency.Visible = True
                Else
                    oPropTransparency.Visible = False
                End If

                If .HavePen Then
                    Call oPropPenStyle.Rebind(oCurrentItem, Nothing, oCurrentOptions)
                    oPropPenStyle.Visible = True
                Else
                    oPropPenStyle.Visible = False
                End If

                If .HaveBrush Then
                    Call oPropBrushStyle.Rebind(oCurrentItem, oCurrentOptions)
                    oPropBrushStyle.Visible = True
                Else
                    oPropBrushStyle.Visible = False
                End If

                If .HaveImage Then
                    Call oPropImage.Rebind(oCurrentItem)
                    oPropImage.Visible = True
                    grpCurrentItemImage.SetVisible(True)
                Else
                    oPropImage.Visible = False
                    grpCurrentItemImage.SetVisible(False)
                End If

                If .HaveSign Then
                    Call oPropSign.Rebind(oCurrentItem)
                    oPropSign.Visible = True
                Else
                    oPropSign.Visible = False
                End If

                If .HaveText Then
                    oPropTextStyle.Rebind(oCurrentItem, oCurrentOptions)
                    oPropTextStyle.Visible = True
                Else
                    oPropTextStyle.Visible = False
                End If

                If TypeOf oCurrentItem Is cIItemAttachment Then
                    oPropAttachment.Rebind(oCurrentItem)
                    oPropAttachment.Visible = True
                Else
                    oPropAttachment.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemCompass Then
                    Call oPropCompassItems.Rebind(oCurrentItem)
                    oPropCompassItems.Visible = True
                Else
                    oPropCompassItems.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemLegend Then
                    Call oPropLegendItems.Rebind(oCurrentItem)
                    oPropLegendItems.Visible = True
                Else
                    oPropLegendItems.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemScale Then
                    Call oPropScaleItems.Rebind(oCurrentItem)
                    oPropScaleItems.Visible = True
                Else
                    oPropScaleItems.Visible = False
                End If

                oPropSegment.Visible = False
                oPropTrigpoint.Visible = False
                oPropMarker.Visible = False
                oPropObjectsBinding.Visible = False
                oPropTrigpointsDistances.Visible = False
                oPropPointSegmentBinding.Visible = False

                oPropPlanSplayBorder.Visible = False
                oPropProfileSplayBorder.Visible = False

                oPropChunck3d.Visible = False

                If .HaveLineType Then
                    Call oPropLineType.Rebind(oCurrentItem, AddressOf pSequencesTo)
                    Dim bEnabled As Boolean = .Points.Count > 2 AndAlso DirectCast(oCurrentItem, cIItemLine).LineType <> cIItemLine.LineTypeEnum.Beziers
                    btnCurrentItemGenericReducePointFactor.Visibility = modControls.VisibleToVisibility(bEnabled)
                    btnCurrentItemGenericReducePoint.Visibility = modControls.VisibleToVisibility(bEnabled)
                    oPropLineType.Visible = True
                Else
                    oPropLineType.Visible = False
                End If
                oPropPointLineType.Visible = False

                If .CanBeClipped Then
                    Call oPropClipping.Rebind(oCurrentItem)
                    oPropClipping.Visible = True
                Else
                    oPropClipping.Visible = False
                End If

                If .HaveCrossSection Then
                    Call oPropCrossSection.Rebind(oCurrentItem)
                    oPropCrossSection.Visible = True
                Else
                    oPropCrossSection.Visible = False
                End If

                If TypeOf oCurrentItem Is cItemPlanCrossSectionMarker OrElse TypeOf oCurrentItem Is cItemProfileCrossSectionMarker Then
                    Call oPropCrossSectionMarker.Rebind(oCurrentItem, oCurrentOptions)
                    oPropCrossSectionMarker.Visible = True
                Else
                    oPropCrossSectionMarker.Visible = False
                End If

                If .HaveSplayBorder AndAlso .Type = cIItem.cItemTypeEnum.CrossSection Then
                    oPropCrossSectionSplayBorder.Rebind(oCurrentItem)
                    oPropCrossSectionSplayBorder.Visible = True
                Else
                    oPropCrossSectionSplayBorder.Visible = False
                End If

                btnCurrentItemConvertTo.Visibility = modControls.VisibleToVisibility(.CanBeConverted)

                If .HaveQuota Then
                    Call oPropQuota.Rebind(oCurrentItem)
                    oPropQuota.Visible = True
                Else
                    oPropQuota.Visible = False
                End If

                If .HaveSketch Then
                    Call oPropSketch.Rebind(oCurrentItem)
                    oPropSketch.Visible = True
                    grpCurrentItemSketch.SetVisible(True)
                Else
                    oPropSketch.Visible = False
                    grpCurrentItemSketch.SetVisible(False)
                End If

                If .Type = cIItem.cItemTypeEnum.InvertedFreeHandArea Then
                    Call oPropMergeMode.Rebind(DirectCast(oCurrentItem, cIItemMergeableArea))
                    oPropMergeMode.Visible = True
                Else
                    oPropMergeMode.Visible = False
                End If

                If .Type = cIItem.cItemTypeEnum.Items Then
                    grpCurrentItemAlign.SetVisible(True)
                    grpCurrentItemItems.SetVisible(True)

                    Dim oItemItems As cItemItems = oCurrentItem
                    btnCurrentItemItemsCombine.Visibility = modControls.VisibleToVisibility(oItemItems.IsSelfCombinable)
                    btnCurrentItemItemsCombine.Enabled = oItemItems.IsSelfCombinable
                    btnCurrentItemItemsCombineConcretionClipart.Enabled = oItemItems.IsConvertibleToConcretion
                    btnCurrentItemItemsCombineRockClipart.Enabled = oItemItems.IsConvertibleToRock
                    btnCurrentItemItemsCombineSignClipart.Enabled = oItemItems.IsConvertibleToSign
                Else
                    grpCurrentItemItems.SetVisible(False)
                    grpCurrentItemAlign.SetVisible(False)
                    btnCurrentItemItemsCombine.Visibility = BarItemVisibility.Never
                End If

                If .CanBeBinded Then
                    Call oPropSegmentBinding.Rebind(oCurrentItem)
                    Call grpCurrentItemBindings.SetVisible(oPropSegmentBinding.IsAvailable)
                    btnCurrentItemBindings.Visibility = BarItemVisibility.Always
                    btnCurrentItemBindings.Enabled = oPropSegmentBinding.IsAvailable
                    oPropSegmentBinding.Visible = True
                Else
                    Call grpCurrentItemBindings.SetVisible(False)
                    btnCurrentItemBindings.Visibility = BarItemVisibility.Never
                    btnCurrentItemBindings.Enabled = False
                    oPropSegmentBinding.Visible = False
                End If
            End If
        End With
        RibbonControl.Manager.EndUpdate()

        If Not bPropPopupShowed Then pPropPopupHide()
    End Sub

    Private Sub pPropertyNull()
        RibbonControl.Manager.BeginUpdate()

        grpCurrentItemLocation.SetVisible(False)
        grpCurrentItemSize.SetVisible(False)
        btnItemsLayouts.SetVisible(False)
        btnCurrentItemSendCopyTo.Visibility = BarItemVisibility.Never
        btnCurrentItemConvertTo.Visibility = BarItemVisibility.Never
        grpCurrentItemRotate.SetVisible(False)
        grpCurrentItemAlign.SetVisible(False)
        grpCurrentItemShot.SetVisible(False)
        grpCurrentItemStation.SetVisible(False)
        grpCurrentItemSketch.SetVisible(False)
        grpCurrentItemImage.SetVisible(False)
        grpCurrentItemLegend.SetVisible(False)
        grpCurrentItemSign.SetVisible(False)
        grpCurrentItemClipart.SetVisible(False)
        grpCurrentItemShape.SetVisible(False)
        btnCurrentItemGenericCombine.Visibility = BarItemVisibility.Never
        grpCurrentItemItems.SetVisible(False)
        grpCurrentItemSequence.SetVisible(False)
        grpCurrentItemPoint.SetVisible(False)
        grpCurrentItemBindings.SetVisible(False)

        oPropName.Visible = False
        oPropCaveBranch.Visible = False
        oPropCategoryAndProperties.Visible = False
        oPropPenStyle.Visible = False
        oPropBrushStyle.Visible = False
        oPropImage.Visible = False
        oPropSegment.Visible = False
        oPropTrigpoint.Visible = False
        oPropMarker.Visible = False
        oPropPointSegmentBinding.Visible = False
        oPropSegmentBinding.Visible = False
        oPropSegmentBinding.Visible = False
        oPropSign.Visible = False
        oPropTextStyle.Visible = False
        oPropClipping.Visible = False
        oPropCrossSection.Visible = False
        oPropQuota.Visible = False
        oPropSketch.Visible = False
        oPropMergeMode.Visible = False
        oPropObjectsBinding.Visible = False
        oPropTrigpointsDistances.Visible = False

        oPropPlanSplayBorder.Visible = False
        oPropProfileSplayBorder.Visible = False
        oPropCrossSectionSplayBorder.Visible = False
        oPropCategoryAndProperties.Visible = False
        oPropCrossSectionMarker.Visible = False
        oPropAttachment.Visible = False
        oPropLegendItems.Visible = False
        oPropScaleItems.Visible = False
        oPropCompassItems.Visible = False

        oPropVisibility.Visible = False
        oPropLineType.Visible = False
        oPropPointLineType.Visible = False

        oPropChunck3d.Visible = False

        RibbonControl.Manager.EndUpdate()

        Call pPropPopupHide()
    End Sub

    Private Sub pObjectPropertyLoad()
        If InvokeRequired Then
            Call Me.BeginInvoke(New MethodInvoker(AddressOf pObjectPropertyLoad))
        Else
            If Not bDisabledObjectPropertyEvent Then
                bDisabledObjectPropertyEvent = True
                Try
                    Dim bThereIsDesign As Boolean = oCurrentDesign IsNot Nothing
                    If bThereIsDesign Then
                        Dim bThereIsItem As Boolean
                        Dim bThereIsItemPoint As Boolean
                        If bThereIsDesign Then
                            bThereIsItem = pGetCurrentDesignTools.CurrentItem IsNot Nothing
                            bThereIsItemPoint = bThereIsItem AndAlso pGetCurrentDesignTools.CurrentItemPoint IsNot Nothing
                        End If
                        If bThereIsItem Then
                            pnlObjectSubProp.BeginUpdate()
                            Try
                                If bThereIsItemPoint Then
                                    Call pPropertyItemPoint()
                                Else
                                    Call pPropertyItem()
                                End If
                            Catch ex As Exception
                                Call pLogAdd(ex)
                            End Try
                            pnlObjectSubProp.EndUpdate()
                            Call pFloatingToolbarShow()
                            pnl3DProp.Visible = False
                            pnlDesignProp.Visible = False
                            pnlObjectProp.Visible = True
                            pnlObjectProp.Enabled = True
                        Else
                            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                                pnl3DProp.BeginUpdate()
                                Try
                                    Call pProperty3D()
                                Catch ex As Exception
                                    Call pLogAdd(ex)
                                End Try
                                pnl3DProp.EndUpdate()
                                Call pFloatingToolbarHide()
                                pnl3DProp.Visible = True
                                pnl3DProp.Enabled = True
                                pnlDesignProp.Visible = False
                                pnlObjectProp.Visible = False
                            Else
                                pnlDesignProp.BeginUpdate()
                                Try
                                    Call pPropertyDesign()
                                Catch ex As Exception
                                    Call pLogAdd(ex)
                                End Try
                                pnlDesignProp.EndUpdate()
                                Call pFloatingToolbarHide()
                                pnl3DProp.Visible = False
                                pnlDesignProp.Visible = True
                                pnlDesignProp.Enabled = True
                                pnlObjectProp.Visible = False
                            End If
                        End If
                    Else
                        Try
                            Call pPropertyNull()
                        Catch ex As Exception
                            Call pLogAdd(ex)
                        End Try
                        Call pFloatingToolbarHide()
                        pnl3DProp.Visible = False
                        pnlDesignProp.Visible = False
                        pnlObjectProp.Visible = False
                    End If
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try

                'fix forcing refresh of floating bar and design
                dockFloatBar.Size = New Size(20, 20)
                picMap.Invalidate()

                bDisabledObjectPropertyEvent = False
            End If
        End If
    End Sub

    Private Sub pSurveyMainProperties()
        Call pSurveyMainPropertiesPanelsRefresh()
    End Sub

    Private Sub frmProperties_OnSegmentSelect(ByVal Sender As frmProperties, Segment As cSegment)
        Call oTools.SelectSegment(Segment)
    End Sub

    Private Sub frmProperties_OnApply(ByVal Sender As frmProperties)
        Call pSurveyUpdateProperty()
    End Sub

    Private Sub pSurveyUpdateProperty()
        Call pSurveyUpdateProperty(True)
    End Sub

    Private Sub pSurveyUpdateProperty(ObjectPropertyLoad As Boolean)
        Call pSurveyMainProperties()
        Call pSurveyFillSessionList(False)
        Call pSurveyFillCaveList(False)

        Call btnMainSessionList_EditValueChanged(btnMainSessionList, EventArgs.Empty)
        Call btnMainCaveBranchList_EditValueChanged(btnMainCaveBranchList, EventArgs.Empty)

        Call pSurveyInvalidate()
        Call pSurveySegmentsRefresh()
        Call pSurveyTrigpointsRefresh()

        Call pSurveyDelayedRedraw()
        Call pSurveyMainPropertiesPanelsRefresh()
        Call pSurveyPenTypeRefresh()

        Call oHolos.Invalidate()

        If ObjectPropertyLoad Then Call pObjectPropertyLoad()
    End Sub

    Private Sub pSurveyPenTypeRefresh()
        Dim iLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", My.Application.Settings.GetSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
        Select Case iLineType
            Case cIItemLine.LineTypeEnum.Beziers
                btnPenLine.Down = False
                btnPenSpline.Down = False
                btnPenBezier.Down = True
            Case cIItemLine.LineTypeEnum.Splines
                btnPenLine.Down = False
                btnPenSpline.Down = True
                btnPenBezier.Down = False
            Case Else
                btnPenLine.Down = True
                btnPenSpline.Down = False
                btnPenBezier.Down = False
        End Select
    End Sub

    Private Sub pSurveyProperty(Optional SelectedTabIndex As Integer? = Nothing, Optional SelectedElement As Object = Nothing)
        bDisabledSurfaceEvent = True
        Using frmP As frmProperties = New frmProperties(oSurvey, SelectedTabIndex, iFunctionLanguage, SelectedElement)
            AddHandler frmP.OnApply, AddressOf frmProperties_OnApply
            AddHandler frmP.OnSegmentSelect, AddressOf frmProperties_OnSegmentSelect
            If frmP.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pSurveyUpdateProperty()
            End If
            bDisabledSurfaceEvent = False
        End Using
    End Sub

    Private Function pToolsEnd() As Boolean
        If oCurrentDesign Is Nothing Then
            Return False
        Else
            If pGetCurrentDesignTools.IsInEdit Then
                Call pGetCurrentDesignTools.EndAndSelectItem()
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End If
    End Function

    Private Delegate Sub oSurvey_OnBeforePropertiesChangedDelegate(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs)
    Private Sub oSurvey_OnBeforePropertiesChanged(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs) Handles oSurvey.OnBeforePropertiesChange
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnBeforePropertiesChangedDelegate(AddressOf oSurvey_OnBeforePropertiesChanged), {Sender, Args})
        Else
            Call oMousePointer.Push(Cursors.WaitCursor)
            If Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.Scale Then
                Call pStatusSet(modMain.GetLocalizedString("main.textpart104"))
            End If
        End If
    End Sub

    Private Delegate Sub oSurvey_OnFileConversionRequestDelegate(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.cFileConversionEventArgs)
    Private Sub oSurvey_OnFileConversionRequest(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.cFileConversionEventArgs) Handles oSurvey.OnFileConversionRequest
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnFileConversionRequestDelegate(AddressOf oSurvey_OnFileConversionRequest), {Sender, Args})
        Else
            Args.Cancel = (UIHelpers.Dialogs.Msgbox(Me, String.Format(modMain.GetLocalizedString("main.warning32"), Args.CurrentVersion, Args.RequestedVersion), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = DialogResult.No)
        End If
    End Sub

    Private Delegate Sub pSurveyProgressDelegate(Task As String, Action As cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum, Progress As Single, Text As String, Options As cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum)
    Private Sub pSurveyProgress(Task As String, Action As cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum, Progress As Single, Text As String, Optional Options As cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum = cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.None)
        If InvokeRequired Then
            Call BeginInvoke(New pSurveyProgressDelegate(AddressOf pSurveyProgress), {Task, Action, Progress, Text, Options})
        Else
            Select Case Action
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin
                    If frmProg Is Nothing Then
                        frmProg = New frmProgress()
                    End If
                    Dim sImage As String = ""
                    Select Case Options And cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageMask
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageLoad
                            sImage = "open"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageSave
                            sImage = "save"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageWarping
                            sImage = "warping"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageCalculate
                            sImage = "calculate"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageExport
                            sImage = "export"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImagePaint
                            sImage = "paint"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageConvert
                            sImage = "convert"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport
                            sImage = "import"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageDownload
                            sImage = "download"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageFilter
                            sImage = "filter"
                        Case cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.Image3D
                            sImage = "3d"
                    End Select
                    Dim bShow As Boolean = (Options And cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow) <> 0
                    Call frmProg.BeginProgress(Task, sImage, Text, bShow)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        TaskbarAssistant.ProgressMode = DevExpress.Utils.Taskbar.Core.TaskbarButtonProgressMode.Normal
                    End If
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Reset
                    If Not frmProg Is Nothing Then
                        Call frmProg.ResetProgress()
                        frmProg = Nothing
                    End If
                    Call pStatusProgress(Progress, Text)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        TaskbarAssistant.ProgressMode = DevExpress.Utils.Taskbar.Core.TaskbarButtonProgressMode.NoProgress
                    End If
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End
                    If Not frmProg Is Nothing Then
                        If frmProg.EndProgress(Task) Then
                            frmProg = Nothing
                        End If
                    End If
                    Call pStatusProgress(Progress, Text)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        TaskbarAssistant.ProgressMode = DevExpress.Utils.Taskbar.Core.TaskbarButtonProgressMode.NoProgress
                    End If
                Case cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress
                    If Not frmProg Is Nothing Then
                        frmProg.StatusProgress(Task, Progress, Text)
                    End If
                    Call pStatusProgress(Progress, Text)
                    'taskbar------------------------------------------
                    If modMain.bIsModernOS Then
                        TaskbarAssistant.ProgressMode = DevExpress.Utils.Taskbar.Core.TaskbarButtonProgressMode.Normal
                        TaskbarAssistant.ProgressCurrentValue = Progress * 100
                    End If
            End Select
        End If
    End Sub

    Private Delegate Sub oSurvey_OnProgressDelegate(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnProgressEventArgs)
    Private Sub oSurvey_OnProgress(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnProgressEventArgs) Handles oSurvey.OnProgress
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnProgressDelegate(AddressOf oSurvey_OnProgress), {Sender, Args})
        Else
            Call pSurveyProgress(Args.Task, Args.Action, Args.Progress, Args.Text, Args.Options)
        End If
    End Sub

    Private Delegate Sub oSurvey_OnLogDelegate(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnLogEventArgs)
    Private Sub oSurvey_OnLog(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnLogEventArgs) Handles oSurvey.OnLog
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnLogDelegate(AddressOf oSurvey_OnLog), {Sender, Args})
        Else
            If TypeOf Args Is cSurvey.cSurvey.OnErrorLogEventArgs Then
                With DirectCast(Args, cSurvey.cSurvey.OnErrorLogEventArgs)
                    Call pLogAdd(.Text, .Exception)
                End With
            Else
                Call pLogAdd(Args.Type, Args.Text)
            End If
        End If
    End Sub

    Private Delegate Sub oSurvey_OnPropertiesChangedDelegate(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs)
    Private Sub oSurvey_OnPropertiesChanged(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnPropertiesChangedEventArgs) Handles oSurvey.OnPropertiesChanged
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnPropertiesChangedDelegate(AddressOf oSurvey_OnPropertiesChanged), {Sender, Args})
        Else
            If Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.Scale Then
                Dim iScale As Integer = oCurrentOptions.GetCurrentScale
                If iScale = 0 Then
                    pnlStatusCurrentRule.Caption = modMain.GetLocalizedString("main.textpart56")
                Else
                    pnlStatusCurrentRule.Caption = modMain.GetLocalizedString("main.textpart57") & Strings.Format(iScale, "#,##0")
                End If
                Call pStatusSet(modMain.GetLocalizedString("main.textpart58"))
            ElseIf Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.DesignWarpingState Then
                Call pSurveyMainPropertiesPanelsRefresh()
            ElseIf Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.MainProperties Then
                Call modWMSManager.WMSDownloadFileReset()
            ElseIf Args.Source = cSurvey.cSurvey.OnPropertiesChangedEventArgs.PropertiesChangeSourceEnum.MasterSlaveSettings Then
                Call pSurveyMainPropertiesPanelsRefresh()
            End If
            'show/hide surface profile panel in segment...
            pnlSegmentSurfaceProfile.Visible = oSurvey.Properties.SurfaceProfile
            Call oMousePointer.Pop()    'push in beforepropertieschange
        End If
    End Sub

    Private Delegate Sub oSurvey_OnSegmentsChangeDelegate(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnSegmentChangeEventArgs)
    Private Sub oSurvey_OnSegmentsChange(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnSegmentChangeEventArgs) Handles oSurvey.OnSegmentsChange
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnSegmentsChangeDelegate(AddressOf oSurvey_OnSegmentsChange), {Sender, Args})
        Else
            If Not bDisableSegmentsChangeEvent Then
                Select Case Args.Action
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Remove, cSurvey.cSurvey.SegmentsChangeActionEnum.RemoveRange
                        Call pSurveyCalculate(False)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.BeforeAdd
                        Call Args.Segment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Add
                        Call pSurveyCalculate(False)
                        Call pGetCurrentTools.SelectSegment(Args.Segment)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Change, cSurvey.cSurvey.SegmentsChangeActionEnum.ChangeRange
                        Call pSurveyCalculate(False)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Clear, cSurvey.cSurvey.SegmentsChangeActionEnum.Remove
                        Call pSurveyCalculate(False)
                        Call pPropertyNull()
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Splay
                        Call pSurveyCalculate(False)
                        Call pGetCurrentTools.SelectSegment(Args.Segment)
                    Case cSurvey.cSurvey.SegmentsChangeActionEnum.Reassigned
                        Call pSegmentUpdate(Args.Segment)
                End Select
                Call grdViewSegments.RefreshScrollAnnotations()
            End If
        End If
    End Sub

    Private Delegate Sub oSurvey_OnTrigpointsChangeDelegate(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnTrigpointChangeEventArgs)
    Private Sub oSurvey_OnTrigpointsChange(ByVal Sender As Object, ByVal Args As cSurvey.cSurvey.OnTrigpointChangeEventArgs) Handles oSurvey.OnTrigpointsChange
        If InvokeRequired Then
            Call Invoke(New oSurvey_OnTrigpointsChangeDelegate(AddressOf oSurvey_OnTrigpointsChange), {Sender, Args})
        Else
            If Not bDisableTrigpointsChangeEvent Then
                Select Case Args.Action
                    Case cSurvey.cSurvey.TrigpointsChangeActionEnum.Change
                        Call pGetCurrentTools.SelectTrigpoint(Args.Trigpoint)
                    Case cSurvey.cSurvey.TrigpointsChangeActionEnum.Rebind
                        Call pSurveyTrigpointsGridSetup()
                End Select
                'Call pGetCurrentDesignTools.Design.Plot.Redraw(Args.Trigpoint)
            End If
        End If
    End Sub

    Private Sub pSurveyInvalidate()
        Call oSurvey.Invalidate()
        Call pSurveyCalculate(False)
    End Sub

    Private Sub pSurveyCalculate(ByVal Force As Boolean)
        If oSurvey.Properties.CalculateMode = cSurvey.cSurvey.CalculateModeEnum.Automatic Or Force Then ' Or oSurvey.Invalidated Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            Call pSurveyCheckOrigin()
            Call pStatusSet(GetLocalizedString("main.textpart44"))
            If Force Then
                Call oSurvey.Invalidate()
            End If
            Call DirectCast(grdSegments.DataSource, UIHelpers.cSegmentsBindingList).ResetCalculateException()
            Dim oResult As cActionResult = oSurvey.Calculate.Calculate(True)
            If oResult.Result Then
                Call pPopupHide()
            Else
                If TypeOf oResult.Exception Is Calculate.cCalculate.cCalculateSegmentsException Then
                    Dim oSegments As List(Of cSegment) = DirectCast(oResult.Exception, Calculate.cCalculate.cCalculateSegmentsException).Segments
                    'oSurvey.Segments.RemoveRange(oSegments)
                    Call pPopupShow("error", oResult.Exception.Message & " " & String.Join(", ", oSegments.Select(Function(oSegment) "<href=""sg:" & oSegment.ID & """><color=" & ColorTranslator.ToHtml(My.Application.RuntimeSettings.GetSetting("messagebar.forecolor", Color.Black)) & ">" & oSegment.From & " - " & oSegment.To & "</color></href>")))
                    Call DirectCast(grdSegments.DataSource, UIHelpers.cSegmentsBindingList).SetCalculateException(oSegments, oResult.Exception.Message)
                ElseIf TypeOf oResult.Exception Is Calculate.cCalculate.cCalculateSegmentException Then
                    Dim oSegment As cSegment = DirectCast(oResult.Exception, Calculate.cCalculate.cCalculateSegmentException).Segment
                    Call pPopupShow("error", oResult.Exception.Message & " <href=""sg:" & oSegment.ID & """><color=" & ColorTranslator.ToHtml(My.Application.RuntimeSettings.GetSetting("messagebar.forecolor", Color.Black)) & ">" & oSegment.From & " - " & oSegment.To & "</color></href>")
                    Call DirectCast(grdSegments.DataSource, UIHelpers.cSegmentsBindingList).SetCalculateException(oSegment, oResult.Exception.Message)
                ElseIf TypeOf oResult.Exception Is Calculate.cCalculate.cCalculateTrigpointsException Then
                    Dim oTrigpoints As List(Of cTrigPoint) = DirectCast(oResult.Exception, Calculate.cCalculate.cCalculateTrigpointsException).Trigpoints
                    Call pPopupShow("error", oResult.Exception.Message & " " & String.Join(", ", oTrigpoints.Select(Function(oTrigpoint) "<href=""tp:" & oTrigpoint.Name & """><color=" & ColorTranslator.ToHtml(My.Application.RuntimeSettings.GetSetting("messagebar.forecolor", Color.Black)) & ">" & oTrigpoint.Name & "</color></href>")))
                ElseIf TypeOf oResult.Exception Is Calculate.cCalculate.cCalculateTrigpointException Then
                    Dim oTrigpoint As cTrigPoint = DirectCast(oResult.Exception, Calculate.cCalculate.cCalculateTrigpointException).Trigpoint
                    Call pPopupShow("error", oResult.Exception.Message & " <href=""tp:" & oTrigpoint.Name & """><color=" & ColorTranslator.ToHtml(My.Application.RuntimeSettings.GetSetting("messagebar.forecolor", Color.Black)) & ">" & oTrigpoint.Name & "</color></href>")
                Else
                    Call pPopupShow("error", oResult.Exception.Message)
                End If
            End If
            Call grdViewSegments.RefreshScrollAnnotations()
            Call pStatusSet(GetLocalizedString("main.textpart45"))
            Call oMousePointer.Pop()
            Call pSurveyRedraw()
            Call pSurveyMainPropertiesPanelsRefresh()
        Else
            Call pMapInvalidate()
        End If
    End Sub

    'Private Sub pLayerTools_RestoreAll()
    '    For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
    '        oItem.Item.Visibility = BarItemVisibility.Always
    '        oItem.Item.Enabled = True
    '    Next
    'End Sub

    Private Sub pLayerTools_EnabledByLevel(Design As cIDesign.cDesignTypeEnum, ByVal Layer As cLayers.LayerTypeEnum)
        Debug.Print(Design.ToString & " - " & Layer.ToString)
        Call RibbonControl.Manager.BeginUpdate()
        If bToolsEnabledByLevel Then
            For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
                Try
                    Dim bValue As Boolean
                    If oItem.Item.Tag IsNot Nothing Then
                        Dim oBag As cEditToolsBag = oItem.Item.Tag
                        If oBag.Layer = Layer Then
                            bValue = True
                        Else
                            bValue = False
                        End If
                        If (oBag.AvaiableInPlan AndAlso Design = cIDesign.cDesignTypeEnum.Plan) OrElse (oBag.AvaiableInProfile AndAlso Design = cIDesign.cDesignTypeEnum.Profile) OrElse (oBag.AvaiableIn3D AndAlso Design = cIDesign.cDesignTypeEnum.ThreeDModel) Then
                            If bToolsHiddenByLevel Then
                                oItem.Item.Visibility = modControls.VisibleToVisibility(bValue)
                            Else
                                oItem.Item.Visibility = BarItemVisibility.Always
                            End If
                            oItem.Item.Enabled = bValue
                        Else
                            oItem.Item.Visibility = BarItemVisibility.Never
                            oItem.Item.Enabled = False
                        End If
                        Dim oStandardItem As BarItem = RibbonControl.Items.FindByName(oItem.Item.Name & "_Standard")
                        If oStandardItem IsNot Nothing Then
                            oStandardItem.Visibility = oItem.Item.Visibility
                            oStandardItem.Enabled = oItem.Item.Enabled
                        End If
                    End If
                Catch ex As Exception
                End Try
            Next
        Else
            For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
                If oItem.Item.Tag IsNot Nothing Then
                    Dim oBag As cEditToolsBag = oItem.Item.Tag
                    If (oBag.AvaiableInPlan AndAlso Design = cIDesign.cDesignTypeEnum.Plan) OrElse (oBag.AvaiableInProfile AndAlso Design = cIDesign.cDesignTypeEnum.Profile) OrElse (oBag.AvaiableIn3D AndAlso Design = cIDesign.cDesignTypeEnum.ThreeDModel) Then
                        oItem.Item.Visibility = BarItemVisibility.Always
                        oItem.Item.Enabled = True
                    Else
                        oItem.Item.Visibility = BarItemVisibility.Never
                        oItem.Item.Enabled = False
                    End If
                    Dim oStandardItem As BarItem = RibbonControl.Items.FindByName(oItem.Item.Name & "_Standard")
                    If oStandardItem IsNot Nothing Then
                        oStandardItem.Visibility = oItem.Item.Visibility
                        oStandardItem.Enabled = oItem.Item.Enabled
                    End If
                End If
            Next
        End If
        Call RibbonControl.Manager.EndUpdate()
        Call RibbonControl.Refresh()
    End Sub

    Private Sub picMap_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles picMap.Click
        Call picMap.Focus()
    End Sub

    Private Sub pSurveyExport(ByVal ExportFormat As ImportExportFormatEnum)
        Select Case ExportFormat
            Case ImportExportFormatEnum.threedD
                Call oHolos.Export()
            Case ImportExportFormatEnum.Survey
                Using oSFD As SaveFileDialog = New SaveFileDialog
                    With oSFD
                        .Title = GetLocalizedString("main.exportdatadialog")
                        .Filter = GetLocalizedString("main.filetypeTRO") & " (*.TRO)|*.TRO|" & GetLocalizedString("main.filetypeTH") & " (*.TH)|*.TH|" & GetLocalizedString("main.filetypeXLSX") & " (*.XLSX)|*.XLSX"
                        .FilterIndex = modMain.FilterRestoreLast("export.data", 1)
                        .OverwritePrompt = True
                        .CheckPathExists = True
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Call modMain.FilterSaveLast("export.data", .FilterIndex)
                            Select Case .FilterIndex
                                Case 1
                                    Dim iVTopoOptions As modExport.VTopoExportOptionsEnum = VTopoExportOptionsEnum.Default
                                    Call modExport.VTopoTroExportTo(oSurvey, .FileName, Nothing, iVTopoOptions)
                                Case 2
                                    Using frmET As frmExportTherion = New frmExportTherion
                                        If frmET.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                            Dim bThSegmentForceDirection As Boolean = My.Application.Settings.GetSetting("therion.segmentforcedirection", 1)
                                            Dim bThSegmentForcePath As Boolean = My.Application.Settings.GetSetting("therion.segmentforcepath", 1)
                                            Dim iThOptions As modExport.TherionExportOptionsEnum = If(bThSegmentForceDirection, modExport.TherionExportOptionsEnum.SegmentForceDirection, 0) Or If(bThSegmentForcePath, modExport.TherionExportOptionsEnum.SegmentForcePath, 0)
                                            'If oSurvey.Properties.ThreeDLochUseCaveBorder Then iThOptions = iThOptions Or TherionExportOptionsEnum.Scrap
                                            If frmET.chkExportDesign.Checked Then iThOptions = iThOptions Or TherionExportOptionsEnum.Scrap
                                            iThOptions = iThOptions Or TherionExportOptionsEnum.CalculateSplay
                                            Dim oTherionSaveNameDictionary As Dictionary(Of String, String) = modExport.TherionGetSavenameDictionary(oSurvey)
                                            Call modExport.TherionThExportTo(oSurvey, .FileName, oTherionSaveNameDictionary, iThOptions)
                                            If frmET.chkExportThconfig.Checked Then
                                                Dim sConfigFilename As String = IO.Path.Combine(IO.Path.GetDirectoryName(.FileName), IO.Path.GetFileNameWithoutExtension(.FileName) & ".thconfig")
                                                Dim sExportCommand As String = ""
                                                sExportCommand = sExportCommand & "export map -proj plan -output " & Chr(34) & IO.Path.GetFileNameWithoutExtension(.FileName) & "_plan.pdf" & Chr(34) & vbCrLf
                                                sExportCommand = sExportCommand & "export map -proj extended -output " & Chr(34) & IO.Path.GetFileNameWithoutExtension(.FileName) & "_profile.pdf" & Chr(34) & vbCrLf
                                                Call modExport.TherionCreateConfig(oSurvey, sConfigFilename, .FileName, sExportCommand)
                                            End If
                                        End If
                                    End Using
                                Case 3
                                    Using frmEE As frmExportExcel = New frmExportExcel
                                        If frmEE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                            Dim iOption As ExcelExportOptionsEnum
                                            If frmEE.chkExportCalculatedData.Checked Then iOption = iOption Or ExcelExportOptionsEnum.CalculatedData
                                            If frmEE.chkExportColor.Checked Then iOption = iOption Or ExcelExportOptionsEnum.Colors
                                            If frmEE.chkExportNamedSplayStations.Checked Then iOption = iOption Or ExcelExportOptionsEnum.NamedSplayStation
                                            If frmEE.chkExportNamedSplayStationsData.Checked Then iOption = iOption Or ExcelExportOptionsEnum.NamedSplayStationData
                                            Call modExport.ExcelExportTo(oSurvey, .FileName, iOption)
                                        End If
                                    End Using
                            End Select
                        End If
                    End With
                End Using
            Case ImportExportFormatEnum.Track
                Using oSFD As SaveFileDialog = New SaveFileDialog
                    With oSFD
                        .Title = GetLocalizedString("main.exporttrackdialog")
                        .Filter = GetLocalizedString("main.filetypeKML") & " (*.KML)|*.KML"
                        .FilterIndex = modMain.FilterRestoreLast("export.track", 1)
                        .OverwritePrompt = True
                        .CheckPathExists = True
                        If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            Call modMain.FilterSaveLast("export.track", .FilterIndex)
                            Select Case .FilterIndex
                                Case 1
                                    Using frmEKML As frmExportGoogleKML = New frmExportGoogleKML(oSurvey)
                                        If frmEKML.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                            Dim iOption As GoogleKMLExportOptionsEnum
                                            If frmEKML.chkExportTrack.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.Track
                                            If frmEKML.chkExportWaypoint.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.Waypoint
                                            If frmEKML.chkExportCaveBorders.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.CaveBorders
                                            If frmEKML.chkExportLinkedSurveys.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.LinkedSurveys
                                            If frmEKML.chkExportUseCadastralIDInCaveNames.Checked Then iOption = iOption Or GoogleKMLExportOptionsEnum.UseCadastralIDInCaveNames
                                            Call modExport.GoogleKmlExportTo2(oSurvey, .FileName, iOption, frmEKML.txtCaveBordersTransparency.Value)
                                        End If
                                    End Using
                            End Select
                        End If
                    End With
                End Using
            Case ImportExportFormatEnum.Image
                Call pPopupsHide()
                Dim iView As frmPreview.ViewModeEnum
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                    iView = frmPreview.ViewModeEnum.Plan
                Else
                    iView = frmPreview.ViewModeEnum.Profile
                End If
                Using frmPv As frmPreview = New frmPreview(oSurvey, frmPreview.PreviewModeEnum.Export, iView)
                    AddHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
                    With frmPv
                        .Location = Location
                        .Size = Size
                        .WindowState = WindowState
                        Call .ShowDialog(Me)
                    End With
                    RemoveHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
                End Using
                Call pMapInvalidate()
                If Not IsNothing(frmV) Then
                    Call frmV.ProfileInvalidate()
                End If
        End Select
    End Sub

    Private Sub pSurveyPrint()
        Call pPopupsHide()
        Dim iView As frmPreview.ViewModeEnum
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
            iView = frmPreview.ViewModeEnum.Plan
        Else
            iView = frmPreview.ViewModeEnum.Profile
        End If
        Using frmPv As frmPreview = New frmPreview(oSurvey, frmPreview.PreviewModeEnum.Preview, iView)
            AddHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
            With frmPv
                .Location = Location
                .Size = Size
                .WindowState = WindowState
                Call .ShowDialog(Me)
            End With
            RemoveHandler frmPv.OnPropertyChange, AddressOf pSurveyUpdateProperty
        End Using

        Call pMapInvalidate()
        If Not IsNothing(frmV) Then
            Call frmV.ProfileInvalidate()
        End If
    End Sub

    Private Sub pSurveyRedraw()
        If Not oCurrentDesign Is Nothing Then
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan OrElse oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call oSurvey.Redraw(oCurrentOptions)
                Call pMapInvalidate()
                Call oMousePointer.Pop()
            Else
                Call p3DInvalidate(cHolosViewer.InvalidateType.All)
            End If
        End If
    End Sub

    Private Sub pSurveyShow3D()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = cIDesign.cDesignTypeEnum.Unknown
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType <> cIDesign.cDesignTypeEnum.ThreeDModel Then
            RibbonControl.Manager.BeginUpdate()

            Call pToolsEnd()

            If iCurrentDesignType >= 0 Then
                Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
            End If

            oCurrentDesign = oTools.ThreeDTools.Design
            oCurrentOptions = oSurvey.Options("_design.3d")
            chkViewShowSplay.Checked = oCurrentOptions.DrawSplay
            chkViewShowLRUD.Checked = oCurrentOptions.DrawLRUD
            chkViewShowShots.Checked = oCurrentOptions.DrawSegments
            chkViewShowStation.Checked = oCurrentOptions.DrawPoints
            chkViewShowStationLabel.Checked = oCurrentOptions.ShowPointText

            Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)
            oDockLevels.Enabled = True
            oDockText.Enabled = False
            oDockJoinPoints.Enabled = False
            oDockClipart.Enabled = False
            oDockBrushesAndPens.Enabled = False

            Call oPaintInfo(cIDesign.cDesignTypeEnum.Profile).Restore(oPaintTranslation, sPaintZoom)
            btnViewPlan.Checked = False
            btnViewProfile.Checked = False
            btnView3D.Checked = True

            Call p3DInvalidate(cHolosViewer.InvalidateType.None)  'da rivedere....

            oTopDesignLevelBar.Visible = False
            oTopDesignItemsBar.Visible = bDesignItemsBarVisible
            oLastUsedBar.Visible = False
            grpDesignOptions.SetVisible(False)
            pageDesign.Visible = True

            btnScrollMode.Visibility = BarItemVisibility.Never
            btnAltMode.Visibility = BarItemVisibility.Never
            btnMultiSelMode1.Visibility = BarItemVisibility.Never
            btnMultiSelMode2.Visibility = BarItemVisibility.Never
            btnSnapToPointNone.Visibility = BarItemVisibility.Never
            btnSnapToPoint0.Visibility = BarItemVisibility.Never
            btnSnapToPoint1.Visibility = BarItemVisibility.Never
            btnSnapToPoint2.Visibility = BarItemVisibility.Never
            btnViewRulers.Visibility = BarItemVisibility.Never
            btnViewMetricGrid.Visibility = BarItemVisibility.Never
            btnEditDrawing.Visibility = BarItemVisibility.Never
            btnEditPointToPoint.Visibility = BarItemVisibility.Never
            btnItemsEndEdit.Visibility = BarItemVisibility.Never

            btnViewSplayShowMode.Visibility = BarItemVisibility.Never

            btnDesignPlotShowBindings.Visibility = BarItemVisibility.Never
            btnGrpDesignPlotRebindCommands.Visibility = BarItemVisibility.Never
            btnGrpDesignPlotRebindActions.Visibility = BarItemVisibility.Never

            btn3DViewTop.Visibility = BarItemVisibility.Always
            btn3DViewBottom.Visibility = BarItemVisibility.Always
            btn3dViewNS.Visibility = BarItemVisibility.Always
            btn3dViewSN.Visibility = BarItemVisibility.Always
            btn3dViewEW.Visibility = BarItemVisibility.Always
            btn3dViewWE.Visibility = BarItemVisibility.Always
            btn3DCameraType.Visibility = BarItemVisibility.Always
            btn3DCameraMode.Visibility = BarItemVisibility.Always

            btnFilterEdit.Visibility = BarItemVisibility.Never
            btnFilterFiltered.Visibility = BarItemVisibility.Never
            btnFilterWhiteboard.Visibility = BarItemVisibility.Never
            btnFilterInvertFilter.Visibility = BarItemVisibility.Never

            btnGrpPensType.Visibility = BarItemVisibility.Never
            btnGrpPenSmooting.Visibility = BarItemVisibility.Never
            btnAlignToGridOptions.Visibility = BarItemVisibility.Never

            pnlStatusDesignZoom.Visibility = BarItemVisibility.Never
            pnlStatusZoomBar.Visibility = BarItemVisibility.Never

            'frmMFT.Visible = False
            Call pFloatingToolbarHide()

            Call pHolosResize()

            Try
                pnl3D.Visible = True
            Catch
                oHolos.Reset()
                oHolos.Invalidate(cHolosViewer.InvalidateType.Error)
                pnl3D.Visible = True
            End Try
            picMap.Visible = False
            oVSB.Visible = False
            oHSB.Visible = False

            grpDesignLayers.SetVisible(True)
            grpDesignCommands.Visible = False
            grpDesignBindings.SetVisible(False)

            btnLayer_Base.Visibility = BarItemVisibility.Always
            btnLayer_Soil.Visibility = BarItemVisibility.Never
            btnLayer_Water.Visibility = BarItemVisibility.Never
            btnLayer_TerrainLevel.Visibility = BarItemVisibility.Never
            btnLayer_Rocks.Visibility = BarItemVisibility.Never
            btnLayer_Borders.Visibility = BarItemVisibility.Never
            btnLayer_Signs.Visibility = BarItemVisibility.Never
            If pGetCurrentDesignTools.CurrentLayer Is Nothing Then
                Call pGetCurrentDesignTools.SelectLayer(oSurvey.ThreeD.Layers(cLayers3D.Layer3DTypeEnum.Chunks))
            Else

                btnLayer_Base.Checked = True
            End If

            Call pLayerTools_EnabledByLevel(cIDesign.cDesignTypeEnum.ThreeDModel, cLayers3D.Layer3DTypeEnum.Chunks)
            'For Each oItem As BarItem In Ribbon.Items
            '    Debug.Print(oItem.Name)
            '    If TypeOf oItem.Tag Is cEditToolsBag Then
            '        Dim oBag As cEditToolsBag = oItem.Tag
            '        oItem.Visibility = modControls.VisibleToVisibility(oBag.AvaiableIn3D)
            '        For Each oLink As BarItemLink In oItem.Links
            '            oLink.Visible = oBag.AvaiableIn3D
            '        Next
            '    Else
            '        'oItem.Visibility = BarItemVisibility.Always
            '    End If
            'Next
            grpDesignItemsAdd.Visible = True
            'grpDesignItemsAdd.SetVisible(False)

            Call pSurveySetCurrentCaveBranch(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
            btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
            btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
            Call pSurveyRestoreCaveBranchLockstate(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnMainBindDesignType.Visibility = BarItemVisibility.Never
            btnMainBindCrossSections.Visibility = BarItemVisibility.Never

            RibbonControl.Manager.EndUpdate()

            Call pSurveyHighlightCurrentCave(True)

            Call pRebindDesignBar()

            Call pSurveyMainPropertiesPanelsRefresh()

            If oHolos.RedrawCount = 0 Then
                Call oHolos.RedrawRequest()
                Call pMapCenterAndFit()
                Call btn3DViewTop.PerformClick()
            End If

            Call pObjectPropertyLoad()
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyShowProfile()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = cIDesign.cDesignTypeEnum.Unknown
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType <> cIDesign.cDesignTypeEnum.Profile Then
            RibbonControl.Manager.BeginUpdate()
            bDisablePaintEvent = True

            Call pToolsEnd()
            If iCurrentDesignType >= 0 Then
                Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
            End If

            oCurrentDesign = oSurvey.Profile
            oCurrentOptions = oSurvey.Options("_design.profile")
            chkViewShowSplay.Checked = oCurrentOptions.DrawSplay
            chkViewShowLRUD.Checked = oCurrentOptions.DrawLRUD
            chkViewShowShots.Checked = oCurrentOptions.DrawSegments
            chkViewShowStation.Checked = oCurrentOptions.DrawPoints
            chkViewShowStationLabel.Checked = oCurrentOptions.ShowPointText
            Call pDesignRestoreShowBinding()

            Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)
            oDockLevels.Enabled = True
            Call oDockText.SetOptions(oCurrentOptions)
            oDockText.Enabled = True
            oDockJoinPoints.Enabled = True
            oDockClipart.Enabled = True
            oDockBrushesAndPens.Enabled = True

            If oPaintInfo(cIDesign.cDesignTypeEnum.Profile).IsEmpty Then
                Call pZoomReset()
                Call pMapCenterAndFit()
            Else
                Dim sNewPaintZoom As Single
                Dim oNewPaintTranslation As PointF
                Call oPaintInfo(cIDesign.cDesignTypeEnum.Profile).Restore(oNewPaintTranslation, sNewPaintZoom)
                Call pMapZoom(sNewPaintZoom)
                oPaintTranslation = oNewPaintTranslation
            End If
            btnViewPlan.Checked = False
            btnViewProfile.Checked = True
            btnView3D.Checked = False

            oTopDesignLevelBar.Visible = bDesignLevelBarVisible
            oTopDesignItemsBar.Visible = bDesignItemsBarVisible
            oLastUsedBar.Visible = bLastUsedBarVisible
            pageDesign.Visible = True

            btnScrollMode.Visibility = BarItemVisibility.Always
            btnAltMode.Visibility = BarItemVisibility.Always
            btnMultiSelMode1.Visibility = BarItemVisibility.Always
            btnMultiSelMode2.Visibility = BarItemVisibility.Always
            btnSnapToPointNone.Visibility = BarItemVisibility.Always
            btnSnapToPoint0.Visibility = BarItemVisibility.Always
            btnSnapToPoint1.Visibility = BarItemVisibility.Always
            btnSnapToPoint2.Visibility = BarItemVisibility.Always
            btnViewRulers.Visibility = BarItemVisibility.Always
            btnViewMetricGrid.Visibility = BarItemVisibility.Always
            btnEditDrawing.Visibility = BarItemVisibility.Always
            btnEditPointToPoint.Visibility = BarItemVisibility.Always
            btnItemsEndEdit.Visibility = BarItemVisibility.Always

            btnViewSplayShowMode.Visibility = BarItemVisibility.Always

            btnDesignPlotShowBindings.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindCommands.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindActions.Visibility = BarItemVisibility.Always
            grpDesignOptions.SetVisible(True)

            btn3DViewTop.Visibility = BarItemVisibility.Never
            btn3DViewBottom.Visibility = BarItemVisibility.Never
            btn3dViewNS.Visibility = BarItemVisibility.Never
            btn3dViewSN.Visibility = BarItemVisibility.Never
            btn3dViewEW.Visibility = BarItemVisibility.Never
            btn3dViewWE.Visibility = BarItemVisibility.Never
            btn3DCameraType.Visibility = BarItemVisibility.Never
            btn3DCameraMode.Visibility = BarItemVisibility.Never

            btnFilterEdit.Visibility = BarItemVisibility.Always
            btnFilterFiltered.Visibility = BarItemVisibility.Always
            btnFilterWhiteboard.Visibility = BarItemVisibility.Always
            btnFilterInvertFilter.Visibility = BarItemVisibility.Always

            btnGrpPensType.Visibility = BarItemVisibility.Always
            btnGrpPenSmooting.Visibility = BarItemVisibility.Always
            btnAlignToGridOptions.Visibility = BarItemVisibility.Always

            pnlStatusDesignZoom.Visibility = BarItemVisibility.Always
            pnlStatusZoomBar.Visibility = BarItemVisibility.Always

            'frmMFT.Visible = False
            Call pFloatingToolbarHide()

            pnl3D.Visible = False
            picMap.Visible = True
            oVSB.Visible = True
            oHSB.Visible = True

            grpDesignLayers.SetVisible(True)
            grpDesignCommands.Visible = True
            grpDesignBindings.SetVisible(True)

            btnLayer_Base.Visibility = BarItemVisibility.Always
            btnLayer_Soil.Visibility = BarItemVisibility.Always
            btnLayer_Water.Visibility = BarItemVisibility.Always
            btnLayer_TerrainLevel.Visibility = BarItemVisibility.Always
            btnLayer_Rocks.Visibility = BarItemVisibility.Always
            btnLayer_Borders.Visibility = BarItemVisibility.Always
            btnLayer_Signs.Visibility = BarItemVisibility.Always
            If pGetCurrentDesignTools.CurrentLayer Is Nothing Then
                Call pGetCurrentDesignTools.SelectLayer(oSurvey.Profile.Layers(cLayers.LayerTypeEnum.Base))
            Else
                Select Case pGetCurrentDesignTools.CurrentLayer.Type
                    Case cLayers.LayerTypeEnum.Base
                        btnLayer_Base.Checked = True
                    Case cLayers.LayerTypeEnum.Borders
                        btnLayer_Borders.Checked = True
                    Case cLayers.LayerTypeEnum.RocksAndConcretion
                        btnLayer_Rocks.Checked = True
                    Case cLayers.LayerTypeEnum.Signs
                        btnLayer_Signs.Checked = True
                    Case cLayers.LayerTypeEnum.Soil
                        btnLayer_Soil.Checked = True
                    Case cLayers.LayerTypeEnum.CeilingMorphologies
                        btnLayer_TerrainLevel.Checked = True
                    Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                        btnLayer_Water.Checked = True
                End Select
            End If

            Call pLayerTools_EnabledByLevel(cIDesign.cDesignTypeEnum.Profile, pGetCurrentDesignTools.CurrentLayer.Type)
            'For Each oItem As BarItem In Ribbon.Items
            '    Debug.Print(oItem.Name)
            '    If TypeOf oItem.Tag Is cEditToolsBag Then
            '        Dim oBag As cEditToolsBag = oItem.Tag
            '        oItem.Visibility = modControls.VisibleToVisibility(oBag.AvaiableInProfile)
            '        For Each oLink As BarItemLink In oItem.Links
            '            oLink.Visible = oBag.AvaiableInProfile
            '        Next
            '    Else
            '        ' oItem.Visibility = BarItemVisibility.Always
            '    End If
            'Next
            grpDesignItemsAdd.Visible = True

            Call pSurveySetCurrentCaveBranch(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
            btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
            btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
            Call pSurveySetCurrentBindTypeAndCrosssection(pGetCurrentDesignTools.CurrentBindDesignType, pGetCurrentDesignTools.CurrentCrossSection, True)
            Call pSurveyRestoreCaveBranchLockstate(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnMainBindDesignType.Visibility = BarItemVisibility.Always
            btnMainBindCrossSections.Visibility = BarItemVisibility.Always

            RibbonControl.Manager.EndUpdate()

            Call pSurveyLayersFilterApply(False)
            Call pSurveyHighlightCurrentCave(True)

            Call pSurveyMainPropertiesPanelsRefresh()

            Call pRebindDesignBar()
            bDisablePaintEvent = False
            Call pSurveyRedraw()

            Call pObjectPropertyLoad()

            Call oDockJoinPoints.SetSurvey(oSurvey, pGetCurrentDesignTools)
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyShowPlan()
        Call oMousePointer.Push(Cursors.WaitCursor)

        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = -1
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType <> cIDesign.cDesignTypeEnum.Plan Then
            RibbonControl.Manager.BeginUpdate()
            bDisablePaintEvent = True

            Call pToolsEnd()
            If iCurrentDesignType >= 0 Then
                Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
            End If

            oCurrentDesign = oSurvey.Plan
            oCurrentOptions = oSurvey.Options("_design.plan")
            chkViewShowSplay.Checked = oCurrentOptions.DrawSplay
            chkViewShowLRUD.Checked = oCurrentOptions.DrawLRUD
            chkViewShowShots.Checked = oCurrentOptions.DrawSegments
            chkViewShowStation.Checked = oCurrentOptions.DrawPoints
            chkViewShowStationLabel.Checked = oCurrentOptions.ShowPointText
            Call pDesignRestoreShowBinding()

            Call oDockLevels.SetDesign(oCurrentDesign, pGetCurrentDesignTools, oCurrentOptions)
            oDockLevels.Enabled = True
            Call oDockText.SetOptions(oCurrentOptions)
            oDockText.Enabled = True
            oDockJoinPoints.Enabled = True
            oDockClipart.Enabled = True
            oDockBrushesAndPens.Enabled = True

            If oPaintInfo(cIDesign.cDesignTypeEnum.Plan).IsEmpty Then
                Call pZoomReset()
                Call pMapCenterAndFit()
            Else
                Dim sNewPaintZoom As Single
                Dim oNewPaintTranslation As PointF
                Call oPaintInfo(cIDesign.cDesignTypeEnum.Plan).Restore(oNewPaintTranslation, sNewPaintZoom)
                Call pMapZoom(sNewPaintZoom)
                oPaintTranslation = oNewPaintTranslation
            End If
            btnViewPlan.Checked = True
            btnViewProfile.Checked = False
            btnView3D.Checked = False

            oTopDesignLevelBar.Visible = bDesignLevelBarVisible
            oTopDesignItemsBar.Visible = bDesignItemsBarVisible
            oLastUsedBar.Visible = bLastUsedBarVisible
            pageDesign.Visible = True

            btnScrollMode.Visibility = BarItemVisibility.Always
            btnAltMode.Visibility = BarItemVisibility.Always
            btnMultiSelMode1.Visibility = BarItemVisibility.Always
            btnMultiSelMode2.Visibility = BarItemVisibility.Always
            btnSnapToPointNone.Visibility = BarItemVisibility.Always
            btnSnapToPoint0.Visibility = BarItemVisibility.Always
            btnSnapToPoint1.Visibility = BarItemVisibility.Always
            btnSnapToPoint2.Visibility = BarItemVisibility.Always
            btnViewRulers.Visibility = BarItemVisibility.Always
            btnViewMetricGrid.Visibility = BarItemVisibility.Always
            btnEditDrawing.Visibility = BarItemVisibility.Always
            btnEditPointToPoint.Visibility = BarItemVisibility.Always
            btnItemsEndEdit.Visibility = BarItemVisibility.Always

            btnViewSplayShowMode.Visibility = BarItemVisibility.Always

            btnDesignPlotShowBindings.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindCommands.Visibility = BarItemVisibility.Always
            btnGrpDesignPlotRebindActions.Visibility = BarItemVisibility.Always
            grpDesignOptions.SetVisible(True)

            btn3DViewTop.Visibility = BarItemVisibility.Never
            btn3DViewBottom.Visibility = BarItemVisibility.Never
            btn3dViewNS.Visibility = BarItemVisibility.Never
            btn3dViewSN.Visibility = BarItemVisibility.Never
            btn3dViewEW.Visibility = BarItemVisibility.Never
            btn3dViewWE.Visibility = BarItemVisibility.Never
            btn3DCameraType.Visibility = BarItemVisibility.Never
            btn3DCameraMode.Visibility = BarItemVisibility.Never

            btnFilterEdit.Visibility = BarItemVisibility.Always
            btnFilterFiltered.Visibility = BarItemVisibility.Always
            btnFilterWhiteboard.Visibility = BarItemVisibility.Always
            btnFilterInvertFilter.Visibility = BarItemVisibility.Always

            btnGrpPensType.Visibility = BarItemVisibility.Always
            btnGrpPenSmooting.Visibility = BarItemVisibility.Always
            btnAlignToGridOptions.Visibility = BarItemVisibility.Always

            pnlStatusDesignZoom.Visibility = BarItemVisibility.Always
            pnlStatusZoomBar.Visibility = BarItemVisibility.Always

            'frmMFT.Visible = False
            Call pFloatingToolbarHide()

            pnl3D.Visible = False
            picMap.Visible = True
            oVSB.Visible = True
            oHSB.Visible = True

            grpDesignLayers.SetVisible(True)
            grpDesignCommands.Visible = True
            grpDesignBindings.SetVisible(True)

            btnLayer_Base.Visibility = BarItemVisibility.Always
            btnLayer_Soil.Visibility = BarItemVisibility.Always
            btnLayer_Water.Visibility = BarItemVisibility.Always
            btnLayer_TerrainLevel.Visibility = BarItemVisibility.Always
            btnLayer_Rocks.Visibility = BarItemVisibility.Always
            btnLayer_Borders.Visibility = BarItemVisibility.Always
            btnLayer_Signs.Visibility = BarItemVisibility.Always
            If pGetCurrentDesignTools.CurrentLayer Is Nothing Then
                Call pGetCurrentDesignTools.SelectLayer(oSurvey.Plan.Layers(cLayers.LayerTypeEnum.Base))
            Else
                Select Case pGetCurrentDesignTools.CurrentLayer.Type
                    Case cLayers.LayerTypeEnum.Base
                        btnLayer_Base.Checked = True
                    Case cLayers.LayerTypeEnum.Borders
                        btnLayer_Borders.Checked = True
                    Case cLayers.LayerTypeEnum.RocksAndConcretion
                        btnLayer_Rocks.Checked = True
                    Case cLayers.LayerTypeEnum.Signs
                        btnLayer_Signs.Checked = True
                    Case cLayers.LayerTypeEnum.Soil
                        btnLayer_Soil.Checked = True
                    Case cLayers.LayerTypeEnum.CeilingMorphologies
                        btnLayer_TerrainLevel.Checked = True
                    Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                        btnLayer_Water.Checked = True
                End Select
            End If

            Call pLayerTools_EnabledByLevel(cIDesign.cDesignTypeEnum.Plan, pGetCurrentDesignTools.CurrentLayer.Type)
            'For Each oItem As BarItem In Ribbon.Items
            '    If TypeOf oItem.Tag Is cEditToolsBag Then
            '        Dim oBag As cEditToolsBag = oItem.Tag
            '        oItem.Visibility = modControls.VisibleToVisibility(oBag.AvaiableInPlan)
            '        For Each oLink As BarItemLink In oItem.Links
            '            oLink.Visible = oBag.AvaiableInPlan
            '        Next
            '    Else
            '        'oItem.Visibility = BarItemVisibility.Always
            '    End If
            'Next
            grpDesignItemsAdd.Visible = True

            Call pSurveySetCurrentCaveBranch(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
            btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
            btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
            Call pSurveySetCurrentBindTypeAndCrosssection(pGetCurrentDesignTools.CurrentBindDesignType, pGetCurrentDesignTools.CurrentCrossSection, True)
            Call pSurveyRestoreCaveBranchLockstate(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            btnMainBindDesignType.Visibility = BarItemVisibility.Always
            btnMainBindCrossSections.Visibility = BarItemVisibility.Always

            RibbonControl.Manager.EndUpdate()

            Call pSurveyLayersFilterApply(False)
            Call pSurveyHighlightCurrentCave(True)

            Call pSurveyMainPropertiesPanelsRefresh()

            Call pRebindDesignBar()
            bDisablePaintEvent = False
            Call pSurveyRedraw()

            Call pObjectPropertyLoad()

            Call oDockJoinPoints.SetSurvey(oSurvey, pGetCurrentDesignTools)
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveySetCurrentBindTypeAndCrosssection(BindingType As cItem.BindDesignTypeEnum, CrossSection As String, Force As Boolean)
        bDisabledCaveBranchChangeEvent = True
        If Force OrElse btnMainBindDesignType.EditValue <> BindingType Then
            btnMainBindDesignType.EditValue = BindingType
            Call pGetCurrentDesignTools.SelectBindDesignType(btnMainBindDesignType.EditValue)
            Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
        End If
        bDisabledCaveBranchChangeEvent = False
    End Sub

    'Private Function cCaveInfoBranch.EditToString(CaveBranchEdit As cCaveInfoBranch) As String
    '    If CaveBranchEdit Is Nothing Then
    '        Return ""
    '    Else
    '        Return CaveBranchEdit.Path
    '    End If
    'End Function

    'Private Function cCaveInfo.EditToString(CaveEdit As cCaveInfo) As String
    '    If CaveEdit Is Nothing Then
    '        Return ""
    '    Else
    '        Return CaveEdit.Name
    '    End If
    'End Function

    Private Sub pSurveySetCurrentCaveBranch(Cave As String, Branch As String)
        bDisabledCaveBranchChangeEvent = True
        Dim sCurrentCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sCurrentBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim bForceBranchChange As Boolean
        If sCurrentCave <> Cave Then
            Dim oCave As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(Cave, "")
            If oCave Is Nothing Then
                'cave and/or branch not exist...reset...
                Cave = ""
                Branch = ""
            Else
                btnMainCaveList.EditValue = oCave
                Call pSurveyFillCaveBranchList(CType(btnMainCaveList.EditValue, cCaveInfo), btnMainCaveBranchList)
            End If
            bForceBranchChange = True
        End If
        If bForceBranchChange OrElse sCurrentBranch <> Branch Then
            If Branch = "" Then
                btnMainCaveBranchList.EditValue = cboMainCaveBranchList.DataSource(0)
            Else
                Dim oBranch As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(Cave, Branch)
                If oBranch Is Nothing Then
                    btnMainCaveBranchList.EditValue = cboMainCaveBranchList.DataSource(0)
                Else
                    btnMainCaveBranchList.EditValue = oBranch
                End If
            End If
        End If
        Call pGetCurrentDesignTools.SelectCave(Cave, Branch)
        bDisabledCaveBranchChangeEvent = False
    End Sub

    Private Sub pSequenceDelete()
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo3"))
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.DeleteSequence(oPoint)
            If oItem.Deleted Then
                .SelectItem(Nothing)
            Else
                Call .SelectPoint(oItem.Points.First)
            End If
            .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pSequenceDivide(Optional Join As Boolean = False)
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo4"))
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.DivideSequence(oPoint, Join)
            .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pItemDeletePoint()
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo5"))
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.Remove(oPoint)
            If oItem.Deleted Then
                .SelectItem(Nothing)
            Else
                Call .SelectPoint(oItem.Points.First)
            End If
            Call .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pItemAddPoint()
        Try
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo6"))
                Dim oNewPoint As cPoint
                If .IsNewPoint Then
                    Dim iIndex As Integer = .CurrentItem.Points.IndexOf(.CurrentNewPointRelative)
                    oNewPoint = .CurrentItemPoint.Clone
                    oNewPoint = .CurrentItem.Points.Insert(iIndex + 1, oNewPoint)
                Else
                    Dim iIndex As Integer = .CurrentItem.Points.IndexOf(.CurrentItemPoint)
                    Dim oNewPaintPoint As PointF = .CurrentItemPoint.Point
                    oNewPaintPoint.X += 0.1
                    oNewPaintPoint.Y += 0.1
                    oNewPoint = .CurrentItem.Points.InsertFromPaintPoint(iIndex + 1, oNewPaintPoint)
                End If
                Call .SelectPoint(oNewPoint)
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pSequenceCombine()
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo7"))
            Dim oEditPoint As cPoint = .CurrentItemPoint
            Dim oNewEditPoint As cPoint = oEditPoint.Item.Points.CombineSequences(oEditPoint)
            Call .SelectPoint(oNewEditPoint)
            Call .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pItemSendToBottom()
        Try
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo8"))
                Call .CurrentLayer.Items.SendToBottom(.CurrentItem)
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pItemSendBehind()
        Try
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo9"))
                Call .CurrentLayer.Items.SendBehind(.CurrentItem)
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pItemBringAhead()
        Try
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo10"))
                Call .CurrentLayer.Items.BringAhead(.CurrentItem)
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pItemBringToTop()
        Try
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo11"))
                Call .CurrentLayer.Items.BringToTop(.CurrentItem)
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub picmap_MouseWheel(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picMap.MouseWheel
        Try
            Dim sDeltaIncrement As Single
            If My.Computer.Keyboard.ShiftKeyDown Then
                sDeltaIncrement = sZoom / 2.0F
            Else
                sDeltaIncrement = sZoom / 10.0F
            End If
            If sDeltaIncrement = 0F Then sDeltaIncrement = 1.0F
            sDeltaIncrement = If(e.Delta > 0, sDeltaIncrement, -sDeltaIncrement)
            If sZoom + sDeltaIncrement > sZoomMax Then
                sZoom = sZoomMax
            ElseIf sZoom + sDeltaIncrement < sZoomMin Then
                sZoom = sZoomMin
            Else
                sZoom = sZoom + sDeltaIncrement
            End If
            Call pMapRepaint()
        Catch
        End Try
    End Sub

    'Private Sub mnuSegmentsAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pSegmentAdd()
    'End Sub

    'Private Sub mnuViewSegmentsAndTrigpoints_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pFieldDataShow(True)
    'End Sub

    'Private Sub mnuViewobjectprop_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pObjectPropShow(True)
    'End Sub

    Private Sub pLevelsShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockLevels, Visible)
    End Sub

    Private Sub pJoinPointsShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockJoinPoints, Visible)
    End Sub

    Private Sub pTextShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockText, Visible)
    End Sub

    Private Sub pClipartShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockClipart, If(Visible.HasValue, Visible, True))
    End Sub

    Private Sub pConsoleShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockConsole, Visible)
    End Sub

    Private Sub pDesignAreaShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockDesigner, Visible)
        Call pMapInvalidate()
    End Sub

    Private Sub pDockContentShow(DockPanel As Docking.DockPanel, Optional ByVal Visible As Boolean? = Nothing)
        If Visible.HasValue Then
            If Visible.Value Then
                Call DockPanel.Show()
            Else
                Call DockPanel.Hide()
            End If
            Call DockPanel.Focus()
        Else
            If DockPanel.Visible Then
                Call DockPanel.Hide()
            Else
                Call DockPanel.Show()
            End If
        End If
    End Sub

    Private Sub pFieldDataShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockData, Visible)
    End Sub

    Private Sub pObjectPropShow(Optional ByVal Visible As Boolean? = Nothing)
        Call pDockContentShow(dockProperties, Visible)
    End Sub

    Private Sub pSegmentsAndTrigPointsShow(ByVal Visible As Boolean)
        spSegmentsAndTrigpoints.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Both
        btnSegmentGridColor.Visibility = BarItemVisibility.Never
        btnSegmentGridColor.Visibility = BarItemVisibility.Never
    End Sub

    Private Sub pTrigpointsShow(ByVal Visible As Boolean)
        Call pFieldDataShow(Visible)
        spSegmentsAndTrigpoints.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Panel2
        btnSegmentGridColor.Visibility = BarItemVisibility.Never
        btnTrigpointGridColor.Visibility = BarItemVisibility.Always
        Call grdTrigPoints.Focus()
        Call pContextChange()
        Call pSelectDataItem()
    End Sub

    Private Sub pSegmentsShow(ByVal Visible As Boolean)
        Call pFieldDataShow(Visible)
        spSegmentsAndTrigpoints.PanelVisibility = DevExpress.XtraEditors.SplitPanelVisibility.Panel1
        btnSegmentGridColor.Visibility = BarItemVisibility.Always
        btnTrigpointGridColor.Visibility = BarItemVisibility.Never
        Call grdSegments.Focus()
        Call pContextChange()
        Call pSelectDataItem()
    End Sub

    Private Sub pSurveyDesignToolsCreateStandardItem(Bag As cEditToolsBag)
        Dim oItem As BarButtonItem = New BarButtonItem
        oItem.Name = "btnItemsAdd_" & Bag.Name & "_Standard"
        oItem.Caption = Bag.Caption
        oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), Bag.Image))
        If Bag.SvgImage <> "" Then
            oItem.ImageOptions.SvgImage = pGetDesignToolsSvgImage(Bag.SvgImage)
            'oItem.ImageOptions.SvgImageSize = New Size(16, 16)
            oItem.ImageOptions.SvgImageColorizationMode = DevExpress.Utils.SvgImageColorizationMode.None
        End If
        oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
        oItem.Tag = Bag
        AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick

        Call RibbonControl.Items.Add(oItem)
    End Sub

    Private Sub pSurveyDesignToolsLoadSubToolbarItem(ByVal Item As XmlElement, Optional ParentMenu As PopupMenu = Nothing) ', ByVal Parent As System.Windows.Forms.ToolStripItemCollection, Optional ByVal IsDropDown As Boolean = False)
        Dim bBeginGroup As Boolean = False
        Dim iLastLayer As cLayers.LayerTypeEnum = -1
        Dim oItemGroup As BarButtonGroup
        For Each oXmlTool As XmlElement In Item.ChildNodes
            If oXmlTool.Name = "tool" Then
                Dim bDebug As Boolean = modXML.GetAttributeValue(oXmlTool, "debug", 0)
                If (Not bDebug) OrElse (bDebug AndAlso modMain.bIsInDebug) Then
                    Dim oBag As cEditToolsBag = New cEditToolsBag(oXmlTool)
                    If Not oBag.Hidden Then
                        Dim sType As String = oBag.Type
                        Dim sCaption As String = oBag.Caption
                        Dim iLayer As cLayers.LayerTypeEnum = oBag.Layer
                        If iLayer <> iLastLayer AndAlso ParentMenu Is Nothing Then
                            iLastLayer = iLayer

                            oItemGroup = New BarButtonGroup
                            oItemGroup.Caption = sCaption
                            RibbonControl.Items.Add(oItemGroup)
                            Call grpDesignItemsAdd.ItemLinks.Add(oItemGroup)

                            bBeginGroup = False
                        End If
                        Select Case sType
                            Case "dropdown"
                                Dim oItem As BarButtonItem = New BarButtonItem
                                oItem.Name = "btnItemsAdd_" & oBag.Name
                                oItem.Caption = sCaption
                                oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                                If oBag.SvgImage <> "" Then
                                    oItem.ImageOptions.SvgImage = pGetDesignToolsSvgImage(oBag.SvgImage)
                                    oItem.ImageOptions.SvgImageSize = New Size(24, 24)
                                    oItem.ImageOptions.SvgImageColorizationMode = DevExpress.Utils.SvgImageColorizationMode.None
                                End If
                                oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                                oItem.Tag = oBag
                                oItem.ActAsDropDown = True
                                oItem.ButtonStyle = BarButtonStyle.DropDown
                                oItem.DropDownControl = New PopupMenu
                                If ParentMenu Is Nothing Then
                                    Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                                Else
                                    ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                                End If
                                Call pSurveyDesignToolsLoadSubToolbarItem(oXmlTool, oItem.DropDownControl)
                            Case "separator", "-"
                                bBeginGroup = True
                            Case "gallery"
                                Dim oItem As BarButtonItem = New BarButtonItem
                                oItem.Name = "btnItemsAdd_" & oBag.Name
                                oItem.Caption = sCaption
                                oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                                If oBag.SvgImage <> "" Then
                                    oItem.ImageOptions.SvgImage = pGetDesignToolsSvgImage(oBag.SvgImage)
                                    oItem.ImageOptions.SvgImageSize = New Size(24, 24)
                                    oItem.ImageOptions.SvgImageColorizationMode = DevExpress.Utils.SvgImageColorizationMode.None
                                End If
                                oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                                oItem.Tag = oBag
                                If ParentMenu Is Nothing Then
                                    Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                                Else
                                    ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                                End If
                                bBeginGroup = False
                                AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick
                                Call pSurveyDesignToolsCreateStandardItem(oBag)

                                Dim sGalleryPart() As String = oBag.Gallery.Split(",")
                                Dim sGalleryName As String = sGalleryPart(0)
                                Dim sGalleryText As String = sCaption 'sGalleryPart(1)
                                Dim bGalleryGroupable As Boolean = sGalleryPart(2)
                                Call oDockClipart.AddGallery(sClipartPath, oBag, sGalleryName, sGalleryText, bGalleryGroupable)
                            Case "texteditor"
                                Dim oItem As BarButtonItem = New BarButtonItem
                                oItem.Name = "btnItemsAdd_" & oBag.Name
                                oItem.Caption = sCaption
                                oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                                If oBag.SvgImage <> "" Then
                                    oItem.ImageOptions.SvgImage = pGetDesignToolsSvgImage(oBag.SvgImage)
                                    oItem.ImageOptions.SvgImageSize = New Size(24, 24)
                                    oItem.ImageOptions.SvgImageColorizationMode = DevExpress.Utils.SvgImageColorizationMode.None
                                End If
                                oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                                oItem.Tag = oBag
                                If ParentMenu Is Nothing Then
                                    Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                                Else
                                    ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                                End If
                                bBeginGroup = False
                                AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick
                                Call pSurveyDesignToolsCreateStandardItem(oBag)
                                Call oDockText.AddText(oBag)
                            Case Else
                                Dim oItem As BarButtonItem = New BarButtonItem
                                oItem.Name = "btnItemsAdd_" & oBag.Name
                                oItem.Caption = sCaption
                                oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                                If oBag.SvgImage <> "" Then
                                    oItem.ImageOptions.SvgImage = pGetDesignToolsSvgImage(oBag.SvgImage)
                                    oItem.ImageOptions.SvgImageSize = New Size(24, 24)
                                    oItem.ImageOptions.SvgImageColorizationMode = DevExpress.Utils.SvgImageColorizationMode.None
                                End If
                                oItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                                oItem.Tag = oBag
                                If ParentMenu Is Nothing Then
                                    Call grpDesignItemsAdd.ItemLinks.Add(oItem)
                                Else
                                    ParentMenu.AddItem(oItem).BeginGroup = bBeginGroup
                                End If
                                bBeginGroup = False
                                AddHandler oItem.ItemClick, AddressOf btnDesignTools_ItemClick
                                Call pSurveyDesignToolsCreateStandardItem(oBag)
                        End Select
                    End If
                End If
            End If
        Next
    End Sub

    Private Sub pSurveyDesignToolsLoadSequenceToAreaItems(Parent As XmlElement)
        For Each oXmlItem As XmlElement In Parent
            If oXmlItem.Name = "tool" Then
                Dim sType As String = modXML.GetAttributeValue(oXmlItem, "type", "")
                If sType = "dropdown" Then
                    Call pSurveyDesignToolsLoadSequenceToAreaItems(oXmlItem)
                Else
                    If sType <> "separator" Then
                        Dim bIsFreehandArea As Boolean = sType = "freehandarea"
                        If bIsFreehandArea Then
                            Dim oBag As cConvertToToolsBag = New cConvertToToolsBag(oXmlItem)
                            Dim oItem As ListViewItem = New ListViewItem(oBag.Caption)
                            oItem.Name = oBag.Name
                            Dim oIcon As Icon = New Icon(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                            Call oAreaFromSequence.imlGeneric.Images.Add(oBag.Image, oIcon)
                            oItem.ImageKey = oBag.Image
                            oItem.Tag = oBag
                            Call oAreaFromSequence.lvItemToCreate.Items.Add(oItem)
                            oItem.Group = oAreaFromSequence.lvItemToCreate.Groups(oBag.Layer)
                        End If
                    End If
                End If
            End If
        Next
    End Sub

    Private Sub btnConvertToItem_ItemClick(sender As Object, e As Ribbon.GalleryItemClickEventArgs)
        Call pItemConvertTo(e.Item.Tag, pGetCurrentDesignTools.CurrentItem)
    End Sub

    Private Function pGetDesignToolsSvgImage(SvgImage As String) As DevExpress.Utils.Svg.SvgImage
        If Not svgItemImages.ContainsKey(SvgImage) Then
            Dim oImage As DevExpress.Utils.Svg.SvgImage = DevExpress.Utils.Svg.SvgImage.FromFile(Path.Combine(Path.Combine(sObjectsPath, "icons"), SvgImage))
            Call svgItemImages.Add(SvgImage, oImage)
        End If
        Return svgItemImages(SvgImage)
    End Function

    Private Sub pSurveyDesignToolsLoadConvertToItems(Parent As XmlElement, Group As DevExpress.XtraBars.Ribbon.GalleryItemGroup, Layer As cLayers.LayerTypeEnum)
        For Each oXmlItem As XmlElement In Parent
            If oXmlItem.Name = "tool" Then
                Dim bDebug As Boolean = modXML.GetAttributeValue(oXmlItem, "debug", 0)
                If (Not bDebug) OrElse (bDebug AndAlso modMain.bIsInDebug) Then
                    If oXmlItem.GetAttribute("type") = "dropdown" Then
                        Call pSurveyDesignToolsLoadConvertToItems(oXmlItem, Group, Layer)
                    Else
                        Dim oBag As cEditToolsBag = New cEditToolsBag(oXmlItem)
                        If Not oBag.Hidden AndAlso oBag.Layer = Layer Then
                            Dim iConvertTo As Integer = oBag.ConvertTo
                            If iConvertTo <> 0 Then
                                Dim oItem As Ribbon.GalleryItem = New Ribbon.GalleryItem
                                oItem.Caption = oBag.Caption
                                oItem.Hint = oBag.Caption
                                If oBag.SvgImage = "" Then
                                    oItem.ImageOptions.Image = New Bitmap(Path.Combine(Path.Combine(sObjectsPath, "icons"), oBag.Image))
                                Else
                                    oItem.ImageOptions.SvgImage = pGetDesignToolsSvgImage(oBag.SvgImage)
                                    oItem.ImageOptions.SvgImageSize = New Size(24, 24)
                                    oItem.ImageOptions.SvgImageColorizationMode = DevExpress.Utils.SvgImageColorizationMode.None
                                End If
                                oItem.Tag = oBag
                                AddHandler oItem.ItemClick, AddressOf btnConvertToItem_ItemClick
                                Call Group.Items.Add(oItem)
                            End If
                        End If
                    End If
                End If
            End If
        Next
    End Sub

    Private Function pSurveyDesignToolsFillConvertToGalleryCreateGroup(LevelButton As BarItem) As DevExpress.XtraBars.Ribbon.GalleryItemGroup
        Dim oGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = New DevExpress.XtraBars.Ribbon.GalleryItemGroup()
        oGroup.Caption = LevelButton.Caption
        oGroup.Tag = LevelButton
        mnuConvertTo.Gallery.Groups.Add(oGroup)
        Return oGroup
    End Function

    Private Sub pSurveyDesignToolsLoad()
        grpDesignItemsAdd.ClearItems

        Dim oXml As XmlDocument = New XmlDocument
        oXml.Load(Path.Combine(modMain.GetApplicationPath, "designtools.xml"))
        Dim oXMLDesign As XmlElement = oXml.Item("design")

        If modXML.ChildElementExist(oXMLDesign, "penstylepattern") Then
            Dim oXMLDesignPenStylePattern As XmlElement = oXMLDesign("penstylepattern")
            If modXML.ChildElementExist(oXMLDesignPenStylePattern, "underlyingcavepen") Then
                Dim oXMLDesignPenStylePatternPen As XmlElement = oXMLDesignPenStylePattern("underlyingcavepen")
                My.Application.RuntimeSettings.SetSettings("penstylepatter.underlyingcavepen", oXMLDesignPenStylePatternPen.GetAttribute("pattern"))
            End If
            If modXML.ChildElementExist(oXMLDesignPenStylePattern, "toonarrowcavepen") Then
                Dim oXMLDesignPenStylePatternPen As XmlElement = oXMLDesignPenStylePattern("toonarrowcavepen")
                My.Application.RuntimeSettings.SetSettings("penstylepatter.toonarrowcavepen", oXMLDesignPenStylePatternPen.GetAttribute("pattern"))
            End If
            If modXML.ChildElementExist(oXMLDesignPenStylePattern, "presumedcavepen") Then
                Dim oXMLDesignPenStylePatternPen As XmlElement = oXMLDesignPenStylePattern("presumedcavepen")
                My.Application.RuntimeSettings.SetSettings("penstylepatter.presumedcavepen", oXMLDesignPenStylePatternPen.GetAttribute("pattern"))
            End If
        End If

        Dim oBaseGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Base)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oBaseGroup, cLayers.LayerTypeEnum.Base)
        If Not oBaseGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oBaseGroup)
        Dim oSoilGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Soil)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oSoilGroup, cLayers.LayerTypeEnum.Soil)
        If Not oSoilGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oSoilGroup)
        Dim oWaterGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Water)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oWaterGroup, cLayers.LayerTypeEnum.WaterAndFloorMorphologies)
        If Not oWaterGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oWaterGroup)
        Dim oRocksGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Rocks)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oRocksGroup, cLayers.LayerTypeEnum.RocksAndConcretion)
        If Not oRocksGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oRocksGroup)
        Dim oTerrainLevelGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_TerrainLevel)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oTerrainLevelGroup, cLayers.LayerTypeEnum.CeilingMorphologies)
        If Not oTerrainLevelGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oTerrainLevelGroup)
        Dim oBordersGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Borders)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oBordersGroup, cLayers.LayerTypeEnum.Borders)
        If Not oBordersGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oBordersGroup)
        Dim oSignsGroup As DevExpress.XtraBars.Ribbon.GalleryItemGroup = pSurveyDesignToolsFillConvertToGalleryCreateGroup(btnLayer_Signs)
        Call pSurveyDesignToolsLoadConvertToItems(oXMLDesign.Item("tools"), oSignsGroup, cLayers.LayerTypeEnum.Signs)
        If Not oSignsGroup.HasVisibleItems Then mnuConvertTo.Gallery.Groups.Remove(oSignsGroup)

        Call pSurveyDesignToolsLoadSubToolbarItem(oXMLDesign.Item("tools"))
        'Catch ex As Exception
        'Call pLogAdd(ex)
        'End Try
        'Call pSurveyDesignToolsLoadSubMenuItem(oXMLDesign.Item("tools"), mnuDesignAdd.DropDownItems)
    End Sub

    Private Function pDesignTools_GetMethod(Layer As Object, MethodName As String, ParametersCount As Integer) As MethodInfo
        Return Layer.GetType.GetMethods.FirstOrDefault(Function(oitem) oitem.Name.ToLower = MethodName.ToLower AndAlso oitem.GetParameters.Count = ParametersCount)
    End Function

    Private Sub pDesignTools_CreateItem(ByVal Bag As cEditToolsBag, Optional ByVal UseSubtype As Boolean = False, Optional ByVal Point As PointF = Nothing, Optional ByVal Filename As String = "", Optional ByVal Text As String = "", Optional ByVal Size As cIItemSizable.SizeEnum = cIItemSizable.SizeEnum.Default, Optional ByVal FontType As cItemFont.FontTypeEnum = cItemFont.FontTypeEnum.Generic)
        Dim bCancel As Boolean = False

        Dim sType As String = ""
        If UseSubtype Then
            Select Case Bag.Type
                Case "gallery"
                    sType = Bag.Subtype
                Case "texteditor"
                    sType = "text"
            End Select
        Else
            sType = Bag.Type
        End If

        Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim iBindDesignType As cItem.BindDesignTypeEnum = btnMainBindDesignType.EditValue

        Dim oItem As cItem
        Select Case sType
            Case "texteditor"
                Call pTextShow(True)
                Call oDockText.txtText.Focus()
            Case "gallery"
                Call pClipartShow(True)
                oDockClipart.tabGallery.SelectedPage = oDockClipart.tabGallery.Pages.FirstOrDefault(Function(oTab) oTab.Name = "tabpage_" & Bag.Gallery.Split(",")(0))
            Case "sketch"
                If oSurvey.TrigPoints.Count > 1 Then
                    If Filename = "" Then
                        Using oOfd As OpenFileDialog = New OpenFileDialog
                            With oOfd
                                .Title = GetLocalizedString("main.openimagedialog")
                                .Filter = GetLocalizedString("main.filetypeIMAGES") & " (*.JPG;*.PNG;*.TIF;*.BMP;*.GIF)|*.JPG;*.PNG;*.TIF;*.BMP;*.GIF|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                                .FilterIndex = 1
                                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                    Filename = .FileName
                                Else
                                    bCancel = True
                                End If
                            End With
                        End Using
                    End If
                    If Not bCancel And Filename <> "" Then
                        Try
                            Using oImage As Image = modPaint.SafeBitmapFromFile(Filename)
                                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "image", oImage))
                                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                                Using frmSE As frmSketchEdit = New frmSketchEdit(oItem)
                                    If frmSE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                        Call pSurveyInvalidate()
                                        Call pGetCurrentDesignTools.EditItem(oItem, True)
                                    Else
                                        Call pGetCurrentDesignTools.EndItem()
                                        Call oLayer.Items.Remove(oItem)
                                        Call oSurvey.Sketches.Rebind()
                                        bCancel = True
                                    End If
                                End Using
                            End Using
                        Catch ex As Exception
                            Call pLogAdd(ex)
                        End Try
                    End If
                Else
                    Call UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning18"), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                End If
            Case "image"
                If Filename = "" Then
                    Using oOfd As OpenFileDialog = New OpenFileDialog
                        With oOfd
                            .Title = GetLocalizedString("main.openimagedialog")
                            .Filter = GetLocalizedString("main.filetypeIMAGES") & " (*.JPG;*.PNG;*.TIF;*.BMP;*.GIF)|*.JPG;*.PNG;*.TIF;*.BMP;*.GIF|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                            .FilterIndex = 1
                            If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                Filename = .FileName
                            Else
                                bCancel = True
                            End If
                        End With
                    End Using
                End If
                If Not bCancel And Filename <> "" Then
                    Try
                        Using oImage As Image = modPaint.SafeBitmapFromFile(Filename)
                            Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                            Call pGetCurrentDesignTools.SelectLayer(oLayer)
                            oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "image", oImage))
                            Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                            Using frmIE As frmImageEdit = New frmImageEdit(oItem)
                                If frmIE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                    Call pGetCurrentDesignTools.EditItem(oItem, True)
                                Else
                                    Call pGetCurrentDesignTools.EndItem()
                                    Call oLayer.Items.Remove(oItem)
                                    bCancel = True
                                End If
                            End Using
                        End Using
                    Catch ex As Exception
                        Call pLogAdd(ex)
                    End Try
                End If
            Case "quota"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sText As String
                If Text = "" Then
                    sText = Bag.Text
                Else
                    sText = Text
                End If
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "text", sText))
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Dim oItemQuota As cItemQuota = oItem
                oItemQuota.Font.Type = FontType
                oItemQuota.TextSize = Size
                Call pGetCurrentDesignTools.EditItem(oItem, True)
            Case "text"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sText As String
                If Text = "" Then
                    sText = Bag.Text
                Else
                    sText = Text
                End If
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "text", sText))
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Dim oItemText As cItemText = oItem
                oItemText.Font.Type = FontType
                oItemText.TextSize = Size
                Call pGetCurrentDesignTools.EditItem(oItem, True)
            Case "legend"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sText As String
                If Text = "" Then
                    sText = Bag.Text
                Else
                    sText = Text
                End If
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "text", sText))
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Dim oItemLegend As cItemLegend = oItem
                oItemLegend.Font.Type = FontType
                oItemLegend.TextSize = Size
                Call pGetCurrentDesignTools.EditItem(oItem, True)
            Case "sign", "clipart", "compass"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sFilename As String
                Dim iDataFormatEnum As cIItemClipartBase.cClipartDataFormatEnum
                If Filename = "" Then
                    sFilename = Bag.Filename
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
                Else
                    sFilename = Filename
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
                End If
                If sFilename.StartsWith("file://") Then
                    sFilename = sFilename.Substring(7)
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
                ElseIf sFilename.StartsWith("id://") Then
                    sFilename = sFilename.Substring(5)
                    iDataFormatEnum = cIItemClipartBase.cClipartDataFormatEnum.SVGResource
                End If
                If sFilename <> "" Then
                    oItem = pDesignTools_GetMethod(oLayer, Bag.Method, 4).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "data", sFilename, "dataformat", iDataFormatEnum))
                    Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                    Call pGetCurrentDesignTools.EditItem(oItem, True)
                End If
            Case "profile", "crosssection"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
                Using frmSB As frmSegmentBrowser = New frmSegmentBrowser(oSurvey, oSegment)
                    If frmSB.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        oSegment = frmSB.SelectedItem
                        oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "segment", oSegment))
                        Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                        Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
                        Call pGetCurrentDesignTools.EditItem(oItem, True)
                    End If
                End Using
            Case "attachment"
                Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                Dim sFilename As String = ""
                Dim iDataFormatEnum As cAttachmentsLinks.cAttachmentDataFormatEnum
                If Filename = "" Then
                    sFilename = Bag.Filename
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                Else
                    sFilename = Filename
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                End If
                If sFilename = "" Then
                    Using oOFD As OpenFileDialog = New OpenFileDialog
                        If oOFD.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                            sFilename = oOFD.FileName
                            iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                        End If
                    End Using
                ElseIf sFilename.StartsWith("file://") Then
                    sFilename = sFilename.Substring(7)
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.File
                ElseIf sFilename.StartsWith("id://") Then
                    sFilename = sFilename.Substring(5)
                    iDataFormatEnum = cAttachmentsLinks.cAttachmentDataFormatEnum.Resource
                End If
                If sFilename <> "" Then
                    oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "data", sFilename, "dataformat", iDataFormatEnum))
                    Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                    Call pGetCurrentDesignTools.EditItem(oItem, True)
                End If
            Case "chunk3d"
                If oSurvey.TrigPoints.Count > 1 Then
                    If Filename = "" Then
                        Using oOfd As OpenFileDialog = New OpenFileDialog
                            With oOfd
                                .Title = GetLocalizedString("main.openchunkdialog")
                                .Filter = GetLocalizedString("main.filetypeCHUNK") & " (*.OBJ;*.STL;*.DAE)|*.OBJ;*.STL;*.DAE|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                                .FilterIndex = 1
                                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                                    Filename = .FileName
                                Else
                                    bCancel = True
                                End If
                            End With
                        End Using
                    End If
                    If Not bCancel And Filename <> "" Then
                        Using frmHIE As frmHolosItemEdit = New frmHolosItemEdit(oSurvey, Filename)
                            If frmHIE.ShowDialog = DialogResult.OK Then
                                Dim oModelEdit As frmHolosItemEdit.cModelEdit = frmHIE.Result

                                '------------------------------------
                                Dim oItem3D As cItemChunk3D = oSurvey.[ThreeD].Layers.ChunkLayer.CreateChunk(sCave, sBranch, Filename)
                                oItem3D.ModelTransform.XScale = oModelEdit.Scale
                                oItem3D.ModelTransform.YScale = oModelEdit.Scale
                                oItem3D.ModelTransform.ZScale = oModelEdit.Scale

                                oItem3D.ModelTransform.XRotate = oModelEdit.RotateX
                                oItem3D.ModelTransform.YRotate = oModelEdit.RotateY
                                oItem3D.ModelTransform.ZRotate = oModelEdit.RotateZ

                                Dim oTrigpoint1 As cTrigPoint = oSurvey.TrigPoints(oModelEdit.Station1)
                                oItem3D.Stations.SetStation1(oModelEdit.Point1, oTrigpoint1)
                                Dim oTrigpoint2 As cTrigPoint = oSurvey.TrigPoints(oModelEdit.Station2)
                                oItem3D.Stations.SetStation2(oModelEdit.Point2, oTrigpoint2)

                                Call pGetCurrentDesignTools.EditItem(oItem3D, True)
                            End If
                        End Using
                    End If
                Else
                    Call UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning35"), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                End If
            Case Else
                Dim oLayer As cLayer = pGetLayer(Bag.Layer)
                Call pGetCurrentDesignTools.SelectLayer(oLayer)
                oItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch))
                If Bag.LineType <> cIItemLine.LineTypeEnum.Undefined Then
                    '    If oItem.HaveLineType Then
                    '        DirectCast(oItem, cIItemLine).LineType = oSurvey.Properties.DesignProperties.GetValue("LineType", My.Application.Settings.GetSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
                    '    End If
                    'Else
                    'if linetype is set from xml definition this linetype is used
                    If oItem.HaveLineType Then
                        DirectCast(oItem, cIItemLine).LineType = Bag.LineType
                    End If
                End If
                Call oItem.SetBindDesignType(iBindDesignType, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), False)
                Call pGetCurrentDesignTools.EditItem(oItem, True)
        End Select

        If Not bCancel Then
            Dim sItemNamePattern As String = oSurvey.Properties.DesignProperties.GetValue("DesignItemNamePattern", "")
            If sItemNamePattern <> "" AndAlso oItem.Name = "" Then
                oItem.Name = modPaint.ReplaceItemTags(oSurvey, oItem, sItemNamePattern)
            End If
            If Not Point.IsEmpty Then
                Select Case oItem.Type
                    Case cIItem.cItemTypeEnum.Text
                        Dim oTextItem As cItemText = oItem
                        Call oTextItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oTextItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()
                    Case cIItem.cItemTypeEnum.Attachment
                        Dim oAttachmentItem As cItemAttachment = oItem
                        Call oAttachmentItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oAttachmentItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()
                    Case cIItem.cItemTypeEnum.Compass
                        'for compass bound is not needed...sign have one point (have to be center...for now left center point)...
                        Dim oCompassItem As cItemCompass = oItem
                        Call oCompassItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oCompassItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()
                    Case cIItem.cItemTypeEnum.Clipart
                        'for clipart bound is needed due to different resize approach...clipart is warped and have 4 point so move to point have to be adjusted
                        Dim oClipartItem As cItemClipart = oItem
                        Call oClipartItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Dim oBounds As RectangleF = oClipartItem.Clipart.Clipart.GetBounds
                        Call oClipartItem.MoveTo(New PointF(oCurrentCenter.X - oBounds.Size.Width / 2, oCurrentCenter.Y - oBounds.Size.Height / 2))
                        Call pGetCurrentDesignTools.EndAndSelectItem()
                    Case cIItem.cItemTypeEnum.Sign
                        'for sign bound is not needed...sign have one point (center)...
                        Dim oSignItem As cItemSign = oItem
                        Call oSignItem.FixBound(True)
                        Dim oCurrentCenter As PointF = Point
                        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
                        Call oSignItem.MoveTo(oCurrentCenter)
                        Call pGetCurrentDesignTools.EndAndSelectItem()
                End Select

                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Function pGetLayer(Layer As Object) As Object
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Return DirectCast(oCurrentDesign, cDesign3D).Layers(Layer)
        Else
            Return oCurrentDesign.Layers(Layer)
        End If
    End Function

    Private Sub pItemClipartCreate(ClipartItem As cItemClipart, Point As PointF)
        Dim sDesignClipartScaleFactor As Single = 1 ' oSurvey.Properties.DesignProperties.GetValue("DesignClipartScaleFactor", 1)
        Call ClipartItem.Points.BeginUpdate()
        Call ClipartItem.Points.Clear()
        Call ClipartItem.Points.AddFromPaintPoint(0, 0)
        Call ClipartItem.Points.AddFromPaintPoint(1 * sDesignClipartScaleFactor, 1 * sDesignClipartScaleFactor)
        Call ClipartItem.Points.EndUpdate()
        Call ClipartItem.FixBound(True)

        Dim oRect As RectangleF = ClipartItem.GetBounds
        Dim sWidth As Single = oRect.Width
        Dim sHeight As Single = oRect.Height

        Dim oCurrentCenter As PointF = Point
        oCurrentCenter = modPaint.FromPaintPoint(oCurrentCenter, sPaintZoom, oPaintTranslation)
        oCurrentCenter.X = oCurrentCenter.X - sWidth / 2
        oCurrentCenter.Y = oCurrentCenter.Y - sHeight / 2
        Call ClipartItem.MoveTo(oCurrentCenter)
    End Sub

    Private Class cMostUsedItemCounters
        Public BaseValue As Integer
        Public Value As Integer

        Public Sub New()

        End Sub

        Public Sub New(BaseValue As Integer)
            Me.BaseValue = BaseValue
            Me.Value = Me.BaseValue
        End Sub

        'Public Sub New(BaseValue As Integer, Value As Integer)
        '    Me.BaseValue = BaseValue
        '    Me.Value = Value
        'End Sub
    End Class

    Private oMostUsedItems As Dictionary(Of BarItem, cMostUsedItemCounters) = New Dictionary(Of BarItem, cMostUsedItemCounters)
    Private oLastUsedItems As List(Of BarItem) = New List(Of BarItem)
    Private iMaxUsedItem As Integer = 12

    Private Sub pReloadUsedToolsBar()
        If oLastUsedBar IsNot Nothing Then
            Call oLastUsedBar.BeginUpdate()
            Call oLastUsedBar.ClearLinks()
            oLastUsedBar.AddItem(btnToolsLastUsed)
            oLastUsedBar.AddItem(btnToolsMostUsed)
            If btnToolsLastUsed.Checked Then
                If oLastUsedItems.Count > 0 Then
                    Call oLastUsedBar.ItemLinks.AddRange(oLastUsedItems, True, RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
                End If
            Else
                If oMostUsedItems.Count > 0 Then
                    Call oLastUsedBar.ItemLinks.AddRange(oMostUsedItems.ToList.OrderBy(Function(oitem) oitem.Value.Value).Select(Function(oitem) oitem.Key).Take(iMaxUsedItem), True, RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
                End If
            End If
            Call oLastUsedBar.EndUpdate()
        End If
    End Sub

    Private Sub btnDesignTools_ItemClick(sender As Object, e As ItemClickEventArgs)
        Dim oItem As BarItem = e.Item

        'If bDesignBarShowLastUsedTools Then
        Dim oStandardItem As BarItem
        If e.Item.Name.EndsWith("_Standard") Then
            oStandardItem = e.Item
        Else
            oStandardItem = RibbonControl.Items.FindByName(e.Item.Name & "_Standard")
        End If

        If Not oMostUsedItems.ContainsKey(oStandardItem) Then oMostUsedItems.Add(oStandardItem, New cMostUsedItemCounters)
        oMostUsedItems(oStandardItem).Value += 1

        If oLastUsedItems.Contains(oStandardItem) Then oLastUsedItems.Remove(oStandardItem)
        Call oLastUsedItems.Add(oStandardItem)
        If oLastUsedItems.Count > iMaxUsedItem Then
            Call oLastUsedItems.RemoveAt(0)
        End If
        Call pReloadUsedToolsBar()
        'End If

        btnCursorMode.Down = True
        Dim oBag As cEditToolsBag = oItem.Tag
        Call pDesignTools_CreateItem(oBag)
    End Sub

    'Private Sub mnuDesignItem_Opening(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles mnuDesignItemOLD.Opening
    '    Try
    '        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
    '        If oItem.Type = cIItem.cItemTypeEnum.Segment Then
    '            Dim oItemSegment As cItemSegment = oItem
    '            'If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
    '            '    mnuDesignItemSegmentInvert.Visible = False
    '            'Else
    '            '    mnuDesignItemSegmentInvert.Enabled = Not oItemSegment.Segment.IsProfileBinded AndAlso oItemSegment.Segment.Direction <> cSurvey.cSurvey.DirectionEnum.Vertical
    '            'End If
    '            mnuDesignItemSegmentSplay.Visible = True


    '            'mnuDesignItemImage.Visible = False
    '            'mnuDesignItemSketch.Visible = False
    '            mnuDesignItemBar0.Visible = True

    '            'mnuDesignItemCut.Visible = False
    '            'mnuDesignItemCopy.Visible = False
    '            'mnuDesignItempaste.Visible = False
    '            'mnuDesignItemDelete.Visible = False

    '            'mnuDesignItemChangeTo.Visible = False
    '            'mnuDesignItemRotate.Visible = False

    '        Else
    '            'mnuDesignItemSegmentInvert.Visible = False
    '            mnuDesignItemSegmentSplay.Visible = False
    '            'mnuDesignItemSegmentSetCoordinate.Visible = False
    '            'mnuDesignItemSegmentSetCoordinateCP.Visible = False

    '            'mnuDesignItemImage.Visible = oItem.HaveImage
    '            'mnuDesignItemSketch.Visible = oItem.HaveSketch

    '            'Dim bItemItems As Boolean
    '            'If oItem.Type = cIItem.cItemTypeEnum.Items Then
    '            '    Dim oItemItems As cItemItems = oItem
    '            '    Dim bCombined As Boolean = True
    '            '    For Each oSubItem As cItem In oItemItems
    '            '        bCombined = bCombined And oSubItem.CanBeCombined
    '            '    Next
    '            '    btnCurrentItemItemsCombine.Visible = bCombined
    '            '    bItemItems = bCombined
    '            '    grpCurrentItemItems.Visible = bItemItems
    '            'Else
    '            '    grpCurrentItemItems.Visible = False
    '            '    bItemItems = False
    '            'End If

    '            'mnuDesignItemCut.Visible = True
    '            'mnuDesignItemCopy.Visible = True
    '            'mnuDesignItempaste.Visible = False
    '            'mnuDesignItemDelete.Visible = True

    '            'Dim bCanBeRaised As Boolean = pGetCurrentDesignTools.CurrentLayer.Items.Contains(oItem)
    '            'mnuDesignItemBringAhead.Visible = bCanBeRaised
    '            'mnuDesignItemBringOnTop.Visible = bCanBeRaised
    '            'mnuDesignItemSendToBottom.Visible = bCanBeRaised
    '            'mnuDesignItemSendBehind.Visible = bCanBeRaised
    '            'mnuDesignItemBar3.Visible = bCanBeRaised

    '            'mnuDesignItemRotate.Visible = oItem.CanBeRotated
    '            'mnuDesignItemChangeTo.Visible = pGetCurrentDesignTools.CurrentItem.HaveEditablePoints   'pGetCurrentDesignTools.CurrentLayer.Type = cLayers.LayerTypeEnum.Borders

    '        End If
    '    Catch
    '    End Try
    'End Sub

    Private Sub pSequenceClose()
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo12"))
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.CloseSequence(oPoint)
            Call .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pItemRotateBy(Angle As Single, CenteredOnOrigin As Boolean)
        With pGetCurrentDesignTools()

            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo13"))
            If .CurrentItem Is Nothing Then
                Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                Dim oCenter As PointF
                If CenteredOnOrigin Then
                    oCenter = New PointF(0, 0)
                Else
                    oCenter = New PointF(oRect.Left + oRect.Width / 2, oRect.Top + oRect.Height / 2)
                End If
                Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oItem.AddRange(oCurrentDesign.GetAllItems)
                If oItem.Count > 0 Then
                    Call oItem.RotateAt(oCenter, Angle)
                End If
            Else
                If CenteredOnOrigin Then
                    Call .CurrentItem.RotateAt(New PointF(0, 0), Angle)
                Else
                    Call .CurrentItem.Rotate(Angle)
                End If
            End If
            Call pPropertyItemBounds()

            Call .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pObjectFlipV()
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo14"))
            If .CurrentItem Is Nothing Then
                Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oItem.AddRange(oCurrentDesign.GetAllItems)
                If oItem.Count > 0 Then
                    oItem.ResizeBy(-1, 1)
                End If
            Else
                Call .CurrentItem.ResizeBy(1, -1)
            End If
            Call pPropertyItemBounds()
            Call .CommitUndoSnapshot()
        End With
        pGetCurrentDesignTools.LastCenterPoint = New PointF(0, 0)
        Call pMapInvalidate()
    End Sub

    Private Sub pObjectFlipH()
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo15"))
            If .CurrentItem Is Nothing Then
                Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oItem.AddRange(oCurrentDesign.GetAllItems)
                If oItem.Count > 0 Then
                    oItem.ResizeBy(-1, 1)
                End If
            Else
                Call .CurrentItem.ResizeBy(-1, 1)
            End If
            Call pPropertyItemBounds()
            Call .CommitUndoSnapshot()
        End With
        pGetCurrentDesignTools.LastCenterPoint = New PointF(0, 0)
        Call pMapInvalidate()
    End Sub

    Private Sub pUndoRefresh()
        Dim bIsUndoable As Boolean = pGetCurrentTools.Undo.IsUndoable
        btnUndo.Enabled = bIsUndoable
    End Sub

    Private Sub pUnfrozeDesktopImage()
        If Not IsNothing(oFrozenDesktop) Then
            Call oFrozenDesktop.Dispose()
            oFrozenDesktop = Nothing
        End If
    End Sub

    Private Sub pFrozeDesktopImage()
        Call pUnfrozeDesktopImage()
        Dim oTempFrozenDesktop As Image = New Bitmap(picMap.Width, picMap.Height)
        Call pSurveyDraw(Graphics.FromImage(oTempFrozenDesktop), True)
        oFrozenDesktop = oTempFrozenDesktop
    End Sub

    Private Sub oPlanTools_OnFilterApplied(Sender As Object, ToolEventArgs As cFilterEventArgs) Handles oPlanTools.OnFilterApplied
        Call pSurveyLayersFilterApply(True, ToolEventArgs.Refresh)
    End Sub

    Private Sub oProfileTools_OnFilterApplied(Sender As Object, ToolEventArgs As cFilterEventArgs) Handles oProfileTools.OnFilterApplied
        Call pSurveyLayersFilterApply(True, ToolEventArgs.Refresh)
    End Sub

    Private Sub oPlanTools_OnItemPointDelete(Sender As Object, ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemPointDelete, oProfileTools.OnItemPointDelete
        Call pMapInvalidate()
    End Sub

    Private Sub oPlanTools_OnItemEdit(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemEdit, oProfileTools.OnItemEdit
        picMap.Cursor = Cursors.Cross
        Call pFrozeDesktopImage()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oPlanTools_OnItemPointEdit(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemPointEdit, oProfileTools.OnItemPointEdit
        picMap.Cursor = Cursors.Cross
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oPlanTools_OnItemEnd(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemEnd, oProfileTools.OnItemEnd
        Dim bValidItem As Boolean = Not ToolEventArgs.CurrentItem Is Nothing
        If Not oFrozenDesktop Is Nothing Then
            If bValidItem Then
                If ToolEventArgs.IsNewItem Then
                    Dim oItem As cItem = ToolEventArgs.CurrentItem
                    If oItem.CanBeReduced Then
                        If btnPenSmooting.Checked Then
                            Dim oLineItem As Items.cIItemLine = oItem
                            Call oLineItem.ReducePoints(btnPenSmootingFactor.EditValue)
                        End If
                        Dim iDefaultLineType As cIItemLine.LineTypeEnum = oSurvey.Properties.DesignProperties.GetValue("LineType", My.Application.Settings.GetSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
                        If iDefaultLineType = cIItemLine.LineTypeEnum.Beziers Then
                            'sequence to bezier
                            Call pSequencesTo(cIItemLine.LineTypeEnum.Beziers, True)
                        End If
                    End If
                    'workaraound for images...width or height can not be less then 1 m
                    If oItem.Type = cIItem.cItemTypeEnum.Image Then
                        If oItem.Points.Count = 2 Then
                            If oItem.Size.Width < 1.0F OrElse oItem.Size.Height < 1.0F Then
                                Call oItem.Points(1).MoveBy(1, 1)
                            End If
                        ElseIf oItem.Points.Count < 2 Then
                            Dim oPoint As PointF = oItem.Points(0).Point
                            oPoint += New SizeF(1.0F, 1.0F)
                            oItem.Points.AddFromPaintPoint(oPoint)
                        End If
                    End If
                End If
            End If
        End If
        Call pUnfrozeDesktopImage()

        If bValidItem Then
            With ToolEventArgs.CurrentItem
                If .Points.Count = 0 AndAlso .Type <> cIItem.cItemTypeEnum.Group AndAlso .Type <> cIItem.cItemTypeEnum.Items AndAlso .Type <> cIItem.cItemTypeEnum.Sketch AndAlso .Type <> cIItem.cItemTypeEnum.CrossSectionMarker AndAlso .Type <> cIItem.cItemTypeEnum.Trigpoint AndAlso .Type <> cIItem.cItemTypeEnum.Segment Then
                    Call .Layer.Items.Remove(ToolEventArgs.CurrentItem)
                    Call pGetCurrentDesignTools.Reset()
                Else
                    If ToolEventArgs.IsNewItem Then
                        Call pGetCurrentDesignTools.CreateUndoSnapshot(modMain.GetLocalizedString("main.undo24"), ToolEventArgs.CurrentItem)
                    End If
                    Call .Invalidate(oCurrentOptions)
                End If
            End With
        End If

        Sender.LastAngle = 0
        Sender.LastAnchor = AnchorRectangleTypeEnum.None
        picMap.Cursor = Cursors.Default

        Call pFloatingToolbarHide()

        btnItemsEndEdit.Enabled = False

        Call pUndoRefresh()
        If ToolEventArgs.IsNewItem Then
            Call pGetCurrentDesignTools.CreateSelectionSnaphot()
            Call pObjectPropertyLoad()
        End If
        Call pMapInvalidate()

        Call pClipboardAlign()
    End Sub

    Private Sub oPlanTools_OnItemCombine(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemCombine, oProfileTools.OnItemCombine
        Call pMapInvalidate()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oPlanTools_OnRefreshDesign(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnRefreshDesign, oProfileTools.OnRefreshDesign, o3DTools.OnRefreshDesign
        Call pMapInvalidate()
        Call pClipboardAlign()
    End Sub

    Private Sub oPlanTools_OnItemSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemSelect, oProfileTools.OnItemSelect
        Dim bThereIsAnItemSelected As Boolean = Not pGetCurrentDesignTools.CurrentItem Is Nothing
        If bThereIsAnItemSelected AndAlso Not bUndoRestore Then pGetCurrentDesignTools.CreateSelectionSnaphot()
        btnZoomZoomToSelection.Enabled = bThereIsAnItemSelected

        Call pMapInvalidate()
        Call pObjectPropertyDelayedLoad()
        Call pClipboardAlign()
    End Sub

    Private Sub oPlanTools_OnLayerSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnLayerSelect, oProfileTools.OnLayerSelect
        Select Case ToolEventArgs.CurrentLayer.Type
            Case cLayers.LayerTypeEnum.Base
                If Not btnLayer_Base.Checked Then
                    btnLayer_Base.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Borders
                If Not btnLayer_Borders.Checked Then
                    btnLayer_Borders.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.RocksAndConcretion
                If Not btnLayer_Rocks.Checked Then
                    btnLayer_Rocks.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Signs
                If Not btnLayer_Signs.Checked Then
                    btnLayer_Signs.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Soil
                If Not btnLayer_Soil.Checked Then
                    btnLayer_Soil.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.CeilingMorphologies
                If Not btnLayer_TerrainLevel.Checked Then
                    btnLayer_TerrainLevel.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                If Not btnLayer_Water.Checked Then
                    btnLayer_Water.PerformClick()
                End If
        End Select

        Call pObjectPropertyLoad()

        'v2: I leave this...even if v2 is no more compiled for 32 bit
        'this was necessary to prevent strange behaviour 
        If modMain.Is32Bit Then
            Call GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced)
        End If
    End Sub

    Private Sub oPlanTools_OnItemPointEnd(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemPointEnd, oProfileTools.OnItemPointEnd
        Call pUndoRefresh()
        Call pMapInvalidate()
        Call pObjectPropertyLoad()
    End Sub

    Private Sub pTrigpointItemSelect()
        If oTools IsNot Nothing Then
            If Not oTools.CurrentTrigpoint Is Nothing AndAlso Not oTools.CurrentTrigpoint.IsSystem Then
                If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemTrigpoint Then
                    Dim oItemTrigpoint As cItemTrigpoint = pGetCurrentDesignTools.CurrentItem
                    oItemTrigpoint.Trigpoint = oTools.CurrentTrigpoint
                Else
                    Dim oItemTrigpoint As cItemTrigpoint = New cItemTrigpoint(oSurvey, oCurrentDesign, oTools.CurrentTrigpoint)
                    Call pGetCurrentDesignTools.SelectItem(oItemTrigpoint)
                End If
            End If
        End If
    End Sub

    Private Sub pSegmentItemSelect()
        If oTools IsNot Nothing Then
            If oCurrentDesign IsNot Nothing AndAlso oTools.CurrentSegment IsNot Nothing Then
                If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemSegment Then
                    Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
                    oItemSegment.Segment = oTools.CurrentSegment
                Else
                    Dim oItemSegment As cItemSegment = New cItemSegment(oSurvey, oCurrentDesign, oTools.CurrentSegment)
                    Call pGetCurrentDesignTools.SelectItem(oItemSegment)
                End If
            End If
        End If
    End Sub

    Private Sub oTools_OnSegmentSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditTools.cEditBaseToolsEventArgs) Handles oTools.OnSegmentSelect
        Call pFloatingToolbarHide()

        Call pSegmentSave(ToolEventArgs.PreviousSegment)
        Dim iRowHandle As Integer = grdViewSegments.FindRow(ToolEventArgs.CurrentSegment)
        If iRowHandle <> grdViewSegments.FocusedRowHandle Then
            Call grdViewSegments.FullFocusRow(iRowHandle)
        End If
        Call pSegmentLoad(ToolEventArgs.CurrentSegment)

        Call oSurvey.Plan.Plot.Redraw(ToolEventArgs.PreviousSegment)
        Call oSurvey.Profile.Plot.Redraw(ToolEventArgs.PreviousSegment)
        Call oSurvey.Plan.Plot.Redraw(ToolEventArgs.CurrentSegment)
        Call oSurvey.Profile.Plot.Redraw(ToolEventArgs.CurrentSegment)

        Call pClipboardAlign()

        Call pSegmentItemSelect()
    End Sub

    Private Sub btnCut_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Call pClipboardCut()
    End Sub

    Private Sub pClipboardCut()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart10"))
        If grdSegments.Focused Then
            Try
                If grdViewSegments.GetSelectedRows.Count > 0 Then
                    Call pGetCurrentTools.CutSegments(pSegmentsFromGridSelection())
                End If
            Catch
            End Try
        ElseIf picMap.Focused Then
            Try
                Call pGetCurrentDesignTools.CutItem()
            Catch ex As Exception
                Call pLogAdd(ex)
            End Try
            Call pMapInvalidate()
        End If
        Call pStatusSet(GetLocalizedString("main.textpart9"))
        Call oMousePointer.Pop()
    End Sub

    Private Sub pClipboardPaste(Optional ByVal Format As String = "", Optional ByVal Location As PointF = Nothing)
        oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart157"))
        If grdSegments.Focused Then
            Try
                Dim iIndex As Integer = grdViewSegments.GetFocusedDataSourceRowIndex
                bDisableSegmentsChangeEvent = True
                Dim oSegments As List(Of cSegment) = pGetCurrentTools.PasteSegments(Format, iIndex, btnMainSessionList.EditValue, btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
                bDisableSegmentsChangeEvent = False
                'Call pSurveySegmentsGridSetup()
                Call pSegmentSelect(oSurvey.Segments(iIndex + oSegments.Count - 1), False, False)
            Catch
            End Try
        ElseIf picMap.Focused Then
            Call pGetCurrentDesignTools.PasteItem(Format, Location)
        End If
        Call oMousePointer.Pop()
    End Sub

    Private Function pSegmentsFromGridSelection(Optional OnlyEditable As Boolean = False) As cSegmentCollection
        Dim oSegments As cSegmentCollection = New cSegmentCollection(oSurvey)
        Dim oSortedSegments As SortedList(Of Integer, cSegment) = New SortedList(Of Integer, cSegment)
        Dim bAdd As Boolean
        For Each iRowHandle As Integer In grdViewSegments.GetSelectedRows
            Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetRow(iRowHandle)
            If Not oSegmentPlaceholder Is Nothing Then
                Dim oSegment As cSegment = oSegmentPlaceholder.Segment
                If OnlyEditable Then
                    bAdd = oSegment.Splay OrElse (Not oSegment.IsBinded) OrElse oSegment.IsOrigin OrElse Not oSegment.GetLocked
                Else
                    bAdd = True
                End If
                If bAdd Then
                    Call oSortedSegments.Add(iRowHandle, oSegment)
                End If
            End If
        Next
        For Each oSegment As cSegment In oSortedSegments.Values
            Call oSegments.Append(oSegment)
        Next
        Return oSegments
    End Function

    Private Sub pClipboardCopy()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart8"))
        If grdSegments.Focused Then
            If grdViewSegments.GetSelectedRows.Count > 0 Then
                Call pGetCurrentTools.CopySegments(pSegmentsFromGridSelection())
            End If
        ElseIf picMap.Focused Then
            With pGetCurrentDesignTools()
                If Not .CurrentItem Is Nothing Then
                    Call .EndAndSelectItem()
                    Call .CopyItem()
                End If
            End With
        End If
        Call pStatusSet(GetLocalizedString("main.textpart9"))
        Call oMousePointer.Pop()
    End Sub

    Private Sub pClipboardDelete()
        If btnDelete.Enabled Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            Call pStatusSet(GetLocalizedString("main.textpart7"))
            If grdSegments.Focused Then
                Try
                    Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
                    If Not oSegment Is Nothing Then
                        Dim bEnabledEdit As Boolean = ((oSegment.Splay) OrElse (Not (oSegment.IsBinded OrElse oSegment.IsOrigin))) OrElse (pGetDisableDataGridConstraint())
                        If bEnabledEdit Then
                            Call pSegmentDelete()
                        End If
                    End If
                Catch
                End Try
            ElseIf picMap.Focused Then
                Call pDesignItemDelete()
            ElseIf h3D.Focused Then
                Call pDesignItemDelete()
            End If
            Call pStatusSet(GetLocalizedString("main.textpart6"))
            Call oMousePointer.Pop()
        End If
    End Sub

    Private Sub pDesignItemDelete()
        Call oMousePointer.Push(Cursors.WaitCursor)
        With pGetCurrentDesignTools()
            If .CurrentItemPoint Is Nothing Then
                Call .EndAndSelectItem()
                Call .DeleteItem()
            Else
                Call .DeleteItemPoint()
            End If
            Call pFloatingToolbarUpdate()
        End With
        Call oMousePointer.Pop()
    End Sub

    Private Sub pSettingsSetDesignQuality(ByVal Quality As DesignQualityLevelEnum, Optional ByVal ForceSetting As Boolean = False)
        If Quality <> iDesignQuality OrElse ForceSetting Then
            iDesignQuality = Quality
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub oHSB_Scroll(ByVal sender As Object, ByVal e As System.Windows.Forms.ScrollEventArgs) Handles oHSB.Scroll
        oPaintTranslation = New PointF(-e.NewValue, oPaintTranslation.Y)
        If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()
        Call pMapInvalidate()
    End Sub

    Private Sub oVSB_Scroll(ByVal sender As Object, ByVal e As System.Windows.Forms.ScrollEventArgs) Handles oVSB.Scroll
        oPaintTranslation = New PointF(oPaintTranslation.X, -e.NewValue)
        If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()
        Call pMapInvalidate()
    End Sub

    Private bUndoRestore As Boolean

    Private Sub pSurveyUndo()
        Call oMousePointer.Push(Cursors.WaitCursor)
        bUndoRestore = True
        Call pGetCurrentDesignTools.EndItem()
        Dim oRestore As cUndoRestore = pGetCurrentTools.Undo.RestoreSnapshot()
        If oRestore IsNot Nothing Then
            Select Case oRestore.Area
                Case cUndo.cAreaEnum.DesignPlan
                    Dim oRestoreDesign As cUndoRestoreDesign = oRestore
                    Call pSurveyShowPlan()
                    If oRestoreDesign.Items.Count > 0 Then
                        If oRestoreDesign.Items.Count = 1 Then
                            Call pGetCurrentDesignTools.SelectItem(oRestoreDesign.Items(0))
                        Else
                            Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                            Call oItemItems.AddRange(oRestoreDesign.Items)
                            Call pGetCurrentDesignTools.SelectItem(oItemItems)
                        End If
                    End If
                Case cUndo.cAreaEnum.DesignProfile
                    Dim oRestoreDesign As cUndoRestoreDesign = oRestore
                    Call pSurveyShowProfile()
                    If oRestoreDesign.Items.Count > 0 Then
                        If oRestoreDesign.Items.Count = 1 Then
                            Call pGetCurrentDesignTools.SelectItem(oRestoreDesign.Items(0))
                        Else
                            Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                            Call oItemItems.AddRange(oRestoreDesign.Items)
                            Call pGetCurrentDesignTools.SelectItem(oItemItems)
                        End If
                    End If
            End Select
            Call pObjectPropertyLoad()
        End If
        bUndoRestore = False
        Call oMousePointer.Pop()
        Call pMapInvalidate()
        Call pUndoRefresh()
    End Sub

    Private Function pSegmentsLRUDIsInRange(Segment As cSegment, Form As frmManageLRUD) As Boolean
        Dim bHaveLRUD As Boolean = Segment.HaveLRUD
        If bHaveLRUD Then
            Dim bCalculatedLRUD As Boolean = Segment.DataProperties.GetValue("LRUD_calculated", False)
            If bCalculatedLRUD Then
                Return Form.chkShotWithCalculatedLRUD.Checked
            Else
                Return Form.chkShotWithLRUD.Checked
            End If
        Else
            Return Form.chkShotWithoutLRUD.Checked
        End If
    End Function

    Private Sub pSegmentsLRUDManage()
        Dim oCurrentSegment As cSegment = pGetCurrentTools.CurrentSegment
        If Not oCurrentSegment Is Nothing Then
            Dim sOldSession As String = "" & oCurrentSegment.Session
            Dim sOldCave As String = "" & oCurrentSegment.Cave
            Dim sOldBranch As String = "" & oCurrentSegment.Branch

            If Not oCurrentSegment Is Nothing Then
                sOldSession = "" & oCurrentSegment.Session
                sOldCave = "" & oCurrentSegment.Cave
                sOldBranch = "" & oCurrentSegment.Branch
            End If

            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oSession As cSession
            Dim oCave As cCaveInfo
            Dim oCaveBranch As cCaveInfoBranch
            Try : oSession = oSurvey.Properties.Sessions(sOldSession) : Catch : End Try
            Try : oCave = oSurvey.Properties.CaveInfos(sOldCave) : Catch : End Try
            Try : oCaveBranch = oCave.Branches(sOldBranch) : Catch : End Try

            Dim iRows As Integer = pSegmentsFromGridSelection.Count
            Call oMousePointer.Pop()

            Using frmMLRUD As frmManageLRUD = New frmManageLRUD(oSurvey, oSession, oCave, oCaveBranch, iRows)
                With frmMLRUD
                    If .ShowDialog(Me) = vbOK Then
                        bDisableSegmentsChangeEvent = True
                        Call grdSegments.BeginUpdate()
                        Dim bBackup As Boolean = .chkBackup.Checked
                        If .cboAction.SelectedIndex = 0 Then
                            Dim bMarkAsCalculated As Boolean = .chkMarkAsCalculated.Checked
                            If bMarkAsCalculated Then
                                Call oSurvey.Properties.DataTables.Segments.Add("LRUD_calculated", Data.cDataFields.TypeEnum.Boolean)
                                Call oSurvey.Properties.DataTables.Segments.Add("LRUD_source", Data.cDataFields.TypeEnum.Text)
                            End If

                            Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                            For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                                If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then
                                    Dim oSplay As cSegmentCollection
                                    Dim oSegmentSession As cSession = oSessions(oSegment.Session)
                                    If oSegmentSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                                        oSplay = oSurvey.Segments.GetSplaySegments(oSegment.From)
                                    Else
                                        oSplay = oSurvey.Segments.GetSplaySegments(oSegment.To)
                                    End If
                                    If oSplay.Count >= 4 Then
                                        If bBackup Then Call .Backup(oSegment)

                                        If .RadioButton1a.Checked Then
                                            oSegment.Left = modNumbers.MathRound(oSplay(0).Data.Data.Distance, 2)
                                            oSegment.Right = modNumbers.MathRound(oSplay(1).Data.Data.Distance, 2)
                                            oSegment.Up = modNumbers.MathRound(oSplay(2).Data.Data.Distance, 2)
                                            oSegment.Down = modNumbers.MathRound(oSplay(3).Data.Data.Distance, 2)
                                            oSegment.Save()
                                        ElseIf .RadioButton1b.Checked Then
                                            oSegment.Up = modNumbers.MathRound(oSplay(0).Data.Data.Distance, 2)
                                            oSegment.Down = modNumbers.MathRound(oSplay(1).Data.Data.Distance, 2)
                                            oSegment.Left = modNumbers.MathRound(oSplay(2).Data.Data.Distance, 2)
                                            oSegment.Right = modNumbers.MathRound(oSplay(3).Data.Data.Distance, 2)
                                        End If
                                        If bMarkAsCalculated Then
                                            Call oSegment.DataProperties.SetValue("LRUD_calculated", True)
                                            Call oSegment.DataProperties.SetValue("LRUD_source", "4shots")
                                        End If
                                    End If
                                End If
                            Next
                            Call oSurvey.Segments.SaveAll()
                        ElseIf .cboAction.SelectedIndex = 1 Then
                            Dim bMarkAsCalculated As Boolean = .chkMarkAsCalculated.Checked
                            If bMarkAsCalculated Then
                                Call oSurvey.Properties.DataTables.Segments.Add("LRUD_calculated", Data.cDataFields.TypeEnum.Boolean)
                                Call oSurvey.Properties.DataTables.Segments.Add("LRUD_source", Data.cDataFields.TypeEnum.Text)
                            End If

                            Select Case .cboMode2Mode.SelectedIndex
                                Case 0
                                    Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                                    For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                                        If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then
                                            If bBackup Then Call .Backup(oSegment)

                                            Dim iFromOrTo As GetDesignStationEnum
                                            Dim oSegmentSession As cSession = oSessions(oSegment.Session)
                                            If oSegmentSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                                                If oSegment.Data.Data.Reversed Then
                                                    iFromOrTo = GetDesignStationEnum.To
                                                Else
                                                    iFromOrTo = GetDesignStationEnum.From
                                                End If
                                            Else
                                                If oSegment.Data.Data.Reversed Then
                                                    iFromOrTo = GetDesignStationEnum.From
                                                Else
                                                    iFromOrTo = GetDesignStationEnum.To
                                                End If
                                            End If

                                            Dim iPlanAngleRange As Decimal = .txtMode2H.Value
                                            Dim iProfileAngleRange As Decimal = .txtMode2V.Value
                                            Dim bUseOnlyCutSplay As Boolean = .chkMode2OnlyCutSplay.Checked

                                            If iFromOrTo = GetDesignStationEnum.From Then
                                                Dim oFromSplays As List(Of cSegment)
                                                If bUseOnlyCutSplay Then
                                                    oFromSplays = oSegment.FromSplays.Select(Function(item) DirectCast(item, cSegment)).Where(Function(item) item.Cut).ToList
                                                Else
                                                    oFromSplays = oSegment.FromSplays.Select(Function(item) DirectCast(item, cSegment)).ToList
                                                End If

                                                Dim dLBearing As Decimal = oSegment.Data.Plan.FromBearingLeft
                                                Dim oLSplay As cSegment = oFromSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dLBearing - iPlanAngleRange, dLBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oLSplay) Then
                                                    oSegment.Left = 0
                                                Else
                                                    oSegment.Left = oLSplay.Data.Data.Distance
                                                End If

                                                Dim dRBearing As Decimal = oSegment.Data.Plan.FromBearingRight
                                                Dim oRSplay As cSegment = oFromSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dRBearing - iPlanAngleRange, dRBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oRSplay) Then
                                                    oSegment.Right = 0
                                                Else
                                                    oSegment.Right = oRSplay.Data.Data.Distance
                                                End If

                                                'profile-------------------------------------------------------
                                                Dim oUSplay As cSegment = oFromSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, 90 - iProfileAngleRange, 90)).OrderBy(Function(item) Math.Abs(90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oUSplay) Then
                                                    oSegment.Up = 0
                                                Else
                                                    oSegment.Up = oUSplay.Data.Data.Distance
                                                End If

                                                Dim oDSplay As cSegment = oFromSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, -90 + iProfileAngleRange, -90)).OrderBy(Function(item) Math.Abs(-90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oDSplay) Then
                                                    oSegment.Down = 0
                                                Else
                                                    oSegment.Down = oDSplay.Data.Data.Distance
                                                End If
                                            Else
                                                Dim oToSplays As List(Of cSegment)
                                                If bUseOnlyCutSplay Then
                                                    oToSplays = oSegment.ToSplays.Select(Function(item) DirectCast(item, cSegment)).Where(Function(item) item.Cut).ToList
                                                Else
                                                    oToSplays = oSegment.ToSplays.Select(Function(item) DirectCast(item, cSegment)).ToList
                                                End If

                                                Dim dLBearing As Decimal = oSegment.Data.Plan.ToBearingLeft
                                                Dim oLSplay As cSegment = oToSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dLBearing - iPlanAngleRange, dLBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oLSplay) Then
                                                    oSegment.Left = 0
                                                Else
                                                    oSegment.Left = oLSplay.Data.Data.Distance
                                                End If

                                                Dim dRBearing As Decimal = oSegment.Data.Plan.ToBearingRight
                                                Dim oRSplay As cSegment = oToSplays.Where(Function(item) modPaint.AngleIsInRange(item.Data.Data.Bearing, dRBearing - iPlanAngleRange, dRBearing + iPlanAngleRange)).OrderBy(Function(item) Math.Abs(modPaint.NormalizeAngle(iPlanAngleRange - item.Data.Data.Bearing))).FirstOrDefault
                                                If IsNothing(oRSplay) Then
                                                    oSegment.Right = 0
                                                Else
                                                    oSegment.Right = oRSplay.Data.Data.Distance
                                                End If

                                                'profile-------------------------------------------------------
                                                Dim oUSplay As cSegment = oToSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, 90 - iProfileAngleRange, 90)).OrderBy(Function(item) Math.Abs(90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oUSplay) Then
                                                    oSegment.Up = 0
                                                Else
                                                    oSegment.Up = oUSplay.Data.Data.Distance
                                                End If

                                                Dim oDSplay As cSegment = oToSplays.Where(Function(item) modPaint.InclinationIsInRange(item.Data.Data.Inclination, -90 + iProfileAngleRange, -90)).OrderBy(Function(item) Math.Abs(-90 - item.Data.Data.Inclination)).FirstOrDefault
                                                If IsNothing(oDSplay) Then
                                                    oSegment.Down = 0
                                                Else
                                                    oSegment.Down = oDSplay.Data.Data.Distance
                                                End If
                                            End If
                                            If bMarkAsCalculated Then
                                                Call oSegment.DataProperties.SetValue("LRUD_calculated", True)
                                                Call oSegment.DataProperties.SetValue("LRUD_source", "splays")
                                            End If
                                        End If
                                    Next
                                    Call oSurvey.Segments.SaveAll()
                            End Select
                        ElseIf .cboAction.SelectedIndex = 2 Then
                            Dim bMarkAsCalculated As Boolean = .chkMarkAsCalculated.Checked
                            If bMarkAsCalculated Then
                                Call oSurvey.Properties.DataTables.Segments.Add("LRUD_calculated", Data.cDataFields.TypeEnum.Boolean)
                                Call oSurvey.Properties.DataTables.Segments.Add("LRUD_source", Data.cDataFields.TypeEnum.Text)
                            End If

                            Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                            For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                                If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then
                                    If bBackup Then Call .Backup(oSegment)

                                    Dim iFromOrTo As GetDesignStationEnum
                                    Dim oSegmentSession As cSession = oSessions(oSegment.Session)
                                    If oSegmentSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                                        If oSegment.Data.Data.Reversed Then
                                            iFromOrTo = GetDesignStationEnum.To
                                        Else
                                            iFromOrTo = GetDesignStationEnum.From
                                        End If
                                    Else
                                        If oSegment.Data.Data.Reversed Then
                                            iFromOrTo = GetDesignStationEnum.From
                                        Else
                                            iFromOrTo = GetDesignStationEnum.To
                                        End If
                                    End If
                                    Dim oLR As SizeF = modDesignLRUD.GetLRFromDesign(oSurvey.Options("_design.plan"), oSegment, iFromOrTo)
                                    oSegment.Left = modNumbers.MathRound(oLR.Width, 2)
                                    oSegment.Right = modNumbers.MathRound(oLR.Height, 2)
                                    Dim oUD As SizeF = modDesignLRUD.GetUDFromDesign(oSurvey.Options("_design.profile"), oSegment, iFromOrTo)
                                    oSegment.Up = modNumbers.MathRound(oUD.Width, 2)
                                    oSegment.Down = modNumbers.MathRound(oUD.Height, 2)

                                    If bMarkAsCalculated Then
                                        Call oSegment.DataProperties.SetValue("LRUD_calculated", True)
                                        Call oSegment.DataProperties.SetValue("LRUD_source", "design")
                                    End If
                                End If
                            Next
                            Call oSurvey.Segments.SaveAll()
                        ElseIf .cboAction.SelectedIndex = 3 Then
                            Dim bMarkAsGenerated As Boolean = .chkMode3MarkAsGenerated.Checked
                            If bMarkAsGenerated Then
                                Call oSurvey.Properties.DataTables.Segments.Add("SPLAY_calculated", Data.cDataFields.TypeEnum.Boolean)
                                Call oSurvey.Properties.DataTables.Segments.Add("SPLAY_shot", Data.cDataFields.TypeEnum.Text)
                                Call oSurvey.Properties.DataTables.Segments.Add("SPLAY_source", Data.cDataFields.TypeEnum.Text)
                            End If

                            Dim oSessions As SortedDictionary(Of String, cSession) = oSurvey.Properties.Sessions.GetWithEmpty()
                            For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                                If Not oSegment.Splay AndAlso pSegmentsLRUDIsInRange(oSegment, frmMLRUD) Then
                                    If oSegment.GetSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint Then
                                        Dim iLastIndex As Integer = oSegment.Index + 1

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Left > 0 Then
                                            Dim oLeftSegment As cSegment = oSurvey.Segments.Insert(oSegment.Index + 1)
                                            oLeftSegment.SetSession(oSegment.Session)
                                            oLeftSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oLeftSegment.From = oSegment.From
                                            oLeftSegment.To = oSegment.From & "(L)"
                                            oLeftSegment.Splay = True
                                            oLeftSegment.Distance = oSegment.Left
                                            oLeftSegment.Bearing = modPaint.NormalizeAngle(oSegment.Data.Plan.FromBearingLeft)
                                            Call oLeftSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oLeftSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oLeftSegment.DataProperties.SetValue("SPLAY_source", "L")
                                            iLastIndex = oLeftSegment.Index + 1
                                        End If

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Right > 0 Then
                                            Dim oRightSegment As cSegment = oSurvey.Segments.Insert(iLastIndex)
                                            oRightSegment.SetSession(oSegment.Session)
                                            oRightSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oRightSegment.From = oSegment.From
                                            oRightSegment.To = oSegment.From & "(R)"
                                            oRightSegment.Splay = True
                                            oRightSegment.Distance = oSegment.Right
                                            oRightSegment.Bearing = modPaint.NormalizeAngle(oSegment.Data.Plan.FromBearingRight)
                                            Call oRightSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oRightSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oRightSegment.DataProperties.SetValue("SPLAY_source", "R")
                                            iLastIndex = oRightSegment.Index + 1
                                        End If

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Up > 0 Then
                                            Dim oUpSegment As cSegment = oSurvey.Segments.Insert(iLastIndex)
                                            oUpSegment.SetSession(oSegment.Session)
                                            oUpSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oUpSegment.From = oSegment.From
                                            oUpSegment.To = oSegment.From & "(U)"
                                            oUpSegment.Splay = True
                                            oUpSegment.Distance = oSegment.Up
                                            oUpSegment.Bearing = oSegment.Bearing
                                            oUpSegment.Inclination = 90
                                            Call oUpSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oUpSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oUpSegment.DataProperties.SetValue("SPLAY_source", "U")
                                            iLastIndex = oUpSegment.Index + 1
                                        End If

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Down > 0 Then
                                            Dim oDownSegment As cSegment = oSurvey.Segments.Insert(iLastIndex)
                                            oDownSegment.SetSession(oSegment.Session)
                                            oDownSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oDownSegment.From = oSegment.From
                                            oDownSegment.To = oSegment.From & "(D)"
                                            oDownSegment.Splay = True
                                            oDownSegment.Distance = oSegment.Down
                                            oDownSegment.Bearing = oSegment.Bearing
                                            oDownSegment.Inclination = -90
                                            Call oDownSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oDownSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oDownSegment.DataProperties.SetValue("SPLAY_source", "D")
                                        End If
                                    Else
                                        Dim iLastIndex As Integer = oSegment.Index + 1

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Left > 0 Then
                                            Dim oLeftSegment As cSegment = oSurvey.Segments.Insert(iLastIndex)
                                            oLeftSegment.SetSession(oSegment.Session)
                                            oLeftSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oLeftSegment.From = oSegment.To
                                            oLeftSegment.To = oSegment.To & "(L)"
                                            oLeftSegment.Splay = True
                                            oLeftSegment.Distance = oSegment.Left
                                            oLeftSegment.Bearing = modPaint.NormalizeAngle(oSegment.Data.Plan.ToBearingLeft)
                                            Call oLeftSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oLeftSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oLeftSegment.DataProperties.SetValue("SPLAY_source", "L")
                                            iLastIndex = oLeftSegment.Index + 1
                                        End If

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Right > 0 Then
                                            Dim oRightSegment As cSegment = oSurvey.Segments.Insert(iLastIndex)
                                            oRightSegment.SetSession(oSegment.Session)
                                            oRightSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oRightSegment.From = oSegment.To
                                            oRightSegment.To = oSegment.To & "(R)"
                                            oRightSegment.Splay = True
                                            oRightSegment.Distance = oSegment.Right
                                            oRightSegment.Bearing = modPaint.NormalizeAngle(oSegment.Data.Plan.ToBearingRight)
                                            Call oRightSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oRightSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oRightSegment.DataProperties.SetValue("SPLAY_source", "R")
                                            iLastIndex = oRightSegment.Index + 1
                                        End If

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Up > 0 Then
                                            Dim oUpSegment As cSegment = oSurvey.Segments.Insert(iLastIndex)
                                            oUpSegment.SetSession(oSegment.Session)
                                            oUpSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oUpSegment.From = oSegment.To
                                            oUpSegment.To = oSegment.To & "(U)"
                                            oUpSegment.Splay = True
                                            oUpSegment.Distance = oSegment.Up
                                            oUpSegment.Bearing = oSegment.Bearing
                                            oUpSegment.Inclination = 90
                                            Call oUpSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oUpSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oUpSegment.DataProperties.SetValue("SPLAY_source", "U")
                                            iLastIndex = oUpSegment.Index + 1
                                        End If

                                        If .chkMode3AlsoZero.Checked OrElse oSegment.Down > 0 Then
                                            Dim oDownSegment As cSegment = oSurvey.Segments.Insert(iLastIndex)
                                            oDownSegment.SetSession(oSegment.Session)
                                            oDownSegment.SetCave(oSegment.Cave, oSegment.Branch)
                                            oDownSegment.From = oSegment.To
                                            oDownSegment.To = oSegment.To & "(D)"
                                            oDownSegment.Splay = True
                                            oDownSegment.Distance = oSegment.Down
                                            oDownSegment.Bearing = oSegment.Bearing
                                            oDownSegment.Inclination = -90
                                            Call oDownSegment.DataProperties.SetValue("SPLAY_calculated", True)
                                            Call oDownSegment.DataProperties.SetValue("SPLAY_shot", oSegment.ToString)
                                            Call oDownSegment.DataProperties.SetValue("SPLAY_source", "D")
                                        End If
                                    End If

                                End If
                            Next
                            oSurvey.Segments.SaveAll()
                        Else
                            Call .Restore()
                        End If
                        Call grdSegments.EndUpdate()
                        bDisableSegmentsChangeEvent = False

                        Call pSurveySegmentsRefresh()
                        Call pSurveyInvalidate()

                        Call pMapInvalidate()
                    End If
                End With
            End Using
        End If
    End Sub

    Private Function pSegmentsGetSelections(SelectionType As Integer, Optional CurrentSession As cSession = Nothing, Optional CurrentCave As String = "", Optional CurrentBranch As String = "") As List(Of cSegment)
        'per i segmenti che hanno lo stesso ramo/grotta del segmento corrente
        'per i segmenti che hanno la stessa sessione del segmento corrente
        'per tutti i segmenti
        'per i segmenti selezionati
        Dim oSegments As List(Of cSegment) = New List(Of cSegment)
        If SelectionType = 3 Then
            For Each oSegment As cSegment In pSegmentsFromGridSelection()
                Call oSegments.Add(oSegment)
            Next
        ElseIf SelectionType = 2 Then
            For Each oSegment As cSegment In oSurvey.Segments
                Call oSegments.Add(oSegment)
            Next
        ElseIf SelectionType = 1 Then
            For Each oSegment As cSegment In oSurvey.Segments.GetSessionSegments(CurrentSession)
                Call oSegments.Add(oSegment)
            Next
        Else
            For Each oSegment As cSegment In oSurvey.Segments.GetCaveSegments(CurrentCave, CurrentBranch)
                Call oSegments.Add(oSegment)
            Next
        End If
        Return oSegments
    End Function

    Private Sub pSegmentsDataReplicate()
        Dim sOldSession As String = ""
        Dim sOldCave As String = ""
        Dim sOldBranch As String = ""
        Dim iOldDirection As cSurvey.cSurvey.DirectionEnum = cSurvey.cSurvey.DirectionEnum.Right

        If Not pGetCurrentTools.CurrentSegment Is Nothing Then
            sOldSession = "" & pGetCurrentTools.CurrentSegment.Session
            sOldCave = "" & pGetCurrentTools.CurrentSegment.Cave
            sOldBranch = "" & pGetCurrentTools.CurrentSegment.Branch
            iOldDirection = pGetCurrentTools.CurrentSegment.Direction
        End If

        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oSession As cSession
        Dim oCave As cCaveInfo
        Dim oCaveBranch As cCaveInfoBranch
        Try : oSession = oSurvey.Properties.Sessions(sOldSession) : Catch : End Try
        Try : oCave = oSurvey.Properties.CaveInfos(sOldCave) : Catch : End Try
        Try : oCaveBranch = oCave.Branches(sOldBranch) : Catch : End Try

        Dim iRows As Integer = pSegmentsFromGridSelection.Count
        Call oMousePointer.Pop()

        Using frmSRI As frmSegmentsReplicateInfo = New frmSegmentsReplicateInfo(oSurvey, oSession, oCave, oCaveBranch, iOldDirection, iRows, iFunctionLanguage)
            With frmSRI
                If .ShowDialog(Me) = vbOK Then
                    oMousePointer.Push(Cursors.WaitCursor)

                    Dim bReplicateSession As Boolean = .chkSession.Checked
                    Dim bReplicateCave As Boolean = .chkCave.Checked
                    Dim bReplicateDirection As Boolean = .chkDirection.Checked
                    Dim bReplicateOtherData As Boolean = .chkOtherProperties.Checked
                    Dim oReplicateProperties As BindingList(Of UIHelpers.Reflection.cObjectPropertyBag)
                    Dim bReplicateFormula As Boolean = .chkFormula.Checked
                    Dim oReplicateFormula As cScript = Nothing

                    Dim bRebind As Boolean = .chkRebind.Checked

                    Dim sSession As String = ""
                    Dim sCave As String = ""
                    Dim sBranch As String = ""
                    Dim iDirection As cSurvey.cSurvey.DirectionEnum
                    Dim iPriority As Integer = -1

                    Try : sSession = cSession.EditToString(.cboSessionList.EditValue) : Catch : End Try  'pGetCurrentDesignTools.CurrentSegment.Session
                    Try : sCave = cCaveInfo.EditToString(.cboCaveList.EditValue) : Catch : End Try '"" & pGetCurrentDesignTools.CurrentSegment.Cave
                    Try : sBranch = cCaveInfoBranch.EditToString(.cboCaveBranchList.EditValue) : Catch : End Try '"" & pGetCurrentDesignTools.CurrentSegment.Branch
                    iDirection = .cboDirection.SelectedIndex

                    If bReplicateOtherData Then
                        oReplicateProperties = .PropertiesBag
                    End If

                    If bReplicateFormula Then
                        oReplicateFormula = frmSRI.GetScript
                        bDisableSegmentsChangeEvent = True
                    End If

                    For Each oSegment As cSegment In pSegmentsGetSelections(.cboReplicateTo.SelectedIndex)
                        If bReplicateSession Then
                            Call oSegment.SetSession(sSession)
                        End If
                        If bReplicateCave Then
                            Call oSegment.SetCave(sCave, sBranch)
                        End If
                        If bReplicateDirection Then
                            Dim bEnabled As Boolean = Not oSegment.IsProfileBinded
                            If bEnabled Then
                                If bReplicateDirection Then
                                    oSegment.Direction = iDirection
                                End If
                            End If
                        End If
                        If bReplicateOtherData AndAlso Not oReplicateProperties Is Nothing Then
                            For Each oProperty As UIHelpers.Reflection.cObjectPropertyBag In oReplicateProperties
                                If oProperty.Set Then
                                    Call oProperty.Property.SetValue(oSegment, oProperty.Value)
                                End If
                            Next
                        End If
                        If bReplicateFormula AndAlso Not oReplicateFormula Is Nothing Then
                            Call oReplicateFormula.Eval("ReplicateFormula", {oSegment})
                        End If
                    Next
                    Call oSurvey.Segments.SaveAll(bRebind)
                    If bReplicateFormula Then
                        bDisableSegmentsChangeEvent = False
                    End If
                    Call oMousePointer.Pop()

                    Call pSurveySegmentsRefresh()

                    Call pSurveyInvalidate()

                    Call pMapInvalidate()

                    If Not oTools.CurrentSegment Is Nothing Then Call pSegmentLoad(oTools.CurrentSegment)
                End If
            End With
        End Using
    End Sub

    Private Sub oDockClipart_OnItemCreate(ByVal Sender As Object, ByVal e As cDockClipart.OnItemEventArgs) Handles oDockClipart.OnItemCreate
        Dim oCurrentCenter As PointF = New PointF(picMap.Width / 2, picMap.Height / 2)
        Dim oBag As cEditToolsBag = e.Bag
        Call pDesignTools_CreateItem(oBag, True, oCurrentCenter, e.Filename)
    End Sub

    Private Sub frmTP_OnItemCreate(ByVal Sender As Object, ByVal e As cDockText.OnItemEventArgs) Handles oDockText.OnItemCreate
        Dim oCurrentCenter As PointF = New PointF(picMap.Width / 2, picMap.Height / 2)
        Dim oBag As cEditToolsBag = e.Bag
        Call pDesignTools_CreateItem(oBag, True, oCurrentCenter, "", e.Text, e.Size, e.Type)
    End Sub

    Private Function pDropExtensionCheck(Filename As String) As DropActionEnum
        Select Case IO.Path.GetExtension(Filename).ToLower
            Case ".jpg", ".jpeg", ".gif", ".bmp", ".tif", ".png"
                Return DropActionEnum.AddImageOrSketch
            Case ".csz", ".csx"
                Return DropActionEnum.ImportcSurveyData
            Case ".svg"
                Return DropActionEnum.ImportSVGDesign
            Case ".tro"
                Return DropActionEnum.ImportVTopoData
            Case ".dat"
                Return DropActionEnum.ImportCompassData
            Case ".txt"
                Return DropActionEnum.AddText
            Case ".csv"
                Return DropActionEnum.ImportTextData
            Case ".kml"
                Return DropActionEnum.ImportKMLData
            Case ".gpx"
                Return DropActionEnum.ImportGPXData
            Case Else
                Return DropActionEnum.AddAttachment
        End Select
    End Function

    Private Sub picMap_DragOver(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles picMap.DragOver
        If Not (e.Data.GetDataPresent(GetType(cDockClipart.OnItemEventArgs))) And Not (e.Data.GetDataPresent(GetType(cDockText.OnItemEventArgs))) Then
            If e.Data.GetDataPresent(DataFormats.FileDrop) Then
                Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
                If sFilePaths.Length = 1 Then
                    If pDropExtensionCheck(sFilePaths(0)) <> DropActionEnum.None Then
                        e.Effect = DragDropEffects.Copy
                    Else
                        e.Effect = DragDropEffects.None
                    End If
                Else
                    e.Effect = DragDropEffects.None
                End If
            ElseIf e.Data.GetDataPresent(GetType(cAttachmentsLink)) Then
                e.Effect = DragDropEffects.Copy
            Else
                e.Effect = DragDropEffects.None
            End If
        Else
            If e.Data.GetDataPresent(GetType(cDockClipart.OnItemEventArgs)) Then
                Dim oItem As cDockClipart.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockClipart.OnItemEventArgs)), cDockClipart.OnItemEventArgs)
                If oItem.Filename <> "" Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            ElseIf e.Data.GetDataPresent(GetType(cDockText.OnItemEventArgs)) Then
                Dim oItem As cDockText.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockText.OnItemEventArgs)), cDockText.OnItemEventArgs)
                If oItem.Text <> "" Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            End If
        End If
    End Sub

    Private Sub picMap_DragDrop(ByVal sender As Object, ByVal e As System.Windows.Forms.DragEventArgs) Handles picMap.DragDrop
        If (e.Data.GetDataPresent(GetType(cDockClipart.OnItemEventArgs))) Then
            Dim oItem As cDockClipart.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockClipart.OnItemEventArgs)), cDockClipart.OnItemEventArgs)
            If oItem.Filename <> "" Then
                Dim oPoint As Point = picMap.PointToClient(New Point(e.X, e.Y))
                Call pDesignTools_CreateItem(oItem.Bag, True, oPoint, oItem.Filename)
            End If
        ElseIf e.Data.GetDataPresent(GetType(cDockText.OnItemEventArgs)) Then
            Dim oItem As cDockText.OnItemEventArgs = CType(e.Data.GetData(GetType(cDockText.OnItemEventArgs)), cDockText.OnItemEventArgs)
            If oItem.Text <> "" Then
                Dim oPoint As Point = picMap.PointToClient(New Point(e.X, e.Y))
                Dim oBag As cEditToolsBag = Nothing
                Call pDesignTools_CreateItem(oItem.Bag, True, oPoint, "", oItem.Text, oItem.Size, oItem.Type)
            End If
        ElseIf e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Select Case pDropExtensionCheck(sFilePaths(0))
                    Case DropActionEnum.AddText
                        mnuMapDrop.Tag = sFilePaths(0)
                        btnMapDropImage.Visibility = BarItemVisibility.Never
                        btnMapDropSketch.Visibility = BarItemVisibility.Never
                        btnMapDropGenericText.Visibility = BarItemVisibility.Always
                        btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
                        btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
                        btnMapDropAttachment.Visibility = BarItemVisibility.Always
                        Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))

                    Case DropActionEnum.AddImageOrSketch
                        mnuMapDrop.Tag = sFilePaths(0)
                        btnMapDropImage.Visibility = BarItemVisibility.Always
                        btnMapDropSketch.Visibility = BarItemVisibility.Always
                        btnMapDropGenericText.Visibility = BarItemVisibility.Never
                        btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
                        btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
                        btnMapDropAttachment.Visibility = BarItemVisibility.Always
                        Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))

                    Case DropActionEnum.ImportSVGDesign
                        Call pSurveyImport(ImportExportFormatEnum.Design, sFilePaths(0), 1)

                    Case DropActionEnum.ImportKMLData
                        Call pSurveyImport(ImportExportFormatEnum.Track, sFilePaths(0), 1, True)
                    Case DropActionEnum.ImportGPXData
                        Call pSurveyImport(ImportExportFormatEnum.Track, sFilePaths(0), 2, True)

                    Case DropActionEnum.ImportTextData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 6, True)

                    Case DropActionEnum.ImportCompassData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 4, True)
                    Case DropActionEnum.ImportVTopoData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 1, True)
                    Case DropActionEnum.ImportcSurveyData
                        If pSurveyIsEmpty() Then
                            Call pSurveyLoad(sFilePaths(0), False)
                        Else
                            Call pSurveyImport(ImportExportFormatEnum.Design, sFilePaths(0), 2, True)
                        End If
                    Case DropActionEnum.AddAttachment
                        mnuMapDrop.Tag = sFilePaths(0)
                        btnMapDropImage.Visibility = BarItemVisibility.Never
                        btnMapDropSketch.Visibility = BarItemVisibility.Never
                        btnMapDropGenericText.Visibility = BarItemVisibility.Never
                        btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
                        btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
                        btnMapDropAttachment.Visibility = BarItemVisibility.Always
                        Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))
                End Select
            End If
        ElseIf e.Data.GetDataPresent(GetType(cAttachmentsLink)) Then
            Dim oAttachmentsLink As cAttachmentsLink = e.Data.GetData(GetType(cAttachmentsLink))
            mnuMapDrop.Tag = "id://" & oAttachmentsLink.Attachment.ID
            btnMapDropImage.Visibility = BarItemVisibility.Never
            btnMapDropSketch.Visibility = BarItemVisibility.Never
            btnMapDropGenericText.Visibility = BarItemVisibility.Never
            btnMapDropPocketTopo.Visibility = BarItemVisibility.Never
            btnMapDropCaveExplorer.Visibility = BarItemVisibility.Never
            btnMapDropAttachment.Visibility = BarItemVisibility.Always
            Call mnuMapDrop.ShowPopup(New Point(e.X, e.Y))

            'ElseIf TypeOf e.Data Is BrightIdeasSoftware.OLVDataObject Then
            '    Dim oDataObject As OLVDataObject = DirectCast(e.Data, OLVDataObject)
            '    If oDataObject.ListView Is tvSegmentAttachments Then
            '        mnuMapDrop.Tag = "id://" & oDataObject.ModelObjects(0).attachment.id
            '        mnuMapDropImage.Visible = False
            '        mnuMapDropSketch.Visible = False
            '        mnuMapDropText.Visible = False
            '        mnuMapDropPocketTopo.Visible = False
            '        mnuMapDropCaveExplorer.Visible = False
            '        mnuMapDropAttachment.Visible = True
            '        Call mnuMapDrop.Show((New Point(e.X, e.Y)))
            '    End If
        End If
    End Sub

    Private Function pSurveyIsEmpty() As Boolean
        Dim sHash As String = pSurveyGetHash()
        Return sHash = sNewHash
    End Function

    Private Sub oProfileTools_OnLayerSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditDesignToolsEventArgs) Handles oProfileTools.OnLayerSelect
        Select Case ToolEventArgs.CurrentLayer.Type
            Case cLayers.LayerTypeEnum.Base
                If Not btnLayer_Base.Checked Then
                    btnLayer_Base.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Borders
                If Not btnLayer_Borders.Checked Then
                    btnLayer_Borders.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.RocksAndConcretion
                If Not btnLayer_Rocks.Checked Then
                    btnLayer_Rocks.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Signs
                If Not btnLayer_Signs.Checked Then
                    btnLayer_Signs.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.Soil
                If Not btnLayer_Soil.Checked Then
                    btnLayer_Soil.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.CeilingMorphologies
                If Not btnLayer_TerrainLevel.Checked Then
                    btnLayer_TerrainLevel.PerformClick()
                End If
            Case cLayers.LayerTypeEnum.WaterAndFloorMorphologies
                If Not btnLayer_Water.Checked Then
                    btnLayer_Water.PerformClick()
                End If
        End Select
        Call pObjectPropertyLoad()
    End Sub

    Private Sub pDesignSelectNext()
        Try
            If Not pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
                If pGetCurrentDesignTools.CurrentItem.Points.Last Is pGetCurrentDesignTools.CurrentItemPoint Then
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.First)
                Else
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.Next(pGetCurrentDesignTools.CurrentItemPoint))
                End If
            Else
                If pGetCurrentDesignTools.CurrentLayer.Items.Last Is pGetCurrentDesignTools.CurrentItem Then
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.First)
                Else
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.Next(pGetCurrentDesignTools.CurrentItem))
                End If
            End If
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pDesignSelectPrev()
        Try
            If Not pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
                If pGetCurrentDesignTools.CurrentItem.Points.First Is pGetCurrentDesignTools.CurrentItemPoint Then
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.Last)
                Else
                    Call pGetCurrentDesignTools.SelectPoint(pGetCurrentDesignTools.CurrentItem.Points.Previous(pGetCurrentDesignTools.CurrentItemPoint))
                End If
            Else
                If pGetCurrentDesignTools.CurrentLayer.Items.First Is pGetCurrentDesignTools.CurrentItem Then
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.Last)
                Else
                    Call pGetCurrentDesignTools.SelectItem(pGetCurrentDesignTools.CurrentLayer.Items.Previous(pGetCurrentDesignTools.CurrentItem))
                End If
            End If
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub pSurveyRestoreCurrentWorkarea()
        bDisabledCaveBranchChangeEvent = True
        Dim sSelectedCave As String
        Dim sSelectedCaveBranch As String

        sSelectedCave = oSurvey.SharedSettings.GetValue("plan.selectedcave", "")
        sSelectedCaveBranch = oSurvey.SharedSettings.GetValue("plan.selectedcavebranch", "")
        Call oPlanTools.SelectCave(sSelectedCave, sSelectedCaveBranch)

        sSelectedCave = oSurvey.SharedSettings.GetValue("profile.selectedcave", "")
        sSelectedCaveBranch = oSurvey.SharedSettings.GetValue("profile.selectedcavebranch", "")
        Call oProfileTools.SelectCave(sSelectedCave, sSelectedCaveBranch)

        sSelectedCave = oSurvey.SharedSettings.GetValue("threed.selectedcave", "")
        sSelectedCaveBranch = oSurvey.SharedSettings.GetValue("threed.selectedcavebranch", "")
        Call o3DTools.SelectCave(sSelectedCave, sSelectedCaveBranch)

        Dim sSelectedSessiondID As String = oSurvey.SharedSettings.GetValue("selectedsession", "")
        If sSelectedSessiondID <> "" AndAlso oSurvey.Properties.Sessions.Contains(sSelectedSessiondID) Then
            btnMainSessionList.EditValue = oSurvey.Properties.Sessions(sSelectedSessiondID)
        End If

        Try
            If oSurvey.SharedSettings.Contains("paintinfo") Then
                With oPaintInfo(0)
                    .PaintZoom = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("plan.paintinfo.zoom", 0))
                    .PaintTranslation.X = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("plan.paintinfo.translation.x", 0))
                    .PaintTranslation.Y = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("plan.paintinfo.translation.y", 0))
                    If Single.IsNaN(.PaintTranslation.X) Then .PaintTranslation.X = 0
                    If Single.IsNaN(.PaintTranslation.Y) Then .PaintTranslation.Y = 0
                End With

                With oPaintInfo(1)
                    .PaintZoom = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("profile.paintinfo.zoom", 0))
                    .PaintTranslation.X = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("profile.paintinfo.translation.x", 0))
                    .PaintTranslation.Y = modNumbers.StringToSingle(oSurvey.SharedSettings.GetValue("profile.paintinfo.translation.y", 0))
                    If Single.IsNaN(.PaintTranslation.X) Then .PaintTranslation.X = 0
                    If Single.IsNaN(.PaintTranslation.Y) Then .PaintTranslation.Y = 0
                End With
            Else
                With oPaintInfo(0)
                    .PaintZoom = 0
                    .PaintTranslation = SizeF.Empty
                End With

                With oPaintInfo(1)
                    .PaintZoom = 0
                    .PaintTranslation = SizeF.Empty
                End With
            End If
        Catch
            oPaintInfo(0).PaintZoom = 0
            oPaintInfo(0).PaintTranslation = New SizeF(0, 0)

            oPaintInfo(1).PaintZoom = 0
            oPaintInfo(1).PaintTranslation = New SizeF(0, 0)
        End Try

        'If oSurvey.SharedSettings.Contains("gridcolor") Then
        iGridSegmentColorBy = oSurvey.SharedSettings.GetValue("gridcolorby", 0)
        'End If
        'If oSurvey.SharedSettings.Contains("stationgridcolor") Then
        iGridTrigpointColorBy = oSurvey.SharedSettings.GetValue("stationgridcolor", 0)
        'End If

        bDisabledCaveBranchChangeEvent = False
    End Sub

    Private Sub pSurveySaveCurrentWorkarea()
        Call oSurvey.SharedSettings.SetValue("plan.selectedcave", oPlanTools.CurrentCave)
        Call oSurvey.SharedSettings.SetValue("plan.selectedcavebranch", oPlanTools.CurrentBranch)
        Call oSurvey.SharedSettings.SetValue("profile.selectedcave", oProfileTools.CurrentCave)
        Call oSurvey.SharedSettings.SetValue("profile.selectedcavebranch", oProfileTools.CurrentBranch)
        Call oSurvey.SharedSettings.SetValue("threed.selectedcave", o3DTools.CurrentCave)
        Call oSurvey.SharedSettings.SetValue("threed.selectedcavebranch", o3DTools.CurrentBranch)

        If btnMainSessionList.EditValue IsNot Nothing Then
            Dim sSelectedSessiondID As String = DirectCast(btnMainSessionList.EditValue, cSession).ID
            If sSelectedSessiondID <> "" Then
                Call oSurvey.SharedSettings.SetValue("selectedsession", sSelectedSessiondID)
            End If
        End If

        Dim iCurrentDesignType As cIDesign.cDesignTypeEnum
        If oCurrentDesign Is Nothing Then
            iCurrentDesignType = cIDesign.cDesignTypeEnum.Unknown
        Else
            iCurrentDesignType = oCurrentDesign.Type
        End If
        If iCurrentDesignType >= 0 Then
            Call oPaintInfo(oCurrentDesign.Type).Backup(oPaintTranslation, sPaintZoom)
        End If

        Call oSurvey.SharedSettings.SetValue("paintinfo", 1)
        Call oSurvey.SharedSettings.SetValue("plan.paintinfo.zoom", modNumbers.NumberToString(oPaintInfo(0).PaintZoom, "0.000"))
        Call oSurvey.SharedSettings.SetValue("plan.paintinfo.translation.x", modNumbers.NumberToString(oPaintInfo(0).PaintTranslation.X, "0.000"))
        Call oSurvey.SharedSettings.SetValue("plan.paintinfo.translation.y", modNumbers.NumberToString(oPaintInfo(0).PaintTranslation.Y, "0.000"))

        Call oSurvey.SharedSettings.SetValue("profile.paintinfo.zoom", modNumbers.NumberToString(oPaintInfo(1).PaintZoom, "0.000"))
        Call oSurvey.SharedSettings.SetValue("profile.paintinfo.translation.x", modNumbers.NumberToString(oPaintInfo(1).PaintTranslation.X, "0.000"))
        Call oSurvey.SharedSettings.SetValue("profile.paintinfo.translation.y", modNumbers.NumberToString(oPaintInfo(1).PaintTranslation.Y, "0.000"))

        'Call oSurvey.SharedSettings.SetValue("gridcolor", 1)
        Call oSurvey.SharedSettings.SetValue("gridcolorby", iGridSegmentColorBy)
        Call oSurvey.SharedSettings.SetValue("stationgridcolor", iGridTrigpointColorBy)
    End Sub

    Private Sub pTrigpointsTrigPointRename()
        Dim oTrigPoint As cTrigPoint = pGetCurrentTools.CurrentTrigpoint
        Using frmRTP As frmRenameTrigpoints = New frmRenameTrigpoints(oSurvey)
            With frmRTP
                If Not grdViewTrigpoints.GetFocusedRow Is Nothing Then
                    .cboOld.Text = DirectCast(grdViewTrigpoints.GetFocusedRow, cTrigPoint).Name
                End If
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    Dim oCurrentSegment As cSegment = oTools.CurrentSegment
                    Dim oCurrentTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
                    Call pGetCurrentTools.SelectSegment(Nothing)
                    Call pGetCurrentTools.SelectTrigpoint(Nothing)

                    Dim sOld As String = .cboOld.Text
                    Dim sNew As String = .txtNew.Text
                    Call oSurvey.TrigPoints.RenameTrigPoint(sOld, sNew)

                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()

                    Call pSegmentSelect(oCurrentSegment, False, False)
                    Call pTrigPointSelect(oCurrentTrigpoint, False, False)

                    Call pSurveyTrigpointsRefresh()
                End If
            End With
        End Using
    End Sub

    Public Enum cContextEnum
        None = 0
        Segments = 1
        Trigpoints = 2
        DesignPlan = 3
        DesignProfile = 4
        Design3D = 5
        'Other = 6
    End Enum

    Private Sub pContextChange()
        Dim iCurrentContext As cContextEnum = pGetCurrentContext()
        Debug.Print(iCurrentContext.ToString)
        Select Case iCurrentContext
            Case cContextEnum.Segments
                btnSegmentAdd.Visibility = BarItemVisibility.Always
                btnSegmentInsert.Visibility = BarItemVisibility.Always
                btnSegmentDelete.Visibility = BarItemVisibility.Always
                btnSegmentMoveDown.Visibility = BarItemVisibility.Always
                btnSegmentMoveUp.Visibility = BarItemVisibility.Always

                btnCurrentItemStation.Visibility = BarItemVisibility.Never
                btnCurrentItemShot.Visibility = BarItemVisibility.Never

                btnEditSelectAll.Visibility = BarItemVisibility.Always
                btnEditFind.Visibility = BarItemVisibility.Always

                Dim bContextData As Boolean = True
                Dim bContextDesigner As Boolean = pIsContextDesignVisible()
                dockProperties.Enabled = True
                dockLevels.Enabled = bContextDesigner
                dockClipart.Enabled = bContextDesigner
                dockBrushesAndPens.Enabled = bContextDesigner
                dockText.Enabled = bContextDesigner
                dockJoinPoints.Enabled = bContextDesigner
            Case cContextEnum.Trigpoints
                btnSegmentAdd.Visibility = BarItemVisibility.Never
                btnSegmentInsert.Visibility = BarItemVisibility.Never
                btnSegmentDelete.Visibility = BarItemVisibility.Never
                btnSegmentMoveDown.Visibility = BarItemVisibility.Never
                btnSegmentMoveUp.Visibility = BarItemVisibility.Never

                btnCurrentItemStation.Visibility = BarItemVisibility.Never
                btnCurrentItemShot.Visibility = BarItemVisibility.Never

                btnEditSelectAll.Visibility = BarItemVisibility.Never
                btnEditFind.Visibility = BarItemVisibility.Always

                Dim bContextData As Boolean = True
                Dim bContextDesigner As Boolean = pIsContextDesignVisible()
                dockProperties.Enabled = True
                dockLevels.Enabled = bContextDesigner
                dockClipart.Enabled = bContextDesigner
                dockBrushesAndPens.Enabled = bContextDesigner
                dockText.Enabled = bContextDesigner
                dockJoinPoints.Enabled = bContextDesigner
            Case cContextEnum.DesignPlan, cContextEnum.DesignProfile
                btnSegmentAdd.Visibility = BarItemVisibility.Never
                btnSegmentInsert.Visibility = BarItemVisibility.Never
                btnSegmentDelete.Visibility = BarItemVisibility.Never
                btnSegmentMoveDown.Visibility = BarItemVisibility.Never
                btnSegmentMoveUp.Visibility = BarItemVisibility.Never

                btnCurrentItemStation.Visibility = BarItemVisibility.Always
                btnCurrentItemShot.Visibility = BarItemVisibility.Always

                btnEditSelectAll.Visibility = BarItemVisibility.Always
                btnEditFind.Visibility = BarItemVisibility.Always

                Dim bContextData As Boolean = pIsContextDataVisible()
                Dim bContextDesigner As Boolean = True
                dockProperties.Enabled = True
                dockLevels.Enabled = bContextDesigner
                dockClipart.Enabled = bContextDesigner
                dockBrushesAndPens.Enabled = bContextDesigner
                dockText.Enabled = bContextDesigner
                dockJoinPoints.Enabled = bContextDesigner
            Case cContextEnum.Design3D
                btnSegmentAdd.Visibility = BarItemVisibility.Never
                btnSegmentInsert.Visibility = BarItemVisibility.Never
                btnSegmentDelete.Visibility = BarItemVisibility.Never
                btnSegmentMoveDown.Visibility = BarItemVisibility.Never
                btnSegmentMoveUp.Visibility = BarItemVisibility.Never

                btnCurrentItemStation.Visibility = BarItemVisibility.Never
                btnCurrentItemShot.Visibility = BarItemVisibility.Never

                btnEditSelectAll.Visibility = BarItemVisibility.Never
                btnEditFind.Visibility = BarItemVisibility.Never

                Dim bContextData As Boolean = pIsContextDataVisible()
                Dim bContextDesigner As Boolean = True
                dockProperties.Enabled = True
                dockLevels.Enabled = bContextDesigner
                dockClipart.Enabled = bContextDesigner
                dockBrushesAndPens.Enabled = bContextDesigner
                dockText.Enabled = bContextDesigner
                dockJoinPoints.Enabled = bContextDesigner
                'Case cContextEnum.Other
                '    btnSegmentAdd.Visibility = BarItemVisibility.Never
                '    btnSegmentInsert.Visibility = BarItemVisibility.Never
                '    btnSegmentDelete.Visibility = BarItemVisibility.Never
                '    btnSegmentMoveDown.Visibility = BarItemVisibility.Never
                '    btnSegmentMoveUp.Visibility = BarItemVisibility.Never

                '    btnCurrentItemStation.Visibility = BarItemVisibility.Never
                '    btnCurrentItemShot.Visibility = BarItemVisibility.Never

                '    btnEditSelectAll.Visibility = BarItemVisibility.Never
                '    btnEditFind.Visibility = BarItemVisibility.Never

                '    Dim bContextData As Boolean = pIsContextDataVisible()
                '    Dim bContextDesigner As Boolean = pIsContextDesignVisible()
                '    dockProperties.Enabled = bContextDesigner OrElse bContextData
                '    dockLevels.Enabled = False
                '    dockClipart.Enabled = False
                '    dockText.Enabled = False
                '    dockJoinPoints.Enabled = False
            Case Else
                btnSegmentAdd.Visibility = BarItemVisibility.Never
                btnSegmentInsert.Visibility = BarItemVisibility.Never
                btnSegmentDelete.Visibility = BarItemVisibility.Never
                btnSegmentMoveDown.Visibility = BarItemVisibility.Never
                btnSegmentMoveUp.Visibility = BarItemVisibility.Never

                btnCurrentItemStation.Visibility = BarItemVisibility.Never
                btnCurrentItemShot.Visibility = BarItemVisibility.Never

                btnEditSelectAll.Visibility = BarItemVisibility.Never
                btnEditFind.Visibility = BarItemVisibility.Never

                Dim bContextData As Boolean = pIsContextDataVisible()
                Dim bContextDesigner As Boolean = pIsContextDesignVisible()
                dockProperties.Enabled = bContextDesigner OrElse bContextData
                dockLevels.Enabled = bContextDesigner
                dockClipart.Enabled = bContextDesigner
                dockBrushesAndPens.Enabled = bContextDesigner
                dockText.Enabled = bContextDesigner
                dockJoinPoints.Enabled = bContextDesigner
        End Select
        Call pClipboardAlign()
    End Sub

    Private Function pIsContextDataVisible() As Boolean
        Return dockData.Visible
    End Function

    Private Function pIsContextDesignVisible() As Boolean
        Return dockDesigner.Visible
    End Function

    Private Function pGetCurrentContext() As cContextEnum
        Try
            If Me.IsActive Then
                If DockManager.ActivePanel IsNot Nothing Then
                    If DockManager.ActivePanel Is dockDesigner OrElse DockManager.ActivePanel Is dockLevels OrElse DockManager.ActivePanel Is dockClipart OrElse DockManager.ActivePanel Is dockBrushesAndPens OrElse DockManager.ActivePanel Is dockJoinPoints OrElse DockManager.ActivePanel Is dockProperties Then
                        If pIsContextDesignVisible() Then 'docView.ActiveDocument IsNot Nothing AndAlso docView.ActiveDocument.IsVisible AndAlso docView.ActiveDocument.ControlName.ToLower = "dockdesigner" Then
                            If btnViewPlan.Checked Then
                                Return cContextEnum.DesignPlan
                            ElseIf btnViewProfile.Checked Then
                                Return cContextEnum.DesignProfile
                            Else
                                Return cContextEnum.Design3D
                            End If
                        Else
                            Return cContextEnum.None
                        End If
                    ElseIf DockManager.ActivePanel Is dockData Then
                        If pIsContextDataVisible() Then  'If docView.ActiveDocument IsNot Nothing AndAlso docView.ActiveDocument.IsVisible AndAlso docView.ActiveDocument.ControlName.ToLower = "dockdata" Then
                            If btnTrigpoints.Checked Then
                                Return cContextEnum.Trigpoints
                            Else
                                Return cContextEnum.Segments
                            End If
                        Else
                            Return cContextEnum.None
                        End If
                    Else
                        Return cContextEnum.None
                    End If
                Else
                    If docView.ActiveDocument IsNot Nothing AndAlso docView.ActiveDocument.IsVisible Then
                        If docView.ActiveDocument.ControlName.ToLower = "dockdesigner" Then
                            If btnViewPlan.Checked Then
                                Return cContextEnum.DesignPlan
                            ElseIf btnViewProfile.Checked Then
                                Return cContextEnum.DesignProfile
                            Else
                                Return cContextEnum.Design3D
                            End If
                        ElseIf docView.ActiveDocument.ControlName.ToLower = "dockdata" Then
                            If btnTrigpoints.Checked Then
                                Return cContextEnum.Trigpoints
                            Else
                                Return cContextEnum.Segments
                            End If
                        End If
                    Else
                        Return cContextEnum.None
                    End If
                End If
            Else
                Return cContextEnum.None
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
            Return cContextEnum.None
        End Try
    End Function

    Private Sub pSegmentsTrigPointRename()
        Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
        Dim sTrigpoint As String = ""
        Select Case pGetCurrentContext()
            Case cContextEnum.Segments
                If grdViewSegments.FocusedColumn Is colSegmentsListFrom OrElse grdViewSegments.FocusedColumn Is colSegmentsListTo Then
                    sTrigpoint = grdViewSegments.FocusedValue
                End If
            Case cContextEnum.Trigpoints
                sTrigpoint = grdViewTrigpoints.GetFocusedRowCellValue(colTrigpointsListName)
        End Select
        Using frmRTP As frmRenameTrigpoints = New frmRenameTrigpoints(oSurvey, strigpoint)
            With frmRTP
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    Dim oCurrentSegment As cSegment = oTools.CurrentSegment
                    Dim oCurrentTrigpoint As cTrigPoint = oTools.CurrentTrigpoint

                    Call pGetCurrentTools.SelectSegment(Nothing)
                    Call pGetCurrentTools.SelectTrigpoint(Nothing)

                    Dim sOld As String = .cboOld.EditValue.ToUpper
                    Dim sNew As String = .txtNew.EditValue.ToUpper
                    Call oSurvey.TrigPoints.RenameTrigPoint(sOld, sNew)

                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()

                    Call pSegmentSelect(oCurrentSegment, False, False)
                    Call pTrigPointSelect(oCurrentTrigpoint, False, False)

                    Call pTrigpointsRefresh()
                End If
            End With
        End Using
    End Sub

    Private Sub pSequenceRevert()
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo16"))
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Call oItem.Points.RevertSequence(oPoint)
            Call .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub pSurveyWipeData()
        Using frmDDD As frmDeleteDataDialog = New frmDeleteDataDialog
            If frmDDD.ShowDialog(Me) = DialogResult.OK Then
                If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning17"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
                    Call pGetCurrentTools.SelectSegment(Nothing)
                    If frmDDD.RadioButton1.Checked Then
                        Call oSurvey.Segments.Clear()
                    ElseIf frmDDD.RadioButton2.Checked Then
                        Call oSurvey.Segments.Clear(cSegments.ClearFlags.OnlySplays)
                    End If
                    Call pGetCurrentTools.Undo.Clear()
                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()
                End If
            End If
        End Using
    End Sub

    Private Sub pDesignRestoreShowBinding()
        If oCurrentOptions IsNot Nothing Then
            btnDesignPlotShowBindings.Checked = oCurrentOptions.ShowSegmentBindings
        End If
    End Sub

    Private Sub pDesignShowBindings(ShowBindings As Boolean)
        If oCurrentOptions.ShowSegmentBindings <> ShowBindings Then
            btnDesignPlotShowBindings.Checked = ShowBindings
            oCurrentOptions.ShowSegmentBindings = ShowBindings
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub mnuDesignItemChangeTo1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
        Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim oNewItem As cItemInvertedFreeHandArea = oLayer.CreateCaveBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub mnuDesignItemChangeTo2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerBorders = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.Borders)
        Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim oNewItem As cItemFreeHandLine = oLayer.CreateBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub mnuDesignItemChangeTo3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerCeilingMorphologies = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.CeilingMorphologies)
        Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim oNewItem As cItemFreeHandLine = oLayer.CreateCeilingBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub mnuDesignItemChangeTo4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
        Dim oLayer As cLayerWaterAndFloorMorphologies = pGetCurrentDesignTools.CurrentLayer.Design.Layers(cLayers.LayerTypeEnum.WaterAndFloorMorphologies)
        Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim oNewItem As cItemFreeHandLine = oLayer.CreateBorder(sCave, sBranch)
        Call oNewItem.Points.AddRange(oItem.Points)
        Call oNewItem.Pen.CopyFrom(oItem.Pen)
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Sub pRulersSetVisible(Visible As Boolean)
        If bDrawRulers <> Visible Then
            bDrawRulers = Visible
            btnViewRulers.Checked = bDrawRulers
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnCurrentItemGenericReducePoint_Click(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnCurrentItemGenericReducePoint.ItemClick
        Try
            If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning11"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
                With pGetCurrentDesignTools()
                    .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo17"))
                    Dim oItem As Items.cIItemLine = .CurrentItem
                    Call oItem.ReducePoints(btnCurrentItemGenericReducePointFactor.EditValue)
                    Call .CommitUndoSnapshot()
                End With
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Function pFloatingToolbarValidateLocation(Point As Point) As Boolean
        Dim oSize As Size = oFloatBar.Size '.GetSize
        Dim iHPadding As Integer = -4 * Me.CurrentAutoScaleDimensions.Height / 96.0F
        Dim iVPadding As Integer = 20 * Me.CurrentAutoScaleDimensions.Height / 96.0F
        Dim oBounds As Rectangle = New Rectangle(Point.X + iHPadding, Point.Y - oSize.Height - iVPadding, oSize.Width, oSize.Height)
        Dim oMapBounds As Rectangle = picMap.Bounds
        If oMapBounds.Contains(oBounds) Then
            dockFloatBar.Location = pnlDesigner.PointToClient(picMap.PointToScreen(New Point(oBounds.X, oBounds.Y)))
            dockFloatBar.BringToFront()
            dockFloatBar.Visible = True
            dockFloatBar.Refresh()
            Return True
        Else
            If oBounds.X < 0 Then oBounds.X = 0
            If oBounds.Right > oMapBounds.Right Then oBounds.X = oMapBounds.Right - oSize.Width
            If oBounds.Y < 0 Then oBounds.Y = 0
            If oBounds.Bottom > oMapBounds.Bottom Then oBounds.Y = oMapBounds.Bottom - oSize.Height
            If oMapBounds.Contains(oBounds) Then
                'StandaloneBarDockControl1.Location = New Point(0, 0)
                dockFloatBar.Location = pnlDesigner.PointToClient(picMap.PointToScreen(New Point(oBounds.X, oBounds.Y)))
                dockFloatBar.BringToFront()
                dockFloatBar.Visible = True
                dockFloatBar.Refresh()
                Return True
            Else
                dockFloatBar.Visible = False
                Return False
            End If
        End If
    End Function

    Private Function pFloatingToolbarGetLocation() As Boolean
        If bFloatBarVisible Then
            Select Case iDesignBarPosition
                Case DesignBarPositionEnum.TopSide
                    If Not oFloatBar.OptionsBar.UseWholeRow Then
                        oFloatBar.StandaloneBarDockControl = dockTopDesignerBar
                        oFloatBar.OptionsBar.UseWholeRow = True
                    End If
                Case DesignBarPositionEnum.NearCurrentItem
                    If oFloatBar.OptionsBar.UseWholeRow Then
                        oFloatBar.StandaloneBarDockControl = dockFloatBar
                        oFloatBar.OptionsBar.UseWholeRow = False
                    End If
                    If pGetCurrentDesignTools.CurrentItem Is Nothing Then
                        dockFloatBar.Visible = False
                        Return False
                    Else
                        Dim oItemBound As RectangleF = modPaint.ToPaintRectangle(pGetCurrentDesignTools.CurrentItem.GetBounds, sPaintZoom, oPaintTranslation)
                        Dim oVisibleBound As RectangleF = RectangleF.Intersect(oItemBound, picMap.ClientRectangle)
                        If modPaint.IsRectangleUnsized(oVisibleBound) Then
                            dockFloatBar.Visible = False
                            Return False
                        Else
                            Return pFloatingToolbarValidateLocation(New Point(oVisibleBound.X, oVisibleBound.Y))
                        End If
                    End If
                Case DesignBarPositionEnum.NearCurrentItemAndPoint, DesignBarPositionEnum.Default
                    oFloatBar.StandaloneBarDockControl = dockFloatBar
                    If pGetCurrentDesignTools.CurrentItemPoint Is Nothing Then
                        If pGetCurrentDesignTools.CurrentItem Is Nothing Then
                            dockFloatBar.Visible = False
                            Return False
                        Else
                            Dim oItemBound As RectangleF = modPaint.ToPaintRectangle(pGetCurrentDesignTools.CurrentItem.GetBounds, sPaintZoom, oPaintTranslation)
                            Dim oVisibleBound As RectangleF = RectangleF.Intersect(oItemBound, picMap.ClientRectangle)
                            If modPaint.IsRectangleUnsized(oVisibleBound) Then
                                dockFloatBar.Visible = False
                                Return False
                            Else
                                Return pFloatingToolbarValidateLocation(New Point(oVisibleBound.X, oVisibleBound.Y))
                            End If
                        End If
                    Else
                        Dim oPenToolsPointF As PointF = modPaint.ToPaintPoint(New PointF(pGetCurrentDesignTools.CurrentItemPoint.X, pGetCurrentDesignTools.CurrentItemPoint.Y), sPaintZoom, oPaintTranslation)
                        Using oPath As GraphicsPath = New GraphicsPath
                            Dim oNextPoint As cPoint = pGetCurrentDesignTools.CurrentItemPoint.GetNext
                            If Not IsNothing(oNextPoint) Then
                                Call oPath.AddLine(oPenToolsPointF, modPaint.ToPaintPoint(New PointF(oNextPoint.X, oNextPoint.Y), sPaintZoom, oPaintTranslation))
                            End If
                            Dim oPrevPoint As cPoint = pGetCurrentDesignTools.CurrentItemPoint.GetPrevious
                            If Not IsNothing(oPrevPoint) Then
                                Call oPath.AddLine(oPenToolsPointF, modPaint.ToPaintPoint(New PointF(oPrevPoint.X, oPrevPoint.Y), sPaintZoom, oPaintTranslation))
                            End If
                            If modPaint.IsRectangleUnsized(oPath.GetBounds) Then
                                Return pFloatingToolbarValidateLocation(New Point(oPenToolsPointF.X, oPenToolsPointF.Y))
                            Else
                                Return pFloatingToolbarValidateLocation(New Point(oPath.GetBounds.Location.X, oPath.GetBounds.Location.Y))
                            End If
                        End Using
                    End If
            End Select
        Else
            dockFloatBar.Visible = False
            Return False
        End If
    End Function

    Private Sub pSurveyDrawTools(Graphics As Graphics)
        If Not pGetCurrentDesignTools.CurrentItem Is Nothing Then
            If pGetCurrentDesignTools.IsInEdit Then
                'mentre sono in edit...non disegno i punti di modifica
                Call modPaint.PaintSelection(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, pGetCurrentDesignTools.CurrentItem, sPaintZoom)
            Else
                If pGetCurrentDesignTools.CurrentItem.Type = cIItem.cItemTypeEnum.Items Then
                    Dim oItems As cItemItems = pGetCurrentDesignTools.CurrentItem
                    For Each oItem As cItem In oItems
                        Call modPaint.PaintSelection(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, oItem, sPaintZoom) ' / DPIRatio)
                    Next
                    Call modPaint.PaintSelectionTools(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, oItems, pGetCurrentDesignTools, sPaintZoom) ' / DPIRatio)
                Else
                    Call modPaint.PaintSelectionTools(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, oSurvey, pGetCurrentDesignTools.CurrentItem, pGetCurrentDesignTools, sPaintZoom)
                End If
            End If

            Try
                Dim bEndEnabled As Boolean = pGetCurrentDesignTools.IsInEdit
                btnItemsEndEdit.Enabled = bEndEnabled
            Catch ex As Exception
                Call pLogAdd(ex)
            End Try
        End If
        'Call pFloatingToolbarHide()
    End Sub

    Private Sub pSurveyDraw(ByVal Graphics As Graphics, Optional DisableDrawSelection As Boolean = False)
        If Not bDisablePaintEvent AndAlso Not bDrawing Then
            bDrawing = True
            Call oMousePointer.Push(Cursors.AppStarting)

            Dim iWidth As Integer = picMap.Width - oVSB.Width
            Dim iHeight As Integer = picMap.Height - oHSB.Height

            Select Case iDesignQuality
                Case DesignQualityLevelEnum.Base
                    Graphics.CompositingQuality = CompositingQuality.HighSpeed
                    Graphics.InterpolationMode = InterpolationMode.Low
                    Graphics.SmoothingMode = SmoothingMode.HighSpeed
                    Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias
                Case DesignQualityLevelEnum.MediumQuality
                    Graphics.CompositingQuality = CompositingQuality.HighSpeed
                    Graphics.InterpolationMode = InterpolationMode.Default
                    Graphics.SmoothingMode = SmoothingMode.AntiAlias
                    Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit
                Case DesignQualityLevelEnum.HighQuality
                    Graphics.CompositingQuality = CompositingQuality.HighQuality
                    Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic
                    Graphics.SmoothingMode = SmoothingMode.HighQuality
                    Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit
            End Select

            If Not oFrozenDesktop Is Nothing Then
                Call Graphics.DrawImageUnscaled(oFrozenDesktop, New Point(0, 0))
            End If

            Call Graphics.ScaleTransform(sPaintZoom, sPaintZoom, MatrixOrder.Append)
            Call Graphics.TranslateTransform(oPaintTranslation.X, oPaintTranslation.Y, MatrixOrder.Append)

            Dim oDesignTools As cEditDesignTools = pGetCurrentDesignTools()

            If Not oFrozenDesktop Is Nothing Then
                If Not oDesignTools.CurrentItem Is Nothing Then
                    Call oDesignTools.CurrentItem.Paint(Graphics, oCurrentOptions, cItem.PaintOptionsEnum.Solid, cItem.SelectionModeEnum.InEdit)
                End If
                If Not DisableDrawSelection Then
                    Call pSurveyDrawTools(Graphics)
                    If oDesignTools.IsLastPoint Then
                        Call modPaint.PaintLastPoint(Graphics, oSurvey, oDesignTools.LastItemPoint, sPaintZoom, oPaintTranslation)
                    End If
                End If
            Else
                Call MapDrawPrintOrExportArea(Graphics, oCurrentOptions, oSurvey, oCurrentDesign, sPaintZoom)
                If oDesignTools.IsFiltered AndAlso oDesignTools.FilterWhiteBoard Then
                    'whiteboard effect...to be optimized...
                    oDesignTools.Filter.Reversed = Not oDesignTools.Filter.Reversed
                    oDesignTools.FilterApply(False)
                    Call oCurrentDesign.Paint(Graphics, oCurrentOptions, cDrawOptions.Empty, oDesignTools)
                    Call Graphics.FillRectangle(New SolidBrush(Color.FromArgb(120, picMap.BackColor)), Graphics.ClipBounds)
                    oDesignTools.Filter.Reversed = Not oDesignTools.Filter.Reversed
                    oDesignTools.FilterApply(False)
                    Call oCurrentDesign.Paint(Graphics, oCurrentOptions, cDrawOptions.Empty, oDesignTools)
                Else
                    Call oCurrentDesign.Paint(Graphics, oCurrentOptions, cDrawOptions.Empty, oDesignTools)
                End If
                If Not DisableDrawSelection Then
                    Call pSurveyDrawTools(Graphics)
                    If oDesignTools.IsNewPoint Then
                        Call modPaint.PaintNewPoint(Graphics, oSurvey, oDesignTools.CurrentItemPoint, sPaintZoom, oPaintTranslation)
                    End If
                    If oDesignTools.IsLastPoint Then
                        Call modPaint.PaintLastPoint(Graphics, oSurvey, oDesignTools.LastItemPoint, sPaintZoom, oPaintTranslation)
                    End If
                End If
                Call modPaint.PaintCurrentMarkedDesktopPoint(Graphics, oSurvey, oDesignTools.CurrentMarkedDesktopPoint, sPaintZoom)

                Graphics.SmoothingMode = SmoothingMode.None
                Call modPaint.MapDrawAxis(Graphics, oSurvey)
                If iDrawMetricGrid = 1 Then
                    Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, sPaintZoom)
                ElseIf iDrawMetricGrid = 2 Then
                    If oTools.CurrentSegment Is Nothing Then
                        Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, sPaintZoom)
                    Else
                        If oTools.CurrentSegment.IsValid Then
                            Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, oCurrentDesign, oTools.CurrentSegment, oTools.CurrentTrigpoint, sPaintZoom, oPaintTranslation)
                        Else
                            Call modPaint.MapDrawMetricGrid(Graphics, oSurvey, sPaintZoom)
                        End If
                    End If
                End If
                If bDrawRulers Then
                    Call modPaint.MapDrawRulers(Graphics, oCurrentOptions, oSurvey, oDesignTools, iDrawRulesStyle, sPaintZoom)
                End If

                Graphics.SmoothingMode = SmoothingMode.AntiAlias
                Call Graphics.ResetTransform()
                If iMultiSelEnabled <> MultiSelTypeEnum.None Then
                    Dim oMultiSelRect As RectangleF = pGetMultiSelRect()
                    If Not oMultiSelRect.IsEmpty Then
                        Dim oMultiSelBrush As SolidBrush = Nothing
                        Dim oMultiSelPen As Pen = Nothing
                        Select Case iMultiSelEnabled
                            Case MultiSelTypeEnum.Zoom
                                oMultiSelBrush = oMultiSelBrush1
                                oMultiSelPen = oMultiSelPen1
                            Case MultiSelTypeEnum.SingleLayer
                                oMultiSelBrush = oMultiSelBrush2
                                oMultiSelPen = oMultiSelPen2
                            Case MultiSelTypeEnum.MultiLayer
                                oMultiSelBrush = oMultiSelBrush3
                                oMultiSelPen = oMultiSelPen3
                        End Select
                        If Not oMultiSelBrush Is Nothing Then
                            Call Graphics.FillRectangle(oMultiSelBrush, oMultiSelRect)
                        End If
                        If Not oMultiSelPen Is Nothing Then
                            Call Graphics.DrawRectangle(oMultiSelPen, Rectangle.Truncate(oMultiSelRect))
                        End If
                    End If
                End If
            End If

            If oFrozenDesktop Is Nothing Then
                Call pRebindDesignBar()
            End If

            Call oMousePointer.Pop()
            bDrawing = False
        End If
    End Sub

    Private Sub pWarpingPopupShow(ByVal Type As String, ByVal Text As String, Optional Details As String = "")
        Call cWarpingMessageBar.PopupShow(Type, Text, Details)
    End Sub

    Private Sub pWarpingPopupHide()
        Call cWarpingMessageBar.Hide()
    End Sub

    Private Sub pPopupShow(ByVal Type As String, ByVal Text As String, Optional Details As String = "")
        Call cMainMessageBar.PopupShow(Type, Text, Details)
    End Sub

    Private Sub pPopupHide()
        Call cMainMessageBar.Hide()
    End Sub

    Private Sub pTrigpointRemoveOrphans()
        If MsgBoxResult.Yes = UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning10"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            Call pSurveyTrigpointsRefresh(True)
        End If
    End Sub

    Private Sub btnSegments_CheckedChanged(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnSegments.CheckedChanged
        If btnSegments.Checked Then
            Call pSegmentsShow(True)
        End If
    End Sub

    Private Sub btnTrigPoints_CheckedChanged(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnTrigpoints.CheckedChanged
        If btnTrigpoints.Checked Then
            Call pTrigpointsShow(True)
        End If
    End Sub

    Private Sub btnSegmentsAndTrigPoints_CheckedChanged(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnSegmentsAndTrigPoints.CheckedChanged
        If btnSegmentsAndTrigPoints.Checked Then
            Call pSegmentsAndTrigPointsShow(True)
        End If
    End Sub

    Private Delegate Sub picMapInvalidateDelegate()

    Private Sub pMapInvalidate()
        Call picMap.Invalidate()
        If Not frmV Is Nothing Then
            Call frmV.MapInvalidate()
        End If
    End Sub

    Private Delegate Sub pSurveyHighlightCurrentCaveDelegate(ForceRefresh As Boolean)
    Private Sub pSurveyHighlightCurrentCave(ForceRefresh As Boolean)
        If InvokeRequired Then
            Call Me.BeginInvoke(New pSurveyHighlightCurrentCaveDelegate(AddressOf pSurveyHighlightCurrentCave), {ForceRefresh})
        Else
            If oCurrentOptions.HighlightCurrentCave OrElse ForceRefresh Then
                Call pSurveySegmentsAndTrigpointVisibility()
                'Call pSurveyLoadTreeLayers()
                Call pSurveyRedraw()
                Dim oTimer As Threading.Timer = New Threading.Timer(AddressOf pSurveyDelayedLoadTreeLayers, Nothing, 10, Threading.Timeout.Infinite)
            End If
        End If
    End Sub

    Private Sub pSurveyDelayedLoadTreeLayers(State As Object)
        If Not oDockLevels Is Nothing AndAlso oDockLevels.Enabled Then
            Call oDockLevels.RefreshData()
        End If
        'Call pSurveyLoadTreeLayers()
    End Sub

    Private Sub pFloatingToolbarUpdate()
        If Not pGetCurrentDesignTools() Is o3DTools Then
            If Me.IsActive AndAlso docView.ActiveDocument IsNot Nothing AndAlso docView.ActiveDocument.ControlName.ToLower = "dockdesigner" Then
                If pGetCurrentDesignTools.CurrentItem Is Nothing Then
                    Call pFloatingToolbarHide()
                Else
                    Call pFloatingToolbarGetLocation()
                End If
            End If
        End If
    End Sub

    Private Delegate Sub pFloatingToolbarShowDelegate()
    Private Sub pFloatingToolbarShow()
        If InvokeRequired Then
            Call Me.BeginInvoke(New pFloatingToolbarShowDelegate(AddressOf pFloatingToolbarShow))
        Else
            'If Me.IsActive AndAlso docView.ActiveDocument IsNot Nothing AndAlso docView.ActiveDocument.ControlName.ToLower = "dockdesigner" Then
            Dim oTools As Helper.Editor.cEditDesignTools = pGetCurrentDesignTools()

            If oTools Is o3DTools Then
                Call pFloatingToolbarHide()
            Else
                If oTools.CurrentItem Is Nothing Then
                    Call pFloatingToolbarHide()
                Else
                    If oTools.IsInPointEdit AndAlso oTools.CurrentItemPoint IsNot Nothing Then
                        Call oFloatBar.BeginUpdate()
                        For Each oLink As BarItemLink In oFloatBar.ItemLinks
                            oLink.Visible = (oLink.Item.Name.ToLower.StartsWith("btncurrentitempoint") OrElse oLink.Item Is btnItemsObjectProperties OrElse oLink.Item Is btnContextMenu) AndAlso oLink.Enabled
                        Next
                        Call oFloatBar.EndUpdate()
                    Else
                        Call oFloatBar.BeginUpdate()
                        For Each oLink As BarItemLink In oFloatBar.ItemLinks
                            oLink.Visible = (Not oLink.Item.Name.ToLower.StartsWith("btncurrentitempoint") OrElse oLink.Item Is btnItemsObjectProperties OrElse oLink.Item Is btnContextMenu) AndAlso oLink.Enabled
                        Next
                        Call oFloatBar.EndUpdate()
                    End If
                    Call pFloatingToolbarGetLocation()
                End If
            End If
            'End If
        End If
    End Sub

    Private Delegate Sub pFloatingToolbarHideDelegate()
    Private Sub pFloatingToolbarHide()
        If InvokeRequired Then
            Call Me.BeginInvoke(New pFloatingToolbarHideDelegate(AddressOf pFloatingToolbarHide))
        Else
            If dockFloatBar.Visible Then
                dockFloatBar.Visible = False
                Call picMap.Invalidate()
            End If
        End If
    End Sub

    Private Function pSurveyFindTrigPoint(ByVal TrigPoint As String) As Boolean
        TrigPoint = TrigPoint.ToUpper
        btnTrigpoints.Checked = True
        'if oTrigpointRowIndex.ContainsKey(TrigPoint) Then
        If oSurvey.TrigPoints.Contains(TrigPoint) Then
            Dim oTrigpoint As cTrigPoint = oSurvey.TrigPoints(TrigPoint)
            Call oTools.SelectTrigpoint(oTrigpoint)
            Return True
        Else
            Return False
        End If
    End Function

    Private Sub pItemConvertTo(ByVal Bag As cEditToolsBag, ByVal SourceItem As cItem)
        Dim oLayer As cLayer = oCurrentDesign.Layers(Bag.Layer)
        Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
        Dim oNewItem As cItem
        If TypeOf SourceItem Is cItemImage Then
            'have to be rewritten...
            Dim oImage As Bitmap = DirectCast(SourceItem, cItemImage).Image
            oNewItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch, "image", oImage))
        Else
            oNewItem = oLayer.GetType.GetMethod(Bag.Method).Invoke(oLayer, Bag.GetInvokeParameters("cave", sCave, "branch", sBranch))
        End If
        Call oNewItem.Points.AddRange(SourceItem.Points)
        If My.Computer.Keyboard.ShiftKeyDown Then
            Try : Call oNewItem.Pen.CopyFrom(SourceItem.Pen) : Catch : End Try
            Try : Call oNewItem.Brush.CopyFrom(SourceItem.Brush) : Catch : End Try
        End If
        Call pGetCurrentDesignTools.DeleteItem()
        Call pGetCurrentDesignTools.SelectItem(oNewItem)
        Call pMapInvalidate()
    End Sub

    Private Function pClipboardCheckDesignFormat() As Boolean
        Try
            Return Clipboard.ContainsData("csurvey.item")
        Catch
        End Try
        Return False
    End Function

    Private Function pClipboardCheckDataFormat() As Boolean
        Try
            Return Clipboard.ContainsData("csurvey.segments")
        Catch
        End Try
        Return False
    End Function

    Private Function pClipboardCheckDesignExtraFormats() As Boolean
        Dim bResult As Boolean = False
        Try
            bResult = bResult Or Clipboard.ContainsData("image/svg+xml")
            'bResult = bResult Or Clipboard.ContainsImage
            bResult = bResult Or Clipboard.ContainsText
            Return bResult
        Catch
        End Try
        Return False
    End Function

    Private Function pClipboardCheckDataExtraFormats() As Boolean
        Dim bResult As Boolean = False
        Try
            bResult = bResult Or Clipboard.ContainsText
            'csv?
            'altri?...boh!
            Return bResult
        Catch
        End Try
        Return False
    End Function

    Private Sub oClipboardViewer_ClipboardChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles oClipboardViewer.ClipboardChanged
        Call tmrClipboard.Start()
    End Sub

    Private Sub pSurveyViewer()
        If frmV Is Nothing Then
            Dim iView As frmPreview.ViewModeEnum
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile Then
                iView = frmPreview.ViewModeEnum.Profile
            Else
                iView = frmPreview.ViewModeEnum.Plan
            End If
            frmV = New frmPreview(oSurvey, frmPreview.PreviewModeEnum.Viewer, iView)
            Call frmV.Show(Me)
        End If
        Call frmV.BringToFront()
        Call frmV.Focus()
    End Sub

    Private Sub frmV_FormClosed(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosedEventArgs) Handles frmV.FormClosed
        Call frmV.Dispose()
        frmV = Nothing
    End Sub

    Private Sub pTrigpointsTrigpointPrefix()
        Dim oSelectedTrigpoints As List(Of cTrigPoint) = New List(Of cTrigPoint)
        If grdTrigPoints.Focused Then
            For Each oTrigpoint As cTrigPoint In grdViewTrigpoints.GetSelectedRows.Select(Function(iRowHandle) DirectCast(grdViewTrigpoints.GetRow(iRowHandle), cTrigPoint)).ToList
                'sTrigpoint = oTrigpoint.Name
                If Not oSelectedTrigpoints.Contains(oTrigpoint) Then
                    Call oSelectedTrigpoints.Add(oTrigpoint)
                End If
            Next
        ElseIf grdSegments.Focused Then
            For Each oSegment As cSegment In pSegmentsFromGridSelection()
                Dim oTrigpoint As cTrigPoint = oSegment.GetFromTrigPoint
                If Not oSelectedTrigpoints.Contains(oTrigpoint) Then
                    Call oSelectedTrigpoints.Add(oTrigpoint)
                End If
                oTrigpoint = oSegment.GetToTrigPoint
                If Not oSelectedTrigpoints.Contains(oTrigpoint) Then
                    Call oSelectedTrigpoints.Add(oTrigpoint)
                End If
            Next
        End If

        Call pSurveyTrigpointsRefresh()

        Dim oCurrentSegment As cSegment = oTools.CurrentSegment
        Dim oCurrentTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
        'Try : iCurrentSegment = grdSegments.CurrentRow.Index : Catch : iCurrentSegment = -1 : End Try
        'Try : iCurrentTrigpoint = grdTrigPoints.CurrentRow.Index : Catch : iCurrentTrigpoint = -1 : End Try
        Call pGetCurrentTools.SelectSegment(Nothing)
        Call pGetCurrentTools.SelectTrigpoint(Nothing)

        bDisableTrigpointsChangeEvent = True
        bDisableSegmentsChangeEvent = True

        Using frmPT As frmPrefixTrigPoints = New frmPrefixTrigPoints(oSurvey, oSelectedTrigpoints)
            With frmPT
                If .ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    bDisableTrigpointsChangeEvent = False
                    bDisableSegmentsChangeEvent = False

                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()
                    Call pSegmentSelect(oCurrentSegment, False, False)
                    Call pTrigPointSelect(oCurrentTrigpoint, False, False)
                    Call pSegmentsRefresh()
                    Call pTrigpointsRefresh()
                Else
                    bDisableTrigpointsChangeEvent = False
                    bDisableSegmentsChangeEvent = False
                End If
            End With
        End Using
    End Sub

    Private Sub pSurveyAutosave()
        If Not bDisabledAutosaveEvent Then
            If sFilename <> "" Then
                oAutosaveThread = New Threading.Thread(AddressOf pAutosaveThread_callback)
                Call oAutosaveThread.Start()
            End If
        End If
    End Sub

    Private Sub tmrAutosave_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrAutosave.Tick
        Call pSurveyAutosave()
    End Sub

    Private Sub pProcessOutputHandler(sendingProcess As Object, outLine As DataReceivedEventArgs)
        Call oSurvey.RaiseOnLogEvent(cSurvey.cSurvey.LogEntryType.Unknown, outLine.Data)
    End Sub

    Private Function pSurveyExportToTherion(ByVal Commands As String, Optional ByRef Output As String = "") As Boolean
        Dim sThProcess As String = My.Application.Settings.GetSetting("therion.path", "")
        If sThProcess = "" Then
        Else
            Dim bThBackgroundProcess As Boolean = My.Application.Settings.GetSetting("therion.backgroundprocess", 0)
            Dim bThTrigpointSafeName As Boolean = My.Application.Settings.GetSetting("therion.trigpointsafename", 1)
            Dim bThDeleteTempFile As Boolean = My.Application.Settings.GetSetting("therion.deletetempfiles", 0)
            If sThProcess <> "" Then
                Dim sTempThInputFilename As String = IO.Path.Combine(My.Computer.FileSystem.SpecialDirectories.Temp, "_therioninput.th")
                Dim sTempConfigFilename As String = IO.Path.Combine(My.Computer.FileSystem.SpecialDirectories.Temp, "_therionconfig.")
                Dim sTempThLogFilename As String = IO.Path.Combine(My.Computer.FileSystem.SpecialDirectories.Temp, "_therionlog.log")

                Try : My.Computer.FileSystem.DeleteFile(sTempThInputFilename) : Catch : End Try
                Try : My.Computer.FileSystem.DeleteFile(sTempConfigFilename) : Catch : End Try
                Try : My.Computer.FileSystem.DeleteFile(sTempThLogFilename) : Catch : End Try

                Dim oTrigPointsToElaborate As List(Of String) = oSurvey.Segments.GetTrigPointsNames.ToList
                Dim iTrigPointsCount As Integer = oTrigPointsToElaborate.Count
                Dim iSegmentsCount As Integer = oSurvey.Segments.GetValidSegments.Count

                If iTrigPointsCount > 1 And iSegmentsCount > 0 Then

                    'creo due dizionari di codifica per i capisaldi...
                    Dim oInputdictionary As Dictionary(Of String, String)
                    Dim oOutputdictionary As Dictionary(Of String, String)
                    If bThTrigpointSafeName Then
                        oInputdictionary = New Dictionary(Of String, String)
                        oOutputdictionary = New Dictionary(Of String, String)
                        Dim iIndex As Integer = 0
                        For Each sTrigPoint As String In oTrigPointsToElaborate
                            Call oInputdictionary.Add(sTrigPoint, iIndex)
                            Call oOutputdictionary.Add(iIndex, sTrigPoint)
                            iIndex += 1
                        Next
                    End If

                    Dim bThSegmentForceDirection As Boolean = My.Application.Settings.GetSetting("therion.segmentforcedirection", 1)
                    Dim bThSegmentForcePath As Boolean = My.Application.Settings.GetSetting("therion.segmentforcepath", 1)
                    Dim iThOptions As modExport.TherionExportOptionsEnum = If(bThSegmentForceDirection, modExport.TherionExportOptionsEnum.SegmentForceDirection, 0) Or If(bThSegmentForcePath, modExport.TherionExportOptionsEnum.SegmentForcePath, 0)
                    iThOptions = iThOptions Or TherionExportOptionsEnum.Scrap
                    Call modExport.TherionThExportTo(oSurvey, sTempThInputFilename, oInputdictionary, iThOptions)
                    Call modExport.TherionCreateConfig(oSurvey, sTempConfigFilename, sTempThInputFilename, Commands)

                    Dim iExitCode As Integer = modMain.ExecuteProcess(sThProcess, Chr(34) & sTempConfigFilename & Chr(34) & " -l " & Chr(34) & sTempThLogFilename & Chr(34), bThBackgroundProcess, AddressOf pProcessOutputHandler)

                    Output = My.Computer.FileSystem.ReadAllText(sTempThLogFilename)

                    Call pConsoleAdd(cSurvey.cSurvey.LogEntryType.Unknown, Output)

                    If iExitCode = 0 Then
                    Else

                    End If

                    If bThDeleteTempFile Then
                        Try : My.Computer.FileSystem.DeleteFile(sTempThInputFilename) : Catch : End Try
                        Try : My.Computer.FileSystem.DeleteFile(sTempConfigFilename) : Catch : End Try
                        Try : My.Computer.FileSystem.DeleteFile(sTempThLogFilename) : Catch : End Try
                    End If

                    If iExitCode = 0 Then
                        Return True
                    Else
                        Return False
                    End If
                End If
            End If
        End If
    End Function

    Private Function pSurveyLoch() As Boolean
        Dim iExitCode As Integer
        Dim sThProcess As String = My.Application.Settings.GetSetting("therion.path", "")
        If sThProcess = "" Then
            Return False
        Else
            Call pStatusSet(GetLocalizedString("main.textpart4"))
            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim bThBackgroundProcess As Boolean = My.Application.Settings.GetSetting("therion.backgroundprocess", 0)
            Dim bThTrigpointSafeName As Boolean = My.Application.Settings.GetSetting("therion.trigpointsafename", 1)
            Dim bThUseCadastralIDinCaveNames As Boolean = My.Application.Settings.GetSetting("therion.usecadastralidincavenames", 0)
            Dim bThDeleteTempFile As Boolean = My.Application.Settings.GetSetting("therion.deletetempfiles", 0)

            Dim oFiles As List(Of String) = New List(Of String)

            Dim sTempPath As String = My.Computer.FileSystem.SpecialDirectories.Temp
            Dim sBaseName As String = "_therion" & If(modMain.bIsInDebug, "", "_" & Guid.NewGuid.ToString) & "_loch"

            Dim oTempThInputFilename As List(Of String) = New List(Of String)
            Dim sTempThOutputFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_output.lox")
            Call oFiles.Add(sTempThOutputFilename)
            Dim sTempConfigFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_config.thconfig")
            Call oFiles.Add(sTempConfigFilename)
            Dim sTempThLogFilename As String = IO.Path.Combine(sTempPath, sBaseName & "_log.log")
            Call oFiles.Add(sTempThLogFilename)

            Call DeleteFiles(oFiles)

            Dim oTrigPointsToElaborate As List(Of String) = oSurvey.Calculate.TrigPoints.Select(Function(oitem) oitem.Name).ToList  'oSurvey.Segments.GetTrigPointsNames.ToList
            Dim iTrigPointsCount As Integer = oTrigPointsToElaborate.Count
            Dim iSegmentsCount As Integer = oSurvey.Segments.GetValidSegments.Count

            If iTrigPointsCount > 1 AndAlso iSegmentsCount > 0 Then
                Using frmLD As frmLochDialog = New frmLochDialog(oSurvey)
                    Dim iRes As DialogResult = frmLD.ShowDialog(Me)
                    If iRes = Windows.Forms.DialogResult.OK OrElse iRes = Windows.Forms.DialogResult.Retry Then
                        Dim iThOptions As modExport.TherionExportOptionsEnum = TherionExportOptionsEnum.Loch Or TherionExportOptionsEnum.ExportSurfaceElevationsData

                        'use 3d mode of main survey....
                        If oSurvey.Properties.ThreeDModelMode > cProperties.ThreeDModelModeEnum.Simple Then
                            Call oSurvey.Calculate.CalculateDataFromDesigns(oTrigPointsToElaborate)
                        Else
                            'splay could be visibile only without 3d model...
                            If oSurvey.Properties.ThreeDLochShowSplay Then iThOptions = iThOptions Or TherionExportOptionsEnum.CalculateSplay Or TherionExportOptionsEnum.ExportSplay
                        End If

                        '---------------------------------------------------------------------------------------------------------
                        'create dictionary for stations
                        Dim oInputdictionary As Dictionary(Of String, String) = Nothing
                        Dim oOutputdictionary As Dictionary(Of String, String) = Nothing
                        If bThTrigpointSafeName Then
                            Dim oKeyToExclude As List(Of Integer) = oSurvey.Properties.CaveInfos.GetAllWithEmpty.Select(Function(oitem) oitem.Name).Where(Function(oitem)
                                                                                                                                                              Dim bResult As Boolean
                                                                                                                                                              Call Integer.TryParse(oitem, bResult)
                                                                                                                                                              Return bResult
                                                                                                                                                          End Function).Select(Function(sitem) Integer.Parse(sitem)).Distinct.ToList
                            Call modExport.CreateStationDictionary(oTrigPointsToElaborate, oKeyToExclude, oInputdictionary, oOutputdictionary)
                        End If
                        '---------------------------------------------------------------------------------------------------------

                        If bThTrigpointSafeName Then iThOptions = iThOptions Or TherionExportOptionsEnum.TrigpointExportNameAsComment
                        If bThUseCadastralIDinCaveNames Then iThOptions = iThOptions Or TherionExportOptionsEnum.UseCadastralIDinCaveNames

                        Dim sTempThInputFilename As String = IO.Path.Combine(sTempPath, Guid.NewGuid.ToString & "_input.th")
                        If oSurvey.Properties.ThreeDModelMode = cProperties.ThreeDModelModeEnum.Simple Then
                            Dim oResult As cTherionCalculateResult = modExport.TherionThExportTo(oSurvey, sTempThInputFilename, oInputdictionary, iThOptions)
                            Call oFiles.AddRange(oResult.Files)
                        Else
                            Dim oResult As cTherionCalculateResult = modExport.TherionThExportTo(oSurvey, sTempThInputFilename, oInputdictionary, iThOptions Or TherionExportOptionsEnum.UseSubData)
                            Call oFiles.AddRange(oResult.Files)
                        End If
                        Call oTempThInputFilename.Add(sTempThInputFilename)

                        'remove elevation data export option from linked survey...
                        iThOptions = iThOptions And Not TherionExportOptionsEnum.ExportSurfaceElevationsData
                        For Each oLinkedSurvey As cLinkedSurvey In oSurvey.LinkedSurveys.GetSelected("loch")
                            Dim sTempThInputLinkedFilename As String = IO.Path.Combine(sTempPath, Guid.NewGuid.ToString & "_input.th")

                            Dim oLinkedSurveyTrigPointsToElaborate As List(Of String) = oLinkedSurvey.LinkedSurvey.Calculate.TrigPoints.Select(Function(oitem) oitem.Name).ToList

                            If oSurvey.Properties.ThreeDModelMode > cProperties.ThreeDModelModeEnum.Simple Then
                                Call pStatusSet(String.Format(GetLocalizedString("main.textpart152"), oLinkedSurvey.GetName))
                                Call oLinkedSurvey.LinkedSurvey.Calculate.CalculateDataFromDesigns(oLinkedSurveyTrigPointsToElaborate, oSurvey.Properties.ThreeDModelMode)
                            End If

                            Dim oLinkedSurveyInputdictionary As Dictionary(Of String, String) = Nothing
                            Dim oLinkedSurveyOutputdictionary As Dictionary(Of String, String) = Nothing
                            If bThTrigpointSafeName Then
                                Dim oLinkedSurveyKeyToExclude As List(Of Integer) = oLinkedSurvey.LinkedSurvey.Properties.CaveInfos.GetAllWithEmpty.Select(Function(oitem) oitem.Name).Where(Function(oitem)
                                                                                                                                                                                                 Dim bResult As Boolean
                                                                                                                                                                                                 Call Integer.TryParse(oitem, bResult)
                                                                                                                                                                                                 Return bResult
                                                                                                                                                                                             End Function).Select(Function(sitem) Integer.Parse(sitem)).Distinct.ToList
                                Call modExport.CreateStationDictionary(oLinkedSurveyTrigPointsToElaborate, oLinkedSurveyKeyToExclude, oLinkedSurveyInputdictionary, oLinkedSurveyOutputdictionary)
                            End If
                            'use 3d mode of main survey....
                            If oSurvey.Properties.ThreeDModelMode = cProperties.ThreeDModelModeEnum.Simple Then
                                Dim oResult As cTherionCalculateResult = modExport.TherionThExportTo(oLinkedSurvey.LinkedSurvey, sTempThInputLinkedFilename, oLinkedSurveyInputdictionary, iThOptions)
                                Call oFiles.AddRange(oResult.Files)
                            Else
                                Dim oResult As cTherionCalculateResult = modExport.TherionThExportTo(oLinkedSurvey.LinkedSurvey, sTempThInputLinkedFilename, oLinkedSurveyInputdictionary, iThOptions Or TherionExportOptionsEnum.UseSubData)
                                Call oFiles.AddRange(oResult.Files)
                            End If
                            Call oTempThInputFilename.Add(sTempThInputLinkedFilename)
                        Next
                        Call modExport.TherionCreateConfig(oSurvey, sTempConfigFilename, oTempThInputFilename, "export model -fmt loch -output " & Chr(34) & sTempThOutputFilename & Chr(34))

                        iExitCode = modMain.ExecuteProcess(sThProcess, Chr(34) & sTempConfigFilename & Chr(34) & " -l " & Chr(34) & sTempThLogFilename & Chr(34), bThBackgroundProcess, AddressOf pProcessOutputHandler)
                        If iExitCode = 0 OrElse My.Computer.FileSystem.FileExists(sTempThOutputFilename) Then
                            If iExitCode <> 0 Then Call pLogAdd(cSurvey.cSurvey.LogEntryType.Warning, "Therion exit code " & iExitCode, "")
                            If iRes = DialogResult.OK Then
                                Dim sLochPath As String = Path.GetDirectoryName(sThProcess)
                                Call Shell(Path.Combine(sLochPath, "loch.exe") & " " & Chr(34) & sTempThOutputFilename & Chr(34), AppWinStyle.MaximizedFocus, True, -1)
                            Else
                                Using oSFD As SaveFileDialog = New SaveFileDialog
                                    With oSFD
                                        .Title = GetLocalizedString("main.saveloch")
                                        .Filter = GetLocalizedString("main.filetypeLOX") & " (*.LOX)|*.LOX|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                                        .FilterIndex = 1
                                        If .ShowDialog = DialogResult.OK Then
                                            If My.Computer.FileSystem.FileExists(.FileName) Then Call My.Computer.FileSystem.DeleteFile(.FileName)
                                            Call My.Computer.FileSystem.MoveFile(sTempThOutputFilename, .FileName)
                                        End If
                                    End With
                                End Using
                            End If
                        Else
                            'Dim sLines As String = My.Computer.FileSystem.ReadAllText(sTempThLogFilename)
                            'For Each sLine As String In Strings.Split(sLines, vbCrLf)
                            '    If sLine Like "* error -- *" Then
                            '        Dim sErrorMessage As String = sLine.Substring(sLine.IndexOf(" error -- ") + 10)
                            '        sErrorMessage = sErrorMessage.Replace(sTempThInputFilename, "").Trim
                            '        'todo: error use dictionaries for station...have to be translated...
                            '        Call pPopupShow("error", sErrorMessage)
                            '    End If
                            'Next
                        End If

                        If bThDeleteTempFile Then
                            Call DeleteFiles(oFiles)
                        End If
                    End If
                End Using
            End If
            Call oMousePointer.Pop()
            Call pStatusSet("")
        End If
        If iExitCode = 0 Then
            Return True
        Else
            Return False
        End If
    End Function

    Public Enum FindWhereEnum
        [Default] = -1
        Segments = 0
        TrigPoints = 1
        Design = 2
    End Enum

    Private Sub pFind(Optional ByVal Where As FindWhereEnum = -1)
        If Where = FindWhereEnum.Segments OrElse (grdSegments.Focused AndAlso Where = FindWhereEnum.Default) Then
            Call grdViewSegments.ShowFindPanel()
        ElseIf Where = FindWhereEnum.Segments OrElse (grdTrigPoints.Focused AndAlso Where = FindWhereEnum.Default) Then
            Call grdViewTrigpoints.ShowFindPanel()
        Else
            Call pLevelsShow(True)
            Call oDockLevels.ShowFindPanel()
        End If
    End Sub

    Private Sub btnTherionPadExport3D_ItemClick(ByVal Sender As Object, ByVal e As EventArgs) Handles btnTherionPadExport3D.ItemClick
        Dim sOutputFilename As String = Path.GetFileNameWithoutExtension(sFilename) & ".lox"
        Using sfd As SaveFileDialog = New SaveFileDialog
            With sfd
                .Filter = GetLocalizedString("main.filetypeLOX") & " (*.LOX)|*.LOX|" & GetLocalizedString("main.filetypeCompass") & " (*.PLT)|*.PLT|" & GetLocalizedString("main.filetypeSurvex") & " (*.3D)|*.3D|" & GetLocalizedString("main.filetypeDXF") & " (*.DXF)|*.DXF|" & GetLocalizedString("main.filetypeShapeFile") & " (*.SHP)|*.SHP|" & GetLocalizedString("main.filetypeVRLM") & " (*.VRLM)|*.VRLM|" & GetLocalizedString("main.filetype3DMF") & " (*.3DMF)|*.3DMF|" & GetLocalizedString("main.filetypeKML") & " (*.KML)|*.KML"
                .FilterIndex = 1
                .FileName = sOutputFilename
                If .ShowDialog(Me) = vbOK Then
                    sOutputFilename = .FileName
                    Dim s3DFormat As String = "loch"
                    Select Case .FilterIndex
                        Case 1
                            s3DFormat = "loch"
                        Case 2
                            s3DFormat = "compass"
                        Case 3
                            s3DFormat = "survex"
                        Case 4
                            s3DFormat = "dxf"
                        Case 5
                            s3DFormat = "esri"
                        Case 6
                            s3DFormat = "vrlm"
                        Case 7
                            s3DFormat = "3dmf"
                        Case 8
                            s3DFormat = "kml"
                    End Select
                    Call pSurveyExportToTherion("export model -fmt " & s3DFormat & " -output " & Chr(34) & sOutputFilename & Chr(34))
                End If
            End With
        End Using
    End Sub

    Private Sub btnTherionPadExportPlan_ItemClick(ByVal Sender As Object, ByVal e As EventArgs) Handles btnTherionPadExportPlan.ItemClick
        Dim sOutputFilename As String = Path.GetFileNameWithoutExtension(sFilename) & ".pdf"
        Using sfd As SaveFileDialog = New SaveFileDialog
            With sfd
                .Filter = GetLocalizedString("main.filetypePDF") & " (*.PDF)|*.PDF|" & GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeDXF") & " (*.DXF)|*.DXF"
                .FilterIndex = 1
                .FileName = sOutputFilename
                If .ShowDialog(Me) = vbOK Then
                    sOutputFilename = .FileName
                    Dim sFormat As String
                    Select Case Path.GetExtension(sOutputFilename).ToLower
                        Case ".svg"
                            sFormat = "svg"
                        Case ".dxf"
                            sFormat = "dxf"
                        Case Else
                            sFormat = "pdf"
                    End Select
                    Call pSurveyExportToTherion("export map -proj plan -fmt " & sFormat & " -output " & Chr(34) & sOutputFilename & Chr(34))
                End If
            End With
        End Using
    End Sub

    Private Sub btnTherionPadExportProfile_ItemClick(ByVal Sender As Object, ByVal e As EventArgs) Handles btnTherionPadExportProfile.ItemClick
        Dim sOutputFilename As String = Path.GetFileNameWithoutExtension(sFilename) & ".pdf"
        Using sfd As SaveFileDialog = New SaveFileDialog
            With sfd
                .Filter = GetLocalizedString("main.filetypePDF") & " (*.PDF)|*.PDF|" & GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeDXF") & " (*.DXF)|*.DXF"
                .FilterIndex = 1
                .FileName = sOutputFilename
                If .ShowDialog(Me) = vbOK Then
                    sOutputFilename = .FileName
                    Dim sFormat As String
                    Select Case Path.GetExtension(sOutputFilename).ToLower
                        Case ".svg"
                            sFormat = "svg"
                        Case ".dxf"
                            sFormat = "dxf"
                        Case Else
                            sFormat = "pdf"
                    End Select
                    Call pSurveyExportToTherion("export map -proj extended -fmt " & sFormat & " -output " & Chr(34) & sOutputFilename & Chr(34))
                End If
            End With
        End Using
    End Sub

    Private Sub oTools_OnTrigPointSelect(ByVal Sender As Object, ByVal ToolEventArgs As cEditTools.cEditBaseToolsEventArgs) Handles oTools.OnTrigPointSelect
        Call pTrigPointSave(ToolEventArgs.PreviousTrigpoint)
        Call pTrigpointLoad(ToolEventArgs.CurrentTrigpoint)

        Call oSurvey.Plan.Plot.Redraw(ToolEventArgs.PreviousTrigpoint)
        Call oSurvey.Profile.Plot.Redraw(ToolEventArgs.PreviousTrigpoint)
        Call oSurvey.Plan.Plot.Redraw(ToolEventArgs.CurrentTrigpoint)
        Call oSurvey.Profile.Plot.Redraw(ToolEventArgs.CurrentTrigpoint)

        Call pClipboardAlign()

        Call pTrigpointItemSelect()
    End Sub

    Private Function pGetCurrentControlInsidePanels(ParentPanel As ContainerControl) As Control
        Dim oPanel As ContainerControl = TryCast(ParentPanel.ActiveControl, ContainerControl)
        If oPanel Is Nothing Then
            Return ParentPanel.ActiveControl
        Else
            Return pGetCurrentControlInsidePanels(oPanel)
        End If
    End Function

    Private Sub pClipboardAlign()
        Try
            Select Case pGetCurrentContext()
                Case cContextEnum.Segments
                    Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
                    If oSegment Is Nothing Then
                        btnDesignSetCurrentCaveBranch.Enabled = False
                    Else
                        btnDesignSetCurrentCaveBranch.Enabled = True
                        Dim oSegments As cSegmentCollection = pSegmentsFromGridSelection(True)
                        Dim bEnabledEdit As Boolean = oSegments.Count > 0 AndAlso ((oSegment.Splay) OrElse (Not (oSegment.IsBinded OrElse oSegment.IsOrigin))) OrElse (pGetDisableDataGridConstraint())
                        Dim bLocked As Boolean = oSegment.GetLocked

                        btnCut.Enabled = bEnabledEdit AndAlso Not bLocked
                        btnCopy.Enabled = bEnabledEdit
                        btnDelete.Enabled = bEnabledEdit AndAlso Not bLocked

                        'allinea lo stato dei comandi PASTE
                        Dim bStandardFormat As Boolean = pClipboardCheckDataFormat()
                        Dim bExtraFormat As Boolean = pClipboardCheckDesignExtraFormats()
                        Dim bEnabled As Boolean = bStandardFormat Or bExtraFormat

                        btnPasteService.Enabled = bEnabled
                        btnPaste.Enabled = bEnabled
                        btnPasteService.ActAsDropDown = False
                        btnPasteService.ButtonStyle = BarButtonStyle.Default

                    End If
                Case cContextEnum.Trigpoints
                    btnDesignSetCurrentCaveBranch.Enabled = False

                    btnCut.Enabled = False
                    btnCopy.Enabled = False

                    btnPasteService.Enabled = False
                    btnPaste.Enabled = False
                    btnPasteService.ActAsDropDown = False
                    btnPasteService.ButtonStyle = BarButtonStyle.Default

                    btnDelete.Enabled = False
                Case cContextEnum.DesignPlan, cContextEnum.DesignProfile
                    If oCurrentDesign Is Nothing Then
                        btnDesignSetCurrentCaveBranch.Enabled = False

                        btnCut.Enabled = False
                        btnCopy.Enabled = False

                        btnPasteService.Enabled = False
                        btnPaste.Enabled = False
                        btnPasteService.ActAsDropDown = False
                        btnPasteService.ButtonStyle = BarButtonStyle.Default

                        btnDelete.Enabled = False
                    Else
                        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
                        Dim bEnabledEdit As Boolean = Not oItem Is Nothing

                        If bEnabledEdit Then
                            If TypeOf oItem Is cItemSegment Then
                                bEnabledEdit = False
                                btnDesignSetCurrentCaveBranch.Enabled = True
                            ElseIf TypeOf oItem Is cItemTrigpoint Then
                                bEnabledEdit = False
                                btnDesignSetCurrentCaveBranch.Enabled = False
                            ElseIf TypeOf oItem Is cItemMarker Then
                                bEnabledEdit = False
                                btnDesignSetCurrentCaveBranch.Enabled = False
                            Else
                                btnDesignSetCurrentCaveBranch.Enabled = True
                            End If
                        Else
                            btnDesignSetCurrentCaveBranch.Enabled = False
                        End If

                        Dim bItemCanBeCopied As Boolean = bEnabledEdit AndAlso oItem.CanBeCopied
                        Dim bCanBeDeleted As Boolean = bEnabledEdit AndAlso oItem.CanBeDeleted 'AndAlso bLocked
                        Dim bCanBeCutted As Boolean = bCanBeDeleted AndAlso bItemCanBeCopied
                        Dim bCanBeCopied As Boolean = bEnabledEdit AndAlso bItemCanBeCopied

                        btnCut.Enabled = bCanBeCutted
                        btnCopy.Enabled = bCanBeCopied
                        btnDelete.Enabled = bCanBeDeleted

                        Dim bStandardFormat As Boolean = pClipboardCheckDesignFormat()
                        Dim bExtraFormat As Boolean = pClipboardCheckDesignExtraFormats()
                        Dim bEnabled As Boolean = bStandardFormat OrElse bExtraFormat

                        If bEnabledEdit AndAlso (oItem.HavePen OrElse oItem.HaveBrush) Then
                            If bEnabled Then
                                btnPasteService.Enabled = True
                                btnPasteService.ActAsDropDown = False
                            Else
                                btnPasteService.Enabled = True
                                btnPasteService.ActAsDropDown = True
                            End If
                            btnPasteService.ButtonStyle = BarButtonStyle.DropDown
                            btnPasteService.DropDownControl = mnuPasteSpecial
                            btnPasteStylePen.Enabled = bEnabledEdit AndAlso oItem.HavePen
                            btnPasteStyleBrush.Enabled = bEnabledEdit AndAlso oItem.HaveBrush
                        Else
                            btnPasteService.Enabled = bEnabled
                            btnPasteService.ButtonStyle = BarButtonStyle.Default
                        End If
                        btnPaste.Enabled = bEnabled
                    End If
                Case cContextEnum.Design3D
                    If oCurrentDesign Is Nothing Then
                        btnDesignSetCurrentCaveBranch.Enabled = False

                        btnCut.Enabled = False
                        btnCopy.Enabled = False

                        btnPasteService.Enabled = False
                        btnPaste.Enabled = False
                        btnPasteService.ActAsDropDown = False
                        btnPasteService.ButtonStyle = BarButtonStyle.Default

                        btnDelete.Enabled = False
                    Else
                        Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
                        Dim bEnabledEdit As Boolean = Not oItem Is Nothing

                        If bEnabledEdit Then
                            If TypeOf oItem Is cItemSegment Then
                                bEnabledEdit = False
                                btnDesignSetCurrentCaveBranch.Enabled = True
                            ElseIf TypeOf oItem Is cItemTrigpoint Then
                                bEnabledEdit = False
                                btnDesignSetCurrentCaveBranch.Enabled = False
                            Else
                                btnDesignSetCurrentCaveBranch.Enabled = True
                            End If
                        Else
                            btnDesignSetCurrentCaveBranch.Enabled = False
                        End If

                        Dim bItemCanBeCopied As Boolean = oItem.CanBeCopied
                        Dim bCanBeDeleted As Boolean = bEnabledEdit AndAlso oItem.CanBeDeleted 'AndAlso bLocked
                        Dim bCanBeCutted As Boolean = bCanBeDeleted AndAlso bItemCanBeCopied
                        Dim bCanBeCopied As Boolean = bEnabledEdit AndAlso bItemCanBeCopied

                        btnCut.Enabled = bCanBeCutted
                        btnCopy.Enabled = bCanBeCopied
                        Debug.Print(bCanBeDeleted)
                        btnDelete.Enabled = bCanBeDeleted

                        'Dim bStandardFormat As Boolean = pClipboardCheckDesignFormat()
                        'Dim bExtraFormat As Boolean = pClipboardCheckDesignExtraFormats()
                        'Dim bEnabled As Boolean = bStandardFormat OrElse bExtraFormat

                        btnPasteService.Enabled = False
                        btnPasteService.ButtonStyle = BarButtonStyle.Default
                        btnPaste.Enabled = False
                    End If
                Case Else
                    If oCurrentDesign Is Nothing Then
                        btnDesignSetCurrentCaveBranch.Enabled = False

                        btnCut.Enabled = False
                        btnCopy.Enabled = False

                        btnPasteService.Enabled = False
                        btnPaste.Enabled = False
                        btnPasteService.ActAsDropDown = False
                        btnPasteService.ButtonStyle = BarButtonStyle.Default

                        btnDelete.Enabled = False
                    Else
                        'Dim oItem As cItem = pGetCurrentDesignTools.CurrentItem
                        'If TypeOf oItem Is cItemChunk3D Then
                        '    btnDesignSetCurrentCaveBranch.Enabled = False

                        '    btnCut.Enabled = False
                        '    btnCopy.Enabled = False

                        '    btnPasteService.Enabled = False
                        '    btnPaste.Enabled = False
                        '    btnPasteService.ActAsDropDown = False
                        '    btnPasteService.ButtonStyle = BarButtonStyle.Default

                        '    btnDelete.Enabled = oItem.CanBeDeleted
                        'Else
                        btnDesignSetCurrentCaveBranch.Enabled = False

                        btnCut.Enabled = False
                        btnCopy.Enabled = False

                        btnPasteService.Enabled = False
                        btnPaste.Enabled = False
                        btnPasteService.ActAsDropDown = False
                        btnPasteService.ButtonStyle = BarButtonStyle.Default

                        btnDelete.Enabled = False
                        'End If
                    End If
            End Select
        Catch
        End Try
    End Sub

    Private Sub tmrClipboard_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrClipboard.Tick
        'realign clipboard-related buttons (cut,copy,paste...)
        Call tmrClipboard.Stop()
        Call pClipboardAlign()
    End Sub

    Private Sub pObjectSetCaveBranch()
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo18"))
                    Dim oItem As cItem = .CurrentItem
                    Dim sCurrentCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
                    Dim sCurrentBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
                    Call oItem.SetCave(sCurrentCave, sCurrentBranch, True)
                    Call oItem.SetBindDesignType(btnMainBindDesignType.EditValue, oSurvey.CrossSections.GetBindItem(btnMainBindCrossSections.EditValue), True)
                    Call .CommitUndoSnapshot()
                End With
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch
        End Try
    End Sub

    Private Sub pSurveyImportTherionGraphics(Filename As String, Append As Boolean)
        Using frmIT As frmImportTherion2 = New frmImportTherion2
            frmIT.txtFilename.Text = Filename

            If frmIT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Dim iOptions As modImport.TherionImportOptionsEnum
                iOptions = iOptions Or If(frmIT.chkTherionImportplan.Checked, modImport.TherionImportOptionsEnum.ImportPlan, 0)
                iOptions = iOptions Or If(frmIT.chkTherionImportprofile.Checked, modImport.TherionImportOptionsEnum.ImportProfile, 0)
                iOptions = iOptions Or If(frmIT.chkTherionMergeAndReorderBorders.Checked, modImport.TherionImportOptionsEnum.MergeAndReorderBorders, 0)
                iOptions = iOptions Or If(frmIT.chktherionConvertBezierToSpline.Checked, modImport.TherionImportOptionsEnum.ConvertBezierToSpline, 0)
                Dim sScaleFactor As Single = frmIT.txtTherionScaleFactor.Value

                Dim sForcedCaveName As String = frmIT.txtCaveName.Text
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin11"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)

                Call oDockLevels.SuspendLayout()

                Call modImport.TherionTh2ImportFrom(oSurvey, Filename, sForcedCaveName, iOptions, sScaleFactor)

                Call oDockLevels.ResumeLayout()

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend11"))
                Call oMousePointer.Pop()
                'Call pSurveyLoadTreeLayers()
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportSVG(Filename As String, Append As Boolean)
        'SVG
        Dim dNow As Date = Date.Now

        Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)
        Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)

        Call oMousePointer.Push(Cursors.WaitCursor)
        Dim oClipart As cDrawClipArt = New cDrawClipArt(Filename)
        Call oMousePointer.Pop()

        Dim oOptions As cItemGeneric.cItemGenericOptions = New cItemGeneric.cItemGenericOptions(oSurvey)
        Dim oSVGI As frmSVGImportOptions = New frmSVGImportOptions(oSurvey, oOptions, oClipart)
        If oSVGI.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
            Call oMousePointer.Push(Cursors.WaitCursor)

            Dim sCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
            Dim sBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
            Dim oItem As cItem = pGetCurrentDesignTools.CurrentLayer.CreateGeneric(sCave, sBranch, oClipart, oOptions)

            Call oItem.DataProperties.SetValue("import_source", "svg")
            Call oItem.DataProperties.SetValue("import_date", dNow)

            If oOptions.Divide Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call pGetCurrentDesignTools.CurrentLayer.Items.Divide(oItem)
                Call oMousePointer.Pop()
                Call pGetCurrentDesignTools.EndItem()
            Else
                Call pGetCurrentDesignTools.SelectItem(oItem)
            End If
            Call oMousePointer.Pop()

            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pSurveyImportTrack(Filename As String, FilterIndex As Integer, Append As Boolean)
        'TRACCIA GPS
        Dim dNow As Date = Date.Now

        Using frmIGT As frmImportGPSTrack = New frmImportGPSTrack
            frmIGT.txtFilename.Text = Filename

            If frmIGT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim bImportWaypoint As Boolean = frmIGT.chkGPSImportWaypoint.Checked
                Dim iImportWaypointMode As Integer = frmIGT.cboGPSImportWaypointMode.SelectedIndex
                Dim bImportCreateCaveForWaypoint As Boolean = frmIGT.chkGPSImportCreateCaveForWaypoint.Checked
                Dim bImportCreateStationLink As Boolean = frmIGT.chkGPSImportCreateStationLinks.Checked

                Dim oCurrentCave As cCaveInfo = Nothing

                Dim oXml As XmlDocument = New XmlDocument
                Call oXml.Load(Filename)

                Dim sPrevStationName As String = ""
                Dim sStationName As String = ""

                'Dim bImportTrack As Boolean = True
                'If bImportTrack Then
                '    Dim oPrevStationUTM As modUTM.UTM
                '    Dim oStationUTM As modUTM.UTM
                '    'test for track
                '    Dim oTracksNodes As XmlNodeList
                '    Select Case FilterIndex
                '        Case 2
                '            oTracksNodes = oXml.GetElementsByTagName("trk")
                '    End Select
                '    Dim iTrackIndex As Integer = 0
                '    For Each oXMLTracks As XmlElement In oTracksNodes
                '        Dim sLon As String = ""
                '        Dim sLat As String = ""
                '        Dim sAlt As String = ""
                '        Dim iTrackPointIndex As Integer = 0
                '        For Each oXMLTrackPoint As XmlElement In oXMLTracks.GetElementsByTagName("trkpt")
                '            sLon = oXMLTrackPoint.GetAttribute("lon")
                '            sLat = oXMLTrackPoint.GetAttribute("lat")
                '            sAlt = oXMLTrackPoint.Item("ele").InnerText

                '            sStationName = iTrackIndex & "_" & iTrackPointIndex
                '            iTrackPointIndex += 1

                '            Dim oTrigpoint As cTrigPoint = oSurvey.TrigPoints.Add(sStationName)
                '            With oTrigpoint
                '                .Coordinate.Format = "dd.ddddddd n"
                '                .Coordinate.Longitude = sLon
                '                .Coordinate.Latitude = sLat
                '                .Coordinate.Altitude = sAlt
                '                If bImportCreateCaveForWaypoint Then
                '                    .Entrance = cTrigPoint.EntranceTypeEnum.MainCaveEntrace
                '                Else
                '                    .Entrance = cTrigPoint.EntranceTypeEnum.OutSide
                '                End If
                '                Call .Save()
                '                oStationUTM = modUTM.WGS84ToUTM(.Coordinate)
                '            End With

                '            If sPrevStationName <> "" Then
                '                Dim oSegment As cSegment = oSurvey.Segments.Append()

                '                oSegment.From = sPrevStationName
                '                oSegment.To = sStationName

                '                oSegment.Distance = 1
                '                oSegment.Bearing = 0
                '                oSegment.Inclination = 0

                '                oSegment.Left = 0
                '                oSegment.Right = 0
                '                oSegment.Up = 0
                '                oSegment.Down = 0

                '                oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                '                oSegment.Exclude = True
                '                oSegment.Surface = True

                '                Call oSegment.DataProperties.SetValue("import_source", sFilename)
                '                Call oSegment.DataProperties.SetValue("import_date", dNow)
                '                Call oSegment.DataProperties.SetValue("import_source_type", "trk/link")

                '                Call oSegment.Save()
                '            End If

                '            sPrevStationName = sStationName
                '            oPrevStationUTM = oStationUTM
                '        Next
                '    Next
                'End If

                If bImportWaypoint Then
                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_source.type", Data.cDataFields.TypeEnum.Text)

                    Dim oNodes As XmlNodeList
                    Select Case FilterIndex
                        Case 1
                            oNodes = oXml.GetElementsByTagName("Placemark")
                        Case 2
                            oNodes = oXml.GetElementsByTagName("wpt")
                    End Select

                    For Each oXMLPlaceMark As XmlElement In oNodes
                        Try
                            Dim sCaveName As String
                            Dim sCavePrefix As String
                            Dim sLon As String = ""
                            Dim sLat As String = ""
                            Dim sAlt As String = ""
                            Select Case FilterIndex
                                Case 1
                                    sCaveName = oXMLPlaceMark.Item("name").InnerText
                                    Dim sCoordinate As String = oXMLPlaceMark.Item("Point").Item("coordinates").InnerText
                                    Dim sCoordinateParts() As String = sCoordinate.Split(",")
                                    sLon = sCoordinateParts(0)
                                    sLat = sCoordinateParts(1)
                                    sAlt = sCoordinateParts(2)
                                Case 2
                                    sCaveName = oXMLPlaceMark.Item("name").InnerText
                                    sLon = oXMLPlaceMark.GetAttribute("lon")
                                    sLat = oXMLPlaceMark.GetAttribute("lat")
                                    sAlt = oXMLPlaceMark.Item("ele").InnerText
                            End Select
                            sCavePrefix = modExport.GetStationPrexifFromText(sCaveName)

                            If bImportCreateCaveForWaypoint Then
                                If oSurvey.Properties.CaveInfos.Contains(sCaveName) Then
                                    oCurrentCave = oSurvey.Properties.CaveInfos(sCaveName)
                                Else
                                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)
                                End If
                            End If

                            Dim oSegment As cSegment
                            If bImportCreateCaveForWaypoint Then
                                sStationName = modExport.GetNewStationName(oSurvey.TrigPoints, sCavePrefix)
                            Else
                                sStationName = modExport.FormatTextFor(sCaveName, FormatTextForEnum.BaseWithoutSpaces).ToUpper
                            End If

                            If Not oSurvey.TrigPoints.Contains(sStationName) Then
                                If bImportCreateStationLink Then
                                    If sPrevStationName = "" Then sPrevStationName = sStationName

                                    oSegment = oSurvey.Segments.Append()

                                    oSegment.From = sPrevStationName
                                    oSegment.To = sStationName

                                    oSegment.Distance = 0
                                    oSegment.Bearing = 0
                                    oSegment.Inclination = 0

                                    oSegment.Left = 0
                                    oSegment.Right = 0
                                    oSegment.Up = 0
                                    oSegment.Down = 0

                                    oSegment.Note = sCaveName

                                    oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                    oSegment.Exclude = True
                                    oSegment.Surface = True
                                    oSegment.Virtual = True

                                    Call oSegment.DataProperties.SetValue("import_source", sFilename)
                                    Call oSegment.DataProperties.SetValue("import_date", dNow)
                                    Call oSegment.DataProperties.SetValue("import_source_type", "trk/link")

                                    Call oSegment.Save()
                                End If

                                oSegment = oSurvey.Segments.Append()
                                If bImportCreateCaveForWaypoint Then Call oSegment.SetCave(sCaveName)

                                oSegment.From = sStationName
                                oSegment.To = sStationName

                                oSegment.Distance = 0
                                oSegment.Bearing = 0
                                oSegment.Inclination = 0

                                oSegment.Left = 0
                                oSegment.Right = 0
                                oSegment.Up = 0
                                oSegment.Down = 0

                                oSegment.Note = sCaveName

                                oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                oSegment.Exclude = False
                                oSegment.Surface = False
                                oSegment.Virtual = False

                                Call oSegment.DataProperties.SetValue("import_source", sFilename)
                                Call oSegment.DataProperties.SetValue("import_date", dNow)
                                Call oSegment.DataProperties.SetValue("import_source_type", "trk/placemark")

                                Call oSegment.Save()

                                If iImportWaypointMode = 1 Then
                                    oSegment = oSurvey.Segments.Append()
                                    If bImportCreateCaveForWaypoint Then Call oSegment.SetCave(sCaveName)

                                    oSegment.From = sStationName
                                    oSegment.To = sStationName & "_MARKER"

                                    oSegment.Distance = 10
                                    oSegment.Bearing = 0
                                    oSegment.Inclination = 90

                                    oSegment.Left = 0
                                    oSegment.Right = 0
                                    oSegment.Up = 0
                                    oSegment.Down = 0

                                    oSegment.Note = sCaveName

                                    oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                    oSegment.Exclude = True
                                    oSegment.Surface = False
                                    oSegment.Virtual = False

                                    Call oSegment.DataProperties.SetValue("import_source", sFilename)
                                    Call oSegment.DataProperties.SetValue("import_date", dNow)
                                    Call oSegment.DataProperties.SetValue("import_source_type", "trk/marker")

                                    Call oSegment.Save()
                                End If

                                Call oSurvey.TrigPoints.Rebind()

                                With oSurvey.TrigPoints(sStationName)
                                    .Aliases.Add(sCaveName)
                                    .Coordinate.Format = "dd.ddddddd n"
                                    .Coordinate.Longitude = sLon
                                    .Coordinate.Latitude = sLat
                                    .Coordinate.Altitude = sAlt

                                    If bImportCreateCaveForWaypoint Then
                                        .Entrance = cTrigPoint.EntranceTypeEnum.MainCaveEntrace
                                    Else
                                        .Entrance = cTrigPoint.EntranceTypeEnum.OutSide
                                    End If
                                End With
                                sPrevStationName = sStationName
                            End If
                        Catch
                        End Try
                    Next
                End If

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                'Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend9"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportXLSXMNemo(Filename As String, Append As Boolean)
        'FILE EXCEL from MNemo
        Dim dNow As Date = Date.Now

        Using frmIX As frmImportExcelMNemo = New frmImportExcelMNemo(oSurvey)
            frmIX.txtFilename.Text = Filename

            If frmIX.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim oSession As cSession = frmIX.cboSession.EditValue
                If oSession Is Nothing OrElse oSession.ID = "" Then
                    Dim dToday As Date = Today
                    oSession = oSurvey.Properties.Sessions.Add(dToday, oSurvey.Properties.Sessions.GetUniqueID(dToday, GetLocalizedString("main.textpart13")))
                    oSession.DataFormat = cSegment.DataFormatEnum.Diving
                    oSession.DepthType = cSegment.DepthTypeEnum.AbsoluteAtEnd
                    oSession.InclinationDirection = cSegment.MeasureDirectionEnum.Inverted
                End If
                Dim bFirstLine As Boolean = True
                Dim sForcedCaveName As String = frmIX.txtCaveName.Text
                Dim sPrefix As String = frmIX.txtPrefix.Text.Trim.ToUpper
                Dim iBearingType As Integer = frmIX.cboBearingPolicy.SelectedIndex
                Dim iDepthType As Integer = frmIX.cboDepthPolicy.SelectedIndex

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing

                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin13"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                    Call oSurvey.Properties.DataTables.Segments.Add("headingIn", Data.cDataFields.TypeEnum.Decimal, "mnemo")
                    Call oSurvey.Properties.DataTables.Segments.Add("headingOut", Data.cDataFields.TypeEnum.Decimal, "mnemo")
                    Call oSurvey.Properties.DataTables.Segments.Add("pitchIn", Data.cDataFields.TypeEnum.Decimal, "mnemo")
                    Call oSurvey.Properties.DataTables.Segments.Add("pitchOut", Data.cDataFields.TypeEnum.Decimal, "mnemo")
                    Call oSurvey.Properties.DataTables.Segments.Add("depthIn", Data.cDataFields.TypeEnum.Decimal, "mnemo")
                    Call oSurvey.Properties.DataTables.Segments.Add("depthOut", Data.cDataFields.TypeEnum.Decimal, "mnemo")

                    Call oSurvey.Properties.DataTables.Segments.Add("row", Data.cDataFields.TypeEnum.Integer, "mnemo")

                    Using oXLS As OfficeOpenXml.ExcelPackage = New OfficeOpenXml.ExcelPackage(New FileInfo(Filename))
                        Using oXLSSheet As OfficeOpenXml.ExcelWorksheet = oXLS.Workbook.Worksheets.First
                            Dim iFirstRow As Integer = 7
                            Dim iLastRow As Integer = oXLSSheet.Dimension.End.Row
                            Dim iRows As Integer = iLastRow - iFirstRow

                            If oXLSSheet.Cells(3, 2).Value Like "Unit: *" Then
                                Dim sUnit As String = oXLSSheet.Cells(3, 2).Value.ToString.Replace("Unit: ", "").Trim
                                If sUnit.ToLower = "imperial" Then
                                    oSession.DistanceType = cSegment.DistanceTypeEnum.Feet
                                Else
                                    oSession.DistanceType = cSegment.DistanceTypeEnum.Meters
                                End If
                            End If

                            If oXLSSheet.Cells(4, 1).Value Like "Date: *" Then
                                Dim sDate As String = oXLSSheet.Cells(4, 1).Value.ToString.Replace("Date: ", "").Trim
                                Dim dDate As Date = New Date(sDate.Substring(0, 4), sDate.Substring(5, 2), sDate.Substring(8, 2))
                                Call oSurvey.Properties.Sessions.Rename(oSession, dDate, Nothing)
                            End If

                            Dim iFirstColumn As Integer = oXLSSheet.Dimension.Start.Column
                            Dim iLastColumn As Integer = oXLSSheet.Dimension.End.Column

                            Dim iFrom As Integer
                            Dim iTo As Integer

                            For r As Integer = iFirstRow To iLastRow
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, r / iRows, GetLocalizedString("main.progress13"))

                                If oXLSSheet.IsEmptyRow(r) Then
                                    Exit For
                                Else
                                    If ("" & oXLSSheet.Cells(r, 1).Value).ToUpper = "EOC" Then
                                        Exit For
                                    Else
                                        Dim sFrom As String
                                        Dim sTo As String
                                        Dim dDist As Decimal
                                        Dim dDir As Decimal
                                        Dim dDirIn As Decimal
                                        Dim dDirOut As Decimal
                                        Dim dDepth As Decimal
                                        Dim dDepthIn As Decimal
                                        Dim dDepthOut As Decimal

                                        dDist = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 2).Value)
                                        dDirIn = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 3).Value)
                                        dDirOut = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 4).Value)
                                        Select Case iBearingType
                                            Case 0
                                                dDir = (dDirIn + dDirOut) / 2.0
                                            Case 1
                                                dDir = dDirOut
                                            Case 2
                                                dDir = dDirIn
                                        End Select

                                        dDepthIn = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 7).Value)
                                        dDepthOut = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 8).Value)

                                        If iDepthType = 0 Then
                                            'read the next line...if STD take depthin...
                                            If ("" & oXLSSheet.Cells(r + 1, 1).Value).ToUpper = "STD" Then
                                                Dim dNextDepthIn As Decimal = modNumbers.StringToDecimal(oXLSSheet.Cells(r + 1, 7).Value)
                                                dDepth = modNumbers.MathRound((dNextDepthIn + dDepthOut) / 2.0, 2)
                                            Else
                                                dDepth = dDepthOut
                                            End If
                                        Else
                                            dDepth = dDepthOut
                                        End If

                                        If dDist = 0 Then Continue For

                                        'autocode stations...
                                        iFrom = iTo
                                        iTo = iFrom + 1

                                        sFrom = iFrom.ToString
                                        sTo = iTo.ToString

                                        If sPrefix.Length > 0 AndAlso sFrom.Length > 0 Then sFrom = sPrefix + sFrom
                                        If sPrefix.Length > 0 AndAlso sTo.Length > 0 Then sTo = sPrefix + sTo

                                        If bFirstLine Then
                                            Dim oFirstSegment As cSegment = oSurvey.Segments.Append()
                                            Call oFirstSegment.SetCave(sCaveName)
                                            Call oFirstSegment.SetSession(oSession)

                                            oFirstSegment.From = sFrom
                                            oFirstSegment.To = sFrom

                                            oFirstSegment.Distance = 0
                                            oFirstSegment.Bearing = 0
                                            oFirstSegment.Inclination = dDepthIn

                                            oFirstSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                            oFirstSegment.Exclude = False

                                            Call oFirstSegment.DataProperties.SetValue("import_source", "mnemo")
                                            Call oFirstSegment.DataProperties.SetValue("import_date", dNow)

                                            Call oFirstSegment.DataProperties.SetValue("headingIn", dDirIn)
                                            Call oFirstSegment.DataProperties.SetValue("headingOut", dDirOut)
                                            Call oFirstSegment.DataProperties.SetValue("pitchIn", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 5).Value))
                                            Call oFirstSegment.DataProperties.SetValue("pitchOut", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 6).Value))
                                            Call oFirstSegment.DataProperties.SetValue("depthIn", dDepthIn)
                                            Call oFirstSegment.DataProperties.SetValue("depthOut", dDepthOut)

                                            Call oFirstSegment.DataProperties.SetValue("row", r)

                                            Call oFirstSegment.Save()

                                            bFirstLine = False
                                        End If

                                        Dim oSegment As cSegment = oSurvey.Segments.Append()
                                        Call oSegment.SetCave(sCaveName)
                                        Call oSegment.SetSession(oSession)

                                        oSegment.From = sFrom
                                        oSegment.To = sTo

                                        oSegment.Distance = dDist
                                        oSegment.Bearing = dDir
                                        oSegment.Inclination = dDepth

                                        oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                        oSegment.Exclude = False

                                        Call oSegment.DataProperties.SetValue("import_source", "mnemo")
                                        Call oSegment.DataProperties.SetValue("import_date", dNow)

                                        Call oSegment.DataProperties.SetValue("headingIn", dDirIn)
                                        Call oSegment.DataProperties.SetValue("headingOut", dDirOut)
                                        Call oSegment.DataProperties.SetValue("pitchIn", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 5).Value))
                                        Call oSegment.DataProperties.SetValue("pitchOut", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 6).Value))
                                        Call oSegment.DataProperties.SetValue("depthIn", dDepthIn)
                                        Call oSegment.DataProperties.SetValue("depthOut", dDepthOut)

                                        Call oSegment.DataProperties.SetValue("row", r)

                                        Call oSegment.Save()
                                    End If
                                End If
                            Next
                        End Using
                    End Using
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend13"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportXLSXEron(Filename As String, Append As Boolean)
        'FILE EXCEL from Eron
        Dim dNow As Date = Date.Now

        Using frmIX As frmImportExcelEron = New frmImportExcelEron(oSurvey)
            frmIX.txtFilename.Text = Filename

            If frmIX.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim oSession As cSession = frmIX.cboSession.EditValue
                If oSession Is Nothing OrElse oSession.ID = "" Then
                    Dim dToday As Date = Today
                    oSession = oSurvey.Properties.Sessions.Add(dToday, oSurvey.Properties.Sessions.GetUniqueID(dToday, GetLocalizedString("main.textpart13")))
                    oSession.DataFormat = cSegment.DataFormatEnum.Diving
                    oSession.DepthType = cSegment.DepthTypeEnum.AbsoluteAtEnd
                    oSession.InclinationDirection = cSegment.MeasureDirectionEnum.Inverted
                End If
                Dim bCleanNoDistanceData As Boolean = frmIX.chkCleanNoDistanceData.Checked
                Dim bFirstLine As Boolean = True
                Dim sForcedCaveName As String = frmIX.txtCaveName.Text
                Dim sPrefix As String = frmIX.txtPrefix.Text.Trim.ToUpper

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing

                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin13"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                    Call oSurvey.Properties.DataTables.Segments.Add("temperature", Data.cDataFields.TypeEnum.Decimal, "eron")
                    Call oSurvey.Properties.DataTables.Segments.Add("battery", Data.cDataFields.TypeEnum.Decimal, "eron")
                    Call oSurvey.Properties.DataTables.Segments.Add("pitch", Data.cDataFields.TypeEnum.Decimal, "eron")
                    Call oSurvey.Properties.DataTables.Segments.Add("roll", Data.cDataFields.TypeEnum.Decimal, "eron")
                    Call oSurvey.Properties.DataTables.Segments.Add("speed", Data.cDataFields.TypeEnum.Decimal, "eron")
                    Call oSurvey.Properties.DataTables.Segments.Add("date", Data.cDataFields.TypeEnum.Date, "eron")
                    Call oSurvey.Properties.DataTables.Segments.Add("row", Data.cDataFields.TypeEnum.Integer, "eron")

                    Using oXLS As OfficeOpenXml.ExcelPackage = New OfficeOpenXml.ExcelPackage(New FileInfo(Filename))
                        Using oXLSSheet As OfficeOpenXml.ExcelWorksheet = oXLS.Workbook.Worksheets.First
                            Dim iFirstRow As Integer = oXLSSheet.Dimension.Start.Row + 1
                            Dim iLastRow As Integer = oXLSSheet.Dimension.End.Row
                            Dim iRows As Integer = iLastRow - iFirstRow

                            Dim iFirstColumn As Integer = oXLSSheet.Dimension.Start.Column
                            Dim iLastColumn As Integer = oXLSSheet.Dimension.End.Column

                            Dim iFrom As Integer
                            Dim iTo As Integer
                            Dim dLastDist As Decimal
                            Dim dProgressiveDist As Decimal

                            For r As Integer = iFirstRow To iLastRow
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, r / iRows, GetLocalizedString("main.progress13"))

                                If oXLSSheet.IsEmptyRow(r) Then
                                    Exit For
                                Else
                                    Dim sFrom As String
                                    Dim sTo As String
                                    Dim dDist As Decimal
                                    Dim dDir As Decimal
                                    Dim dDepth As Decimal

                                    dDist = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 10).Value)
                                    dDir = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 7).Value)
                                    dDepth = modNumbers.StringToDecimal(oXLSSheet.Cells(r, 4).Value)

                                    dProgressiveDist = dDist
                                    dDist -= dLastDist
                                    dLastDist = dProgressiveDist

                                    If bCleanNoDistanceData AndAlso dDist = 0 Then Continue For

                                    'autocode stations...
                                    iFrom = iTo
                                    iTo = iFrom + 1

                                    sFrom = iFrom.ToString
                                    sTo = iTo.ToString

                                    If sPrefix.Length > 0 AndAlso sFrom.Length > 0 Then sFrom = sPrefix + sFrom
                                    If sPrefix.Length > 0 AndAlso sTo.Length > 0 Then sTo = sPrefix + sTo

                                    If bFirstLine Then
                                        Dim oFirstSegment As cSegment = oSurvey.Segments.Append()
                                        Call oFirstSegment.SetCave(sCaveName)
                                        Call oFirstSegment.SetSession(oSession)

                                        oFirstSegment.From = sFrom
                                        oFirstSegment.To = sFrom

                                        oFirstSegment.Distance = 0
                                        oFirstSegment.Bearing = 0
                                        oFirstSegment.Inclination = dDepth

                                        oFirstSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                        oFirstSegment.Exclude = False

                                        Call oFirstSegment.DataProperties.SetValue("import_source", "eron")
                                        Call oFirstSegment.DataProperties.SetValue("import_date", dNow)

                                        Call oFirstSegment.DataProperties.SetValue("temperature", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 5).Value))
                                        Call oFirstSegment.DataProperties.SetValue("battery", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 6).Value))
                                        Call oFirstSegment.DataProperties.SetValue("pitch", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 8).Value))
                                        Call oFirstSegment.DataProperties.SetValue("roll", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 9).Value))
                                        Call oFirstSegment.DataProperties.SetValue("speed", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 11).Value))

                                        Call oFirstSegment.DataProperties.SetValue("row", r)

                                        Call oFirstSegment.Save()

                                        bFirstLine = False
                                    End If

                                    Dim oSegment As cSegment = oSurvey.Segments.Append()
                                    Call oSegment.SetCave(sCaveName)
                                    Call oSegment.SetSession(oSession)

                                    oSegment.From = sFrom
                                    oSegment.To = sTo

                                    oSegment.Distance = dDist
                                    oSegment.Bearing = dDir
                                    oSegment.Inclination = dDepth

                                    oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                    oSegment.Exclude = False

                                    Call oSegment.DataProperties.SetValue("import_source", "eron")
                                    Call oSegment.DataProperties.SetValue("import_date", dNow)

                                    Call oSegment.DataProperties.SetValue("temperature", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 5).Value))
                                    Call oSegment.DataProperties.SetValue("battery", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 6).Value))
                                    Call oSegment.DataProperties.SetValue("pitch", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 8).Value))
                                    Call oSegment.DataProperties.SetValue("roll", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 9).Value))
                                    Call oSegment.DataProperties.SetValue("speed", modNumbers.StringToDecimal(oXLSSheet.Cells(r, 11).Value))

                                    Call oSegment.DataProperties.SetValue("row", r)

                                    Call oSegment.Save()
                                End If
                            Next
                        End Using
                    End Using
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend13"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportXLSX(Filename As String, Append As Boolean)
        'FILE EXCEL
        Dim dNow As Date = Date.Now

        Using frmIX As frmImportExcel = New frmImportExcel(oSurvey)
            frmIX.txtFilename.Text = Filename

            If frmIX.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim oSession As cSession = frmIX.cboSession.EditValue
                If oSession Is Nothing OrElse oSession.ID = "" Then
                    Dim dToday As Date = Today
                    oSession = oSurvey.Properties.Sessions.Add(dToday, oSurvey.Properties.Sessions.GetUniqueID(dToday, GetLocalizedString("main.textpart13")))
                End If
                Dim bSkipFirstLine As Boolean = frmIX.chkFirstline.Checked
                Dim oFields As UIHelpers.Import.cDestFields = frmIX.GetFields
                Dim sForcedCaveName As String = frmIX.txtCaveName.Text
                Dim sPrefix As String = frmIX.txtPrefix.Text.Trim.ToUpper
                Dim bAutoSplay As Boolean = frmIX.chkAutoSplay.Checked
                Dim bSplaySymbol As Boolean = frmIX.chkSplaySymbol.Checked
                Dim sSplaySymbol = frmIX.txtSplayMarker.Text
                Dim bCutSplaySymbol As Boolean = frmIX.chkCutSplaySymbol.Checked
                Dim sCutSplaySymbol = frmIX.txtCutSplayMarker.Text
                Dim bZeroSymbol As Boolean = frmIX.chkZeroPlaceholders.Checked
                Dim sZeroSymbol = frmIX.txtZeroPlaceholders.Text
                Dim bCommentSymbols As Boolean = frmIX.chkCommentSymbols.Checked
                Dim sCommentSymbols = frmIX.txtCommentSymbols.Text
                Dim bProgressiveDistance As Boolean = frmIX.chkProgressiveDistance.Checked

                If bSplaySymbol Then bAutoSplay = True

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing

                'backup delle impostazioni splay e impostazione su splay automatici...
                Dim iSplay As cSurvey.cSurvey.SplayModeEnum = oSurvey.Properties.SplayMode
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = cSurvey.cSurvey.SplayModeEnum.Automatic
                End If
                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin13"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                    Using oXLS As OfficeOpenXml.ExcelPackage = New OfficeOpenXml.ExcelPackage(New FileInfo(Filename))
                        Using oXLSSheet As OfficeOpenXml.ExcelWorksheet = oXLS.Workbook.Worksheets.First
                            Dim iFirstRow As Integer = oXLSSheet.Dimension.Start.Row
                            Dim iLastRow As Integer = oXLSSheet.Dimension.End.Row
                            Dim iRows As Integer = iLastRow - iFirstRow

                            Dim iFirstColumn As Integer = oXLSSheet.Dimension.Start.Column
                            Dim iLastColumn As Integer = oXLSSheet.Dimension.End.Column

                            Dim iFrom As Integer
                            Dim iTo As Integer
                            Dim dLastDist As Decimal

                            For r As Integer = iFirstRow To iLastRow
                                If bSkipFirstLine Then
                                    bSkipFirstLine = False
                                Else
                                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, r / iRows, GetLocalizedString("main.progress13"))

                                    If oXLSSheet.IsEmptyRow(r) Then
                                        Exit For
                                    Else
                                        If bCommentSymbols Then
                                            If oXLSSheet.Cells(r, iFirstColumn).Value = sCommentSymbols Then
                                                Continue For
                                            End If
                                        End If

                                        Dim sFrom As String
                                        Dim sTo As String
                                        Dim dDist As Decimal
                                        Dim dDir As Decimal
                                        Dim dIncl As Decimal
                                        Dim dLeft As Decimal
                                        Dim dRight As Decimal
                                        Dim dUp As Decimal
                                        Dim dDown As Decimal
                                        Dim sNote As String

                                        sFrom = oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.From, oXLSSheet, r, "").ToString
                                        sTo = oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.To, oXLSSheet, r, "").ToString

                                        If bSplaySymbol And sTo = sSplaySymbol Then sTo = ""
                                        Dim bCutSplay = False
                                        If bCutSplaySymbol And sTo = sCutSplaySymbol Then
                                            sTo = ""
                                            bCutSplay = True
                                        End If

                                        If bZeroSymbol Then
                                            For c As Integer = iFirstColumn To iLastColumn
                                                If oXLSSheet.Cells(r, c).Value.ToString = sZeroSymbol Then
                                                    oXLSSheet.Cells(r, c).Value = 0
                                                End If
                                            Next
                                        End If

                                        If sFrom = "" AndAlso sTo = "" Then
                                            'autocode stations...
                                            iFrom = iTo
                                            iTo = iFrom + 1

                                            sFrom = iFrom.ToString
                                            sTo = iTo.ToString
                                        End If

                                        If sPrefix.Length > 0 AndAlso sFrom.Length > 0 Then sFrom = sPrefix + sFrom
                                        If sPrefix.Length > 0 AndAlso sTo.Length > 0 Then sTo = sPrefix + sTo

                                        dDist = modNumbers.ToDecimal(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Distance, oXLSSheet, r, 0))
                                        If bProgressiveDistance Then
                                            Dim dProgressiveDist As Decimal = dDist
                                            dDist -= dLastDist
                                            dLastDist = dProgressiveDist
                                        End If
                                        dDir = modNumbers.ToDecimal(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Direction, oXLSSheet, r, 0))
                                        dIncl = modNumbers.ToDecimal(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Inclination, oXLSSheet, r, 0))

                                        'If sTo.Length > 0 Then
                                        dLeft = modNumbers.ToDecimal(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Left, oXLSSheet, r, 0))
                                        dRight = modNumbers.ToDecimal(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Right, oXLSSheet, r, 0))
                                        dUp = modNumbers.ToDecimal(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Up, oXLSSheet, r, 0))
                                        dDown = modNumbers.ToDecimal(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Down, oXLSSheet, r, 0))
                                        sNote = oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Note, oXLSSheet, r, "").ToString
                                        'End If

                                        Dim oSegment As cSegment = oSurvey.Segments.Append()
                                        Call oSegment.SetCave(sCaveName)
                                        Call oSegment.SetSession(oSession)

                                        oSegment.From = sFrom
                                        oSegment.To = sTo

                                        oSegment.Distance = dDist
                                        oSegment.Bearing = dDir
                                        oSegment.Inclination = dIncl

                                        oSegment.Left = dLeft
                                        oSegment.Right = dRight
                                        oSegment.Up = dUp
                                        oSegment.Down = dDown

                                        oSegment.Note = sNote

                                        oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                        oSegment.Exclude = False
                                        oSegment.Cut = bCutSplay


                                        Call oSegment.DataProperties.SetValue("import_source", "excel")
                                        Call oSegment.DataProperties.SetValue("import_date", dNow)

                                        Call oSegment.Save()
                                    End If
                                End If
                            Next
                        End Using
                    End Using
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = iSplay
                End If

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend13"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportTherion(Filename As String, Append As Boolean)
        Using frmIT As frmImportTherion = New frmImportTherion(oSurvey)
            frmIT.txtFilename.Text = Filename

            If frmIT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim sPrefix As String = frmIT.txtPrefix.EditValue
                Dim oCave As cCaveInfo = frmIT.cboImportAsBranchOfCave.EditValue
                Dim oBranch As cCaveInfoBranch = frmIT.cboImportAsBranchOfBranch.EditValue
                Dim bImportAsNewCave As Boolean = frmIT.chkcSurveyImportCreateNewBranch.EditValue
                Dim bImportLineOfComment As Boolean = frmIT.chkLineOfComment.EditValue

                Dim oOptions As cTherion.cTherionImportOptions = New cTherion.cTherionImportOptions(sPrefix, oCave, oBranch, bImportAsNewCave, bImportLineOfComment)

                Call cTherion.Import(oSurvey, Filename, oOptions)

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend9"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportText(Filename As String, Append As Boolean)
        'FILE DI TESTO GENERICO
        Dim dNow As Date = Date.Now

        Using frmIGD As frmImportGenericData = New frmImportGenericData(oSurvey)
            frmIGD.txtFilename.Text = Filename

            If frmIGD.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim bSkipFirstLine As Boolean = frmIGD.chkFirstline.Checked
                Dim oFields As UIHelpers.Import.cDestFields = frmIGD.GetFields
                Dim sSeparator() As String = frmIGD.GetSeparator
                Dim bRemoveEmptyEntries As Boolean
                If sSeparator(0) = " " Then
                    bRemoveEmptyEntries = True
                End If
                Dim sForcedCaveName As String = frmIGD.txtCaveName.Text
                Dim sPrefix As String = frmIGD.txtPrefix.Text.Trim.ToUpper
                Dim bAutoSplay As Boolean = frmIGD.chkAutoSplay.Checked
                Dim bSplaySymbol As Boolean = frmIGD.chkSplaySymbol.Checked
                Dim sSplaySymbol = frmIGD.txtSplayMarker.Text
                Dim bCutSplaySymbol As Boolean = frmIGD.chkCutSplaySymbol.Checked
                Dim sCutSplaySymbol = frmIGD.txtCutSplayMarker.Text
                Dim bZeroSymbol As Boolean = frmIGD.chkZeroPlaceholders.Checked
                Dim sZeroSymbol = frmIGD.txtZeroPlaceholders.Text
                Dim bCommentSymbols As Boolean = frmIGD.chkCommentSymbols.Checked
                Dim sCommentSymbols = frmIGD.txtCommentSymbols.Text

                If bSplaySymbol Then bAutoSplay = True

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing

                Dim sLine As String
                Dim sLineParts() As String

                'backup delle impostazioni splay e impostazione su splay automatici...
                Dim iSplay As cSurvey.cSurvey.SplayModeEnum = oSurvey.Properties.SplayMode
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = cSurvey.cSurvey.SplayModeEnum.Automatic
                End If
                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin9"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                    Dim fi As FileInfo = New FileInfo(Filename)
                    Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                        If Not sr.EndOfStream Then
                            If bSkipFirstLine Then
                                Call sr.ReadLine()
                            End If
                            Do Until sr.EndOfStream
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress9"))

                                sLine = sr.ReadLine

                                If bCommentSymbols Then
                                    For Each ch In sCommentSymbols
                                        Dim chPos = sLine.IndexOf(ch)
                                        If chPos >= 0 Then sLine = sLine.Remove(chPos, sLine.Length - chPos)
                                    Next
                                End If

                                If sLine.Length = 0 Then Continue Do

                                If bRemoveEmptyEntries Then
                                    sLineParts = sLine.Split(sSeparator, StringSplitOptions.RemoveEmptyEntries)
                                Else
                                    sLineParts = sLine.Split(sSeparator, StringSplitOptions.None)
                                End If

                                Dim sFrom As String
                                Dim sTo As String
                                Dim dDist As Decimal
                                Dim dDir As Decimal
                                Dim dIncl As Decimal
                                Dim dLeft As Decimal
                                Dim dRight As Decimal
                                Dim dUp As Decimal
                                Dim dDown As Decimal
                                Dim sNote As String

                                sFrom = modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.From, sLineParts, ""))
                                sTo = modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.To, sLineParts, ""))

                                If bSplaySymbol And sTo = sSplaySymbol Then sTo = ""
                                Dim cutSplay = False
                                If bCutSplaySymbol And sTo = sCutSplaySymbol Then
                                    sTo = ""
                                    cutSplay = True
                                End If

                                If bZeroSymbol Then
                                    For Each field In sLineParts
                                        If field.Length = 1 And sZeroSymbol.Contains(field) Then
                                            field = "0"
                                        End If
                                    Next
                                End If

                                If sPrefix.Length > 0 AndAlso sFrom.Length > 0 Then sFrom = sPrefix + sFrom
                                If sPrefix.Length > 0 AndAlso sTo.Length > 0 Then sTo = sPrefix + sTo

                                dDist = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Distance, sLineParts, 0)))
                                dDir = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Direction, sLineParts, 0)))
                                dIncl = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Inclination, sLineParts, 0)))

                                If sTo.Length > 0 Then
                                    dLeft = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Left, sLineParts, 0)))
                                    dRight = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Right, sLineParts, 0)))
                                    dUp = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Up, sLineParts, 0)))
                                    dDown = modNumbers.StringToDecimal(modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Down, sLineParts, 0)))
                                    sNote = modNumbers.FieldUnformat(oFields.GetValue(UIHelpers.Import.cSourceField.TextFieldIndexEnum.Note, sLineParts, ""))
                                End If

                                Dim oSegment As cSegment = oSurvey.Segments.Append()
                                Call oSegment.SetCave(sCaveName)
                                oSegment.From = sFrom
                                oSegment.To = sTo

                                oSegment.Distance = dDist
                                oSegment.Bearing = dDir
                                oSegment.Inclination = dIncl

                                oSegment.Left = dLeft
                                oSegment.Right = dRight
                                oSegment.Up = dUp
                                oSegment.Down = dDown

                                oSegment.Note = sNote

                                oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                oSegment.Exclude = False
                                oSegment.Cut = cutSplay


                                Call oSegment.DataProperties.SetValue("import_source", "text")
                                Call oSegment.DataProperties.SetValue("import_date", dNow)

                                Call oSegment.Save()
                            Loop
                        End If
                    End Using
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                If bAutoSplay Then
                    oSurvey.Properties.SplayMode = iSplay
                End If

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend9"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportVisualTopo(Filename As String, Append As Boolean)
        'VISUALTOPO
        Dim dNow As Date = Date.Now

        Dim bImportIncompatibleSet As Boolean = My.Application.Settings.GetSetting("vtopo.importincompatibleset", 0)
        Dim bImportSetAsBranch As Boolean = My.Application.Settings.GetSetting("vtopo.importsetasbranch", 1)

        Using frmIVT As frmImportVisualTopo = New frmImportVisualTopo
            frmIVT.txtFilename.Text = Filename
            frmIVT.chkVTopoImportIncompatibleSet.Checked = bImportIncompatibleSet
            frmIVT.chkVTopoImportSetAsBranch.Checked = bImportSetAsBranch

            If frmIVT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bImportIncompatibleSet = frmIVT.chkVTopoImportIncompatibleSet.Checked
                bImportSetAsBranch = frmIVT.chkVTopoImportSetAsBranch.Checked
                Dim sForcedCaveName As String = frmIVT.txtCaveName.Text
                Dim sPrefix As String = frmIVT.txtPrefix.Text.Trim.ToUpper

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True
                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim oStandardColor As Color = Color.Transparent
                Dim oColor As Color = oStandardColor
                Dim oLastColor As Color = Color.Transparent

                Dim fi As FileInfo = New FileInfo(Filename)

                Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                    Dim sVersion As String = sr.ReadLine
                    Dim bVersionOk As Boolean = False
                    If sVersion Like "Version *" Then
                        Dim sVersionNumber As Single = modNumbers.StringToDecimal(sVersion.Substring(8).Trim)
                        If sVersionNumber < 4.9 Then
                            Call UIHelpers.Dialogs.Msgbox(String.Format(GetLocalizedString("main.warning1"), sVersion), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                            bVersionOk = False
                        Else
                            bVersionOk = True
                        End If
                    Else
                        Call UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning2"), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                        bVersionOk = False
                    End If

                    If bVersionOk Then
                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin1"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                        Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                        Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                        Dim sLine As String

                        Dim sCaveName As String
                        Dim sCaveBranchName As String
                        Dim oCurrentCave As cCaveInfo = Nothing
                        Dim oCurrentCaveBranch As cCaveInfoBranch = Nothing
                        Dim sOrigin As String = ""
                        Do
                            sLine = sr.ReadLine()
                            If sLine Like "Trou *" And sForcedCaveName = "" Then
                                Dim sLineParts() As String = sLine.Substring(5).Split(",")
                                sCaveName = sLineParts(0)
                                If Not Append Then
                                    oSurvey.Properties.Name = sCaveName
                                End If
                                oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)
                            End If

                            If sLine Like "Club *" Then
                                Dim sLineParts() As String = sLine.Substring(5).Split(",")
                                If Not Append Then
                                    oSurvey.Properties.Club = sLineParts(0)
                                End If
                            End If

                            If sLine Like "Entree *" Then
                                sOrigin = sLine.Substring(7).Trim
                            End If

                            If sLine Like "Couleur *" Then
                                Try
                                    Dim sColorParts() As String = sLine.Substring(8).Split(",")
                                    oStandardColor = Color.FromArgb(255, sColorParts(0), sColorParts(1), sColorParts(2))
                                Catch
                                End Try
                            End If
                        Loop Until sLine Like "Param *"

                        Dim bMeasureSetOk As Boolean = True
                        Dim iRow As Integer
                        Dim iSet As Integer
                        Dim iSessionCount As Integer
                        Dim oSession As cSession
                        Dim iCaveCount As Integer
                        Dim dDirInverted As Decimal = 0
                        Dim dInclInverted As Decimal = 1
                        Dim iDirection As cSurvey.cSurvey.DirectionEnum = cSurvey.cSurvey.DirectionEnum.Right

                        Do Until sr.EndOfStream
                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress1"))
                            sLine = sr.ReadLine
                            If sLine.StartsWith("[Configuration") Or sLine.StartsWith("[Setup") Then
                                Do Until sr.EndOfStream
                                    sLine = sr.ReadLine()
                                    If sLine Like "Calcul=*" Then
                                        sLine = sr.ReadLine()
                                        If sLine Like "Options=*" Then
                                            Dim sLineParts() As String = sLine.Substring(8).Split(",")
                                            Dim iOption As Integer = sLineParts(0)
                                            If (iOption And 2) = 2 Then
                                                oSurvey.Properties.SideMeasuresType = cSegment.SideMeasuresTypeEnum.Bisection
                                                For Each oOtherSession As cSession In oSurvey.Properties.Sessions
                                                    oOtherSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.Bisection
                                                Next
                                            End If
                                            If (iOption And 4) = 4 Then
                                                oSurvey.Properties.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToPrevious
                                                For Each oOtherSession As cSession In oSurvey.Properties.Sessions
                                                    oOtherSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToPrevious
                                                Next
                                            End If
                                        End If
                                    End If
                                Loop
                                Exit Do
                            End If
                            If sLine <> "" Then
                                If sLine Like "Param *" Then
                                    'Try
                                    Dim sLineParts() As String = sLine.Substring(6).Split(" ")
                                    If bImportIncompatibleSet Then
                                        bMeasureSetOk = True
                                    Else
                                        If (sLineParts(0) = "Deca" And sLineParts(1) = "Degd" And sLineParts(2) = "Clino" And sLineParts(3) = "Degd") Then
                                            bMeasureSetOk = True
                                        Else
                                            Call UIHelpers.Dialogs.Msgbox(String.Format(GetLocalizedString("main.warning3"), iRow, sLine), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                                        End If
                                    End If

                                    Dim sInversions() As String = sLineParts(5).Split(",")
                                    If sInversions(0).ToLower = "inv" Then
                                        dDirInverted = -180
                                    Else
                                        dDirInverted = 0
                                    End If
                                    If sInversions(1).ToLower = "inv" Then
                                        dInclInverted = -1
                                    Else
                                        dInclInverted = 1
                                    End If

                                    Dim iStartEnd As cSurvey.cSegment.SideMeasuresReferToEnum
                                    Dim sStartEnd As String = sLineParts(6)
                                    If sStartEnd.ToLower = "dep" Then
                                        'gestisco solo partenza, arrivo e sconosciuto vengono equiparati
                                        iStartEnd = cSegment.SideMeasuresReferToEnum.StartPoint
                                    Else
                                        iStartEnd = cSegment.SideMeasuresReferToEnum.EndPoint
                                    End If

                                    Dim sColor As String = sLineParts(7)
                                    If sColor = "Std" Then
                                        oColor = oStandardColor
                                    Else
                                        Dim sColorParts() As String = sLineParts(7).Split(",")
                                        oColor = Color.FromArgb(255, sColorParts(0), sColorParts(1), sColorParts(2))
                                    End If

                                    iSet += 1

                                    Do
                                        iSessionCount += 1
                                    Loop While oSurvey.Properties.Sessions.Contains(oSurvey.Properties.Sessions.GetID(Today, GetLocalizedString("main.visualtopodefaultsessionprefix") & " " & iSessionCount))
                                    oSession = oSurvey.Properties.Sessions.Add(Today, GetLocalizedString("main.visualtopodefaultsessionprefix") & " " & iSessionCount)
                                    oSession.Declination = sLineParts(4)
                                    oSession.SideMeasuresReferTo = iStartEnd

                                    If bImportSetAsBranch Then
                                        If oCurrentCave Is Nothing Then
                                            If sForcedCaveName = "" Then
                                                sCaveName = Path.GetFileNameWithoutExtension(Filename)
                                            Else
                                                sCaveName = sForcedCaveName
                                            End If
                                            oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)
                                        End If
                                        Do
                                            iCaveCount += 1
                                        Loop While oCurrentCave.Branches.Contains(GetLocalizedString("main.visualtopodefaultcaveprefix") & " " & iCaveCount)
                                        sCaveBranchName = GetLocalizedString("main.visualtopodefaultcaveprefix") & " " & iCaveCount
                                        oCurrentCaveBranch = oCurrentCave.Branches.Add(sCaveBranchName)
                                        oCurrentCaveBranch.Color = oColor
                                    End If
                                    'Catch
                                    'End Try
                                    iRow += 1
                                Else
                                    If bMeasureSetOk Then
                                        'Dim sFrom As String = sLine.Substring(0, 11).Trim.ToUpper
                                        'Dim sTo As String = sLine.Substring(11, 11).Trim.ToUpper
                                        Dim sValues() As String = modExport.VTopoParseLine(sLine)

                                        Dim sFrom As String = sPrefix & sValues(0).ToUpper.Trim
                                        Dim sTo As String = sPrefix & sValues(1).ToUpper.Trim
                                        Dim dDist As Decimal = modText.GetNumber(sValues(2))
                                        Dim dDir As Decimal = modText.GetNumber(sValues(3))
                                        Dim dIncl As Decimal = modText.GetNumber(sValues(4))
                                        If dIncl > 90 Or dIncl < -90 Then
                                            Call UIHelpers.Dialogs.Msgbox(String.Format(GetLocalizedString("main.warning4"), iRow, sLine), MsgBoxStyle.OkOnly Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle"))
                                        End If
                                        dDir = modPaint.NormalizeAngle(dDir + dDirInverted)
                                        dIncl = dIncl * dInclInverted

                                        Dim dLeft As Decimal = If(sValues(5) = "*", 0, modText.GetNumber(sValues(5)))
                                        Dim dRight As Decimal = If(sValues(6) = "*", 0, modText.GetNumber(sValues(6)))
                                        Dim dUp As Decimal = If(sValues(7) = "*", 0, modText.GetNumber(sValues(7)))
                                        Dim dDown As Decimal = If(sValues(8) = "*", 0, modText.GetNumber(sValues(8)))

                                        Dim sInverted As String = sValues(9)
                                        Dim bInverted As Boolean = sInverted.ToUpper = "I"
                                        If bInverted Then
                                            If iDirection = cSurvey.cSurvey.DirectionEnum.Left Then
                                                iDirection = cSurvey.cSurvey.DirectionEnum.Right
                                            Else
                                                iDirection = cSurvey.cSurvey.DirectionEnum.Left
                                            End If
                                        End If

                                        Dim sExclude As String = ""
                                        Try : sExclude = sValues(10) : Catch : End Try
                                        Dim bExclude As Boolean = sExclude.ToUpper = "E"

                                        Dim sNote As String = ""
                                        Try : sNote = sValues(11) : Catch : End Try

                                        Dim oSegment As cSegment = oSurvey.Segments.Append()
                                        Call oSegment.SetCave(sCaveName, sCaveBranchName)
                                        If Not oSession Is Nothing Then Call oSegment.SetSession(oSession)
                                        oSegment.From = sFrom
                                        oSegment.To = sTo
                                        oSegment.Distance = dDist
                                        oSegment.Bearing = dDir
                                        oSegment.Inclination = dIncl
                                        oSegment.Left = dLeft
                                        oSegment.Right = dRight
                                        oSegment.Up = dUp
                                        oSegment.Down = dDown

                                        oSegment.Note = sNote

                                        oSegment.Direction = iDirection
                                        oSegment.Exclude = bExclude

                                        Call oSegment.DataProperties.SetValue("import_source", "visualtopo")
                                        Call oSegment.DataProperties.SetValue("import_date", Strings.Format("ddMMyyyy HHmmss"))

                                        Call oSegment.Save()

                                        'If oEntrance.ContainsKey(sFrom) Then
                                        If sOrigin.ToUpper = sFrom.ToUpper Then
                                            Call oSurvey.TrigPoints.Rebind()
                                            With oSurvey.TrigPoints(sFrom)
                                                .Entrance = cTrigPoint.EntranceTypeEnum.MainCaveEntrace
                                                .ShowEntrance = True
                                            End With
                                            'Call oEntrance.Remove(sFrom)
                                        End If
                                    End If

                                    iRow += 1
                                End If
                            End If
                            'sLine = sr.ReadLine
                        Loop
                        Call sr.Close()

                        Call oSurvey.TrigPoints.Rebind()

                        If oSurvey.Properties.Origin = "" Then
                            oSurvey.Properties.Origin = sOrigin
                        End If
                    End If
                End Using

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend1"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportcSurvey(Filename As String, Append As Boolean)
        'cSurvey
        'bDisablewarpingDetails = True
        Dim dNow As Date = Date.Now

        Using frmIS As frmImportcSurvey = New frmImportcSurvey(oSurvey)
            frmIS.txtFilename.Text = Filename

            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oImportSurvey As cSurvey.cSurvey = New cSurvey.cSurvey
            Call oImportSurvey.Load(Filename, cSurvey.cSurvey.LoadOptionsEnum.FixTopoDroid)
            If Not oImportSurvey.Calculate.LoadedFromFile Then
                Call oImportSurvey.Invalidate()
                Call oImportSurvey.Calculate.Calculate(True)
            End If
            Call oMousePointer.Pop()

            Call frmIS.cboImportAsBranchOfCave.Rebind(oSurvey, True, False)

            Dim bHasData As Boolean = oImportSurvey.Segments.Count > 0 OrElse oImportSurvey.Properties.CaveInfos.Count > 0 OrElse oImportSurvey.Properties.Sessions.Count > 0
            frmIS.chkcSurveyImportData.Enabled = bHasData

            Dim bHasErrors As Boolean

            If oImportSurvey.Properties.CreatorID = "TopoDroid" Then
                Call frmIS.AppendLog(String.Format(modMain.GetLocalizedString("main.textpart155"), "TopoDroid " & oImportSurvey.Properties.CreatorVersion), "source")
            End If
            If oImportSurvey.Properties.CreatorID = "cSurvey" OrElse oImportSurvey.Properties.CreatorID = "" Then
                Call frmIS.AppendLog(String.Format(modMain.GetLocalizedString("main.textpart155"), "cSurvey " & oImportSurvey.Properties.CreatorVersion), "source")
            End If

            If oImportSurvey.Properties.CalculateVersion <> oSurvey.Properties.CalculateVersion Then
                Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart154"), "warning")
                'bHasErrors = bHasErrors Or True
            End If

            Dim oImportTrigpointNames As List(Of String) = oImportSurvey.TrigPoints.GetNames
            Dim oTrigpointNames As List(Of String) = oSurvey.TrigPoints.GetNames
            If oImportTrigpointNames.Intersect(oTrigpointNames).Count = 0 Then
                Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart101b"), "error")
                bHasErrors = bHasErrors Or True
            Else
                Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart101a"), "ok")
            End If

            Dim bDataDataProperties As Boolean = oSurvey.Properties.DataTables.Segments.CanMergeWith(oImportSurvey.Properties.DataTables.Segments) AndAlso oSurvey.Properties.DataTables.Trigpoints.CanMergeWith(oImportSurvey.Properties.DataTables.Trigpoints)
            If bDataDataProperties Then
                Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart106a"), "ok")
            Else
                bHasErrors = bHasErrors Or True
                Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart106b"), "error")
            End If

            Dim bHasCalculateData As Boolean = oImportSurvey.Calculate.TrigPoints.Count > 0
            If bHasCalculateData Then
                Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart97a"), "ok")
            Else
                Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart97b"), "warning")
            End If
            Dim bImportPlanEnabled As Boolean = oImportSurvey.Plan.GetAllItems.Count > 0
            Dim bImportProfileEnabled As Boolean = oImportSurvey.Profile.GetAllItems.Count > 0
            frmIS.chkcSurveyImportGraphics.Enabled = bImportPlanEnabled OrElse bImportProfileEnabled
            frmIS.chkcSurveyImportPlan.Enabled = bImportPlanEnabled
            frmIS.chkcSurveyImportProfile.Enabled = bImportProfileEnabled
            Dim bHasBindedSegments As Boolean
            Dim bHasPlanWarping As Boolean
            Dim bHasProfileWarping As Boolean
            Dim bThereAreUnbindedPlanPoint As Boolean
            Dim bThereAreUnbindedProfilePoint As Boolean
            If frmIS.chkcSurveyImportGraphics.Enabled Then
                bHasPlanWarping = oImportSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oImportSurvey.Properties.PlanWarpingDisabled
                bHasProfileWarping = oImportSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oImportSurvey.Properties.ProfileWarpingDisabled
                If bHasPlanWarping Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart98a"), "ok")
                Else
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart98b"), "warning")
                End If
                If bHasProfileWarping Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart99a"), "ok")
                Else
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart99b"), "warning")
                End If

                bThereAreUnbindedPlanPoint = oImportSurvey.Plan.GetAllItems.Where(Function(item) item.Points.Where(Function(point) point.BindedSegment Is Nothing).Count > 0).Count > 0
                bThereAreUnbindedProfilePoint = oImportSurvey.Plan.GetAllItems.Where(Function(item) item.Points.Where(Function(point) point.BindedSegment Is Nothing).Count > 0).Count > 0
                If bThereAreUnbindedPlanPoint Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart108a"), "warning")
                Else
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart108b"), "ok")
                End If
                If bThereAreUnbindedProfilePoint Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart109a"), "warning")
                Else
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart109b"), "ok")
                End If

                bHasPlanWarping = oSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oSurvey.Properties.PlanWarpingDisabled
                bHasProfileWarping = oSurvey.Properties.DesignWarpingMode > cSurvey.cSurvey.DesignWarpingModeEnum.None AndAlso Not oSurvey.Properties.ProfileWarpingDisabled
                If bHasPlanWarping Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart98c"), "ok")
                Else
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart98d"), "warning")
                End If
                If bHasProfileWarping Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart99c"), "ok")
                Else
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart99d"), "warning")
                End If

                bHasBindedSegments = oImportSurvey.Segments.GetBindedSegments.Count > 0
                If bHasBindedSegments Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart100a"), "ok")
                Else
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart100b"), "warning")
                End If

                Dim bDesignDataProperties As Boolean = oSurvey.Properties.DataTables.DesignItems.CanMergeWith(oImportSurvey.Properties.DataTables.DesignItems)
                If bDataDataProperties Then
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart107a"), "ok")
                Else
                    bHasErrors = bHasErrors Or True
                    Call frmIS.AppendLog(modMain.GetLocalizedString("main.textpart107b"), "error")
                End If
            End If
            If bHasErrors Then frmIS.chkcSurveyImportGraphics.Enabled = False
            If bHasErrors Then frmIS.chkcSurveyImportData.Enabled = False

            frmIS.chkcSurveyImportSurface.Enabled = Not oImportSurvey.Surface.IsEmpty

            If frmIS.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                If (frmIS.chkcSurveyImportData.Checked AndAlso frmIS.chkcSurveyImportData.Enabled) OrElse (frmIS.chkcSurveyImportGraphics.Checked AndAlso frmIS.chkcSurveyImportGraphics.Enabled) OrElse frmIS.chkcSurveyImportSurface.Checked OrElse frmIS.chkcSurveyImportDesignProperties.Checked OrElse frmIS.chkcSurveyImportScaleRules.Checked OrElse frmIS.chkcsurveyimportlinkedsurvey.Checked Then

                    'check if there are no segment with same id
                    'check if there are almost one common station between the two surveys
                    If frmIS.chkcSurveyImportTexts.Enabled AndAlso frmIS.chkcSurveyImportTexts.Checked Then
                        Call oMousePointer.Push(Cursors.WaitCursor)
                        Call oSurvey.Texts.MergeWith(oImportSurvey.Texts)
                        Call oMousePointer.Pop()
                    End If

                    If frmIS.chkcSurveyImportSurface.Enabled AndAlso frmIS.chkcSurveyImportSurface.Checked Then
                        Call oMousePointer.Push(Cursors.WaitCursor)

                        For Each oElevation As Surface.cElevation In oImportSurvey.Surface.Elevations
                            If Not oSurvey.Surface.Elevations.Contains(oElevation.ID) Then
                                Dim oNewElevation As Surface.cElevation = oSurvey.Surface.Elevations.Add()
                                Call oNewElevation.CopyFrom(oElevation)
                            End If
                        Next

                        For Each oOrthoPhoto As Surface.cOrthoPhoto In oImportSurvey.Surface.OrthoPhotos
                            If Not oSurvey.Surface.OrthoPhotos.Contains(oOrthoPhoto.ID) Then
                                Dim oNewOrthoPhoto As Surface.cOrthoPhoto = oSurvey.Surface.OrthoPhotos.Add()
                                Call oNewOrthoPhoto.CopyFrom(oOrthoPhoto)
                            End If
                        Next

                        For Each oWMS As Surface.cWMS In oImportSurvey.Surface.WMSs
                            If Not oSurvey.Surface.WMSs.Contains(oWMS.ID) Then
                                Dim oNewWMS As Surface.cWMS = oSurvey.Surface.WMSs.Add()
                                Call oNewWMS.CopyFrom(oWMS)
                            End If
                        Next

                        Call oMousePointer.Pop()
                    End If

                    Dim oDuplicatedSegments As Dictionary(Of String, String) = New Dictionary(Of String, String)

                    If frmIS.chkcSurveyImportData.Checked AndAlso frmIS.chkcSurveyImportData.Enabled Then
                        Call oMousePointer.Push(Cursors.WaitCursor)
                        bDisabledCaveBranchChangeEvent = True

                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin5"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
                        Try
                            Dim oCaveInfos As cCaveInfos = oImportSurvey.Properties.CaveInfos
                            If frmIS.chkImportAsBranchOf.Checked Then
                                Dim oCaveBranch As cICaveInfoBranches = If(cCaveInfoBranch.EditToString(frmIS.cboImportAsBranchOfBranch.EditValue) = "", frmIS.cboImportAsBranchOfCave.EditValue, frmIS.cboImportAsBranchOfBranch.EditValue)
                                If frmIS.chkcSurveyImportCreateNewBranch.Checked Then
                                    oCaveBranch = oCaveBranch.Branches.Add(oCaveBranch.Branches.GetUniqueName(If(oImportSurvey.Properties.Name = "", IO.Path.GetFileNameWithoutExtension(Filename), oImportSurvey.Properties.Name)))
                                    If Not frmIS.chkcSurveyDisableOriginAsExtendstart.Checked Then
                                        oCaveBranch.ExtendStart = oImportSurvey.Properties.Origin
                                    End If
                                End If
                                For Each oCaveInfo As cCaveInfo In oCaveInfos
                                    If oCaveBranch.Branches.Contains(oCaveInfo.Name) Then
                                        Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches(oCaveInfo.Name)
                                        Call oNewCaveBranch.MergeWith(oCaveInfo)
                                        Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                    Else
                                        Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches.Add(oCaveInfo.Name)
                                        Call oNewCaveBranch.CopyFrom(oCaveInfo)
                                        Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                    End If
                                Next
                            Else
                                If frmIS.chkcSurveyImportCreateNewBranch.Checked Then
                                    Dim oCaveBranch As cICaveInfoBranches = oSurvey.Properties.CaveInfos.Add(oSurvey.Properties.CaveInfos.GetUniqueName(If(oImportSurvey.Properties.Name = "", IO.Path.GetFileNameWithoutExtension(Filename), oImportSurvey.Properties.Name)))
                                    If Not frmIS.chkcSurveyDisableOriginAsExtendstart.Checked Then
                                        oCaveBranch.ExtendStart = oImportSurvey.Properties.Origin
                                    End If
                                    For Each oCaveInfo As cCaveInfo In oCaveInfos
                                        If oCaveBranch.Branches.Contains(oCaveInfo.Name) Then
                                            Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches(oCaveInfo.Name)
                                            Call oNewCaveBranch.MergeWith(oCaveInfo)
                                            Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                        Else
                                            Dim oNewCaveBranch As cCaveInfoBranch = oCaveBranch.Branches.Add(oCaveInfo.Name)
                                            Call oNewCaveBranch.CopyFrom(oCaveInfo)
                                            Call cCaveInfos.CheckBindings(oImportSurvey, oCaveInfo.Cave, "", oNewCaveBranch.Cave, oNewCaveBranch.Path)
                                        End If
                                    Next
                                Else
                                    For Each oCaveInfo As cCaveInfo In oCaveInfos
                                        If oSurvey.Properties.CaveInfos.Contains(oCaveInfo.Name) Then
                                            Call oSurvey.Properties.CaveInfos(oCaveInfo.Name).MergeWith(oCaveInfo)
                                        Else
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        End If
                                    Next
                                End If
                            End If

                            Dim oGrades As cGrades = oImportSurvey.Grades
                            For Each oGrade As cGrade In oGrades
                                If Not oSurvey.Grades.Contains(oGrade.ID) Then
                                    Dim oNewGrade As cGrade = oSurvey.Grades.Add(oGrade.ID, oGrade.Description)
                                    Call oNewGrade.CopyFrom(oGrade)
                                End If
                            Next

                            'fix this code like above (import caveinfo) or not? same date...same description...is the same session
                            Dim oSessions As cSessions = oImportSurvey.Properties.Sessions
                            For Each oSession As cSession In oSessions
                                Dim oNewSession As cSession
                                If oSurvey.Properties.Sessions.Contains(oSession.Date, oSession.Description) Then
                                    oNewSession = oSurvey.Properties.Sessions(oSession.Date, oSession.Description)
                                Else
                                    oNewSession = oSurvey.Properties.Sessions.Add(oSession.Date, oSession.Description)
                                End If
                                'the only problem is that this will override session in this survey with the same in the imported survey
                                Call oNewSession.CopyFrom(oSession)
                            Next

                            Dim oHLs As Properties.cHighlightsDetails = oImportSurvey.Properties.HighlightsDetails
                            For Each oHL As Properties.cHighlightsDetail In oHLs
                                If Not oHL.System Then
                                    Call oSurvey.Properties.HighlightsDetails.Add(oHL)
                                End If
                            Next

                            bDisableSegmentsChangeEvent = True
                            Dim oImportSegments As cSegments = oImportSurvey.Segments

                            Call oSurvey.Properties.DataTables.Segments.MergeWith(oImportSurvey.Properties.DataTables.Segments)
                            Call oSurvey.Properties.DataTables.Trigpoints.MergeWith(oImportSurvey.Properties.DataTables.Trigpoints)

                            Dim iIndex As Integer = 0
                            Dim iCount As Integer = oImportSegments.Count
                            For Each oImportSegment As cSegment In oImportSegments
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress5"))
                                iIndex += 1

                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportSegment.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.ForClipboard)
                                    'DirectCast(oXMLParent.ChildNodes(0), XmlElement).SetAttribute("id", "")
                                    Dim oNewSegment As cSegment = New cSegment(oSurvey, oFile, oXMLParent.ChildNodes(0))
                                    Dim iFindDuplicateMode As Integer = 0
                                    Dim bIsDuplicated As Boolean

                                    Dim oOldSegment As cSegment = Nothing
                                    If (frmIS.cbocSurveyImportDuplicatesMode.SelectedIndex = 0 AndAlso oSurvey.Segments.Contains(oNewSegment.ID)) Then
                                        bIsDuplicated = True
                                        oOldSegment = oSurvey.Segments(oNewSegment.ID)
                                    ElseIf (frmIS.cbocSurveyImportDuplicatesMode.SelectedIndex = 1) Then
                                        Dim oDuplicates As cSegmentCollection = oSurvey.Segments.FindDuplicate(oImportSegment)
                                        If oDuplicates.Count > 0 Then
                                            bIsDuplicated = True
                                            oOldSegment = oDuplicates(0)
                                        Else
                                            bIsDuplicated = False
                                        End If
                                    End If

                                    If bIsDuplicated Then
                                        If frmIS.chkcSurveyImportDuplicates.Checked Then
                                            If frmIS.chkcSurveyImportDuplicatesOverwrite.Checked Then
                                                Dim bOverwrite As Boolean = False
                                                If frmIS.chkcSurveyImportDuplicatesOverwriteOnlyUsed.Checked Then
                                                    bOverwrite = oImportSegment.IsBinded()
                                                Else
                                                    bOverwrite = True
                                                End If
                                                If bOverwrite Then
                                                    With oOldSegment
                                                        Call .SetCave(oNewSegment.Cave, oNewSegment.Branch)
                                                        Call .SetSession(oNewSegment.Session)
                                                        .Distance = oNewSegment.Distance
                                                        .Inclination = oNewSegment.Inclination
                                                        .Bearing = oNewSegment.Bearing
                                                        .Left = oNewSegment.Left
                                                        .Right = oNewSegment.Right
                                                        .Up = oNewSegment.Up
                                                        .Down = oNewSegment.Down
                                                        .Exclude = oNewSegment.Exclude
                                                        .Splay = oNewSegment.Splay
                                                        .Surface = oNewSegment.Surface
                                                        .Duplicate = oNewSegment.Duplicate
                                                        .Cut = oNewSegment.Cut
                                                        .Unbindable = oNewSegment.Unbindable
                                                        .Virtual = oNewSegment.Virtual
                                                        .Direction = oNewSegment.Direction
                                                        .Color = oNewSegment.Color
                                                        Call .DataProperties.CopyFrom(oNewSegment.DataProperties)
                                                        Call .Save()
                                                    End With
                                                End If
                                            End If
                                            Call oDuplicatedSegments.Add(oNewSegment.ID, oOldSegment.ID)
                                        End If
                                    Else
                                        Call oSurvey.Segments.Append(oNewSegment)
                                        Call oDuplicatedSegments.Add(oNewSegment.ID, oNewSegment.ID)
                                    End If
                                End Using
                            Next
                            bDisableSegmentsChangeEvent = False

                            bDisableTrigpointsChangeEvent = True
                            Dim oOriginalTrigpoints As List(Of String) = oSurvey.TrigPoints.GetNames
                            Call oSurvey.TrigPoints.Rebind()
                            Dim oImportTrigpoints As cTrigPoints = oImportSurvey.TrigPoints
                            For Each oImportTrigpoint As cTrigPoint In oImportTrigpoints
                                If Not oImportTrigpoint.IsSystem Then
                                    'check if station exist (orphan are non imported)...
                                    Dim sTrigpointName As String = oImportTrigpoint.Name.ToUpper
                                    Dim bIsDuplicated As Boolean = oOriginalTrigpoints.Contains(sTrigpointName) 'AndAlso oOriginalTrigpoints(oTrigpoint.Name)
                                    If (bIsDuplicated AndAlso frmIS.chkcSurveyImportDuplicatesStations.Checked) OrElse Not (bIsDuplicated) Then
                                        If oSurvey.TrigPoints.Contains(sTrigpointName) Then
                                            With oSurvey.TrigPoints(sTrigpointName)
                                                .Entrance = oImportTrigpoint.Entrance
                                                .IsInExploration = oImportTrigpoint.IsInExploration
                                                .Note = oImportTrigpoint.Note
                                                .LabelSymbol = oImportTrigpoint.LabelSymbol
                                                .LabelDistance = oImportTrigpoint.LabelDistance
                                                .LabelPosition = oImportTrigpoint.LabelPosition
                                                .ShowEntrance = oImportTrigpoint.ShowEntrance
                                                .Type = oImportTrigpoint.Type
                                                Call .Coordinate.CopyFrom(oImportTrigpoint.Coordinate)
                                                Call .Aliases.CopyFrom(oImportTrigpoint.Aliases)
                                                Call .Connections.CopyFrom(oImportTrigpoint.Connections)
                                                Call .DataProperties.CopyFrom(oImportTrigpoint.DataProperties)
                                                Call .Save()
                                            End With
                                        End If
                                    End If
                                End If
                            Next
                            bDisableTrigpointsChangeEvent = False
                        Catch ex As Exception
                            Call pLogAdd(ex)
                        End Try

                        'mark exclusion for shared station except first one...
                        'Dim oSharedTrigpointNames As List(Of String) = oImportTrigpointNames.Intersect(oTrigpointNames)
                        'problem...have to understand if this is the only way to avoid change in shot's elaboration in the destination survey

                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend5"))
                        bDisabledCaveBranchChangeEvent = False
                        Call oMousePointer.Pop()
                    End If

                    If frmIS.chkcSurveyImportGraphics.Checked AndAlso frmIS.chkcSurveyImportGraphics.Enabled Then
                        Call oDockLevels.SuspendLayout()

                        Call oSurvey.Properties.DataTables.DesignItems.MergeWith(oImportSurvey.Properties.DataTables.DesignItems)

                        Dim oPlanTraslation As SizeF
                        Dim oProfileTraslation As SizeF
                        Try
                            If (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 0 AndAlso Not bHasBindedSegments) OrElse (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 2) Then
                                Call oSurvey.Calculate.Calculate()
                                Dim oImportOriginPoint As Calculate.cTrigPointPoint = oSurvey.Calculate.TrigPoints(oImportSurvey.Properties.Origin).Point
                                Dim oOriginPoint As Calculate.cTrigPointPoint = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Point
                                oPlanTraslation = New SizeF(oImportOriginPoint.X - oOriginPoint.X, (oImportOriginPoint.Y - oOriginPoint.Y))
                                'per il calcolo di D devo prendere la D della stessa connection tra oImportOriginPoint e oOriginPoint
                                Dim oImportConnection As cSurvey.Calculate.cTrigPointConnection = oSurvey.Calculate.TrigPoints(oImportSurvey.Properties.Origin).Connections.First
                                Dim oConnection As cSurvey.Calculate.cTrigPointConnection = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Connections.First
                                oProfileTraslation = New SizeF(oImportConnection.GetPoint.D - oConnection.GetPoint.D, (oImportOriginPoint.Z - oOriginPoint.Z))
                                'oProfileTraslation = New SizeF(oImportOriginPoint.D - oOriginPoint.D, (oImportOriginPoint.Z - oOriginPoint.Z))
                            End If
                        Catch ex As Exception
                            oPlanTraslation = SizeF.Empty
                            oProfileTraslation = SizeF.Empty
                        End Try

                        Dim bPlan As Boolean = frmIS.chkcSurveyImportPlan.Enabled AndAlso frmIS.chkcSurveyImportPlan.Checked
                        Dim bProfile As Boolean = frmIS.chkcSurveyImportProfile.Enabled AndAlso frmIS.chkcSurveyImportProfile.Checked
                        If bPlan Or bProfile Then
                            Call oMousePointer.Push(Cursors.WaitCursor)

                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin10"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
                            If bHasBindedSegments Then
                                For Each sNewSegmentID As String In oDuplicatedSegments.Keys
                                    Dim sOldSegmentID As String = oDuplicatedSegments(sNewSegmentID)
                                    Dim oOldSegment As cSegment = oSurvey.Segments(sOldSegmentID)
                                    Dim oNewSegment As cSegment = oImportSurvey.Segments(sNewSegmentID)
                                    If oNewSegment.IsPlanBinded AndAlso (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 0 OrElse frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 1) Then
                                        Call oImportSurvey.Plan.WarpItemsEx(oNewSegment, New Calculate.Plot.cData.cPlanWarpingFactor(oNewSegment, oOldSegment), True)
                                    End If
                                    If oNewSegment.IsProfileBinded AndAlso (frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 0 OrElse frmIS.cbocSurveyImportWarpingMode.SelectedIndex = 1) Then
                                        Call oImportSurvey.Profile.WarpItemsEx(oNewSegment, New Calculate.Plot.cData.cProfileWarpingFactor(oNewSegment, oOldSegment), True)
                                    End If
                                Next
                            End If

                            Dim oItems As List(Of cItem)
                            Dim oImportItems As List(Of cItem)
                            Dim oImportItemsWithLinks As List(Of cItem)
                            Dim oImportItemsLegends As List(Of cItem)
                            If bPlan And bProfile Then
                                oItems = oImportSurvey.GetAllDesignItems
                            Else
                                If bPlan Then
                                    oItems = oImportSurvey.Plan.GetAllItems
                                Else
                                    oItems = oImportSurvey.Profile.GetAllItems
                                End If
                            End If

                            oImportItemsLegends = oItems.Where(Function(item) item.Type = cIItem.cItemTypeEnum.Legend).ToList
                            oImportItemsWithLinks = oItems.Where(Function(item) (item.Type <> cIItem.cItemTypeEnum.Legend) AndAlso (item.Type = cIItem.cItemTypeEnum.CrossSectionMarker OrElse item.BindDesignType = cItem.BindDesignTypeEnum.CrossSections)).ToList
                            oImportItems = oItems.Where(Function(item) (item.Type <> cIItem.cItemTypeEnum.Legend) AndAlso (Not oImportItemsWithLinks.Contains(item))).ToList

                            Dim oCrossSectionsIndex As Dictionary(Of String, String) = New Dictionary(Of String, String)
                            Dim oImportedItemsIndex As Dictionary(Of cItem, cItem) = New Dictionary(Of cItem, cItem)

                            Dim iIndex As Integer = 0
                            Dim iCount As Integer = oImportItems.Count
                            For Each oImportItem As cItem In oImportItems
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress10"))
                                iIndex += 1

                                If Not frmIS.chkcSurveyImportData.Checked AndAlso frmIS.chkcSurveyImportCaveBranchFromDesign.Checked Then
                                    If oImportItem.Cave <> "" Then
                                        If Not oSurvey.Properties.CaveInfos.Contains(oImportItem.Cave) Then
                                            Dim oCaveInfo As cCaveInfo = oImportSurvey.Properties.CaveInfos(oImportItem.Cave)
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        ElseIf Not oSurvey.Properties.CaveInfos.Contains(oImportItem.Cave, oImportItem.Branch) Then
                                            Call oSurvey.Properties.CaveInfos(oImportItem.Cave).MergeWith(oImportSurvey.Properties.CaveInfos(oImportItem.Cave))
                                        End If
                                    End If
                                End If

                                Dim iDesign As Integer = oImportItem.Design.Type
                                Dim iLayer As Integer = oImportItem.Layer.Type
                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportItem.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.ForImport)
                                    Dim oXMLItem As XmlElement = oXMLParent.ChildNodes(0)
                                    Call modImport.ReplaceIDItem(oXMLItem, oDuplicatedSegments)

                                    Dim oItem As cItem
                                    If iDesign = 0 Then
                                        oItem = oSurvey.Plan.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        If oItem.Type = cIItem.cItemTypeEnum.CrossSection Then
                                            Dim oCrossSection As cDesignCrossSection = oSurvey.CrossSections.Add(oItem)
                                            Call oCrossSectionsIndex.Add(DirectCast(oImportItem, cItemCrossSection).DesignCrossSection.ID, oCrossSection.ID)
                                        End If
                                        If Not oPlanTraslation.IsEmpty Then Call oItem.MoveBy(oPlanTraslation)
                                    Else
                                        oItem = oSurvey.Profile.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        If oItem.Type = cIItem.cItemTypeEnum.CrossSection Then
                                            Dim oCrossSection As cDesignCrossSection = oSurvey.CrossSections.Add(oItem)
                                            Call oCrossSectionsIndex.Add(DirectCast(oImportItem, cItemCrossSection).DesignCrossSection.ID, oCrossSection.ID)
                                        End If
                                        If Not oProfileTraslation.IsEmpty Then Call oItem.MoveBy(oProfileTraslation)
                                    End If
                                    Call oImportedItemsIndex.Add(oImportItem, oItem)
                                End Using
                            Next

                            iIndex = 0
                            iCount = oImportItemsWithLinks.Count
                            For Each oImportItemWithLinks As cItem In oImportItemsWithLinks
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress10"))
                                iIndex += 1
                                If frmIS.chkcSurveyImportCaveBranchFromDesign.Checked Then
                                    If oImportItemWithLinks.Cave <> "" Then
                                        If Not oSurvey.Properties.CaveInfos.Contains(oImportItemWithLinks.Cave) Then
                                            Dim oCaveInfo As cCaveInfo = oImportSurvey.Properties.CaveInfos(oImportItemWithLinks.Cave)
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        ElseIf Not oSurvey.Properties.CaveInfos.Contains(oImportItemWithLinks.Cave, oImportItemWithLinks.Branch) Then
                                            Call oSurvey.Properties.CaveInfos(oImportItemWithLinks.Cave).MergeWith(oImportSurvey.Properties.CaveInfos(oImportItemWithLinks.Cave))
                                        End If
                                    End If
                                End If

                                Dim iDesign As Integer = oImportItemWithLinks.Design.Type
                                Dim iLayer As Integer = oImportItemWithLinks.Layer.Type
                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportItemWithLinks.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                                    Dim oXMLItem As XmlElement = oXMLParent.ChildNodes(0)
                                    Call modImport.ReplaceIDItem(oXMLItem, oDuplicatedSegments)

                                    Dim oItem As cItem
                                    If iDesign = 0 Then
                                        oItem = oSurvey.Plan.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oPlanTraslation.IsEmpty Then Call oItem.MoveBy(oPlanTraslation)
                                    Else
                                        oItem = oSurvey.Profile.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oProfileTraslation.IsEmpty Then Call oItem.MoveBy(oProfileTraslation)
                                    End If
                                    If oItem.Type = cIItem.cItemTypeEnum.CrossSectionMarker Then
                                        Dim oCrossSection As cDesignCrossSection = oSurvey.CrossSections(oCrossSectionsIndex(DirectCast(oImportItemWithLinks, cIItemCrossSectionMarker).DesignCrossSection.ID))
                                        If iDesign = 0 Then
                                            Call oCrossSection.AddPlanMarker(oItem)
                                        Else
                                            Call oCrossSection.AddProfileMarker(oItem)
                                        End If
                                    Else
                                        'is a standard item binded to a xsection
                                        If oImportItemWithLinks.CrossSection = "" Then
                                            Call oItem.SetBindDesignType(cItem.BindDesignTypeEnum.CrossSections)
                                        Else
                                            Dim oCrosssection As cDesignCrossSection = oSurvey.CrossSections(oCrossSectionsIndex(oImportItemWithLinks.CrossSection))
                                            Call oItem.SetBindDesignType(cItem.BindDesignTypeEnum.CrossSections, oCrosssection, True)
                                        End If
                                    End If
                                    Call oImportedItemsIndex.Add(oImportItemWithLinks, oItem)
                                End Using
                            Next

                            iIndex = 0
                            iCount = oImportItemsLegends.Count
                            For Each oImportItemsLegend As cItemLegend In oImportItemsLegends
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress10"))
                                iIndex += 1
                                If frmIS.chkcSurveyImportCaveBranchFromDesign.Checked Then
                                    If oImportItemsLegend.Cave <> "" Then
                                        If Not oSurvey.Properties.CaveInfos.Contains(oImportItemsLegend.Cave) Then
                                            Dim oCaveInfo As cCaveInfo = oImportSurvey.Properties.CaveInfos(oImportItemsLegend.Cave)
                                            Dim oNewCaveInfo As cCaveInfo = oSurvey.Properties.CaveInfos.Add(oCaveInfo.Name)
                                            Call oNewCaveInfo.CopyFrom(oCaveInfo)
                                        ElseIf Not oSurvey.Properties.CaveInfos.Contains(oImportItemsLegend.Cave, oImportItemsLegend.Branch) Then
                                            Call oSurvey.Properties.CaveInfos(oImportItemsLegend.Cave).MergeWith(oImportSurvey.Properties.CaveInfos(oImportItemsLegend.Cave))
                                        End If
                                    End If
                                End If

                                Dim iDesign As Integer = oImportItemsLegend.Design.Type
                                Dim iLayer As Integer = oImportItemsLegend.Layer.Type
                                Using oFile As cFile = New cFile(cFile.FileFormatEnum.CSX, "", cFile.FileOptionsEnum.EmbedResource)
                                    Dim oXML As XmlDocument = oFile.Document
                                    Dim oXMLParent As XmlElement = oXML.CreateElement("parent")
                                    Call oImportItemsLegend.SaveTo(oFile, oXML, oXMLParent, cSurvey.cSurvey.SaveOptionsEnum.Silent)
                                    Dim oXMLItem As XmlElement = oXMLParent.ChildNodes(0)
                                    Call modImport.ReplaceIDItem(oXMLItem, oDuplicatedSegments)

                                    Dim oItem As cItemLegend
                                    If iDesign = 0 Then
                                        oItem = oSurvey.Plan.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oPlanTraslation.IsEmpty Then Call oItem.MoveBy(oPlanTraslation)
                                    Else
                                        oItem = oSurvey.Profile.Layers(iLayer).CreateItem(oFile, oXMLItem)
                                        Call oItem.RebindSegments(oDuplicatedSegments)
                                        If Not oProfileTraslation.IsEmpty Then Call oItem.MoveBy(oProfileTraslation)
                                    End If
                                    'for legend every item have to be check if exist in current survey and then changed with correct data
                                    Call oItem.Items.Clear()
                                    Dim iSubItemIndex As Integer = 0
                                    For Each oSubItem As cItemLegend.cLegendItem In oImportItemsLegend.Items
                                        If oImportedItemsIndex.ContainsKey(oSubItem.Item) Then
                                            Dim oNewSubItem As cItemLegend.cLegendItem = oItem.AddItem(oImportedItemsIndex(oSubItem.Item))
                                            Call oNewSubItem.CopyFrom(oSubItem)
                                        End If
                                        iSubItemIndex += 1
                                    Next
                                End Using
                            Next

                            For Each sOldCrossSectionID As String In oCrossSectionsIndex.Keys
                                Dim sNewCrossSectionID As String = oCrossSectionsIndex(sOldCrossSectionID)
                                Dim oNewCrossSection As cDesignCrossSection = oSurvey.CrossSections(sNewCrossSectionID)
                                Dim oOldCrossSection As cDesignCrossSection = oImportSurvey.CrossSections(sOldCrossSectionID)
                                If oNewCrossSection.Design.Type = cIDesign.cDesignTypeEnum.Plan Then
                                    Dim oPlanWarpingFactor As Calculate.Plot.cData.cPlanWarpingFactor = New Calculate.Plot.cData.cPlanWarpingFactor(oOldCrossSection, oNewCrossSection)
                                    Call oPlanWarpingFactor.Translate(New SizeF(-oPlanTraslation.Width, -oPlanTraslation.Height))
                                    Call oNewCrossSection.WarpItemsEx(oPlanWarpingFactor, True)
                                End If
                                If oNewCrossSection.Design.Type = cIDesign.cDesignTypeEnum.Profile Then
                                    Dim oProfileWarpingFactor As Calculate.Plot.cData.cProfileWarpingFactor = New Calculate.Plot.cData.cProfileWarpingFactor(oOldCrossSection, oNewCrossSection)
                                    Call oProfileWarpingFactor.Translate(New SizeF(-oProfileTraslation.Width, -oProfileTraslation.Height))
                                    Call oNewCrossSection.WarpItemsEx(oProfileWarpingFactor, True)
                                End If
                            Next

                            'If 1 = 1 Then
                            '    Dim oBorder As cItemItems = New cItemItems(oSurvey, oSurvey.Plan, oSurvey.Plan.Layers.Item(cLayers.LayerTypeEnum.Borders), cIItem.cItemCategoryEnum.CaveBorder)
                            '    oBorder.AddRange(oSurvey.Plan.Layers.Item(cLayers.LayerTypeEnum.Borders).GetAllItems.Where(Function(item) item.Type = cIItem.cItemTypeEnum.InvertedFreeHandArea AndAlso item.BindDesignType = cItem.BindDesignTypeEnum.MainDesign))
                            '    oBorder.SelfCombine()
                            'End If

                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend10"))
                            Call oMousePointer.Pop()

                            'oSurvey.Calculate.Calculate(False)
                        End If

                        Call oDockLevels.ResumeLayout()
                    End If

                    If frmIS.chkcSurveyImportDesignProperties.Enabled And frmIS.chkcSurveyImportDesignProperties.Checked Then
                        Call oSurvey.Properties.DesignProperties.MergeWith(oImportSurvey.Properties.DesignProperties)
                    End If

                    If frmIS.chkcSurveyImportScaleRules.Enabled And frmIS.chkcSurveyImportScaleRules.Checked Then
                        Call oSurvey.ScaleRules.MergeWidth(oImportSurvey.ScaleRules)
                    End If

                    If frmIS.chkcsurveyimportlinkedsurvey.Enabled And frmIS.chkcsurveyimportlinkedsurvey.Checked Then
                        Call oSurvey.LinkedSurveys.MergeWith(oImportSurvey.LinkedSurveys)
                        'Call oDockLS.tvLinkedSurveys.BuildList()
                    End If
                    Call pSurveyUpdateProperty(False)

                    'Call pSurveyFillSessionList(False)
                    'Call pSurveyFillCaveList(False)

                    'Call pSurveyCaption()
                    'Call pSurveySegmentsRefresh()
                    'Call pSurveyTrigpointsRefresh()

                    Call pSurveyCalculate(True)

                    Call pObjectPropertyLoad()

                    Call pMapInvalidate()
                End If
            End If
        End Using

        bDisablewarpingDetails = False
    End Sub

    Private Sub pSurveyImportPocketTopo(Filename As String, Append As Boolean)
        'POCKETTOPO
        Dim dNow As Date = Date.Now

        Dim bImportData As Boolean
        Dim bImportGraphics As Boolean
        Dim bUseGenericObject As Boolean

        Using frmIPT As frmImportPocketTopo = New frmImportPocketTopo
            frmIPT.txtFilename.Text = Filename

            If frmIPT.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                bImportData = frmIPT.chkPocketTopoImportData.Checked
                bImportGraphics = frmIPT.chkPocketTopoImportGraphics.Checked
                bUseGenericObject = frmIPT.chkPocketTopoImportGraphicsAsGeneric.Checked

                Dim sForcedCaveName As String = frmIPT.txtCaveName.Text
                Dim sPrefix As String = frmIPT.txtPrefix.Text.Trim.ToUpper

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                If bImportData Then
                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)
                End If
                If bImportGraphics Then
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.DesignItems.Add("import_date", Data.cDataFields.TypeEnum.Date)
                End If

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing
                Dim oCurrentSession As cSession

                Dim sLine As String
                Dim sLineParts() As String

                Dim sKeyWords As List(Of String) = New List(Of String)({"TRIP", "FIX", "DATE", "DATA", "PLAN", "ELEVATION", "STATIONS", "SHOTS", "POLYLINE", "DECLINATION"})

                'backup delle impostazioni splay e impostazione su splay automatici...
                Dim iSplay As cSurvey.cSurvey.SplayModeEnum = oSurvey.Properties.SplayMode
                oSurvey.Properties.SplayMode = cSurvey.cSurvey.SplayModeEnum.Automatic
                Try
                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(Filename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Dim bData As Boolean
                    Dim bPolyline As Boolean
                    Dim bStations As Boolean
                    Dim iDesign As cSurvey.Design.cIDesign.cDesignTypeEnum
                    Dim oItem As cSurvey.Design.cItem
                    Dim sColor As String

                    Dim sOrigin As String = ""

                    Dim oPlanTraslation As SizeF
                    Dim oProfileTraslation As SizeF
                    Dim sDeclination As Single

                    Dim oTempSegments As List(Of cImportSegment) = New List(Of cImportSegment)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin6"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Dim fi As FileInfo = New FileInfo(Filename)
                    Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                        If Not sr.EndOfStream Then
                            Do Until sr.EndOfStream
                                sLine = sr.ReadLine
                                If sLine <> "" Then
                                    sLineParts = sLine.Split({" "}, StringSplitOptions.RemoveEmptyEntries)
                                    If sKeyWords.Contains(sLineParts(0)) Then
                                        Select Case sLineParts(0)
                                            Case "TRIP"
                                        'grosso modo direi che coincide con le sessioni di csurvey
                                        'non faccio nulla ma uso il tag DATE per cominciare una sessione
                                            Case "DATE"
                                                Dim sDatePart As String() = sLineParts(1).Split("-")
                                                Dim dSessionDate As Date = New Date(sDatePart(0), sDatePart(1), sDatePart(2))
                                                oCurrentSession = oSurvey.Properties.Sessions.Add(dSessionDate, oSurvey.Properties.Sessions.GetUniqueID(dSessionDate, GetLocalizedString("main.textpart13")))
                                            Case "FIX"
                                        'coordinate GPS in formato metrico!
                                        'TODO: ask additional data for utm
                                            Case "DECLINATION"
                                                sDeclination = modNumbers.StringToSingle(sLineParts(1))
                                            Case "PLAN"
                                                iDesign = cSurvey.Design.cIDesign.cDesignTypeEnum.Plan
                                                bData = False
                                                bPolyline = False
                                                bStations = False
                                            Case "ELEVATION"
                                                iDesign = cSurvey.Design.cIDesign.cDesignTypeEnum.Profile
                                                bData = False
                                                bPolyline = False
                                                bStations = False
                                            Case "STATIONS"
                                                bStations = True
                                            Case "DATA"
                                                bData = bImportData
                                                bPolyline = False
                                                bStations = False
                                            Case "POLYLINE"
                                                sColor = sLineParts(1)
                                                Dim oColor As Color
                                                If bUseGenericObject Then
                                                    Select Case iDesign
                                                        Case cIDesign.cDesignTypeEnum.Plan
                                                            oItem = DirectCast(oSurvey.Plan.Layers(cLayers.LayerTypeEnum.Base), cSurvey.Design.Layers.cLayerBase).CreateGeneric(sCaveName, "")
                                                        Case cIDesign.cDesignTypeEnum.Profile
                                                            oItem = DirectCast(oSurvey.Profile.Layers(cLayers.LayerTypeEnum.Base), cSurvey.Design.Layers.cLayerBase).CreateGeneric(sCaveName, "")
                                                    End Select
                                                Else
                                                    Select Case iDesign
                                                        Case cIDesign.cDesignTypeEnum.Plan
                                                            oItem = DirectCast(oSurvey.Plan.Layers(cLayers.LayerTypeEnum.Borders), cSurvey.Design.Layers.cLayerBorders).CreateBorder(sCaveName, "")
                                                        Case cIDesign.cDesignTypeEnum.Profile
                                                            oItem = DirectCast(oSurvey.Profile.Layers(cLayers.LayerTypeEnum.Borders), cSurvey.Design.Layers.cLayerBorders).CreateBorder(sCaveName, "")
                                                    End Select
                                                End If
                                                Select Case sColor
                                                    Case "ORANGE"
                                                        oColor = Color.Orange
                                                    Case "BLUE"
                                                        oColor = Color.Blue
                                                    Case "BLACK"
                                                        oColor = Color.Black
                                                    Case "GREEN"
                                                        oColor = Color.Green
                                                    Case "BROWN"
                                                        oColor = Color.Brown
                                                    Case "GRAY"
                                                        oColor = Color.Gray
                                                    Case "RED"
                                                        oColor = Color.Red
                                                    Case Else
                                                        'how many colors?
                                                        Try
                                                            oColor = Color.FromName(sColor)
                                                        Catch
                                                            oColor = Color.DimGray
                                                        End Try
                                                End Select
                                                DirectCast(oItem, cIItemLine).LineType = cIItemLine.LineTypeEnum.Lines
                                                oItem.Pen.Type = cPen.PenTypeEnum.Custom
                                                oItem.Pen.Color = oColor
                                                Call oItem.DataProperties.SetValue("import_source", "pockettopo")
                                                Call oItem.DataProperties.SetValue("import_date", dNow)

                                                bData = False
                                                bPolyline = bImportGraphics
                                                bStations = False
                                            Case Else
                                                bData = False
                                                bPolyline = False
                                                bStations = False
                                        End Select
                                    Else
                                        If bStations Then
                                            sLineParts = sLine.Split(vbTab)
                                            If sOrigin = "" Then
                                                sOrigin = sLineParts(2)
                                                If iDesign = cIDesign.cDesignTypeEnum.Plan Then
                                                    oPlanTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                                Else
                                                    oProfileTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                                End If
                                                bStations = False
                                            Else
                                                If sLineParts(2) = sOrigin Then
                                                    If iDesign = cIDesign.cDesignTypeEnum.Plan Then
                                                        oPlanTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                                    Else
                                                        oProfileTraslation = New SizeF(-modNumbers.StringToDecimal(sLineParts(0)), modNumbers.StringToDecimal(sLineParts(1)))
                                                    End If
                                                End If
                                                bStations = False
                                            End If
                                        End If
                                        If bPolyline Then
                                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress6b"))
                                            sLineParts = sLine.Split(vbTab)
                                            Dim oPoint As PointF = New PointF(modNumbers.StringToSingle(sLineParts(0)), -1 * modNumbers.StringToSingle(sLineParts(1)))
                                            If iDesign = cIDesign.cDesignTypeEnum.Plan Then
                                                oPoint.X += oPlanTraslation.Width
                                                oPoint.Y += oPlanTraslation.Height
                                                oPoint = modPaint.RotatePoint(oPoint, -sDeclination)
                                            Else
                                                oPoint.X += oProfileTraslation.Width
                                                oPoint.Y += oProfileTraslation.Height
                                            End If
                                            Call oItem.Points.AddFromPaintPoint(oPoint)
                                        End If
                                        If bData Then
                                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress6a"))
                                            sLineParts = sLine.Split(vbTab)
                                            Try
                                                Dim sFrom As String
                                                Dim sTo As String
                                                Dim dDist As Decimal
                                                Dim dDir As Decimal
                                                Dim dIncl As Decimal
                                                Dim dLeft As Decimal
                                                Dim dRight As Decimal
                                                Dim dUp As Decimal
                                                Dim dDown As Decimal
                                                Dim iDirection As cSurvey.cSurvey.DirectionEnum
                                                Dim sNote As String

                                                Try : sFrom = sPrefix & sLineParts(0).Trim.ToUpper : Catch : sFrom = "" : End Try
                                                Try : sTo = sLineParts(1).Trim.ToUpper : Catch : sTo = "" : End Try
                                                If sTo <> "" Then sTo = sPrefix & sTo

                                                Try : dDir = modNumbers.StringToDecimal(sLineParts(2)) : Catch : dDist = 0 : End Try
                                                Try : dIncl = modNumbers.StringToDecimal(sLineParts(3)) : Catch : dDir = 0 : End Try
                                                Try : dDist = modNumbers.StringToDecimal(sLineParts(4)) : Catch : dIncl = 0 : End Try

                                                Try
                                                    If sLineParts(5) = "<" Then
                                                        iDirection = cSurvey.cSurvey.DirectionEnum.Left
                                                    Else
                                                        iDirection = cSurvey.cSurvey.DirectionEnum.Right
                                                    End If
                                                Catch
                                                    iDirection = cSurvey.cSurvey.DirectionEnum.Right
                                                End Try

                                                dLeft = 0
                                                dRight = 0
                                                dUp = 0
                                                dDown = 0

                                                sNote = ""

                                                Call oTempSegments.Add(New cImportSegment(oCurrentSession, sFrom, sTo, dDist, dDir, dIncl, sNote, iDirection, dLeft, dRight, dUp, dDown))
                                            Catch
                                            End Try
                                        End If
                                    End If
                                End If
                            Loop

                            Dim iIndex As Integer
                            Dim iCount As Integer = oTempSegments.Count
                            For Each oTempSegment As cImportSegment In oTempSegments
                                Dim oSegment As cSegment = oSurvey.Segments.Append()
                                Call oSegment.SetCave(sCaveName)
                                Call oSegment.SetSession(oTempSegment.Session)
                                oSegment.From = oTempSegment.From
                                oSegment.To = oTempSegment.To
                                oSegment.Distance = oTempSegment.Distance
                                oSegment.Bearing = oTempSegment.Bearing
                                oSegment.Inclination = oTempSegment.Inclination
                                oSegment.Left = oTempSegment.Left
                                oSegment.Right = oTempSegment.Right
                                oSegment.Up = oTempSegment.Up
                                oSegment.Down = oTempSegment.Down
                                oSegment.Note = oTempSegment.Note
                                oSegment.Direction = oTempSegment.Direction
                                Call oSegment.DataProperties.SetValue("import_source", "pockettopo")
                                Call oSegment.DataProperties.SetValue("import_date", dNow)
                                Call oSegment.Save()

                                iIndex += 1
                                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, iIndex / iCount, GetLocalizedString("main.progress6c"))
                            Next

                            If oSurvey.Properties.Origin = "" Then
                                oSurvey.Properties.Origin = sOrigin
                            End If
                        End If
                    End Using
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                oSurvey.Properties.SplayMode = iSplay

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend6"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyImportCompass2(Filename As String, Append As Boolean)
        Call oMousePointer.Push(Cursors.WaitCursor)

        bDisableSegmentsChangeEvent = True
        bDisableTrigpointsChangeEvent = True

        Dim fi As FileInfo = New FileInfo(Filename)
        Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
            Dim sLine As String = ""
            Dim iLineCount As Integer = 0
            Dim iCaveLineCount As Integer = 0
            Do Until sr.EndOfStream
                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress7"))

                Dim oCurrentsession As cSession = oSurvey.Properties.Sessions.Add(Now, "COMPASS")
                oCurrentsession.DataFormat = cSegment.DataFormatEnum.Cartesian

                Dim dStartX As Decimal
                Dim dStartY As Decimal
                Dim dStartZ As Decimal
                Dim dPrevX As Decimal
                Dim dPrevY As Decimal
                Dim dPrevZ As Decimal
                Dim sPrevious As String

                Do Until sLine = Chr(&HFF) Or (sLine = "" AndAlso iCaveLineCount > 9) OrElse sr.EndOfStream
                    sLine = sr.ReadLine
                    sLine = sLine.Trim
                    Dim sLineType As String = sLine.Substring(0, 1)
                    sLine = sLine.Substring(1)
                    Select Case sLineType
                        Case "S"
                            '
                        Case "N"

                        Case "Z"
                            Dim sLineParts As String() = sLine.Split({" "c}, StringSplitOptions.RemoveEmptyEntries)
                            dStartY = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(0)))
                            dStartX = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(2)))
                            dStartZ = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(4)))
                            Dim oSegment As cSegment = oSurvey.Segments.Append
                            Call oSegment.SetSession(oCurrentsession)
                            oSegment.From = "BASE"
                            oSegment.To = "BASE"
                        Case "M"
                            Dim sLineParts As String() = sLine.Split({" "c}, StringSplitOptions.RemoveEmptyEntries)
                            Dim sTo As String = sLineParts(3).Substring(1)

                            Dim dY As Decimal = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(0))) - dStartY
                            Dim dX As Decimal = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(1))) - dStartX
                            Dim dZ As Decimal = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(2))) - dStartZ

                            Dim oSegment As cSegment = oSurvey.Segments.Append
                            Call oSegment.SetSession(oCurrentsession)
                            oSegment.From = "BASE"
                            oSegment.To = sTo
                            oSegment.Distance = dX
                            oSegment.Bearing = dY
                            oSegment.Inclination = dZ
                            oSegment.Exclude = True
                            oSegment.Surface = True

                            dPrevX = dX
                            dPrevY = dY
                            dPrevZ = dZ
                            sPrevious = sTo
                        Case "D"
                            Dim sLineParts As String() = sLine.Split({" "c}, StringSplitOptions.RemoveEmptyEntries)
                            Dim sTo As String = sLineParts(3).Substring(1)

                            Dim dY As Decimal = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(0))) - dStartY
                            Dim dX As Decimal = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(1))) - dStartX
                            Dim dZ As Decimal = modConversion.FeetToMeter(modNumbers.StringToDecimal(sLineParts(2))) - dStartZ

                            Dim oSegment As cSegment = oSurvey.Segments.Append
                            Call oSegment.SetSession(oCurrentsession)
                            oSegment.From = sPrevious
                            oSegment.To = sTo
                            oSegment.Distance = dX - dPrevX
                            oSegment.Bearing = dY - dPrevY
                            oSegment.Inclination = dZ - dPrevZ

                            dPrevX = dX
                            dPrevY = dY
                            dPrevZ = dZ
                            sPrevious = sTo
                    End Select
                Loop
            Loop
            oSurvey.Segments.SaveAll()
        End Using

        bDisableSegmentsChangeEvent = False
        bDisableTrigpointsChangeEvent = False

        Call oMousePointer.Pop()
    End Sub

    Private Sub pSurveyImportCompass(Filename As String, Append As Boolean)
        'COMPASS
        If IO.Path.GetExtension(Filename.ToLower) = ".plt" Then
            pSurveyImportCompass2(Filename, Append)
        Else
            Dim dNow As Date = Date.Now
            Using frmIC As frmImportCompass = New frmImportCompass
                frmIC.txtFilename.Text = Filename

                If frmIC.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                    'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                    Dim sForcedCaveName As String = frmIC.txtCaveName.Text
                    Dim sPrefix As String = frmIC.txtPrefix.Text.Trim.ToUpper
                    Dim bBranchForSession As Boolean = frmIC.chkCompassCreateBrachForSession.Checked
                    Dim bImportFlagX As Boolean = frmIC.chkCompassImportFlagX.Checked
                    Dim bImportSSShotAsSplay As Boolean = frmIC.chkCompassImportSSShotAsSplay.Checked

                    bDisableSegmentsChangeEvent = True
                    bDisableTrigpointsChangeEvent = True

                    If Not Append Then
                        If sFilename = "" Then
                            sFilename = Filename
                            sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                        End If
                    End If

                    Call oMousePointer.Push(Cursors.WaitCursor)

                    Dim sCaveName As String = ""
                    Dim sCaveBranchName As String
                    Dim dSessionDate As Date
                    Dim sSessionDescription As String
                    Dim oCurrentCave As cCaveInfo = Nothing
                    Dim oCurrentCaveBranch As cCaveInfoBranch = Nothing
                    Dim oCurrentCaveSubBranch As cCaveInfoBranch = Nothing
                    Dim oCurrentsession As cSession

                    Dim bSkipSegment As Boolean
                    Dim bExcludeSegment As Boolean
                    Dim bSurfaceSegment As Boolean

                    Dim iFlagsIndex As Integer
                    Dim bBackSight As Boolean

                    Dim iSideMeasureReferTo As cSegment.SideMeasuresReferToEnum = cSegment.SideMeasuresReferToEnum.EndPoint

                    If sForcedCaveName = "" Then
                        sCaveName = Path.GetFileNameWithoutExtension(Filename)
                    Else
                        sCaveName = sForcedCaveName
                    End If
                    oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin7"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                    Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                    Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                    Dim fi As FileInfo = New FileInfo(Filename)
                    Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                        Dim sLine As String = ""
                        Dim iLineCount As Integer = 0
                        Dim iCaveLineCount As Integer = 0
                        Do Until sr.EndOfStream
                            Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress7"))
                            Do Until sLine = Chr(&HFF) Or (sLine = "" And iCaveLineCount > 9) Or sr.EndOfStream
                                sLine = sr.ReadLine
                                sLine = sLine.Trim
                                If sLine.Length > 1 Then
                                    Select Case iCaveLineCount
                                        Case 0
                                            'nome cavità...
                                            sCaveBranchName = sLine
                                            If oCurrentCave.Branches.Contains(sCaveBranchName) Then
                                                oCurrentCaveBranch = oCurrentCave.Branches(sCaveBranchName)
                                            Else
                                                oCurrentCaveBranch = oCurrentCave.Branches.Add(sCaveBranchName)
                                            End If
                                        Case 1
                                            'nome sessione
                                            sSessionDescription = sLine.Replace("SURVEY NAME: ", "").Trim
                                            If bBranchForSession Then
                                                If oCurrentCaveBranch.Branches.Contains(sSessionDescription) Then
                                                    oCurrentCaveSubBranch = oCurrentCaveBranch.Branches(sSessionDescription)
                                                Else
                                                    oCurrentCaveSubBranch = oCurrentCaveBranch.Branches.Add(sSessionDescription)
                                                End If
                                            Else
                                                oCurrentCaveSubBranch = oCurrentCaveBranch
                                            End If
                                        Case 2
                                            'data session
                                            Dim sTemp As String = sLine.Replace("SURVEY DATE: ", "")
                                            If sTemp.Contains("COMMENT:") Then
                                                sTemp = sTemp.Substring(0, sTemp.IndexOf("COMMENT:"))
                                            End If
                                            Dim sDatePart() As String = sTemp.Trim.Split({" "}, StringSplitOptions.RemoveEmptyEntries)
                                            dSessionDate = New Date(sDatePart(2), sDatePart(0), sDatePart(1))
                                            If oSurvey.Properties.Sessions.Contains(dSessionDate, sSessionDescription) Then
                                                Dim iSessionCount As Integer = 1
                                                Do While oSurvey.Properties.Sessions.Contains(dSessionDate, sSessionDescription & " " & iSessionCount)
                                                    iSessionCount += 1
                                                Loop
                                                sSessionDescription &= " " & iSessionCount
                                            End If
                                            oCurrentsession = oSurvey.Properties.Sessions.Add(dSessionDate, sSessionDescription)
                                            oCurrentsession.Note = sLine.Substring(sLine.IndexOf("COMMENT:") + 8).Trim
                                        Case 3
                                            'team
                                            sLine = sr.ReadLine.Trim
                                            oCurrentsession.Team = sLine
                                            iCaveLineCount += 1
                                            iLineCount += 1
                                        Case 5
                                            'parametri
                                            'DECLINATION: 1.00  FORMAT: DDDDLUDRADLNT  CORRECTIONS: 2.00 3.00 4.00 CORRECTIONS2: 5.0 6.0 
                                            Dim sLinePart() As String = sLine.Split({" "}, StringSplitOptions.RemoveEmptyEntries)
                                            If sLinePart.Contains("CORRECTIONS:") Then
                                                Dim dBearingCorrection As Decimal = modNumbers.StringToDecimal(sLinePart(sLinePart.ToList.IndexOf("CORRECTIONS:") + 1))
                                                Dim dInclinationCorrection As Decimal = modNumbers.StringToDecimal(sLinePart(sLinePart.ToList.IndexOf("CORRECTIONS:") + 2))
                                                Dim dDistanceCorrection As Decimal = modNumbers.StringToDecimal(sLinePart(sLinePart.ToList.IndexOf("CORRECTIONS:") + 3))

                                                If dDistanceCorrection <> 0 Then oCurrentsession.DistanceCalibration.Error = -dDistanceCorrection * 0.3048D
                                                If dInclinationCorrection <> 0 Then oCurrentsession.InclinationCalibration.Error = -dInclinationCorrection
                                                If dBearingCorrection <> 0 Then oCurrentsession.BearingCalibration.Error = -dBearingCorrection
                                            End If
                                            If sLinePart.Contains("DECLINATION:") Then
                                                Dim sDeclination As String = sLinePart(sLinePart.ToList.IndexOf("DECLINATION:") + 1)
                                                Dim dDeclination As Decimal = modNumbers.StringToDecimal(sDeclination)
                                                If dDeclination <> 0 Then
                                                    'oSurvey.Properties.DeclinationEnabled = True
                                                    oCurrentsession.NordType = cSegment.NordTypeEnum.Magnetic
                                                    oCurrentsession.DeclinationEnabled = True
                                                    oCurrentsession.Declination = dDeclination
                                                End If
                                            End If
                                            If sLinePart.Contains("FORMAT:") Then
                                                Dim sFormat As String = sLinePart(sLinePart.ToList.IndexOf("FORMAT:") + 1)
                                                '--------------------
                                                If sFormat.Length = 12 Then
                                                    bBackSight = sFormat(11) = "B"
                                                ElseIf sFormat.Length = 13 Then
                                                    bBackSight = sFormat(11) = "B"
                                                    If sFormat(12) = "F" Then
                                                        iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.StartPoint
                                                    Else
                                                        iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.EndPoint
                                                    End If
                                                ElseIf sFormat.Length = 15 Then
                                                    bBackSight = sFormat(13) = "B"
                                                    If sFormat(14) = "F" Then
                                                        iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.StartPoint
                                                    Else
                                                        iSideMeasureReferTo = cSegment.SideMeasuresReferToEnum.EndPoint
                                                    End If
                                                End If
                                                oCurrentsession.SideMeasuresReferTo = iSideMeasureReferTo

                                                If bBackSight Then
                                                    iFlagsIndex = 11
                                                Else
                                                    iFlagsIndex = 9
                                                End If

                                                'FORMAT: DMMD LRUD LDdAaNF
                                                'I.	    Bearing Units: D = Degrees, Q = quads, R = Grads
                                                'II.	Length Units: D = Decimal Feet, I = Feet and Inches M = Meters
                                                'III.	Passage Units: Same as length
                                                'IV.	Inclination Units: D = Degrees, G = Percent Grade M = Degrees and Minutes, R = Grads W = Depth Gauge

                                                'V.	    Passage Dimension Order: U = Up, D = Down, R = Right L = Left
                                                'VI.	Passage Dimension Order: U = Up, D = Down, R = Right L = Left
                                                'VII.	Passage Dimension Order: U = Up, D = Down, R = Right L = Left
                                                'VIII.	Passage Dimension Order: U = Up, D = Down, R = Right L = Left

                                                'IX.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                                'X.	    Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                                'XI.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                                'XII.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination
                                                'XIII.	Shot Item Order: L = Length, A = Azimuth, D = Inclination, a = Back Azimuth, d = Back Inclination

                                                'XIV.	Backsight: B=Redundant, N or empty=No Redundant Backsights.
                                                'XV.LRUD Association: F=From Station, T=To Station
                                                'http://www.fountainware.com/compass/Documents/FileFormats/SurveyDataFormat.htm

                                                'Compatibility Issues. Over time, the Compass Format string has changed to accommodate more format information. For backward compatibility, Compass can read all previous versions of the format. Here is detailed information about different versions of the Format strings:
                                                '11-Character Format. The earliest version of the string had 11 characters like this: UUUUDDDDSSS
                                                '12-Character Format. The next version had 12 characters, adding Backsight information: UUUUDDDDSSSB
                                                '13-Character Format. The next version had 13 characters, adding information about the LRUD associations: UUUUDDDDSSSBL
                                                '15-Character Format. Finally, the current version has 15 characters, adding backsights to order information: UUUUDDDDSSSSSBL
                                                'U = Units, D = Dimension Order, S = Shot Order, B = Backsight Info, L = LRUD association
                                            End If
                                        Case Is > 8
                                            If sLine <> "" Then
                                                Dim sLineParts() As String = sLine.Split({" "}, StringSplitOptions.RemoveEmptyEntries)

                                                Dim sFrom As String
                                                Dim sTo As String
                                                Dim dDist As Decimal
                                                Dim dDir As Decimal
                                                Dim dIncl As Decimal
                                                Dim dLeft As Decimal
                                                Dim dRight As Decimal
                                                Dim dUp As Decimal
                                                Dim dDown As Decimal
                                                Dim sFlags As String
                                                Dim sNote As String = ""

                                                Try : sFrom = modNumbers.FieldUnformat(sLineParts(0)) : Catch : sFrom = "" : End Try
                                                If sFrom <> "" Then sFrom = sPrefix & sFrom
                                                Try : sTo = modNumbers.FieldUnformat(sLineParts(1)) : Catch : sTo = "" : End Try
                                                If bImportSSShotAsSplay Then
                                                    If sTo.ToLower Like "*ss*" Then
                                                        sTo = ""
                                                    End If
                                                End If
                                                If sTo <> "" Then sTo = sPrefix & sTo

                                                Try : dDist = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(2))) * 0.3048D, 2) : Catch : dDist = 0 : End Try
                                                Try : dDir = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(3))) : Catch : dDir = 0 : End Try
                                                Try : dIncl = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(4))) : Catch : dIncl = 0 : End Try

                                                Try : dLeft = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(5))) * 0.3048D, 2) : Catch : dLeft = 0 : End Try
                                                If dLeft < 0D Then dLeft = 0
                                                Try : dRight = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(8))) * 0.3048D, 2) : Catch : dRight = 0 : End Try
                                                If dRight < 0D Then dRight = 0
                                                Try : dUp = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(6))) * 0.3048D, 2) : Catch : dUp = 0 : End Try
                                                If dUp < 0D Then dUp = 0
                                                Try : dDown = modNumbers.MathRound(modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(7))) * 0.3048D, 2) : Catch : dDown = 0 : End Try
                                                If dDown < 0D Then dDown = 0

                                                sFlags = If(sLineParts.Count > iFlagsIndex, sLineParts(iFlagsIndex), "")
                                                If sFlags.StartsWith("#|") Then
                                                    'L=escludi dai calcoli
                                                    'X=il tiro andrebbe inserito solo se nei parametri ho detto di inserirlo (va comunque impostato come escludi dai calcoli)
                                                    'P=non disegnare: si può importare come superficie o duplicato
                                                    'C=non gestibile in csurvey
                                                    sFlags = sFlags.Substring(2)
                                                    If sFlags.Contains("L") Then
                                                        bExcludeSegment = True
                                                    End If
                                                    If sFlags.Contains("X") Then
                                                        bSkipSegment = True
                                                    Else
                                                        bSkipSegment = False
                                                    End If
                                                    If sFlags.Contains("P") Then
                                                        bSurfaceSegment = True
                                                    Else
                                                        bSurfaceSegment = False
                                                    End If
                                                Else
                                                    sNote = sFlags.Substring(sFlags.IndexOf("#") + 1)
                                                    bSkipSegment = False
                                                    bExcludeSegment = False
                                                    bSurfaceSegment = False
                                                End If

                                                'cumulo alle note i campi successivi
                                                For iNote As Integer = iFlagsIndex + 1 To sLineParts.Length - 1
                                                    sNote &= " " & sLineParts(iNote)
                                                Next
                                                sNote = sNote.Trim

                                                If (bImportFlagX) OrElse (Not bImportFlagX AndAlso Not bSkipSegment) Then
                                                    Dim oSegment As cSegment = oSurvey.Segments.Append()
                                                    Call oSegment.SetCave(oCurrentCave.Name, oCurrentCaveSubBranch.Path)
                                                    Call oSegment.SetSession(oCurrentsession)
                                                    oSegment.From = sFrom
                                                    oSegment.To = sTo
                                                    If sTo = "" Then
                                                        oSegment.Splay = True
                                                        oSegment.To = oSegment.GetSplayName()
                                                    End If

                                                    oSegment.Distance = dDist
                                                    oSegment.Bearing = dDir
                                                    oSegment.Inclination = dIncl

                                                    oSegment.Left = dLeft
                                                    oSegment.Right = dRight
                                                    oSegment.Up = dUp
                                                    oSegment.Down = dDown

                                                    oSegment.Note = sNote

                                                    oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                                                    oSegment.Exclude = bExcludeSegment
                                                    oSegment.Surface = bSurfaceSegment

                                                    Call oSegment.DataProperties.SetValue("import_source", "compass")
                                                    Call oSegment.DataProperties.SetValue("import_date", dNow)

                                                    Call oSegment.Save()
                                                End If
                                            End If
                                    End Select
                                End If
                                iCaveLineCount += 1
                                iLineCount += 1
                            Loop
                            iCaveLineCount = 0
                        Loop
                    End Using

                    bDisableSegmentsChangeEvent = False
                    bDisableTrigpointsChangeEvent = False

                    Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend7"))
                    Call oMousePointer.Pop()

                    Call pSurveyFillSessionList(False)
                    Call pSurveyFillCaveList(False)

                    Call pSurveyCaption()
                    Call pSurveySegmentsRefresh()
                    Call pSurveyTrigpointsRefresh()

                    'Call pSurveyLoadTreeLayers()

                    Call pSurveyCalculate(True)
                    Call pMapInvalidate()
                End If
            End Using
        End If
    End Sub

    Private Sub pSurveyImportCaveExplorer(Filename As String, Append As Boolean)
        'CAVEEXPLORER
        Dim dNow As Date = Date.Now

        Using frmICE As frmImportCaveExplorer = New frmImportCaveExplorer
            frmICE.txtFilename.Text = Filename

            If frmICE.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                'If bDefaultArrangePriorityOnImport Then Call oSurvey.Calculate.ArrangePriority()

                bDisableSegmentsChangeEvent = True
                bDisableTrigpointsChangeEvent = True

                If Not Append Then
                    If sFilename = "" Then
                        sFilename = Filename
                        sFilename = IO.Path.Combine(IO.Path.GetDirectoryName(sFilename), IO.Path.GetFileNameWithoutExtension(sFilename) & ".CSZ")
                    End If
                End If

                Call oMousePointer.Push(Cursors.WaitCursor)

                Dim sForcedCaveName As String = frmICE.txtCaveName.Text
                Dim sPrefix As String = frmICE.txtPrefix.Text.Trim.ToUpper

                Dim sCaveName As String = ""
                Dim oCurrentCave As cCaveInfo = Nothing
                Dim oCurrentCaveBranch As cCaveInfoBranch = Nothing
                Dim oCurrentCaveSubBranch As cCaveInfoBranch = Nothing

                If sForcedCaveName = "" Then
                    sCaveName = Path.GetFileNameWithoutExtension(sFilename)
                Else
                    sCaveName = sForcedCaveName
                End If
                oCurrentCave = oSurvey.Properties.CaveInfos.Add(sCaveName)

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, 0, GetLocalizedString("main.progressbegin8"), cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageImport Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowPercentage Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)

                Call oSurvey.Properties.DataTables.Segments.Add("import_source", Data.cDataFields.TypeEnum.Text)
                Call oSurvey.Properties.DataTables.Segments.Add("import_date", Data.cDataFields.TypeEnum.Date)

                Dim fi As FileInfo = New FileInfo(Filename)
                Using sr As StreamReader = New StreamReader(fi.FullName, System.Text.Encoding.ASCII)
                    Dim sLine As String = ""
                    Dim iLineCount As Integer = 0
                    Dim iCaveLineCount As Integer = 0

                    Dim sConversion As Single
                    sLine = sr.ReadLine
                    If sLine Like "Unit=*" Then
                        'unita di misura...
                        Select Case sLine.Substring(5).ToLower
                            Case "feet"
                                sConversion = 0.3048
                            Case Else
                                sConversion = 1
                        End Select
                    End If

                    sLine = sr.ReadLine
                    If sLine Like "GPS:*" Then
                        'per ora ignoro i dati GPS...
                        sLine = sr.ReadLine
                    End If

                    Do Until sLine = "" Or sr.EndOfStream
                        Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, sr.BaseStream.Position / sr.BaseStream.Length, GetLocalizedString("main.progress8"))
                        sLine = sr.ReadLine

                        Dim sLineParts() As String = sLine.Split({vbTab}, StringSplitOptions.RemoveEmptyEntries)
                        Dim sFrom As String
                        Dim sTo As String
                        Dim dDist As Decimal
                        Dim dDir As Decimal
                        Dim dIncl As Decimal
                        Dim dLeft As Decimal
                        Dim dRight As Decimal
                        Dim dUp As Decimal
                        Dim dDown As Decimal
                        Dim sNote As String
                        Dim bSplay As Boolean

                        Try : sFrom = modNumbers.FieldUnformat(sLineParts(0)) : Catch : sFrom = "" : End Try
                        Try : sTo = modNumbers.FieldUnformat(sLineParts(1)) : Catch : sTo = "" : End Try
                        If sTo.Contains(":") Then
                            bSplay = True
                        Else
                            bSplay = False
                        End If

                        Try : dDist = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(2))) * sConversion : Catch : dDist = 0 : End Try
                        Try : dDir = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(3))) : Catch : dDir = 0 : End Try
                        Try : dIncl = modNumbers.StringToDecimal(modNumbers.FieldUnformat(sLineParts(4))) : Catch : dIncl = 0 : End Try

                        Dim oSegment As cSegment = oSurvey.Segments.Append()
                        Call oSegment.SetCave(oCurrentCave.Name)
                        oSegment.From = sFrom
                        oSegment.To = sTo

                        oSegment.Distance = dDist
                        oSegment.Bearing = dDir
                        oSegment.Inclination = dIncl

                        oSegment.Left = dLeft
                        oSegment.Right = dRight
                        oSegment.Up = dUp
                        oSegment.Down = dDown

                        oSegment.Note = sNote

                        oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                        oSegment.Exclude = False

                        oSegment.Splay = bSplay

                        Call oSegment.DataProperties.SetValue("import_source", "caveexplorer")
                        Call oSegment.DataProperties.SetValue("import_date", dNow)

                        Call oSegment.Save()

                        iCaveLineCount += 1
                        iLineCount += 1
                    Loop
                End Using

                bDisableSegmentsChangeEvent = False
                bDisableTrigpointsChangeEvent = False

                Call pSurveyProgress("import", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, 0, GetLocalizedString("main.progressend8"))
                Call oMousePointer.Pop()

                Call pSurveyFillSessionList(False)
                Call pSurveyFillCaveList(False)

                Call pSurveyCaption()
                Call pSurveySegmentsRefresh()
                Call pSurveyTrigpointsRefresh()

                'Call pSurveyLoadTreeLayers()

                Call pSurveyCalculate(True)
                Call pMapInvalidate()

            End If
        End Using
    End Sub

    Private Sub pSurveyInfoEntrance()
        Using frmIE As frmInfoEntrance = New frmInfoEntrance(oSurvey, pGetCurrentDesignTools.CurrentCave)
            Call frmIE.ShowDialog(Me)
        End Using
    End Sub

    Private Sub pSurveyInfoCave()
        Using frmIC As frmInfoCave = New frmInfoCave(oSurvey, bLinkedSurveysShowInCaveInfo, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            Call frmIC.ShowDialog(Me)
        End Using
    End Sub

    Private Sub frmInfoRing_OnApply(sender As frmInfoRing)
        Call pSurveyRedraw()
    End Sub

    Private Sub pSurveyInfoRing()
        Dim sCave As String = pGetCurrentDesignTools.CurrentCave
        Using frmIR As frmInfoRing = New frmInfoRing(oSurvey, sCave)
            AddHandler frmIR.OnApply, AddressOf frmInfoRing_OnApply
            Call frmIR.ShowDialog(Me)
            RemoveHandler frmIR.OnApply, AddressOf frmInfoRing_OnApply
        End Using
    End Sub

    Private Sub pSurveyInfoSession()
        Using frmIS As frmInfoSession = New frmInfoSession(oSurvey, "")
            Call frmIS.ShowDialog(Me)
        End Using
    End Sub

    Private Sub pSurveyInfoQuotas()
        Dim sCave As String = pGetCurrentDesignTools.CurrentCave
        Using frmIO As frmInfoDepth = New frmInfoDepth(oSurvey, bLinkedSurveysShowInCaveInfo, sCave)
            Call frmIO.ShowDialog(Me)
        End Using
    End Sub

    Private Sub pSurveyInfoBearing()
        Dim sCave As String = pGetCurrentDesignTools.CurrentCave
        Using frmIO As frmInfoOrientation = New frmInfoOrientation(oSurvey, bLinkedSurveysShowInCaveInfo, sCave)
            Call frmIO.ShowDialog(Me)
        End Using
    End Sub

    'Private Sub mnuSegmentInfoCopy_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles mnuSegmentInfoCopy.Click
    '    Call pListviewInfoCopy(lvSegmentInfo.SelectedItems, False)
    'End Sub

    'Private Sub btnLayerRefresh_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pSurveyLoadTreeLayers()
    'End Sub

    'Private Sub cmdLayerObjectProperty_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pSurveyLayerSelectObject()
    '    Call pObjectPropShow(True)
    '    Call tabObjectProp.SelectTab(tabObjectPropMain)
    'End Sub

    'Private Sub cmdLayerObjectSelect_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    '    Call pSurveyLayerSelectObject()
    'End Sub

    Private Sub pSurveyLayerSelectAll()
        Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
        For Each oLayer As cLayer In oCurrentDesign.Layers
            For Each oItem As cItem In oLayer.GetAllVisibleItems(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
                Call oItemItems.Add(oItem)
            Next
        Next
        If oItemItems.Count > 0 Then
            Call pGetCurrentDesignTools.SelectItem(oItemItems)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    Private Sub pSurveyLayerSelectAllInCurrentLayer()
        Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
        For Each oItem As cItem In pGetCurrentDesignTools.CurrentLayer.GetAllVisibleItems(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
            Call oItemItems.Add(oItem)
        Next
        If oItemItems.Count > 0 Then
            Call pGetCurrentDesignTools.SelectItem(oItemItems)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    'Private Sub pSurveyLayerSelectObject()
    '    If TypeOf tvLayers2.SelectedObject Is cItem Then
    '        Dim oItem As cItem = tvLayers2.SelectedObject
    '        Call pGetCurrentDesignTools.SelectItem(oItem)
    '        Call pMapInvalidate()
    '        Call pMapCenterAndFitSelection()
    '    ElseIf TypeOf tvLayers2.SelectedObject Is cLayer Then
    '        Dim oLayer As cLayer = tvLayers2.SelectedObject
    '        Call pGetCurrentDesignTools.SelectLayer(oLayer)
    '        Call pMapInvalidate()
    '        Call pMapCenterAndFitSelection()
    '    End If
    'End Sub

    Private Sub btnCurrentItemGenericRestorePointPen_ItemClick(ByVal sender As System.Object, ByVal e As ItemClickEventArgs) Handles btnCurrentItemGenericRestorePointPen.ItemClick
        Try
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo19"))
                Dim oItem As cItem = .CurrentItem
                For Each oSequence As cSequence In oItem.Points.GetSequences
                    With oSequence.First
                        .Pen = Nothing
                        .LineType = cIItemLine.LineTypeEnum.Undefined
                    End With
                Next
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Function pScaleRulesEdit() As Boolean
        Using frmSR As frmScaleRules = New frmScaleRules(oSurvey, frmScaleRules.EditStyleEnum.ScaleRule)
            If frmSR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End Using
    End Function

    Private Function pScaleRulestemScaleVisibilityEdit(Item As cItem) As Boolean
        Using frmSR As frmItemScaleVisibility = New frmItemScaleVisibility(Item)
            If frmSR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End Using
    End Function

    Private Function pProfileVisibilityEdit(Item As cItem) As Boolean
        Using frmSR As frmItemProfileVisibility = New frmItemProfileVisibility(Item)
            If frmSR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
                Return True
            Else
                Return False
            End If
        End Using
    End Function

    Private Sub oRecentItem_ItemClick(Sender As Object, e As ItemClickEventArgs)
        Dim sFilename As String = e.Item.Tag
        Call cSurvey.UIHelpers.cRecentsHelper.AppendTo(sFilename, "Recent", oRecents, btnLoad)
        If Not pSurveyLoad(sFilename) Then
            Call cSurvey.UIHelpers.cRecentsHelper.RemoveFrom(sFilename, "Recent", oRecents, btnLoad)
        End If
    End Sub

    Private Sub oNewFromTemplate_ItemClick(sender As Object, e As ItemClickEventArgs)
        Call pSurveyNew(e.Item.Tag)
    End Sub

    Private Sub tmrMouseMove_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrMouseMove.Tick
        Dim oPoint As Point = Cursor.Position
        oPoint = picMap.PointToClient(oPoint)
        Call picMap_MouseMove(picMap, New MouseEventArgs(Control.MouseButtons, 0, oPoint.X, oPoint.Y, 0))
    End Sub

    Private oCommandLine As cCommandLineParameters

    Private oPropMessageBar As cMessageBar
    Private oPropCaveBranch As cItemCaveBranchPropertyControl
    Private oPropName As cItemNamePropertyControl2
    Private oPropCategoryAndProperties As cItemCategoryAndPropertiesControl
    Private oPropVisibility As cItemVisibilityPropertyControl2
    Private oPropTransparency As cItemTransparencyPropertyControl2
    Private oPropMergeMode As cItemMergeModeControl
    Private oPropLineType As cItemLineTypePropertyControl2
    Private oPropPointLineType As cItemPointLineTypePropertyControl2
    Private oPropPenStyle As cItemPenStylePropertyControl
    Private oPropBrushStyle As cItemBrushStylePropertyControl
    Private oPropTextStyle As cItemTextStylePropertyControl
    Private oPropSegment As cItemSegmentPropertyControl
    Private oPropTrigpoint As cItemTrigpointPropertyControl
    Private oPropAttachment As cItemAttachmentPropertyControl
    Private oPropSketch As cItemSketchPropertyControl
    Private oPropMarker As cItemMarkerPropertyControl
    Private oPropScaleItems As cItemScalePropertyControl
    Private oPropCompassItems As cItemCompassPropertyControl
    Private oPropImage As cItemImagePropertyControl
    Private oPropLegendItems As cItemLegendPropertyControl
    Private oPropClipping As cItemClippingPropertyControl
    Private oPropSign As cItemSignPropertyControl
    Private oPropQuota As cItemQuotaPropertyControl
    Private oPropCrossSection As cItemCrossSectionPropertyControl
    Private oPropCrossSectionMarker As cItemCrossSectionMarkerPropertyControl
    Private oPropPlanSplayBorder As cItemPlanSplayPropertyControl
    Private oPropProfileSplayBorder As cItemProfileSplayPropertyControl
    Private oPropCrossSectionSplayBorder As cItemCrossSectionSplayPropertyControl
    Private oPropPointSegmentBinding As cItemPointSegmentBindingPropertyControl
    Private oPropSegmentBinding As cItemSegmentBindingPropertyControl
    Private oPropObjectsBinding As cItemObjectsBindingPropertyControl
    Private oPropTrigpointsDistances As cItemTrigpointDistancesPropertyControl
    Private oPropChunck3d As cItemChunk3DPropertyControl

    Private WithEvents oPropPointSegmentBindingContainer As cCollapsablePropertyControlContainer
    Private WithEvents oPropSegmentBindingContainer As cCollapsablePropertyControlContainer
    Private WithEvents oPropObjectsBindingContainer As cCollapsablePropertyControlContainer
    Private WithEvents oPropTrigpointsDistancesContainer As cCollapsablePropertyControlContainer

    Private oDesignLinkedSurveys As cDesignLinkedSurveySelectorPropertyControl
    Private oDesignPrintOrExportArea As cDesignPrintOrExportAreaControl
    Private oDesignSurface As cDesignSurfaceControl
    Private oDesignSurfaceProfile As cDesignSurfaceProfileControl
    Private oDesignCenterline As cDesignCenterlineControl
    Private oDesignStyle As cDesignStyleControl

    Private o3DAltitudeAmplification As cDesign3DElevationFactor
    Private o3DLinkedSurveys As cDesignLinkedSurveySelectorPropertyControl
    Private o3DDesignSurface As cDesignSurfaceControl
    Private o3DDesignModel As cDesign3DModelControl

    Private Sub pDesignEnvironmentSet()
        Dim oBackcolor As Color = My.Application.RuntimeSettings.GetSetting("design.lowerlayersdesignbackcolor", Color.White)
        picMap.BackColor = oBackcolor
        oHolos.SceneBackgroundcolor = oBackcolor

        Dim oMessageForeColor As Color = My.Application.RuntimeSettings.GetSetting("messagebar.forecolor", SystemColors.ControlText)
        cMainMessageBar.CaptionForecolor = oMessageForeColor
        oPropMessageBar.CaptionForecolor = oMessageForeColor
        cWarpingMessageBar.CaptionForecolor = oMessageForeColor
    End Sub

    Private Sub oEditDesignEnvironment_OnChanged(Sender As Object, e As PropertyChangeEventArgs)
        Call pDesignEnvironmentSet()
    End Sub

    Private Sub pFix(Parent As Control)
        For Each oChild As Control In Parent.Controls
            oChild.Location = New Point(oChild.Location.X * My.Application.CurrentDPIRatio, oChild.Location.Y * My.Application.CurrentDPIRatio)
            If (oChild.Anchor And AnchorStyles.Right) = AnchorStyles.None Then
                oChild.Size = New Size(oChild.Size.Width * My.Application.CurrentDPIRatio, oChild.Size.Height)
            End If
            Call pFix(oChild)
        Next
    End Sub

    Public Sub New()
        ' This call is required by the designer.

        InitializeComponent()

        My.Application.CreateCustomSkinAndPalette()

        ' Add any initialization after the InitializeComponent() call.
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(pnlSegment, False)
        LayoutControlItem2.TextVisible = False
        LayoutControlItem2.Padding = New DevExpress.XtraLayout.Utils.Padding(0)
        LayoutControlItem2.Control = pnlSegmentSession
        LayoutControlItem2.ControlMaxSize = New Size(0, 32 * My.Application.CurrentDPIRatio)
        LayoutControlItem2.ControlMinSize = New Size(0, 32 * My.Application.CurrentDPIRatio)
        LayoutControlItem2.SizeConstraintsType = DevExpress.XtraLayout.SizeConstraintsType.Custom

        LayoutControlItem1.TextVisible = False
        LayoutControlItem1.Padding = New DevExpress.XtraLayout.Utils.Padding(0)
        LayoutControlItem1.Control = pnlSegmentCaveBranches
        LayoutControlItem1.ControlMaxSize = New Size(0, 56 * My.Application.CurrentDPIRatio)
        LayoutControlItem1.ControlMinSize = New Size(0, 56 * My.Application.CurrentDPIRatio)
        LayoutControlItem1.SizeConstraintsType = DevExpress.XtraLayout.SizeConstraintsType.Custom

        LayoutControlItem4.TextVisible = False
        LayoutControlItem4.Padding = New DevExpress.XtraLayout.Utils.Padding(0)
        LayoutControlItem4.Control = pnlSegmentCaveBranches
        LayoutControlItem4.ControlMaxSize = New Size(0, 36 * My.Application.CurrentDPIRatio)
        LayoutControlItem4.ControlMinSize = New Size(0, 36 * My.Application.CurrentDPIRatio)
        LayoutControlItem4.SizeConstraintsType = DevExpress.XtraLayout.SizeConstraintsType.Custom
        Call pFix(pnlSegment)

        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(pnlTrigPoint, False)
        LayoutControlItem8.TextVisible = False
        LayoutControlItem8.Padding = New DevExpress.XtraLayout.Utils.Padding(0)
        LayoutControlItem8.Control = pnlTrigpointName
        LayoutControlItem8.ControlMaxSize = New Size(0, 36 * My.Application.CurrentDPIRatio)
        LayoutControlItem8.ControlMinSize = New Size(0, 36 * My.Application.CurrentDPIRatio)
        LayoutControlItem8.SizeConstraintsType = DevExpress.XtraLayout.SizeConstraintsType.Custom
        Call pFix(pnlTrigPoint)

        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(pnlTrigpointCoordinate, False)

        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(RibbonControl, False)

        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(pnlDesignProp, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(pnl3DProp, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(pnlObjectSubProp, False)

        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockClipart, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockBrushesAndPens, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockLevels, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockConsole, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockProperties, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockIV, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockAV, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockLS, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockText, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockTexts, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockDistances, False)
        Call DevExpress.Utils.WorkspaceManager.SetSerializationEnabled(dockJoinPoints, False)

        Call My.Application.RuntimeSettings.OnPropertyChangedAppend(AddressOf oEditDesignEnvironment_OnChanged)
        AddHandler DevExpress.LookAndFeel.UserLookAndFeel.Default.StyleChanged, Sub()
                                                                                    Dim oBackcolor As Color
                                                                                    Dim oForecolor As Color
                                                                                    Dim oSpecialPanelBackcolor As Color
                                                                                    Dim oMessageForecolor As Color
                                                                                    Dim bIsDarkSkin As Boolean
                                                                                    If DevExpress.Utils.Frames.FrameHelper.IsDarkSkin(DevExpress.LookAndFeel.UserLookAndFeel.Default) Then
                                                                                        bIsDarkSkin = True
                                                                                        oBackcolor = modDevExpress.GetSkinPanelBackcolor
                                                                                        oForecolor = modDevExpress.GetSkinForecolor
                                                                                        oSpecialPanelBackcolor = modPaint.LightColor(oBackcolor, 0.1)
                                                                                        oMessageForecolor = oBackcolor
                                                                                    Else
                                                                                        bIsDarkSkin = False
                                                                                        oBackcolor = modDevExpress.GetSkinPanelBackcolor
                                                                                        oForecolor = modDevExpress.GetSkinForecolor
                                                                                        oSpecialPanelBackcolor = oBackcolor
                                                                                        oMessageForecolor = SystemColors.ControlText
                                                                                    End If
                                                                                    Call My.Application.RuntimeSettings.SetSettings("isdarkskin", bIsDarkSkin,
                                                                                                                            "backcolor", oBackcolor,
                                                                                                                            "forecolor", oForecolor,
                                                                                                                            "design.lowerlayersdesignbackcolor", oSpecialPanelBackcolor,
                                                                                                                            "messagebar.forecolor", oMessageForecolor)
                                                                                End Sub

        AddHandler RibbonControl.Manager.HighlightedLinkChanged, AddressOf RibbonControl_HighlightedLinkChanged
        AddHandler RibbonControl.Manager.ShortcutItemClick, AddressOf Ribboncontrol_ShortcutItemClick

        ntiMain.Icon = Me.Icon

        oMousePointer = New cMousePointer
        'dlastLogEvent = Now

        sObjectsPath = modMain.GetApplicationPath & "\objects"
        sClipartPath = sObjectsPath & "\cliparts"

        WindowState = FormWindowState.Maximized
        'CheckForIllegalCrossThreadCalls = False

        oCommandLine = New cCommandLineParameters(Command)
        modMain.bIsInDebug = oCommandLine.GetValue("debug", "0")
        If oCommandLine.GetValue("modernos", "1") = 1 Then modMain.bIsModernOS = modMain.GetWindowsVersion >= 6.1

        For Each oGroup In pageCurrentItem.Groups
            Call pageHome.Groups.Add(oGroup)
        Next
        Call RibbonControl.Pages.Remove(pageCurrentItem)
        For Each oGroup In pageCurrentItemPoint.Groups
            Call pageHome.Groups.Add(oGroup)
        Next
        Call RibbonControl.Pages.Remove(pageCurrentItemPoint)
        '-----------------------------------------------------------------------------------------------

        oDockLevels = New cDockLevels
        dockLevels.Controls.Add(oDockLevels)
        dockLevels.Text = oDockLevels.Text
        oDockLevels.Dock = DockStyle.Fill

        oDockConsole = New cDockConsole
        dockConsole.Controls.Add(oDockConsole)
        dockConsole.Text = oDockConsole.Text
        oDockConsole.Dock = DockStyle.Fill

        oDockClipart = New cDockClipart
        dockClipart.Controls.Add(oDockClipart)
        dockClipart.Text = oDockClipart.Text
        oDockClipart.Dock = DockStyle.Fill

        oDockBrushesAndPens = New cDockBrushesAndPens
        dockBrushesAndPens.Controls.Add(oDockBrushesAndPens)
        dockBrushesAndPens.Text = oDockBrushesAndPens.Text
        oDockBrushesAndPens.Dock = DockStyle.Fill

        oDockText = New cDockText
        dockText.Controls.Add(oDockText)
        dockText.Text = oDockText.Text
        oDockText.Dock = DockStyle.Fill

        oDockJoinPoints = New cDockJoinPoints
        dockJoinPoints.Controls.Add(oDockJoinPoints)
        dockJoinPoints.Text = oDockJoinPoints.Text
        oDockJoinPoints.Dock = DockStyle.Fill

        oDockAV = New cDockAudioViewer
        dockAV.Controls.Add(oDockAV)
        dockAV.Text = oDockAV.Text
        oDockAV.Dock = DockStyle.Fill

        oDockIV = New cDockImageViewer
        dockIV.Controls.Add(oDockIV)
        dockIV.Text = oDockIV.Text
        oDockIV.Dock = DockStyle.Fill

        oDockLS = New cDockLinkedSurveys
        dockLS.Controls.Add(oDockLS)
        dockLS.Text = oDockLS.Text
        oDockLS.Dock = DockStyle.Fill

        oDockTexts = New cDockTexts
        dockTexts.Controls.Add(oDockTexts)
        dockTexts.Text = oDockTexts.Text
        oDockTexts.Dock = DockStyle.Fill

        oDockScript = New cDockScript
        dockScript.Controls.Add(oDockScript)
        dockScript.Text = oDockScript.Text
        oDockScript.Dock = DockStyle.Fill

        oDockDistances = New cDockDistances
        dockDistances.Controls.Add(oDockDistances)
        dockDistances.Text = oDockDistances.Text
        oDockDistances.Dock = DockStyle.Fill

        picMap.AllowDrop = True

        '-------------------------------------------
        pnlObjectProp.Visible = False

        oPropMessageBar = New cMessageBar
        Call pUIAppendControl(pnlObjectProp, oPropMessageBar, 24)
        AddHandler oPropMessageBar.OnCloseRequest, AddressOf cPropMessageBar_OnCloseRequest

        oPropCaveBranch = New cItemCaveBranchPropertyControl
        Call pUIAppendItemPropertyControl(oPropCaveBranch, 117)
        oPropName = New cItemNamePropertyControl2
        Call pUIAppendItemPropertyControl(oPropName, 30)
        oPropCategoryAndProperties = New cItemCategoryAndPropertiesControl
        Call pUIAppendItemPropertyControl(oPropCategoryAndProperties, 32)

        oPropSegment = New cItemSegmentPropertyControl
        Call pUIAppendItemPropertyControl(oPropSegment, 367)
        oPropTrigpoint = New cItemTrigpointPropertyControl
        Call pUIAppendItemPropertyControl(oPropTrigpoint, 215)
        oPropMarker = New cItemMarkerPropertyControl
        Call pUIAppendItemPropertyControl(oPropMarker, 170)

        oPropVisibility = New cItemVisibilityPropertyControl2
        Call pUIAppendItemPropertyControl(oPropVisibility, 82)
        oPropTransparency = New cItemTransparencyPropertyControl2
        Call pUIAppendItemPropertyControl(oPropTransparency, 30)
        oPropLineType = New cItemLineTypePropertyControl2
        Call pUIAppendItemPropertyControl(oPropLineType, 52)
        oPropPointLineType = New cItemPointLineTypePropertyControl2
        Call pUIAppendItemPointPropertyControl(oPropPointLineType, 52)
        oPropPenStyle = New cItemPenStylePropertyControl
        Call pUIAppendItemPropertyControl(oPropPenStyle, 45)
        oPropBrushStyle = New cItemBrushStylePropertyControl
        Call pUIAppendItemPropertyControl(oPropBrushStyle, 45)
        oPropTextStyle = New cItemTextStylePropertyControl
        Call pUIAppendItemPropertyControl(oPropTextStyle, 214)

        oPropScaleItems = New cItemScalePropertyControl
        Call pUIAppendItemPropertyControl(oPropScaleItems, 138)
        oPropCompassItems = New cItemCompassPropertyControl
        Call pUIAppendItemPropertyControl(oPropCompassItems, 300)
        oPropAttachment = New cItemAttachmentPropertyControl
        Call pUIAppendItemPropertyControl(oPropAttachment, 298)
        oPropSketch = New cItemSketchPropertyControl
        Call pUIAppendItemPropertyControl(oPropSketch, 217)
        oPropImage = New cItemImagePropertyControl
        Call pUIAppendItemPropertyControl(oPropImage, 248)
        oPropLegendItems = New cItemLegendPropertyControl
        Call pUIAppendItemPropertyControl(oPropLegendItems, 417)
        oPropSign = New cItemSignPropertyControl
        Call pUIAppendItemPropertyControl(oPropSign, 113)
        oPropQuota = New cItemQuotaPropertyControl
        Call pUIAppendItemPropertyControl(oPropQuota, 167)
        oPropCrossSection = New cItemCrossSectionPropertyControl
        Call pUIAppendItemPropertyControl(oPropCrossSection, 219)
        oPropCrossSectionMarker = New cItemCrossSectionMarkerPropertyControl
        Call pUIAppendItemPropertyControl(oPropCrossSectionMarker, 423)
        oPropMergeMode = New cItemMergeModeControl
        Call pUIAppendItemPropertyControl(oPropMergeMode, 53)
        oPropClipping = New cItemClippingPropertyControl
        Call pUIAppendItemPropertyControl(oPropClipping, 32)

        oPropPlanSplayBorder = New cItemPlanSplayPropertyControl
        Call pUIAppendItemPropertyControl(oPropPlanSplayBorder, 114)
        oPropProfileSplayBorder = New cItemProfileSplayPropertyControl
        Call pUIAppendItemPropertyControl(oPropProfileSplayBorder, 250)
        oPropCrossSectionSplayBorder = New cItemCrossSectionSplayPropertyControl
        Call pUIAppendItemPropertyControl(oPropCrossSectionSplayBorder, 268)

        oPropChunck3d = New cItemChunk3DPropertyControl
        Call pUIAppendItemPropertyControl(oPropChunck3d, 360)

        Dim oSeparator As cCollapsablePropertySeparator = New cCollapsablePropertySeparator
        pnlObjectProp.Controls.Add(oSeparator)
        oSeparator.Dock = DockStyle.Bottom

        oPropPointSegmentBindingContainer = New cCollapsablePropertyControlContainer
        oPropPointSegmentBinding = New cItemPointSegmentBindingPropertyControl
        oPropPointSegmentBindingContainer.SetClientControl(modMain.GetLocalizedString("main.textpart162"), oPropPointSegmentBinding, 96)
        oPropPointSegmentBindingContainer.SetVisibleSeparator(oSeparator)
        pnlObjectProp.Controls.Add(oPropPointSegmentBindingContainer)
        oPropPointSegmentBindingContainer.Dock = DockStyle.Bottom
        Call pUIRebindPropertyControlEvents(oPropPointSegmentBinding)

        oPropSegmentBindingContainer = New cCollapsablePropertyControlContainer
        oPropSegmentBinding = New cItemSegmentBindingPropertyControl
        oPropSegmentBindingContainer.SetClientControl(modMain.GetLocalizedString("main.textpart163"), oPropSegmentBinding, 220)
        oPropSegmentBindingContainer.SetVisibleSeparator(oSeparator)
        pnlObjectProp.Controls.Add(oPropSegmentBindingContainer)
        oPropSegmentBindingContainer.Dock = DockStyle.Bottom
        Call pUIRebindPropertyControlEvents(oPropSegmentBinding)

        oPropObjectsBindingContainer = New cCollapsablePropertyControlContainer
        oPropObjectsBinding = New cItemObjectsBindingPropertyControl
        oPropObjectsBindingContainer.SetClientControl(modMain.GetLocalizedString("main.textpart164"), oPropObjectsBinding, 220)
        oPropObjectsBindingContainer.SetVisibleSeparator(oSeparator)
        pnlObjectProp.Controls.Add(oPropObjectsBindingContainer)
        oPropObjectsBindingContainer.Dock = DockStyle.Bottom
        Call pUIRebindPropertyControlEvents(oPropObjectsBinding)

        oPropTrigpointsDistancesContainer = New cCollapsablePropertyControlContainer
        oPropTrigpointsDistances = New cItemTrigpointDistancesPropertyControl
        oPropTrigpointsDistancesContainer.SetClientControl(modMain.GetLocalizedString("main.textpart165"), oPropTrigpointsDistances, 220)
        oPropTrigpointsDistancesContainer.SetVisibleSeparator(oSeparator)
        pnlObjectProp.Controls.Add(oPropTrigpointsDistancesContainer)
        oPropTrigpointsDistancesContainer.Dock = DockStyle.Bottom
        Call pUIRebindPropertyControlEvents(oPropTrigpointsDistances)

        pnlDesignProp.Visible = False
        oDesignLinkedSurveys = New cDesignLinkedSurveySelectorPropertyControl
        Call pUIAppendDesignPropertyControl(oDesignLinkedSurveys, 200)
        oDesignSurface = New cDesignSurfaceControl
        Call pUIAppendDesignPropertyControl(oDesignSurface, 242)
        oDesignPrintOrExportArea = New cDesignPrintOrExportAreaControl
        Call pUIAppendDesignPropertyControl(oDesignPrintOrExportArea, 86)
        oDesignSurfaceProfile = New cDesignSurfaceProfileControl
        Call pUIAppendDesignPropertyControl(oDesignSurfaceProfile, 24)
        oDesignCenterline = New cDesignCenterlineControl
        Call pUIAppendDesignPropertyControl(oDesignCenterline, 460)
        oDesignStyle = New cDesignStyleControl
        Call pUIAppendDesignPropertyControl(oDesignStyle, 147)

        pnl3DProp.Visible = False
        o3DLinkedSurveys = New cDesignLinkedSurveySelectorPropertyControl
        Call pUIAppendDesign3DPropertyControl(o3DLinkedSurveys, 200)
        o3DDesignSurface = New cDesignSurfaceControl
        Call pUIAppendDesign3DPropertyControl(o3DDesignSurface, 242)
        o3DDesignModel = New cDesign3DModelControl
        Call pUIAppendDesign3DPropertyControl(o3DDesignModel, 544)
        o3DAltitudeAmplification = New cDesign3DElevationFactor
        Call pUIAppendDesign3DPropertyControl(o3DAltitudeAmplification, 32)

        pnlDesignProp.Dock = DockStyle.Fill
        pnlObjectProp.Dock = DockStyle.Fill
        pnl3DProp.Dock = DockStyle.Fill

        '-----------------------------------------------------------------------------------------------
        'cursors...
        oOpenHandCursor = New Cursor(sObjectsPath & "\cursors\openhand.cur")
        oClosedHandCursor = New Cursor(sObjectsPath & "\cursors\closedhand.cur")

        Dim oBindDesignTypeList As List(Of cComboItem(Of cItem.BindDesignTypeEnum)) = New List(Of cComboItem(Of cItem.BindDesignTypeEnum))
        Dim oEditBindDesignTypeCombo As DevExpress.XtraEditors.Repository.RepositoryItemLookUpEdit = btnMainBindDesignType.Edit
        Call oBindDesignTypeList.Add(New cComboItem(Of cItem.BindDesignTypeEnum)(modMain.GetLocalizedString("csurvey.design.item.binddesigntypeenum." & cItem.BindDesignTypeEnum.MainDesign.ToString("D")), cItem.BindDesignTypeEnum.MainDesign))
        Call oBindDesignTypeList.Add(New cComboItem(Of cItem.BindDesignTypeEnum)(modMain.GetLocalizedString("csurvey.design.item.binddesigntypeenum." & cItem.BindDesignTypeEnum.CrossSections.ToString("D")), cItem.BindDesignTypeEnum.CrossSections))
        oEditBindDesignTypeCombo.DataSource = oBindDesignTypeList

        Dim cboSegmentDirectionTypeCombo As DevExpress.XtraEditors.Repository.RepositoryItemImageComboBox = colSegmentsListProfileDirection.ColumnEdit
        cboSegmentDirectionTypeCombo.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Right.ToString("D")), cSurvey.cSurvey.DirectionEnum.Right, 11))
        cboSegmentDirectionTypeCombo.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Left.ToString("D")), cSurvey.cSurvey.DirectionEnum.Left, 10))
        cboSegmentDirectionTypeCombo.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Vertical.ToString("D")), cSurvey.cSurvey.DirectionEnum.Vertical, 12))

        cboSegmentDirection.Properties.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Right.ToString("D")), cSurvey.cSurvey.DirectionEnum.Right, 11))
        cboSegmentDirection.Properties.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Left.ToString("D")), cSurvey.cSurvey.DirectionEnum.Left, 10))
        cboSegmentDirection.Properties.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.directionenum." & cSurvey.cSurvey.DirectionEnum.Vertical.ToString("D")), cSurvey.cSurvey.DirectionEnum.Vertical, 12))

        cboSegmentSurfaceProfileShow.Properties.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.surfaceprofileshowenum." & cISurfaceProfile.SurfaceProfileShowEnum.Default.ToString("D")), cISurfaceProfile.SurfaceProfileShowEnum.Default, 15))
        cboSegmentSurfaceProfileShow.Properties.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.surfaceprofileshowenum." & cISurfaceProfile.SurfaceProfileShowEnum.Visible.ToString("D")), cISurfaceProfile.SurfaceProfileShowEnum.Visible, 13))
        cboSegmentSurfaceProfileShow.Properties.Items.Add(New DevExpress.XtraEditors.Controls.ImageComboBoxItem(modMain.GetLocalizedString("csurvey.surfaceprofileshowenum." & cISurfaceProfile.SurfaceProfileShowEnum.Hidden.ToString("D")), cISurfaceProfile.SurfaceProfileShowEnum.Hidden, 14))

        Dim iIndex As Integer = 0
        Dim iImageIndex As Integer
        For Each sItem In cboTrigpointEntrance.Properties.Items
            Select Case iIndex
                Case 0
                    iImageIndex = -1
                Case 1, 2, 3
                    iImageIndex = 2
                Case 4
                    iImageIndex = 3
            End Select
            cboTrigpointsListEntrance.Items.Add(sItem, [Enum].GetValues(GetType(cTrigPoint.EntranceTypeEnum))(iIndex), iImageIndex)
            iIndex += 1
        Next

        'delegates for wms download 
        Call modWMSManager.WMSSetDelegate(AddressOf pWMSChangeState, AddressOf pWMSDownloadAsyncProgress, AddressOf pWMSDownloadAsyncCompleted, AddressOf pWMSLog)

        'undo
        btnUndo.Enabled = False
        'frmU = New frmUndoManager()

        '3dviewer
        Try
            oHolos = New cHolosViewer
            h3D.Child = oHolos
            pnl3D.Dock = DockStyle.Fill
            h3D.Dock = DockStyle.Fill
            h3D.BringToFront()
            bHolos = True
        Catch ex As Exception
            Call pLogAdd(ex)
            btnView3D.Enabled = False
            btnExport3D.Enabled = False
        End Try

        Call pSurveyDesignToolsLoad()

        Call pnlDesigner.SuspendLayout()
        Dim oPanelSize As Size = pnlDesigner.ClientSize
        oVSB = New DevExpress.XtraEditors.VScrollBar
        oHSB = New DevExpress.XtraEditors.HScrollBar
        oVSB.SmallChange = 1
        oVSB.LargeChange = 25
        oVSB.Anchor = AnchorStyles.Right Or AnchorStyles.Top Or AnchorStyles.Bottom
        oVSB.Location = New Point(oPanelSize.Width - oVSB.Width, 0)
        oVSB.Size = New Size(oVSB.Width, oPanelSize.Height - oHSB.Height)
        pnlDesigner.Controls.Add(oVSB)
        oVSB.SendToBack()
        oHSB.SmallChange = 1
        oHSB.LargeChange = 25
        oHSB.Anchor = AnchorStyles.Left Or AnchorStyles.Right Or AnchorStyles.Bottom
        oHSB.Location = New Point(0, oPanelSize.Height - oHSB.Height)
        oHSB.Size = New Size(oPanelSize.Width - oVSB.Width, oHSB.Height)
        pnlDesigner.Controls.Add(oHSB)
        oHSB.SendToBack()
        picMap.Anchor = AnchorStyles.Left Or AnchorStyles.Top Or AnchorStyles.Right Or AnchorStyles.Bottom
        picMap.Location = New Point(0, 0)
        picMap.Size = New Size(oPanelSize.Width - oVSB.Width, oPanelSize.Height - oHSB.Height)
        Call pnlDesigner.ResumeLayout()

        Call pWorkspacesMenuAndToolbarUpdate()
        Call pFloatingToolbarHide()

        Call picMap.BringToFront()

        For i As Integer = 1 To 60
            Call cboTrigpointCoordinateZone.Properties.Items.Add(i)
        Next
        For i As Integer = Asc("A") To Asc("Z")
            Call cboTrigpointCoordinateBand.Properties.Items.Add(Chr(i))
        Next

        Call pSettingsLoad()

        Call pWorkspacesLoad()

        Call pFirstRun()

        Call pZoomReset()
        '-------------------------------------------

        oMultiSelBrush1 = Nothing
        oMultiSelPen1 = New Pen(SystemColors.Highlight)
        oMultiSelBrush2 = New SolidBrush(Color.FromArgb(50, SystemColors.Highlight))
        oMultiSelPen2 = New Pen(SystemColors.Highlight)
        oMultiSelBrush3 = New SolidBrush(Color.FromArgb(120, SystemColors.Highlight))
        oMultiSelPen3 = New Pen(SystemColors.Highlight)

        bDisableFilterItemEvent = False
        bDisableSelectItemEvent = False
        bDisablePaintEvent = False
        bDisableZoomEvent = False
        bDisableSegmentsChangeEvent = False
        bDisableTrigpointsChangeEvent = False
        bDisabledObjectPropertyEvent = False
        bDisabledCaveBranchChangeEvent = False
        bDisabledAutosaveEvent = False
        '-------------------------------------------
        btnPrint.Enabled = modMain.IsPrintEnabled

        '-------------------------------------------
        'starting timer for selection change
        oDelayedRedrawTimer = New Timer
        oDelayedRedrawTimer.Interval = 150
        oObjectPropertyTimer = New Timer
        oObjectPropertyTimer.Interval = 50

        '-------------------------------------------
        'starting new version check timer
        tmrCheckNewVersion = New Timer
        tmrCheckNewVersion.Interval = 5000
        Call tmrCheckNewVersion.Start()

        '-------------------------------------------
        If modMain.bIsModernOS Then 'AndAlso Not bIsInDebug Then
            Call pJumplistCreate()
        End If
    End Sub

    Private Sub pUIRebindPropertyControlEvents(Control As cUIControlPropertyInteractions)
        AddHandler Control.OnMapInvalidate, AddressOf ObjectProperty_OnMapInvalidate
        AddHandler Control.OnGetFlags, AddressOf ObjectProperty_OnGetFlags
        AddHandler Control.OnSetFlags, AddressOf ObjectProperty_OnSetFlags
        AddHandler Control.OnDrawInvalidate, AddressOf ObjectProperty_OnDrawInvalidate
        AddHandler Control.OnDoCommand, AddressOf ObjectProperty_OnDoCommand
        AddHandler Control.OnObjectPropertyLoad, AddressOf ObjectProperty_OnObjectPropertyLoad
        AddHandler Control.OnPropertyChanged, AddressOf ObjectProperty_OnPropertyChanged

        AddHandler Control.OnCommitUndoSnapshot, AddressOf ObjectProperty_OnCommitUndoSnapshot
        AddHandler Control.OnBeginUndoSnapshot, AddressOf ObjectProperty_OnBeginUndoSnapshot
        AddHandler Control.OnCreateUndoSnapshot, AddressOf ObjectProperty_OnCreateUndoSnapshot
        AddHandler Control.OnCancelUndoSnapshot, AddressOf ObjectProperty_OnCancelUndoSnapshot
    End Sub

    Private Sub pUIAppendItemPointPropertyControl(Control As cItemPointPropertyControl, Height As Integer)
        Call pUIAppendControl(grpObjectProp, Control, Height)
        Call pUIRebindPropertyControlEvents(Control)
    End Sub

    Private Sub pUIAppendControl(ParentControl As DevExpress.XtraLayout.LayoutControlGroup, ChildControl As ContainerControl, Optional Height As Integer = 0)
        Dim oItem As DevExpress.XtraLayout.LayoutControlItem = New DevExpress.XtraLayout.LayoutControlItem
        oItem.TextVisible = False
        oItem.Padding = New DevExpress.XtraLayout.Utils.Padding(0)
        oItem.Control = ChildControl
        oItem.ControlMaxSize = New Size(0, Height)
        oItem.ControlMinSize = New Size(0, Height)
        oItem.SizeConstraintsType = DevExpress.XtraLayout.SizeConstraintsType.Custom
        Call ParentControl.Add(oItem)
    End Sub

    Private Sub pUIAppendControl(ParentControl As Control, ChildControl As ContainerControl, Optional Height As Integer = 0)
        Call ParentControl.Controls.Add(ChildControl)
        If Height > 0 Then
            ChildControl.Height = Height * ChildControl.CurrentAutoScaleDimensions.Height / 96.0F
        End If
        ChildControl.Dock = DockStyle.Top
        'ChildControl.BringToFront()
    End Sub

    Private Sub pUIAppendItemPropertyControl(Control As cItemPropertyControl, Height As Integer)
        Call pUIAppendControl(grpObjectProp, Control, Height)
        Call pUIRebindPropertyControlEvents(Control)
    End Sub

    Private Sub pUIAppendDesign3DPropertyControl(Control As cDesignPropertyControl, Height As Integer)
        Call pUIAppendControl(grp3DProp, Control, Height)
        Call pUIRebindPropertyControlEvents(Control)
    End Sub

    Private Sub pUIAppendDesignPropertyControl(Control As cDesignPropertyControl, Height As Integer)
        Call pUIAppendControl(grpDesignProp, Control, Height)
        Call pUIRebindPropertyControlEvents(Control)
    End Sub

    Private Sub pAutoSettings()
        Using frmAS As frmAutoSettings = New frmAutoSettings
            If frmAS.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pSettingsLoad()
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub pSurveyManageVisibility()
        Using frmCVM As frmCaveVisibilityManager = New frmCaveVisibilityManager(oSurvey, oSurvey.Properties.CaveVisibilityProfiles, oCurrentOptions.CurrentCaveVisibilityProfile)
            AddHandler frmCVM.OnChangeVisibility, AddressOf frmCVM_OnChangeVisibility
            If frmCVM.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pMapInvalidate()
            End If
            RemoveHandler frmCVM.OnChangeVisibility, AddressOf frmCVM_OnChangeVisibility
        End Using
    End Sub

    Private Sub frmCVM_OnChangeVisibility(Sender As Object, CaveVisibilityProfiles As cSurvey.cCaveVisibilityProfiles, CurrentProfile As String)
        'qua permetto di cambiare i profili ma non di applicarli al designer...i profile servono solo in stampa/esportazione.
        Call oSurvey.Properties.CaveVisibilityProfiles.CopyFrom(CaveVisibilityProfiles)
    End Sub

    'Private Sub frmU_OnUndoRequest(ByVal Sender As frmUndoManager, ByVal e As Object) Handles frmU.OnUndoRequest
    '    Call pSurveyUndo()
    'End Sub

    'Private Sub pListviewInfoCopy(ListViewItems As IEnumerable, OnlyValues As Boolean)
    '    Try
    '        Dim sText As String = ""
    '        For Each oItem As ListViewItem In ListViewItems
    '            If OnlyValues Then
    '                If sText <> "" Then sText = sText & vbCrLf
    '                sText = sText & oItem.SubItems(1).Text
    '            Else
    '                If sText <> "" Then sText = sText & vbCrLf
    '                sText = sText & oItem.Text & vbTab & oItem.SubItems(1).Text
    '            End If
    '        Next
    '        Call My.Computer.Clipboard.SetText(sText)
    '    Catch ex As Exception
    '        Call pLogAdd(ex)
    '    End Try
    'End Sub

    Private Sub pSegmentMove(Segment As cSegment, NewIndex As Integer)
        Call grdSegments.BeginUpdate()
        Call oSurvey.Segments.MoveTo(NewIndex, Segment)
        Call grdSegments.EndUpdate()
        'Call pSurveySegmentsRefresh()
    End Sub

    Private Sub pnlSegment_Enter(ByVal sender As Object, ByVal e As System.EventArgs) Handles pnlSegment.Enter
        bSegmentChanged = True
    End Sub

    Private Sub pnlSegment_Leave(sender As System.Object, e As System.EventArgs) Handles pnlSegment.Leave
        Call pSegmentSave(oTools.CurrentSegment)
    End Sub

    Private Sub pnlTrigPoint_Enter(sender As Object, e As System.EventArgs) Handles pnlTrigPoint.Enter
        bTrigpointChanged = True
    End Sub

    Private Sub pnlTrigPoint_Leave(sender As System.Object, e As System.EventArgs) Handles pnlTrigPoint.Leave
        Call pTrigPointSave(oTools.CurrentTrigpoint)
    End Sub

    Private Sub cMessagebar_OnCloseRequest(sender As System.Object, e As System.EventArgs) Handles cMainMessageBar.OnCloseRequest
        Call pPopupHide()
    End Sub

    Private Sub pSurveySurface()
        Call pSurveyProperty(13)
    End Sub

    Private Sub oSurvey_OnSurfaceChanged(Sender As Object, Args As cSurvey.cSurvey.OnSurfaceChangedEventArgs) Handles oSurvey.OnSurfaceChanged
        If Not bDisabledSurfaceEvent Then
            Call modWMSManager.WMSDownloadFileReset()
            Call pSurveyCalculate(False)
            Call pObjectPropertyLoad()
        End If
    End Sub

    Private Sub chkSegmentExclude_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentExclude.CheckedChanged
        If Not bDisableSegmentsChangeEvent Then
            If Not chkSegmentExclude.Checked Then
                chkSegmentCalibration.Checked = False
                chkSegmentDuplicate.Checked = False
                chkSegmentSplay.Checked = False
                chkSegmentSurface.Checked = False
                chkSegmentCutSplay.Checked = False
            End If
            Call pSegmentCheckFlags()
        End If
    End Sub

    Private Sub pSegmentCheckFlags()
        If Not bDisableSegmentsChangeEvent Then
            chkSegmentCutSplay.Checked = chkSegmentCutSplay.Checked And Not chkSegmentZSurvey.Checked
            chkSegmentSplay.Checked = (chkSegmentSplay.Checked OrElse chkSegmentCutSplay.Checked) And Not chkSegmentZSurvey.Checked
            chkSegmentExclude.Checked = (chkSegmentExclude.Checked OrElse chkSegmentCalibration.Checked OrElse chkSegmentDuplicate.Checked OrElse chkSegmentSplay.Checked OrElse chkSegmentSurface.Checked) And Not chkSegmentZSurvey.Checked
        End If
        chkSegmentUnbindable.Enabled = Not chkSegmentSplay.Checked
        chkSegmentVirtual.Enabled = Not chkSegmentSplay.Checked
        chkSegmentZSurvey.Enabled = Not chkSegmentSplay.Checked
        chkSegmentExclude.Enabled = Not chkSegmentZSurvey.Checked
        chkSegmentSplay.Enabled = chkSegmentExclude.Enabled
        chkSegmentCutSplay.Enabled = chkSegmentExclude.Enabled

        cboSegmentSessionList.Enabled = Not chkSegmentVirtual.Checked
        pnlSegmentCaveBranches.Enabled = Not chkSegmentCalibration.Checked
    End Sub

    Private Sub chkSegmentSplay_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentSplay.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentDuplicate_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentDuplicate.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentSurface_CheckedChanged(sender As System.Object, e As System.EventArgs) Handles chkSegmentSurface.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentCutSplay_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentCutSplay.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub chkSegmentZSurvey_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentZSurvey.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    'Private Function pDesignItemFindCreateButton()
    '    For Each oItem As BarItemLink In grpDesignItemsAdd.ItemLinks
    '        If TypeOf oItem.Item.Tag Is cEditToolsBag Then
    '            Dim oBag As cEditToolsBag = oItem.Item.Tag
    '            oItem.Item.Visibility = modControls.VisibleToVisibility(oBag.AvaiableInProfile)
    '        Else
    '            oItem.Item.Visibility = True
    '        End If
    '    Next
    'End Function

    Private Sub btnMapDropAttachment_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropAttachment.ItemClick
        Dim oBag As cEditToolsBag = RibbonControl.Items.FindByName("btnItemsAdd_btnDesignTools_Signs_Attachment").Tag
        Call pDesignTools_CreateItem(oBag, False, Nothing, mnuMapDrop.Tag)
    End Sub

    Private Sub btnMapDropGenericText_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropGenericText.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, mnuMapDrop.Tag, 6, True)
    End Sub

    Private Sub btnMapDropPocketTopo_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropPocketTopo.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, mnuMapDrop.Tag, 3, True)
    End Sub

    Private Sub btnMapDropCaveExplorer_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropCaveExplorer.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, mnuMapDrop.Tag, 5, True)
    End Sub

    Private Sub btnMapDropImage_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropImage.ItemClick
        Dim oBag As cEditToolsBag = RibbonControl.Items.FindByName("btnItemsAdd_btnDesignTools_Base_Image").Tag
        Call pDesignTools_CreateItem(oBag, False, Nothing, mnuMapDrop.Tag)
    End Sub

    Private Sub btnMapDropSketch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnMapDropSketch.ItemClick
        Dim oBag As cEditToolsBag = RibbonControl.Items.FindByName("btnItemsAdd_btnDesignTools_Base_Sketch").Tag
        Call pDesignTools_CreateItem(oBag, False, Nothing, mnuMapDrop.Tag)
    End Sub

    Private Sub grdSegments_DragOver(sender As Object, e As System.Windows.Forms.DragEventArgs) Handles grdSegments.DragOver
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                If (pDropExtensionCheck(sFilePaths(0)) And DropActionEnum.ImportData) = DropActionEnum.ImportData Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            Else
                e.Effect = DragDropEffects.None
            End If
        Else
            e.Effect = DragDropEffects.None
        End If
    End Sub

    Private Sub grdSegments_DragDrop(sender As Object, e As System.Windows.Forms.DragEventArgs) Handles grdSegments.DragDrop
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Select Case pDropExtensionCheck(sFilePaths(0))
                    Case DropActionEnum.ImportTextData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 4, True)

                    Case DropActionEnum.ImportVTopoData
                        Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 1, True)
                    Case DropActionEnum.ImportcSurveyData
                        If pSurveyIsEmpty() Then
                            Call pSurveyLoad(sFilePaths(0), False)
                        Else
                            Call pSurveyImport(ImportExportFormatEnum.Survey, sFilePaths(0), 2, True)
                        End If

                End Select
            End If
        End If
    End Sub

    Private Sub pPopupsHide()
        'If Not frmCP Is Nothing Then If Not frmCP.IsDisposed Then frmCP.Hide()
        'If Not frmTP Is Nothing Then If Not frmTP.IsDisposed Then Call frmTP.Hide()
        'If Not frmF Is Nothing Then If Not frmF.IsDisposed Then Call frmF.Close()
        'If Not frmThP Is Nothing Then If Not frmThP.IsDisposed Then Call frmThP.Close()
        If Not frmV Is Nothing Then If Not frmV.IsDisposed Then Call frmV.Close()
        'If Not frmJ Is Nothing Then If Not frmJ.IsDisposed Then Call frmJ.Hide()
        'If Not frmU Is Nothing Then If Not frmU.IsDisposed Then Call frmU.Close()
    End Sub

    Private Sub pTrayHideIn()
        Call pPopupsHide()
        Call Hide()

        btnShow.Visibility = BarItemVisibility.Always
        btnHide.Visibility = BarItemVisibility.Never

        ntiMain.Visible = True
        Dim sCaption As String = "cSurvey - " & If(oSurvey.Name <> "", oSurvey.Name, "[" & sFilename & "]")
        If sCaption.Length > 64 Then sCaption = sCaption.Substring(0, 64)
        ntiMain.Text = sCaption
    End Sub

    Private Sub pTrayShowFrom()
        btnShow.Visibility = BarItemVisibility.Never
        btnHide.Visibility = BarItemVisibility.Always

        Call Show()

        ntiMain.Visible = False
    End Sub

    'Private Sub mnnuTrayShowHide_Click(sender As System.Object, e As System.EventArgs)
    '    If Visible Then
    '        Call pTrayHideIn()
    '    Else
    '        Call pTrayShowFrom()
    '    End If
    'End Sub

    'Private Sub mnuFileHideInTray_Click(sender As System.Object, e As System.EventArgs)
    '    Call pTrayHideIn()
    'End Sub

    Private Sub ntiMain_MouseDoubleClick(sender As System.Object, e As System.Windows.Forms.MouseEventArgs) Handles ntiMain.MouseDoubleClick
        Call pTrayShowFrom()
    End Sub

    Private Sub pResurvey(Optional Filename As String = "")
        Using frmRM As frmResurveyMain = New frmResurveyMain(True, Filename)
            If frmRM.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Using frmIR As frmImportResurvey = New frmImportResurvey
                    If frmIR.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                        Dim sForcedCaveName As String = frmIR.txtCaveName.Text
                        Dim sPrefix As String = frmIR.txtPrefix.Text.Trim
                        Dim iNordType As cSegment.NordTypeEnum = frmIR.cboNordType.SelectedIndex

                        bDisableSegmentsChangeEvent = True
                        bDisableTrigpointsChangeEvent = True

                        Dim sCaveName As String = sForcedCaveName
                        Dim sCaveBranchName As String = ""

                        If Not oSurvey.Properties.CaveInfos.Contains(sCaveName) Then
                            Call oSurvey.Properties.CaveInfos.Add(sCaveName)
                        End If

                        Dim oSession As cSession = oSurvey.Properties.Sessions.Add(Date.Today, oSurvey.Properties.Sessions.GetUniqueID(Date.Today, GetLocalizedString("main.defaultresurveysessionname")))
                        If frmRM.Options.LRUDStation = cResurvey.cOptions.LRUDStationEnum.FromStation Then
                            oSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.StartPoint
                            oSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToNext
                        Else
                            oSession.SideMeasuresReferTo = cSegment.SideMeasuresReferToEnum.EndPoint
                            oSession.SideMeasuresType = cSegment.SideMeasuresTypeEnum.PerpendicularToPrevious
                        End If
                        oSession.NordType = iNordType

                        For Each oShot As cResurvey.cShot In frmRM.Shots
                            Dim oSegment As cSegment = oSurvey.Segments.Append()
                            Call oSegment.SetCave(sCaveName, sCaveBranchName)
                            Call oSegment.SetSession(oSession)

                            oSegment.From = sPrefix & oShot.[From]
                            oSegment.To = sPrefix & oShot.[To]
                            oSegment.Distance = oShot.Distance
                            oSegment.Bearing = oShot.Bearing
                            oSegment.Inclination = oShot.Inclination

                            If frmRM.Options.LRUDStation = cResurvey.cOptions.LRUDStationEnum.FromStation OrElse frmRM.Options.LRUDStation = cResurvey.cOptions.LRUDStationEnum.ToStation Then
                                oSegment.Left = oShot.GetLeft
                                oSegment.Right = oShot.GetRight
                                oSegment.Up = oShot.GetUp
                                oSegment.Down = oShot.GetDown
                            End If

                            oSegment.Note = ""

                            oSegment.Direction = cSurvey.cSurvey.DirectionEnum.Right
                            oSegment.Exclude = False

                            Call oSegment.Save()
                        Next

                        If oSurvey.Properties.Origin = "" Then
                            oSurvey.Properties.Origin = sPrefix & frmRM.GetOrigin
                        End If

                        bDisableSegmentsChangeEvent = False
                        bDisableTrigpointsChangeEvent = False

                        Call pStatusProgress(0, GetLocalizedString("main.progressend2"))
                        Call oMousePointer.Pop()

                        Call pSurveyFillSessionList(False)
                        Call pSurveyFillCaveList(False)

                        Call pSurveyCaption()
                        Call pSurveySegmentsRefresh()
                        Call pSurveyTrigpointsRefresh()

                        Call pMapInvalidate()
                    End If
                End Using
            End If
        End Using
    End Sub

    Private Sub txtSegmentBearing_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentBearing.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListBearing)
    End Sub

    Private Sub txtSegmentDistance_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentDistance.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListDistance)
    End Sub

    Private Sub txtSegmentInclination_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentInclination.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListInclination)
    End Sub

    Private Sub txtSegmentLeft_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentLeft.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListL)
    End Sub

    Private Sub txtSegmentRight_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentRight.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListR)
    End Sub

    Private Sub txtSegmentUp_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentUp.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListU)
    End Sub

    Private Sub txtSegmentDown_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentDown.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListD)
    End Sub

    Private Sub txtSegmentFrom_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentFrom.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListFrom)
    End Sub

    Private Sub txtSegmentTo_Validated(sender As Object, e As System.EventArgs) Handles txtSegmentTo.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListTo)
    End Sub

    Private Sub chkSegmentExclude_Validated(sender As Object, e As System.EventArgs) Handles chkSegmentExclude.Validated
        Call grdViewSegments.RefreshRowCell(grdViewSegments.FocusedRowHandle, colSegmentsListExclude)
    End Sub

    Private Sub picMap_Resize(sender As Object, e As System.EventArgs) Handles picMap.Resize
        Call picMap.Invalidate()
    End Sub

    Private Sub pScriptShow()
        Call pDockContentShow(dockScript, True)
    End Sub

    Private Sub pTextsShow()
        Call pDockContentShow(dockTexts, True)
    End Sub

    Private Sub pBrushesAndPensShow()
        Call pDockContentShow(dockBrushesAndPens, True)
    End Sub

    Private Sub pDistancesShow()
        Call pDockContentShow(dockDistances, True)
    End Sub

    Private Sub pLinkedSurveyShow()
        Call pDockContentShow(dockLS, True)
    End Sub

    Private Sub pImageViewerShow(Attachment As cAttachmentsLink)
        Call oDockIV.Open(Attachment)
        Call pDockContentShow(dockIV, True)
    End Sub

    Private Sub pImageViewerShow(Item As cItem)
        Call oDockIV.Open(Item)
        Call pDockContentShow(dockIV, True)
    End Sub

    Private Sub pSegmentSetCaveBranchToCurrent()
        Dim oSegment As cSegment = oTools.CurrentSegment
        If Not oSegment Is Nothing Then
            cboSegmentCaveList.EditValue = btnMainCaveList.EditValue
            cboSegmentCaveBranchList.EditValue = btnMainCaveBranchList.EditValue
            Call pSegmentSave(oSegment)
            Call pPropertyItemSegment()
        End If
    End Sub

    Private Sub pMapCenterAndFitSelection()
        If Not pGetCurrentDesignTools.CurrentItem Is Nothing Then
            Call pMapCenterAndFit(pGetCurrentDesignTools.CurrentItem.GetBounds)
        End If
    End Sub

    Private Sub picMap_GotFocus(sender As Object, e As System.EventArgs) Handles picMap.GotFocus
        Call oClipboardViewer_ClipboardChanged(Nothing, Nothing)
    End Sub

    Private bPicMapPreventChangeFocus As Boolean

    Private Sub picMap_PreviewKeyDown(sender As Object, e As System.Windows.Forms.PreviewKeyDownEventArgs) Handles picMap.PreviewKeyDown
        Dim bHandled As Boolean
        Dim sStep As Single
        Select Case e.KeyCode
            Case Keys.B
                If e.Control AndAlso e.Alt Then
                    bDisabledObjectPropertyEvent = False
                    Call pObjectPropertyLoad()
                End If
            'Case Keys.Q
            '    btnSnapToPointNone.Down = True
            'Case Keys.A
            '    btnSnapToPoint0.Down = True
            'Case Keys.S
            '    btnSnapToPoint1.Down = True
            'Case Keys.D
            '    btnSnapToPoint2.Down = True

            Case Keys.Oemplus
                With pGetCurrentDesignTools()
                    If .IsInPointEdit Then
                        Call pItemAddPoint()
                    End If
                End With
            Case Keys.Right
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = 5
                        Else
                            sStep = 1
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeRotated Then
                                    Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo20"))
                                    Call .CurrentItem.Rotate(sStep)
                                    Call .CommitUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo21"))
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(sStep, 0)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(sStep, 0)
                                End If
                            End If
                            Call .CommitUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Down
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = 1 / 1.1
                        Else
                            sStep = 1 / 1.05
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeResized Then
                                    Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo20"))
                                    Call .CurrentItem.ResizeBy(sStep, sStep)
                                    Call .CommitUndoSnapshot()
                                ElseIf .CurrentItem.HaveSign Then
                                    'DirectCast(.CurrentItem,cIItemSign ).SignSize =
                                    'Call .TakeUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo21"))
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(0, sStep)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(0, sStep)
                                End If
                            End If
                            Call .CommitUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Up
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = 1.1
                        Else
                            sStep = 1.05
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeResized Then
                                    Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo20"))
                                    Call .CurrentItem.ResizeBy(sStep, sStep)
                                    Call .CommitUndoSnapshot()
                                ElseIf .CurrentItem.HaveSign Then
                                    'DirectCast(.CurrentItem,cIItemSign ).SignSize =
                                    'Call .TakeUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo21"))
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(0, -sStep)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(0, -sStep)
                                End If
                            End If
                            Call .CommitUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Left
                Try
                    If e.Control Then
                        If e.Shift Then
                            sStep = -5
                        Else
                            sStep = -1
                        End If
                        With pGetCurrentDesignTools()
                            If .IsInPointEdit Then
                                'per ora...nulla
                            Else
                                If .CurrentItem.CanBeRotated Then
                                    Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo20"))
                                    Call .CurrentItem.Rotate(sStep)
                                    Call .CommitUndoSnapshot()
                                End If
                            End If
                        End With
                    Else
                        If e.Shift Then
                            sStep = 1
                        Else
                            sStep = 0.01
                        End If
                        With pGetCurrentDesignTools()
                            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo21"))
                            If .IsInPointEdit Then
                                Call .CurrentItemPoint.MoveBy(-sStep, 0)
                            Else
                                If .CurrentItem.CanBeMoved Then
                                    Call .CurrentItem.MoveBy(-sStep, 0)
                                End If
                            End If
                            Call .CommitUndoSnapshot()
                        End With
                    End If
                    Call pObjectPropertyDelayedLoad()
                    Call pMapInvalidate()
                Catch ex As Exception
                    Call pLogAdd(ex)
                End Try
                bHandled = True
                bPicMapPreventChangeFocus = True
            Case Keys.Tab
                If e.Shift Then
                    Call pDesignSelectPrev()
                Else
                    Call pDesignSelectNext()
                End If
            Case Keys.Escape
                Call modWMSManager.WMSDownloadFileCancelAsync()
        End Select
        'If bHandled Then
        '    'e.SuppressKeyPress = True
        '    'e.Handled = True
        'End If
    End Sub

    Private Delegate Sub pWMSChangeStateDelegate(Args As modWMSManager.cWMSStateChangeArgs)

    Private Sub pWMSChangeState(Args As modWMSManager.cWMSStateChangeArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSChangeStateDelegate(AddressOf pWMSChangeState), oArgs)
        Else
            Call pSurveyMainPropertiesPanelsRefresh()
        End If
    End Sub

    Private Delegate Sub pWMSDownloadAsyncProgressDelegate(Args As modWMSManager.cWMSDownloadAsyncProgressArgs)

    Private Sub pWMSDownloadAsyncProgress(Args As modWMSManager.cWMSDownloadAsyncProgressArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSDownloadAsyncProgressDelegate(AddressOf pWMSDownloadAsyncProgress), oArgs)
        Else
            Call pStatusProgress(Args.Percentage, String.Format(modMain.GetLocalizedString("main.textpart83"), Args.WMSName))
        End If
    End Sub

    Private Delegate Sub pWMSLogDelegate(Args As modWMSManager.cWMSLogArgs)

    Private Sub pWMSLog(Args As modWMSManager.cWMSLogArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSLogDelegate(AddressOf pWMSLog), oArgs)
        Else
            Call pLogAdd(Args.Type, Args.Text)
        End If
    End Sub

    Private Delegate Sub pWMSDownloadAsyncCompletedDelegate(Args As modWMSManager.cWMSDownloadAsyncCompletedArgs)

    Private Sub pWMSDownloadAsyncCompleted(Args As modWMSManager.cWMSDownloadAsyncCompletedArgs)
        If InvokeRequired Then
            Dim oArgs(0) As Object
            oArgs(0) = Args
            Call Me.BeginInvoke(New pWMSDownloadAsyncCompletedDelegate(AddressOf pWMSDownloadAsyncCompleted), oArgs)
        Else
            If Args.Cancelled Then
                Call pStatusProgress(1, modMain.GetLocalizedString("main.textpart84"))
            Else
                Call pStatusProgress(1, modMain.GetLocalizedString("main.textpart85"))
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                    Call p3DInvalidate(cHolosViewer.InvalidateType.SurfaceTexture)
                Else
                    Call pMapInvalidate()
                End If
            End If
        End If
    End Sub

    Private Function pSegmentsIsProfileBinded(Segments As cSegmentCollection) As Boolean
        For Each oSegment As cSegment In Segments
            If oSegment.IsProfileBinded Then Return True
        Next
        Return False
    End Function

    Private Function pSegmentsIsPlanBinded(Segments As cSegmentCollection) As Boolean
        For Each oSegment As cSegment In Segments
            If oSegment.IsPlanBinded Then Return True
        Next
        Return False
    End Function

    Private Sub pDesignSnapToGrid(SnapToGrid As Boolean)
        btnAlignToGrid.Checked = SnapToGrid
        btnAlignToGridSize.Enabled = SnapToGrid
        If SnapToGrid Then
            pnlStatusDesignSnapToGrid.ImageOptions.SvgImage = My.Resources.snap_to_grid
        Else
            pnlStatusDesignSnapToGrid.ImageOptions.SvgImage = Nothing
        End If
    End Sub

    Private Sub pItemHorizontalAlign(Alignment As cItemItems.HorizontalAlignmentEnum)
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo22"))
            Dim oItems As cItemItems = .CurrentItem
            Call oItems.HorizontalAlign(Alignment)
            Call .CommitUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub pItemVerticalAlign(Alignment As cItemItems.VerticalAlignmentEnum)
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo22"))
            Dim oItems As cItemItems = .CurrentItem
            Call oItems.VerticalAlign(Alignment)
            Call .CommitUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub picMap_Validating(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles picMap.Validating
        e.Cancel = bPicMapPreventChangeFocus
        bPicMapPreventChangeFocus = False
    End Sub

    Private Sub pItemSpaceH()
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo23"))
            Dim oItems As cItemItems = .CurrentItem
            If My.Computer.Keyboard.ShiftKeyDown Then
                Call oItems.HorizontalSpace(cItemItems.SpaceEnum.ToMaximum)
            Else
                Call oItems.HorizontalSpace(cItemItems.SpaceEnum.ToMinimum)
            End If
            Call .CommitUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub pItemSpaceV()
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot(modMain.GetLocalizedString("main.undo23"))
            Dim oItems As cItemItems = .CurrentItem
            If My.Computer.Keyboard.ShiftKeyDown Then
                Call oItems.VerticalSpace(cItemItems.SpaceEnum.ToMaximum)
            Else
                Call oItems.VerticalSpace(cItemItems.SpaceEnum.ToMinimum)
            End If
            Call .CommitUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub pPropPopupHide()
        Call oPropMessageBar.Hide()
    End Sub

    Private Sub pPropPopupShow(ByVal Type As String, ByVal Text As String)
        Call oPropMessageBar.PopupShow(Type, Text)
    End Sub

    Private Sub pClipboardSelectAll()
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pStatusSet(GetLocalizedString("main.textpart1"))
        Select Case pGetCurrentContext()
            Case cContextEnum.Segments
                Call grdViewSegments.SelectAll()
                Call pStatusSet(GetLocalizedString("main.textpart2"))
            Case cContextEnum.Trigpoints
                Call grdViewTrigpoints.SelectAll()
                Call pStatusSet(GetLocalizedString("main.textpart2"))
            Case cContextEnum.DesignPlan, cContextEnum.DesignProfile
                Dim oItems As List(Of cItem) = pGetCurrentDesignTools.CurrentLayer.GetAllVisibleItems(oCurrentOptions, pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch)
                If oItems.Count <> 0 Then
                    Dim oItemItems As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                    Call oItemItems.AddRange(oItems)
                    Call pGetCurrentDesignTools.SelectItem(oItemItems)
                    Call pMapCenterAndFitSelection()
                    Call pStatusSet(GetLocalizedString("main.textpart2"))
                Else
                    Call pStatusSet(GetLocalizedString("main.textpart3"))
                End If
        End Select
        Call oMousePointer.Pop()
    End Sub

    Private Sub oSurvey_OnWarpingDetails(Sender As Object, Args As cSurvey.cSurvey.OnWarpingDetailsEventArgs) Handles oSurvey.OnWarpingDetails
        If bDisablewarpingDetails Then
            Args.Result = DialogResult.OK
        Else
            Using frmWD As frmWarpingDetails = New frmWarpingDetails(Args.SegmentsToProcess, Args.DesignType)
                Args.Result = frmWD.ShowDialog(Me)
                oSurvey.Properties.ShowWarpingDetails = Not frmWD.chkDontShowWarpingDetails.Checked
            End Using
        End If
    End Sub


    Private Sub oSurvey_OnCleanUpFoundUndefinedCavesEvent(Sender As Object, Args As cSurvey.cSurvey.OnCleanUpFoundUndefinedCavesEventArgs) Handles oSurvey.OnCleanUpFoundUndefinedCavesEvent
        Using frmSCUUC As frmSurveyCleanUpUndefinedCaves = New frmSurveyCleanUpUndefinedCaves(oSurvey, Args.Source, Args.ListOfUndefinedCaves)
            If Not frmSCUUC.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Args.Cancel = True
            End If
        End Using
    End Sub

    Private Sub pPointSequencesTo(NewLineType As cIItemLine.LineTypeEnum)
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oSequence As cSequence = oPoint.GetSequence
            If Not oSequence Is Nothing Then
                Dim oNewSequence As cSequence = Nothing
                Select Case NewLineType
                    Case cIItemLine.LineTypeEnum.Splines
                        oNewSequence = oSequence.ToSpline()
                    Case cIItemLine.LineTypeEnum.Lines
                        oNewSequence = oSequence.ToLine()
                    Case cIItemLine.LineTypeEnum.Beziers
                        oNewSequence = oSequence.ToBezier()
                    Case Else

                End Select
                If Not oNewSequence Is Nothing Then
                    Call .SelectPoint(Nothing)
                End If
            End If
        End With
    End Sub

    'used in designer when in bezier mode and for line type conversion...
    Private Sub pSequencesTo(NewLineType As cIItemLine.LineTypeEnum, AlsoCustomized As Boolean)
        With pGetCurrentDesignTools()
            Dim oItem As cItem = .CurrentItem
            Dim iItemLineType As cIItemLine.LineTypeEnum = DirectCast(oItem, cIItemLine).LineType
            Dim oNewSequences As List(Of cSequence) = New List(Of cSequence)
            For Each oSequence As cSequence In oItem.Points.GetSequences
                If oSequence.GetLineType(iItemLineType) = NewLineType Then
                    Call oNewSequences.Add(oSequence)
                Else
                    If (oSequence.GetLineType(iItemLineType) = iItemLineType) OrElse (AlsoCustomized AndAlso oSequence.GetLineType(iItemLineType) <> iItemLineType) Then
                        Dim oNewSequence As cSequence = Nothing
                        Select Case NewLineType
                            Case cIItemLine.LineTypeEnum.Lines
                                oNewSequence = modPaint.ToStraightLine(oSurvey, oSequence, iItemLineType)
                            Case cIItemLine.LineTypeEnum.Splines
                                oNewSequence = modPaint.ToSpline(oSurvey, oSequence, iItemLineType)
                            Case cIItemLine.LineTypeEnum.Beziers
                                oNewSequence = modPaint.ToBezier(oSurvey, oSequence, iItemLineType)
                        End Select
                        If Not oNewSequence Is Nothing Then
                            Call oNewSequences.Add(oNewSequence)
                        End If
                    Else
                        Call oNewSequences.Add(oSequence)
                    End If
                End If
            Next
            Call oItem.Points.BeginUpdate()
            Call oItem.Points.Clear()
            For Each oNewSequence As cSequence In oNewSequences
                Call oItem.Points.AddRange(oNewSequence)
            Next
            DirectCast(oItem, cIItemLine).LineType = NewLineType
            Call oItem.Points.EndUpdate()
        End With
    End Sub

    Private Sub frmProg_Disposed(sender As Object, e As EventArgs) Handles frmProg.Disposed
        frmProg = Nothing
    End Sub

    Private Sub frmProg_FormClosed(sender As Object, e As FormClosedEventArgs) Handles frmProg.FormClosed
        frmProg = Nothing
    End Sub

    Private Sub cboTrigpointCoordinateGeo_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboTrigpointCoordinateGeo.SelectedIndexChanged
        Select Case cboTrigpointCoordinateGeo.SelectedIndex
            Case 0
                pnlTrigpointCoordinateWGS84.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always
                pnlTrigpointCoordinateUTM.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never
                If Not bDisableTrigpointsChangeEvent Then
                    Dim oCoordinate As cCoordinate = New cCoordinate(txtTrigpointCoordinateX.Text, txtTrigpointCoordinateY.Text, cboTrigpointCoordinateBand.Text, cboTrigpointCoordinateZone.Text, txtTrigpointCoordinateAlt.Text)
                    Call oCoordinate.Convert("WGS84", oSurvey.Properties.GPS.Format)
                    txtTrigpointCoordinateLat.Text = oCoordinate.Latitude
                    txtTrigpointCoordinateLong.Text = oCoordinate.Longitude
                    cboTrigpointCoordinateFormat.Text = oCoordinate.Format
                    txtTrigpointCoordinateAlt.Text = oCoordinate.Altitude
                End If
            Case Else
                pnlTrigpointCoordinateWGS84.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Never
                pnlTrigpointCoordinateUTM.Visibility = DevExpress.XtraLayout.Utils.LayoutVisibility.Always
                If Not bDisableTrigpointsChangeEvent Then
                    Dim oCoordinate As cCoordinate = New cCoordinate(txtTrigpointCoordinateLat.Text, txtTrigpointCoordinateLong.Text, txtTrigpointCoordinateAlt.Text, cboTrigpointCoordinateFormat.Text)
                    Call oCoordinate.Convert("WGS84/UTM")
                    txtTrigpointCoordinateX.Text = oCoordinate.X
                    txtTrigpointCoordinateY.Text = oCoordinate.Y
                    cboTrigpointCoordinateBand.Text = oCoordinate.Band
                    cboTrigpointCoordinateZone.Text = oCoordinate.Zone
                    txtTrigpointCoordinateAlt.Text = oCoordinate.Altitude
                End If
        End Select
    End Sub

    Private Sub pSurveyLayersFilterEdit()
        Using frmF As frmItemsFilter = New frmItemsFilter(oSurvey, pGetCurrentDesignTools.Filter)
            AddHandler frmF.OnApply, AddressOf frmItemsFilter_OnApply
            Call frmF.ShowDialog(Me)
        End Using
    End Sub

    Private Sub pSurveyLayersFilterApply(Optional FullRefresh As Boolean = True, Optional RefreshTreeLayers As Boolean = True)
        If Not bDisableFilterItemEvent Then
            bDisableFilterItemEvent = True
            Dim oDesignTools As cEditDesignTools = pGetCurrentDesignTools()
            If oDesignTools.IsFiltered Then
                If Not btnFilterFiltered.Checked Then btnFilterFiltered.Checked = True
                If btnFilterWhiteboard.Checked <> oDesignTools.FilterWhiteBoard Then btnFilterWhiteboard.Checked = oDesignTools.FilterWhiteBoard
                btnFilterWhiteboard.Enabled = btnFilterFiltered.Checked
                If btnFilterWhiteboard.Checked <> oDesignTools.FilterWhiteBoard Then btnFilterWhiteboard.Checked = oDesignTools.FilterWhiteBoard
                btnFilterWhiteboard.Enabled = btnFilterFiltered.Checked
                If btnFilterInvertFilter.Checked <> oDesignTools.FilterReversed Then btnFilterInvertFilter.Checked = oDesignTools.FilterReversed
                btnFilterInvertFilter.Enabled = btnFilterFiltered.Checked
                If FullRefresh Then
                    Call oMousePointer.Push(Cursors.WaitCursor)
                    Threading.Tasks.Parallel.ForEach(Of cItem)(oCurrentDesign.GetAllItems, Sub(oItem)
                                                                                               oItem.FilteredInDesign = oDesignTools.Filter.Apply(oItem)
                                                                                           End Sub)
                    Call oMousePointer.Pop()
                End If
            Else
                If btnFilterFiltered.Checked Then btnFilterFiltered.Checked = False
                If btnFilterWhiteboard.Checked Then btnFilterWhiteboard.Checked = False
                btnFilterWhiteboard.Enabled = False
                btnFilterInvertFilter.Enabled = False
                If FullRefresh Then
                    Call oMousePointer.Push(Cursors.WaitCursor)
                    Threading.Tasks.Parallel.ForEach(Of cItem)(oCurrentDesign.GetAllItems, Sub(oItem)
                                                                                               oItem.FilteredInDesign = False
                                                                                           End Sub)
                    'Dim oItems As List(Of cItem) = oCurrentDesign.GetAllItems
                    'For Each oItem As cItem In oItems
                    '    oItem.FilteredInDesign = False
                    'Next
                    Call oMousePointer.Pop()
                End If
            End If
            If RefreshTreeLayers Then
                If Not oFrozenDesktop Is Nothing Then Call pFrozeDesktopImage()
                Call pMapInvalidate()
            End If
            bDisableFilterItemEvent = False
        End If
    End Sub

    Private Sub frmItemsFilter_OnApply(ByVal Sender As frmItemsFilter)
        Call oMousePointer.Push(Cursors.WaitCursor)
        Call pGetCurrentDesignTools.FilterApply()
        Call oMousePointer.Pop()
    End Sub

    Private Sub chkSegmentVirtual_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentVirtual.CheckedChanged
        If chkSegmentVirtual.Checked Then
            cboSegmentSessionList.Enabled = False
            txtSegmentDistance.Enabled = False
            txtSegmentBearing.Enabled = False
            txtSegmentInclination.Enabled = False
            txtSegmentLeft.Enabled = False
            txtSegmentRight.Enabled = False
            txtSegmentUp.Enabled = False
            txtSegmentDown.Enabled = False
        Else
            cboSegmentSessionList.Enabled = True
            txtSegmentDistance.Enabled = True
            txtSegmentBearing.Enabled = True
            txtSegmentInclination.Enabled = True
            txtSegmentLeft.Enabled = True
            txtSegmentRight.Enabled = True
            txtSegmentUp.Enabled = True
            txtSegmentDown.Enabled = True
        End If
    End Sub

    Private Sub pWorkspaceDefault()
        Call WorkspaceManager.LoadWorkspace("_default", IO.Path.Combine(modMain.GetUserApplicationPath, "_default.cworkspace"))
        Call WorkspaceManager.ApplyWorkspace("_default")
        Call WorkspaceManager.RemoveWorkspace("_default")
    End Sub

    Private Sub pWorkspaceData()
        Call pWorkspaceDefault()

        Call docView.Controller.Close(docView.Documents.FirstOrDefault(Function(oDocument) oDocument.ControlName.ToLower = "dockdesigner"))

        Call pObjectPropShow(False)
        Call pClipartShow(False)
        Call pLevelsShow(False)
    End Sub

    Private Sub pWorkspaceDesign()
        Call pWorkspaceDefault()

        Call docView.Controller.Close(docView.Documents.FirstOrDefault(Function(oDocument) oDocument.ControlName.ToLower = "dockdata"))

        Call pObjectPropShow(True)
        Call pClipartShow(True)
        Call pLevelsShow(True)
    End Sub

    Private Sub pWorkspaceAll()
        Call pWorkspaceDefault()

        'Call pFieldDataShow(True)
        'Call pDesignAreaShow(True)
        Call pObjectPropShow(True)
        Call pClipartShow(True)
        Call pLevelsShow(True)
    End Sub

    Private Sub frmSplay_OnApply(Sender As Object, Arg As frmSplay.ApplySplayPropertiesEventArgs)
        bDisableSegmentsChangeEvent = True
        For Each oSegment As cSegment In oSurvey.Segments
            If Arg.ApplyToPlan Then
                oSegment.PlanSplayBorderProjectionType = Arg.PlanSplayPlanProjectionType
                oSegment.PlanSplayBorderProjectionDeltaZ = Arg.PlanSplayPlanDeltaZ
                oSegment.PlanSplayBorderMaxDeltaVariation = Arg.PlanSplayMaxVariationDelta
                oSegment.PlanSplayBorderInclinationRange = Arg.PlanSplayInclinationRange
            End If
            If Arg.ApplyToProfile Then
                oSegment.ProfileSplayBorderProjectionAngle = Arg.ProfileSplayProjectionAngle
                oSegment.ProfileSplayBorderMaxAngleVariation = Arg.ProfileSplayMaxVariationAngle
                oSegment.ProfileSplayBorderPosInclinationRange = Arg.ProfileSplayPosInclinationRange
                oSegment.ProfileSplayBorderNegInclinationRange = Arg.ProfileSplayNegInclinationRange
            End If
        Next
        If Arg.ApplyToCrossSection Then
            For Each oItem As cItem In Arg.Design.GetAllItems
                If oItem.Type = Items.cIItem.cItemTypeEnum.CrossSection Then
                    Dim oCrossSection As Items.cItemCrossSection = oItem
                    oCrossSection.ShowSplayBorder = Arg.CrossSectionShowSplayBorder
                    oCrossSection.ShowOnlyCutSplay = Arg.CrossSectionShowOnlyCutSplay
                    oCrossSection.SplayBorderProjectionAngle = Arg.CrossSectionSplayProjectionAngle
                    oCrossSection.SplayBorderMaxAngleVariation = Arg.CrossSectionSplayMaxVariationAngle
                    oCrossSection.SplayBorderLineStyle = Arg.CrossSectionSplayLineStyle
                    oCrossSection.ShowSplayText = Arg.CrossSectionSplayText
                End If
            Next
        End If
        bDisableSegmentsChangeEvent = False
        Call pSurveyCalculate(False)
        Call pObjectPropertyLoad()
    End Sub

    Private Sub pSplayReplicateData()
        Using frmS As frmSplay = New frmSplay(oSurvey, frmSplay.ContextEnum.Design, pGetCurrentDesignTools)
            AddHandler frmS.OnApply, AddressOf frmSplay_OnApply
            Call frmS.ShowDialog(Me)
        End Using
    End Sub

    'Private Sub cmdPropSignOtherOptions_Click(sender As Object, e As EventArgs) Handles cmdPropSignOtherOptions.Click
    '    If Not bDisabledObjectPropertyEvent Then
    '        With pGetCurrentDesignTools()
    '            Dim oItem As cIItemSign = .CurrentItem
    '            Using frmSP As frmSignProperties = New frmSignProperties(oItem)
    '                If frmSP.ShowDialog(Me) = vbOK Then
    '                    Call .TakeUndoSnapshot()
    '                    Call pMapInvalidate()
    '                End If
    '            End Using
    '        End With
    '    End If
    'End Sub

    Private Sub pTrigpointSetCoordinate(TrigPoint As String, Coordinate As Calculate.cTrigPointCoordinate)
        Call pFieldDataShow(True)
        Call pSurveyFindTrigPoint(TrigPoint)
        tabTrigpointsPropertyitem.SelectedTabPage = tabTrigpointsCoordinateitem
        cboTrigpointCoordinateFormat.SelectedIndex = 0
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
            With oSurvey.Calculate.TrigPoints(TrigPoint)
                txtTrigpointCoordinateLat.Text = modNumbers.NumberToCoordinate(Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S")
                txtTrigpointCoordinateLong.Text = modNumbers.NumberToCoordinate(Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W")
                'non imposto l'altitudine...la prendo dalle coordinate calcolate
                txtTrigpointCoordinateAlt.Text = modNumbers.MathRound(.Coordinate.Altitude, 0)
            End With
        Else
            With oSurvey.Calculate.TrigPoints(TrigPoint)
                'non imposto lat e lon ma solo l'altitudine dalle coordinate passate...
                txtTrigpointCoordinateLat.Text = modNumbers.NumberToCoordinate(.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S")
                txtTrigpointCoordinateLong.Text = modNumbers.NumberToCoordinate(.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W")
                txtTrigpointCoordinateAlt.Text = modNumbers.MathRound(Coordinate.Altitude, 0)
            End With
        End If
        cboTrigpointCoordinateFix.SelectedIndex = cTrigPoint.TrigPointFixEnum.Forced
        bTrigpointChanged = True
        Call pTrigPointSave(oTools.CurrentTrigpoint)
    End Sub

    Private Sub pTrigpointSetCoordinate(TrigPoint As String)
        Call pFieldDataShow(True)
        Call pSurveyFindTrigPoint(TrigPoint)
        tabTrigpointsPropertyitem.SelectedTabPage = tabTrigpointsCoordinateitem
        With oSurvey.Calculate.TrigPoints(TrigPoint)
            txtTrigpointCoordinateLat.Text = modNumbers.NumberToCoordinate(.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "N", "S")
            txtTrigpointCoordinateLong.Text = modNumbers.NumberToCoordinate(.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds Or CoordinateFormatEnum.Unsigned, "E", "W")
            cboTrigpointCoordinateFormat.SelectedIndex = 0
            txtTrigpointCoordinateAlt.Text = modNumbers.MathRound(.Coordinate.Altitude, 0)
            cboTrigpointCoordinateFix.SelectedIndex = cTrigPoint.TrigPointFixEnum.Forced
            bTrigpointChanged = True
        End With
        Call pTrigPointSave(oTools.CurrentTrigpoint)
    End Sub

    Private Delegate Sub pSurveyMainPropertiesPanelsRefreshDelegate()

    Private Sub pSurveyMainPropertiesPanelsRefresh()
        If InvokeRequired Then
            Call BeginInvoke(New pSurveyMainPropertiesPanelsRefreshDelegate(AddressOf pSurveyMainPropertiesPanelsRefresh))
        Else
            If oSurvey.Properties.GPS.Enabled Then
                btnStatusDesignGeographicState.ImageOptions.SvgImage = My.Resources.bo_localization
                btnStatusDesignGeographicState.Description = modMain.GetLocalizedString("main.textpart62")
            Else
                btnStatusDesignGeographicState.ImageOptions.SvgImage = My.Resources.warning
                btnStatusDesignGeographicState.Description = modMain.GetLocalizedString("main.textpart61")
            End If

            If oSurvey.Properties.DesignWarpingMode = cSurvey.cSurvey.DesignWarpingModeEnum.None Then
                Call pWarpingPopupShow("warping", modMain.GetLocalizedString("main.textpart59"))
            ElseIf oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Paused Then
                Call pWarpingPopupShow("warping", modMain.GetLocalizedString("main.textpart167") & " <image=#pause;size=16,16>")
            ElseIf oCurrentDesign IsNot Nothing AndAlso oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan AndAlso oSurvey.Properties.PlanWarpingDisabled Then
                Call pWarpingPopupShow("warping", modMain.GetLocalizedString("main.textpart168"))
            ElseIf oCurrentDesign IsNot Nothing AndAlso oCurrentDesign.Type = cIDesign.cDesignTypeEnum.profile AndAlso oSurvey.Properties.ProfileWarpingDisabled Then
                Call pWarpingPopupShow("warping", modMain.GetLocalizedString("main.textpart169"))
            Else
                pWarpingPopupHide()
            End If

            If oSurvey.Properties.DesignWarpingMode = cSurvey.cSurvey.DesignWarpingModeEnum.None OrElse IsNothing(oCurrentDesign) Then
                btnStatusDesignWarping.ImageOptions.SvgImage = My.Resources.warning
                btnStatusDesignWarpingState.ImageOptions.Image = My.Resources.control_stop_blue
                btnStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart59")
                btnStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart59")
                btnStatusDesignWarping.Visibility = BarItemVisibility.Never
                btnStatusDesignWarpingState.Visibility = BarItemVisibility.Never
            Else
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan AndAlso Not oSurvey.Properties.PlanWarpingDisabled Then
                    btnStatusDesignWarping.ImageOptions.SvgImage = My.Resources.warping
                    btnStatusDesignWarpingState.ImageOptions.SvgImage = If(oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Active, My.Resources._next, My.Resources.pause)
                    btnStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart60")
                    btnStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart60")
                    btnStatusDesignWarping.Visibility = BarItemVisibility.Always
                    btnStatusDesignWarpingState.Visibility = BarItemVisibility.Always
                ElseIf oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Profile AndAlso Not oSurvey.Properties.ProfileWarpingDisabled Then
                    btnStatusDesignWarping.ImageOptions.SvgImage = My.Resources.warping
                    btnStatusDesignWarpingState.ImageOptions.SvgImage = If(oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Active, My.Resources._next, My.Resources.pause)
                    btnStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart60")
                    btnStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart60")
                    btnStatusDesignWarping.Visibility = BarItemVisibility.Always
                    btnStatusDesignWarpingState.Visibility = BarItemVisibility.Always
                ElseIf oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                    btnStatusDesignWarping.Visibility = BarItemVisibility.Never
                    btnStatusDesignWarpingState.Visibility = BarItemVisibility.Never
                Else
                    btnStatusDesignWarping.ImageOptions.SvgImage = My.Resources.warning
                    btnStatusDesignWarpingState.ImageOptions.SvgImage = My.Resources.stop1
                    btnStatusDesignWarping.Description = modMain.GetLocalizedString("main.textpart59")
                    btnStatusDesignWarpingState.Description = modMain.GetLocalizedString("main.textpart59")
                    btnStatusDesignWarping.Visibility = BarItemVisibility.Always
                    btnStatusDesignWarpingState.Visibility = BarItemVisibility.Always
                End If
            End If
            If oSurvey.Properties.HistoryEnabled Then
                btnStatusHistoryEnabled.ImageOptions.SvgImage = My.Resources.paymentrefund
                btnStatusHistoryEnabled.Description = modMain.GetLocalizedString("main.textpart74")
            Else
                btnStatusHistoryEnabled.ImageOptions.SvgImage = My.Resources.warning
                btnStatusHistoryEnabled.Description = modMain.GetLocalizedString("main.textpart73")
            End If

            If modWMSManager.State = WMSStateEnum.Online Then
                btnStatusWMSOnLine.ImageOptions.SvgImage = My.Resources.connected
                btnStatusWMSOnLine.Description = modMain.GetLocalizedString("main.textpart89")
            Else
                btnStatusWMSOnLine.ImageOptions.SvgImage = My.Resources.disconnected
                btnStatusWMSOnLine.Description = modMain.GetLocalizedString("main.textpart90")
            End If

            If oSurvey.MasterSlave.IsMaster Then
                pnlStatusMasterSlave.Caption = "Master survey"
                pnlStatusMasterSlave.Visibility = BarItemVisibility.Always
            ElseIf oSurvey.MasterSlave.IsSlave Then
                pnlStatusMasterSlave.Caption = "Slave survey"
                pnlStatusMasterSlave.Visibility = BarItemVisibility.Always
            Else
                pnlStatusMasterSlave.Visibility = BarItemVisibility.Never
            End If
        End If
    End Sub

    Private Sub pnlStatusHistoryEnabled_itemClick(sender As Object, e As EventArgs) Handles btnStatusHistoryEnabled.ItemClick
        Call pSurveyProperty(0)
    End Sub

    Private Sub btnStatusDesignWarping_ItemClick(sender As Object, e As EventArgs) Handles btnStatusDesignWarping.ItemClick
        Call pSurveyProperty(3)
    End Sub

    Private Sub pnlStatusDesignGeographicState_ItemClick(sender As Object, e As EventArgs) Handles btnStatusDesignGeographicState.ItemClick
        Call pSurveyProperty(4)
    End Sub

    Private Sub oDockJoinPoints_OnPointRemoved(Sender As Object, e As cDockJoinPoints.cPointEventArgs) Handles oDockJoinPoints.OnPointRemoved
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oDockJoinPoints_OnPointClear(Sender As Object, e As EventArgs) Handles oDockJoinPoints.OnPointClear
        Call pObjectPropertyLoad()
    End Sub

    Private Sub oDockJoinPoints_OnBeforePointLink(Sender As Object, e As EventArgs) Handles oDockJoinPoints.OnBeforePointLink
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot("Point link", oDockJoinPoints.GetPointsItems)
        End With
    End Sub

    Private Sub oDockJoinPoints_OnPointLink(Sender As Object, e As EventArgs) Handles oDockJoinPoints.OnPointLink
        With pGetCurrentDesignTools()
            .CommitUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub oDockJoinPoints_OnPointSelect(Sender As Object, e As cDockJoinPoints.cPointEventArgs) Handles oDockJoinPoints.OnPointSelect
        Dim oItem As cItem = e.Point.Item
        If Not pGetCurrentDesignTools.CurrentItem Is oItem Then
            Call pGetCurrentDesignTools.SelectItem(oItem)
        End If
        Call pGetCurrentDesignTools.SelectPoint(e.Point)
        Call pMapInvalidate()
    End Sub

    Private Sub oHistory_OnAdd(Sender As frmHistory, Args As frmHistory.OnAddEventArgs)
        Try
            Call pSurveySave(sFilename, False, cSurvey.cSurvey.SaveOptionsEnum.Silent Or cSurvey.cSurvey.SaveOptionsEnum.NoHistory)
            Select Case Args.HistoryMode
                Case HistoryModeEnum.Folder
                    Call pHistorySaveMode0(sFilename)
                Case HistoryModeEnum.WebStorage
                    Call pHistorySaveMode1(sFilename)
            End Select
        Catch ex As Exception
            Call pLogAdd(ex)
            Args.Cancelled = True
            Args.LastException = ex
        End Try
    End Sub

    Private Sub oHistory_OnRestore(Sender As frmHistory, Args As EventArgs)
        Call pSurveyLoad(sFilename, False)
    End Sub

    Private Sub pCurrentMarkedDesktopPointUnset()
        Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Unset()
        If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemMarker Then
            Call pGetCurrentDesignTools.SelectItem(Nothing)
        End If
    End Sub

    Private Sub pCurrentMarkedDesktopPointSet(Point As PointF)
        If oSurvey.Properties.GPS.Enabled Then
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                Dim dMC As Single = oSurvey.Calculate.GeoMagDeclinationData.MeridianConvergenceRadians
                Dim oNoGeoMagPoint As PointF = modPaint.RotatePointByRadians(Point, dMC)
                Dim oOriginCoordinate As Calculate.cTrigPointCoordinate = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Coordinate
                Dim dNewLat As Decimal
                Dim dNewLon As Decimal
                'occhio...l'altitudine non va gestita...
                Dim dNewAlt As Decimal
                Call modExport.CalculateCoordinatesFromXYZ(oSurvey, oOriginCoordinate.Latitude, oOriginCoordinate.Longitude, oOriginCoordinate.Altitude, oNoGeoMagPoint.X, oNoGeoMagPoint.Y, 0, dNewLat, dNewLon, dNewAlt)
                If Not oSurvey.Properties.SurfaceProfileElevation Is Nothing Then
                    With oSurvey.Properties.SurfaceProfileElevation
                        dNewAlt = .GetElevation(Point)
                        If dNewAlt = .NoDataValue Then dNewAlt = 0
                    End With
                End If
                Dim oNewCoordinate As Calculate.cTrigPointCoordinate = New Calculate.cTrigPointCoordinate(dNewLat, dNewLon, dNewAlt)
                Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Set(Point, oNewCoordinate)
            Else
                Dim oOriginCoordinate As Calculate.cTrigPointCoordinate = oSurvey.Calculate.TrigPoints(oSurvey.Properties.Origin).Coordinate
                'occhio...lon lat non vanno gestite...
                Dim dNewLat As Decimal
                Dim dNewLon As Decimal
                Dim dNewAlt As Decimal
                Call modExport.CalculateCoordinatesFromXYZ(oSurvey, oOriginCoordinate.Latitude, oOriginCoordinate.Longitude, oOriginCoordinate.Altitude, 0, 0, -Point.Y, dNewLat, dNewLon, dNewAlt)
                Dim oNewCoordinate As Calculate.cTrigPointCoordinate = New Calculate.cTrigPointCoordinate(dNewLat, dNewLon, dNewAlt)
                Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Set(Point, oNewCoordinate)
            End If
        Else
            Call pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Set(Point, Nothing)
        End If
    End Sub

    Private Sub btnTrigpointCoordinateClear_Click(sender As Object, e As EventArgs) Handles btnTrigpointCoordinateClear.Click
        Dim oTrigpoint As cTrigPoint = oTools.CurrentTrigpoint
        Call oTrigpoint.Coordinate.Clear()
        pTrigpointCoordinateLoad(oTrigpoint)
    End Sub

    Private Sub oTools_OnMarkedDesktopPointSet(Sender As Object, Args As EventArgs) Handles oPlanTools.OnMarkedDesktopPointSet, oProfileTools.OnMarkedDesktopPointSet
        Dim oPoint As cMarkedDesktopPoint = Sender.CurrentMarkedDesktopPoint
        If oPoint.IsSet Then
            If oPoint.Coordinate Is Nothing Then
                Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart78"), Strings.Format(oPoint.Point.X, "0.00"), Strings.Format(oPoint.Point.Y, "0.00")))
            Else
                If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
                    Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart77"), Strings.Format(oPoint.Point.X, "0.00"), Strings.Format(oPoint.Point.Y, "0.00"), modNumbers.NumberToCoordinate(oPoint.Coordinate.Longitude, CoordinateFormatEnum.DegreesMinutesSeconds, "E", "W"), modNumbers.NumberToCoordinate(oPoint.Coordinate.Latitude, CoordinateFormatEnum.DegreesMinutesSeconds, "N", "S")))
                Else
                    Call pStatusSet(String.Format(modMain.GetLocalizedString("main.textpart79"), Strings.Format(oPoint.Point.X, "0.00"), Strings.Format(oPoint.Point.Y, "0.00"), Strings.Format(oPoint.Coordinate.Altitude, "0")))
                End If
            End If
        End If
        Call pMapInvalidate()
    End Sub

    Private Sub oTools_OnMarkedDesktopPointGetPaintInfo(Sender As Object, Args As cMarkedDesktopPointPaintInfoEventArgs) Handles oPlanTools.OnMarkedDesktopPointGetPaintInfo, oProfileTools.OnMarkedDesktopPointGetPaintInfo
        Args.Scale = sPaintZoom
    End Sub

    Private Sub oTools_OnMarkedDesktopPointMove(Sender As Object, Args As cMarkedDesktopPointMoveEventArgs) Handles oPlanTools.OnMarkedDesktopPointMove, oProfileTools.OnMarkedDesktopPointMove
        Call pCurrentMarkedDesktopPointSet(Args.NewPoint)
    End Sub

    Private Sub p3DInvalidate(Invalidate As cHolosViewer.InvalidateType)
        Call oHolos.Invalidate(Invalidate)
    End Sub

    Private Sub pnl3D_SizeChanged(sender As Object, e As EventArgs) Handles pnl3D.SizeChanged
        Call pHolosResize()
    End Sub

    Private Sub oHolos_OnRedrawRequest(Sender As cHolosViewer, Args As EventArgs) Handles oHolos.OnRedrawRequest
        Call pSurvey3DForceRedraw()
    End Sub

    Private Sub pSurvey3DForceRedraw()
        Call oMousePointer.Push(Cursors.WaitCursor)
        If oSurvey.Invalidated Then Call pSurveyCalculate(True)
        Call oHolos.Redraw(oSurvey, DirectCast(oCurrentOptions, cOptions3D), o3DTools)
        Call oMousePointer.Pop()
    End Sub

    Private Sub oHolos_OnSceneInfoChange(Sender As cHolosViewer, Args As cHolosViewer.cSceneInfoChangeEventArgs) Handles oHolos.OnSceneInfoChange
        pnlStatusDesignInfo.Caption = String.Format(modMain.GetLocalizedString("main.textpart82"), Math.Round(Args.Bearing, 0), Math.Round(Args.Inclination, 0))
    End Sub

    Private Sub btnStatusWMSOnLine_ItemClick(sender As Object, e As EventArgs) Handles btnStatusWMSOnLine.ItemClick
        If modWMSManager.State = WMSStateEnum.Online Then
            Call modWMSManager.WMSSetState(WMSStateEnum.ForcedOffline)
            Call pMapInvalidate()
        Else
            Call modWMSManager.WMSSetState(WMSStateEnum.Online)
            Call pMapInvalidate()
        End If
        Call pSurveyMainPropertiesPanelsRefresh()
    End Sub

    Private Sub o3DTools_OnItemSelect(Sender As Object, ToolEventArgs As cEditDesignToolsEventArgs) Handles o3DTools.OnItemSelect
        btnZoomZoomToSelection.Enabled = False

        Call pObjectPropertyDelayedLoad()
        Call pClipboardAlign()
    End Sub

    Private Sub cboTrigpointEntrance_SelectedIndexChanged(sender As Object, e As EventArgs) Handles cboTrigpointEntrance.SelectedIndexChanged
        chkTrigpointShowEntrance.Enabled = cboTrigpointEntrance.SelectedIndex > 0
    End Sub

    Private Sub oPlanTools_OnFilterRemoved(Sender As Object, ToolEventArgs As EventArgs) Handles oPlanTools.OnFilterRemoved
        Call pSurveyLayersFilterApply()
    End Sub

    Private Sub oProfileTools_OnFilterRemoved(Sender As Object, ToolEventArgs As EventArgs) Handles oProfileTools.OnFilterRemoved
        Call pSurveyLayersFilterApply()
    End Sub

    Private Sub bwMain_DoWork(sender As Object, e As System.ComponentModel.DoWorkEventArgs) Handles bwMain.DoWork
        Select Case e.Argument.ToString
            Case "pCheckNewVersion"
                Call pCheckNewVersion()
        End Select
    End Sub

    Private Sub pGetHeaderValue(Column As DataGridViewColumn, ByRef Value As Object)
        If Column.Name = "colSegmentSession" Then
            Value = modMain.GetLocalizedString("main.textpart13")
        End If
        If Column.Name = "colCaveBranchColor" Then
            Value = modMain.GetLocalizedString("main.textpart11") & cCaveInfoBranches.sBranchSeparator & modMain.GetLocalizedString("main.textpart12")
        End If
    End Sub

    Private Sub pGetCellValue(Cell As DataGridViewCell, ByRef Value As Object)
        If Cell.OwningColumn.Name = "colSegmentSession" Then
            Dim oSegment As cSegment = oSurvey.Segments(Cell.RowIndex)
            If Not IsNothing(oSegment) Then Value = "" & oSegment.Session
        End If
        If Cell.OwningColumn.Name = "colCaveBranchColor" Then
            Dim oSegment As cSegment = oSurvey.Segments(Cell.RowIndex)
            If Not IsNothing(oSegment) Then Value = oSegment.Cave & If(oSegment.Branch = "", "", cCaveInfoBranches.sBranchSeparator & oSegment.Branch)
        End If
        If Cell.OwningColumn.Name = "colTo" Then
            If Not bGridExportSplayNames Then
                Dim oSegment As cSegment = oSurvey.Segments(Cell.RowIndex)
                If Not IsNothing(oSegment) Then Value = If(oSegment.Splay, "", oSegment.To)
            End If
        End If
    End Sub

    Private Sub pSegmentSetCaveBranchesColor()
        Dim sCave As String = cCaveInfo.EditToString(cboSegmentCaveList.EditValue)
        Dim sBranch As String = cCaveInfoBranch.EditToString(cboSegmentCaveBranchList.EditValue)
        Dim oColor As Color = oSurvey.Properties.CaveInfos.GetColor(sCave, sBranch, Color.LightGray)
        pnlSegmentCaveBranchesColor.BackColor = oColor
    End Sub

    Private Sub pSegmentSetSessionColor()
        If cboSegmentSessionList.EditValue Is Nothing Then
            Dim oColor As Color = Color.LightGray
            'Dim oLightColor = modPaint.LightColor(oColor, 0.85)
            pnlSegmentSessionColor.BackColor = oColor
            'pnlSegmentSession.BackColor = oLightColor
        Else
            Dim sSession As String = DirectCast(cboSegmentSessionList.EditValue, cSession).ID
            Dim oColor As Color = oSurvey.Properties.Sessions.GetColor(sSession, Color.LightGray)
            'Dim oLightColor = modPaint.LightColor(oColor, 0.85)
            pnlSegmentSessionColor.BackColor = oColor
            'pnlSegmentSession.BackColor = oLightColor
        End If
    End Sub

    Private Sub pPropDefaultPenStyle()
        Select Case oSurvey.Properties.DesignProperties.GetValue("LineType", cIItemLine.LineTypeEnum.Splines)
            Case cIItemLine.LineTypeEnum.Splines
                btnPenLine.Down = False
                btnPenSpline.Down = True
                btnPenBezier.Down = False
            Case cIItemLine.LineTypeEnum.Lines
                btnPenLine.Down = True
                btnPenSpline.Down = False
                btnPenBezier.Down = False
            Case cIItemLine.LineTypeEnum.Beziers
                btnPenLine.Down = False
                btnPenSpline.Down = False
                btnPenBezier.Down = True
        End Select
    End Sub

    Private WithEvents oAreaFromSequence As cAreaFromSequence

    Private Sub pSurveyCreateSequenceToArea()
        If oAreaFromSequence Is Nothing Then
            oAreaFromSequence = New cAreaFromSequence()
        End If
    End Sub

    Private Sub oAreaFromSequence_OnCreate(Sender As cAreaFromSequence, Args As EventArgs) Handles oAreaFromSequence.OnCreate
        Call oMousePointer.Push(Cursors.WaitCursor)
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot("Area from sequence")
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oNewSequence As cSequence = modPaint.WidenSequence(oItem, oPoint, oAreaFromSequence.txtWidth.Value, oAreaFromSequence.txtReductionFactor.Value)
            Dim oBag As cConvertToToolsBag = oAreaFromSequence.lvItemToCreate.SelectedItems(0).Tag
            Dim oLayer As cLayer = oCurrentDesign.Layers(oBag.Layer)
            oItem = oLayer.GetType.GetMethod(oBag.Method).Invoke(oLayer, oBag.GetInvokeParameters("cave", oItem.Cave, "branch", oItem.Branch))
            If oItem.HaveLineType Then
                DirectCast(oItem, cIItemLine).LineType = oAreaFromSequence.cboLineType.SelectedIndex  'oSurvey.Properties.DesignProperties.GetValue("LineType", cEditDesignEnvironment.GetSetting("design.linetype", cIItemLine.LineTypeEnum.Splines))
            End If
            Call oItem.Points.BeginUpdate()
            Call oItem.Points.AddRange(oNewSequence)
            Call oItem.Points.CloseSequences()
            Call oItem.Points.EndUpdate()
            Call .CommitUndoSnapshot()
        End With
        Call oMousePointer.Pop()
        Call pMapInvalidate()
    End Sub

    Private Sub o3DTools_OnCaveBranchSelect(Sender As Object, ToolEventArgs As cCaveBranchSelectEventArgs) Handles o3DTools.OnCaveBranchSelect
        If Not bDisabledCaveBranchChangeEvent Then
            Call pSurveyHighlightCurrentCave(False)
            Call pSurveySetCurrentCaveBranch(o3DTools.CurrentCave, o3DTools.CurrentBranch)
            Call pSurveyFillCrossSectionsList(o3DTools.CurrentCave, o3DTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            Call pSurveyRestoreCaveBranchLockstate(o3DTools.CurrentCave, o3DTools.CurrentBranch)
        End If
    End Sub

    Private Sub oPlanTools_OnCaveBranchSelect(Sender As Object, ToolEventArgs As cCaveBranchSelectEventArgs) Handles oPlanTools.OnCaveBranchSelect
        If Not bDisabledCaveBranchChangeEvent Then
            Call pSurveyHighlightCurrentCave(False)
            Call pSurveySetCurrentCaveBranch(oPlanTools.CurrentCave, oPlanTools.CurrentBranch)
            Call pSurveyFillCrossSectionsList(oPlanTools.CurrentCave, oPlanTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            Call pSurveyRestoreCaveBranchLockstate(oPlanTools.CurrentCave, oPlanTools.CurrentBranch)
        End If
    End Sub

    Private Sub pSurveyRestoreCaveBranchLockstate(Cave As String, Branch As String)
        Dim oCaveInfo As cICaveInfoBranches = oSurvey.Properties.GetCaveInfo(Cave, Branch)
        Dim bEnabled As Boolean = IsNothing(oCaveInfo) OrElse Not oCaveInfo.GetLocked
        btnSegmentAdd.Enabled = bEnabled
        btnSegmentInsert.Enabled = bEnabled
        btnSegmentDelete.Enabled = bEnabled
    End Sub

    Private Sub oProfileTools_OnCaveBranchSelect(Sender As Object, ToolEventArgs As cCaveBranchSelectEventArgs) Handles oProfileTools.OnCaveBranchSelect
        If Not bDisabledCaveBranchChangeEvent Then
            Call pSurveyHighlightCurrentCave(False)
            Call pSurveySetCurrentCaveBranch(oProfileTools.CurrentCave, oProfileTools.CurrentBranch)
            Call pSurveyFillCrossSectionsList(oProfileTools.CurrentCave, oProfileTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            Call pSurveyRestoreCaveBranchLockstate(oProfileTools.CurrentCave, oProfileTools.CurrentBranch)
        End If
    End Sub

    Private Sub pMapInfoMenu(Point As Point)
        Dim oPoint As PointF = modPaint.FromPaintPoint(Point, sPaintZoom, oPaintTranslation)
        btnCurrentItemPointInfo.Caption = "x: " & Strings.Format(oPoint.X, "0.00") & " m - y: " & Strings.Format(-1 * oPoint.Y, "0.00") & " m"
        mnuDesignItem.Tag = picMap.PointToScreen(Point)
    End Sub

    Private Sub mnuDesignItemSegmentSplay_Click(sender As Object, e As EventArgs) Handles mnuDesignItemSegmentSplay.Click
        mnuDesignItemSegmentSplayCreateBorder.Visible = bIsInDebug
    End Sub

    Private WithEvents oBorderFromSplay As cBorderFromSplay

    Private Sub pSurveyCreateBorderFromSplay()
        If oBorderFromSplay Is Nothing Then
            oBorderFromSplay = New cBorderFromSplay()
        End If
    End Sub

    Private Sub mnuDesignItemSegmentSplayCreateBorder_DropDownOpening(sender As Object, e As EventArgs) Handles mnuDesignItemSegmentSplayCreateBorder.DropDownOpening
        Dim oHost As ToolStripControlHost = New ToolStripControlHost(oBorderFromSplay)
        mnuDesignItemSegmentSplayCreateBorder.DropDownItems.Clear()
        mnuDesignItemSegmentSplayCreateBorder.DropDownItems.Add(oHost)
    End Sub

    Private Sub oBorderFromSplay_OnCreate(Sender As cBorderFromSplay, Args As EventArgs) Handles oBorderFromSplay.OnCreate
        Call oMousePointer.Push(Cursors.WaitCursor)
        If oBorderFromSplay.optAllSplays.Checked Then
            If oBorderFromSplay.optCaveBranch.Checked Then
                Call modSegmentsTools.CreatePlanBorderFromSplay(oSurvey, oTools.CurrentSegment.Cave, oTools.CurrentSegment.Branch, oBorderFromSplay.cboLineType.SelectedIndex, oBorderFromSplay.txtAngPrec.Value, oBorderFromSplay.cboUseHull.SelectedIndex)
            Else
                Call modSegmentsTools.CreatePlanBorderFromSplay(oSurvey, oTools.CurrentSegment, oBorderFromSplay.cboLineType.SelectedIndex, oBorderFromSplay.txtAngPrec.Value, oBorderFromSplay.cboUseHull.SelectedIndex)
            End If
        ElseIf oBorderFromSplay.optCutAndLRUD.Checked Then
            If oBorderFromSplay.optCaveBranch.Checked Then
                Call modSegmentsTools.CreateBorder3DOutline(oSurvey, oTools.CurrentSegment.Cave, oTools.CurrentSegment.Branch, If(oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan, False, True))
            Else
                Call modSegmentsTools.CreateBorder3DOutline(oSurvey, oTools.CurrentSegment, If(oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan, False, True))
            End If
        End If
        Call oMousePointer.Pop()
        Call pMapInvalidate()
        Call mnuDesignItemOLD.Close()
    End Sub

    Private Sub chkSegmentCalibration_CheckedChanged(sender As Object, e As EventArgs) Handles chkSegmentCalibration.CheckedChanged
        Call pSegmentCheckFlags()
    End Sub

    Private Sub pSegmentAttachmentOpen()
        Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
        If Not IsNothing(oAttachment) Then
            Call pAttachmentOpen(oAttachment)
        End If
    End Sub

    Private Sub pAudioViewerShow(Attachment As cAttachmentsLink)
        Call oDockAV.Open(Attachment, True)
        Call pDockContentShow(dockAV, True)
    End Sub

    Private Sub pAttachmentOpen(Attachment As cAttachmentsLink)
        If bAlwaysUseShellForAttachments Then
            Call Attachment.Attachment.OpenInShell()
        Else
            Select Case Attachment.GetCategory
                Case FTTLib.FileCategory.Audio
                    Call pAudioViewerShow(Attachment)
                Case FTTLib.FileCategory.Image
                    Call pImageViewerShow(Attachment)
                Case Else
                    Call Attachment.Attachment.OpenInShell()
            End Select
        End If
    End Sub

    Private Sub oDockAV_OnGotoOwner(Sender As Object, Args As cDockAudioViewer.cGotoOWnerEventArgs) Handles oDockAV.OnGotoOwner
        Dim oOwner As Object = Args.Owner
        If TypeOf oOwner Is cSegment Then
            Call pSegmentSelect(oOwner, True, True)
        ElseIf TypeOf oOwner Is cItemAttachment Then
            Call pGetCurrentDesignTools.SelectItem(oOwner)
        End If
    End Sub

    Private Function pGetCurrentTools() As Helper.Editor.cEditTools
        Return oTools
    End Function

    Private Function pGetCurrentDesignTools() As Helper.Editor.cEditDesignTools
        If oCurrentDesign Is oSurvey.Plan Then
            Return oPlanTools
        ElseIf oCurrentDesign Is oSurvey.Profile Then
            Return oProfileTools
        Else
            Return o3DTools
        End If
    End Function

    Private Sub oSurvey_OnCrossSectionsChange(Sender As Object, Args As cSurvey.cSurvey.OnCrossSectionChangeEventArgs) Handles oSurvey.OnCrossSectionsChange
        If Not IsNothing(oCurrentDesign) Then
            Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
        End If
    End Sub

    Private Sub oPlanTools_OnLastPointChange(Sender As Object, ToolEventArgs As EventArgs) Handles oPlanTools.OnLastPointChange, oProfileTools.OnLastPointChange
        Call pMapInvalidate()
    End Sub

    Private Sub ObjectProperty_OnMapInvalidate(Sender As Object, e As EventArgs)
        If oCurrentDesign IsNot Nothing Then
            If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                Call oHolos.Invalidate()
            Else
                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub ObjectProperty_OnGetFlags(Sender As Object, e As FlagEventArgs)
        Select Case e.Flag
            Case FlagEventArgs.Flags.DisabledObjectPropertyEvent
                e.Value = bDisabledObjectPropertyEvent
        End Select
    End Sub

    Private Sub ObjectProperty_OnDrawInvalidate(Sender As Object, e As EventArgs)
        Call oCurrentDesign.Caches.Invalidate()
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
            Dim oArgs As cHolosViewer.cDrawInvalidateEventArgs = e
            Call oHolos.Invalidate(oArgs.Invalidate)
        Else
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub ObjectProperty_OnSetFlags(Sender As Object, e As FlagEventArgs)
        Select Case e.Flag
            Case FlagEventArgs.Flags.DisabledObjectPropertyEvent
                bDisabledObjectPropertyEvent = e.Value
        End Select
    End Sub

    Private Sub ObjectProperty_OnDoCommand(Sender As Object, e As DoCommandEventArgs)
        Select Case e.Command.ToLower
            Case "brushesandpens"
                Call pBrushesAndPensShow()
            Case "refreshbrushesandpens"
                oDockBrushesAndPens.GalleryRefresh(e.Args(0), e.Args(1))
            Case "editproperties"
                If e.Args.Length > 0 Then
                    If e.Args.Length = 1 Then
                        Call pSurveyProperty(e.Args(0))
                    Else
                        Call pSurveyProperty(e.Args(0), e.Args(1))
                    End If
                Else
                    Call pSurveyProperty()
                End If
            Case "imageviewer"
                Call pImageViewerShow(DirectCast(e.Args(0), cItem))
            Case "openattachment"
                Call pAttachmentOpen(e.Args(0).Attachment)
            Case "popupdatapropertiesmenu"
                mnuDataProperties.Tag = e.Args(1)
                Call mnuDataProperties.ShowPopup(e.Args(0))
            Case "endpointedit"
                Call pGetCurrentDesignTools.EndPoint()
            Case "surfacedetails"
                Call pSurveySurface()
            Case "linkedsurveys"
                Call pLinkedSurveyShow()
            Case "ringsdetails"
                Call pSurveyInfoRing()
            Case "edithighlights"
                Call pSurveyProperty(12)
            Case "splayreplicatedata"
                Call pSplayReplicateData()
            Case "selectitem"
                Call pDesignAreaShow(True)
                Call oDockLevels_onItemSelected(Sender, New cDockLevels.cItemSelectedEventargs(e.Args(0)))
                If e.Args.Length > 1 Then
                    If e.Args(1) Then
                        Call pMapCenterAndFitSelection()
                    End If
                End If
            Case "selectstation"
                Call pTrigpointsShow(True)
                Call pTrigPointSelect(e.Args(0), True, True)
            Case "selectshot"
                Call pSegmentsShow(True)
                Call pSegmentSelect(e.Args(0), True, True)
            Case "segmentsetcavebranchtocurrent"
                Call pSegmentSetCaveBranchToCurrent()
            Case "currentcaveandbranchgettocurrent"
                Call btnObjectSetCaveBranch.PerformClick()
            Case "currentcaveandbranchsettocurrent"
                Call btnDesignSetCurrentCaveBranch.PerformClick()
            Case "trigpointsetcoordinate"
                Call pTrigpointSetCoordinate(e.Args(0).Name)
            Case "trigpointsetcoordinatetomarker"
                Call pTrigpointSetCoordinate(e.Args(0).Name, pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Coordinate)
        End Select
    End Sub

    Private Sub ObjectProperty_OnCancelUndoSnapshot(Sender As Object, e As EventArgs)
        With pGetCurrentDesignTools()
            .CancelUndoSnapshot()
        End With
    End Sub

    Private Sub ObjectProperty_OnCommitUndoSnapshot(Sender As Object, e As CommitUndoSnapshotEventArgs)
        With pGetCurrentDesignTools()
            .CommitUndoSnapshot(e.SkipIfNotBeginned)
        End With
    End Sub

    Private Sub ObjectProperty_OnBeginUndoSnapshot(Sender As Object, e As BeginUndoSnapshotEventArgs)
        With pGetCurrentDesignTools()
            .BeginUndoSnapshot(e.Description)
        End With
    End Sub

    Private Sub ObjectProperty_OnCreateUndoSnapshot(Sender As Object, e As CreateUndoSnapshotEventArgs)
        With pGetCurrentDesignTools()
            Select Case e.SnapshotType
                Case 0
                    .CreateUndoSnapshot(e.Description, e.PropertyName)
                Case 1
                    .CreateUndoSnapshot(e.Description, e.BackupDelegate, e.RestoreDelegate)
            End Select
        End With
    End Sub

    Private Sub ObjectProperty_OnPropertyChanged(Sender As Object, e As PropertyChangeEventArgs)
        Select Case e.Name
            Case "CrossSectionSegment"
                Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            Case "Name"
                If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemCrossSection Then
                    Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
                End If
            Case "PlotShowSplay"
                chkViewShowSplay.Checked = oCurrentOptions.DrawSplay
            Case "PlotShowLRUD"
                chkViewShowLRUD.Checked = oCurrentOptions.DrawLRUD
            Case "PlotShowSegment"
                chkViewShowShots.Checked = oCurrentOptions.DrawSegments
            Case "PlotShowTrigpoint"
                chkViewShowStation.Checked = oCurrentOptions.DrawPoints
            Case "PlotShowTrigpointText"
                chkViewShowStationLabel.Checked = oCurrentOptions.ShowPointText
            Case "QuotaType"
                Call pObjectPropertyLoad()
            Case "LineStyle"
                With pGetCurrentDesignTools.CurrentItem
                    Dim bEnabled As Boolean = .Points.Count > 2 AndAlso DirectCast(pGetCurrentDesignTools.CurrentItem, cIItemLine).LineType <> cIItemLine.LineTypeEnum.Beziers
                    btnCurrentItemGenericReducePointFactor.Visibility = modControls.VisibleToVisibility(bEnabled)
                    btnCurrentItemGenericReducePoint.Visibility = modControls.VisibleToVisibility(bEnabled)
                End With
            Case "ProfileDirection", "CrossSectionSegment"
                oPropCrossSectionSplayBorder.Rebind(pGetCurrentDesignTools.CurrentItem)
        End Select
    End Sub

    Private Sub ObjectProperty_OnObjectPropertyLoad(Sender As Object, e As EventArgs)
        Call pObjectPropertyLoad()
    End Sub

    Private Sub btnCurrentItemLegendAddToItem_ItemClick(sender As Object, e As ItemClickEventArgs)
        Dim oLegendItem As BarButtonItem = e.Item
        Dim oItem As cItemLegend = oLegendItem.Tag
        Call oItem.AddItem(pGetCurrentDesignTools.CurrentItem)
        Call pMapInvalidate()
    End Sub

    'Private Sub mnuAliases_Opening(sender As Object, e As CancelEventArgs)
    '    'mnuAliasesRemove.Enabled = (Not IsNothing(grdTrigPointAliases.CurrentRow) AndAlso Not grdTrigPointAliases.CurrentRow.IsNewRow)
    'End Sub
    Private Sub oProfileTools_OnChangeDesign(Sender As Object, ChangeDesignEventArgs As cChangeDesignEventArgs) Handles oProfileTools.OnChangeDesign
        Select Case ChangeDesignEventArgs.NewTool.Design.Type
            Case cIDesign.cDesignTypeEnum.Plan
                Call pSurveyShowPlan()
            Case cIDesign.cDesignTypeEnum.Profile
                Call pSurveyShowProfile()
            Case cIDesign.cDesignTypeEnum.ThreeDModel
                Call pSurveyShow3D()
        End Select
    End Sub

    Private Sub oPlanTools_OnChangeDesign(Sender As Object, ChangeDesignEventArgs As cChangeDesignEventArgs) Handles oPlanTools.OnChangeDesign
        Select Case ChangeDesignEventArgs.NewTool.Design.Type
            Case cIDesign.cDesignTypeEnum.Plan
                Call pSurveyShowPlan()
            Case cIDesign.cDesignTypeEnum.Profile
                Call pSurveyShowProfile()
            Case cIDesign.cDesignTypeEnum.ThreeDModel
                Call pSurveyShow3D()
        End Select
    End Sub

    Private Sub oSurvey_onLinkedSurveysAdd(Sender As Object, Args As cSurvey.cSurvey.OnLinkedSurveysAddEventargs) Handles oSurvey.OnLinkedSurveysAdd
        If bLinkedSurveysSelectOnAdd Then
            Call Args.NewItem.SetSelected("loch", True)
            Call Args.NewItem.SetSelected("design.plan", True)
            Call Args.NewItem.SetSelected("design.profile", True)
            Call Args.NewItem.SetSelected("design.3d", True)
        End If
        Args.RecursiveLoad = bLinkedSurveysRecursiveLoad
        Args.PrioritizeChildren = bLinkedSurveysRefreshOnLoadPrioritizeChildren
    End Sub

    Private Sub oSurvey_OnLinkedSurveysLoad(Sender As Object, Args As cSurvey.cSurvey.OnLinkedSurveysLoadEventargs) Handles oSurvey.OnLinkedSurveysLoad
        Args.RefreshOnLoad = bLinkedSurveysRefreshOnLoad
    End Sub

    Private Sub oSurvey_OnLinkedSurveysRefresh(Sender As Object, Args As EventArgs) Handles oSurvey.OnLinkedSurveysRefresh
        Call pMapInvalidate()
    End Sub

    Private Sub cWarpingMessagebar_MessageClick(sender As Object, e As EventArgs) Handles cWarpingMessageBar.MessageClick
        Call pSurveyProperty(3)
    End Sub

    Private Sub cMessagebar_MessageClick(sender As Object, e As EventArgs) Handles cMainMessageBar.MessageClick
        Call pConsoleShow(True)
    End Sub

    Private Sub pWorkspacesManage()
        Using frmMW As frmManageWorkspaces = New frmManageWorkspaces(WorkspaceManager)
            Call frmMW.ShowDialog(Me)
            'refresh workspace menu...
            'Call pWorkspacesMenuAndToolbarUpdate()
            'RemoveHandler frmMW.OnGetWorkspaceState, AddressOf frmManagekWorkspaces_OnGetWorkspaceState
            'RemoveHandler frmMW.OnSetWorkspaceState, AddressOf frmManagekWorkspaces_OnSetWorkspaceState
            'RemoveHandler frmMW.OnRestoreDefaultWorkspace, AddressOf frmManagekWorkspaces_OnRestoreDefaultWorkspace
        End Using
    End Sub

    Private Sub WorkspaceManager_PropertySerializing(sender As Object, ea As DevExpress.Utils.PropertyCancelEventArgs) Handles WorkspaceManager.PropertySerializing
        If ea.Component IsNot Nothing AndAlso (TypeOf ea.Component Is cSessionDropDown OrElse TypeOf ea.Component Is cCaveDropDown OrElse TypeOf ea.Component Is cCaveBranchDropDown) Then
            ea.Cancel = True
        Else
            If TypeOf ea.Owner Is DevExpress.XtraVerticalGrid.VGridControl Then
                If ea.PropertyName.ToLower = "rows" Then
                    ea.Cancel = True
                End If
            End If
            If ea.PropertyName.ToLower = "text" OrElse ea.PropertyName.ToLower = "caption" OrElse ea.PropertyName.ToLower = "alignment" OrElse ea.PropertyName.ToLower = "fieldname" Then
                ea.Cancel = True
            End If
        End If
    End Sub

    Private Sub WorkspaceManager_PropertyDeserializing(sender As Object, ea As DevExpress.Utils.PropertyCancelEventArgs) Handles WorkspaceManager.PropertyDeserializing
        If ea.Component IsNot Nothing AndAlso (TypeOf ea.Component Is cSessionDropDown OrElse TypeOf ea.Component Is cCaveDropDown OrElse TypeOf ea.Component Is cCaveBranchDropDown) Then
            ea.Cancel = True
        Else
            If TypeOf ea.Owner Is DevExpress.XtraVerticalGrid.VGridControl Then
                If ea.PropertyName.ToLower = "rows" Then
                    ea.Cancel = True
                End If
            End If
            If ea.PropertyName.ToLower = "text" OrElse ea.PropertyName.ToLower = "caption" OrElse ea.PropertyName.ToLower = "alignment" OrElse ea.PropertyName.ToLower = "fieldname" Then
                ea.Cancel = True
            End If
        End If
    End Sub

    'Private oFloatBarX As Bar
    Private oFloatBar As Bar
    Private oLastUsedBar As Bar

    Private oBottomDataBar As Bar
    Private oTopGlobalFilterBar As Bar
    Private oTopDesignLevelBar As Bar
    Private oTopDesignItemsBar As Bar
    Private oTopDesignToolsBar As Bar
    Private oBottomDesignBar As Bar

    Private bDesignLevelBarVisible As Boolean
    Private bDesignItemsBarVisible As Boolean
    Private bLastUsedBarVisible As Boolean
    Private bFloatBarVisible As Boolean

    Private Sub pWorkspacesMenuAndToolbarUpdate()
        dockFloatBar.Manager = RibbonControl.Manager
        'oFloatBarX = New Bar(RibbonControl.Manager, "Float bar X")
        'oFloatBarX.OptionsBar.AllowQuickCustomization = False
        'oFloatBarX.OptionsBar.DisableCustomization = False
        'oFloatBarX.OptionsBar.DrawSizeGrip = False
        'oFloatBarX.OptionsBar.UseWholeRow = False
        'oFloatBarX.OptionsBar.DisableClose = True
        'oFloatBarX.OptionsBar.DrawDragBorder = False
        'oFloatBarX.DockStyle = BarDockStyle.Standalone
        'oFloatBarX.ItemLinks.Add(btnItemsEndEdit, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oFloatBarX.ItemLinks.Add(btnDesignSetCurrentCaveBranch, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oFloatBarX.ItemLinks.Add(btnCut, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oFloatBarX.ItemLinks.AddRange({btnCopy, btnPaste}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oFloatBarX.ItemLinks.Add(btnDelete, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        'oFloatBarX.StandaloneBarDockControl = dockFloatBar

        oFloatBar = New Bar(RibbonControl.Manager, "Float bar")
        oFloatBar.OptionsBar.AllowQuickCustomization = False
        oFloatBar.OptionsBar.DisableCustomization = False
        oFloatBar.OptionsBar.DrawSizeGrip = False
        oFloatBar.OptionsBar.UseWholeRow = False
        oFloatBar.OptionsBar.DisableClose = True
        oFloatBar.OptionsBar.DrawDragBorder = False
        oFloatBar.DockStyle = BarDockStyle.Standalone
        oFloatBar.ItemLinks.Add(btnItemsEndEdit, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnDesignSetCurrentCaveBranch, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oFloatBar.ItemLinks.Add(btnCut, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oFloatBar.ItemLinks.AddRange({btnCopy, btnPaste}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oFloatBar.ItemLinks.Add(btnDelete, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        oFloatBar.ItemLinks.Add(btnItemsObjectProperties, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnContextMenu, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.Standard)

        oFloatBar.ItemLinks.Add(btnItemsLayouts, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemLock, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemGenericCombine, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        oFloatBar.ItemLinks.Add(btnCurrentItemSketchEdit, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemSketchView, False, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemImageEdit, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemImageView, False, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        'oFloatBar.ItemLinks.Add(btnCurrentItemShot, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemSegmentFromProperty, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.Caption)
        oFloatBar.ItemLinks.Add(btnCurrentItemSegmentToProperty, False, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.Caption)
        oFloatBar.ItemLinks.Add(btnCurrentItemSegmentDirection, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        'oFloatBar.ItemLinks.Add(btnCurrentItemStation, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        'oFloatBar.ItemLinks.Add(btnCurrentItemLegendAddTo, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oFloatBar.ItemLinks.Add(btnCurrentItemSignExport, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemClipartExport, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        oFloatBar.ItemLinks.AddRange({btnCurrentItemPointAdd, btnCurrentItemPointDelete}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.Add(btnCurrentItemPointsJoin, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.AddRange({btnCurrentItemPointsJoinAndConnect, btnCurrentItemPointsUnjoinAll}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        oFloatBar.ItemLinks.AddRange({btnCurrentItemPointSequenceDivide, btnCurrentItemPointSequenceDivideAndJoin, btnCurrentItemPointRevertSequence, btnCurrentItemPointDeleteSequence}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        oFloatBar.StandaloneBarDockControl = dockFloatBar

        'barDesignerItemFloat.ItemLinks.Add(btnItemsEndEdit, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.Add(btnDesignSetCurrentCaveBranch, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.Add(btnCut, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.AddRange({btnCopy, btnPaste}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.Add(btnDelete, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.Add(btnItemsLayouts, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.Add(btnCurrentItemSegmentDirection, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.Add(btnCurrentItemLock, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemFloat.ItemLinks.Add(btnCurrentItemGenericCombine, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)

        'barDesignerItemPointFloat.ItemLinks.AddRange({btnCurrentItemPointAdd, btnCurrentItemPointDelete}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemPointFloat.ItemLinks.Add(btnCurrentItemPointsJoin, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemPointFloat.ItemLinks.AddRange({btnCurrentItemPointsJoinAndConnect, btnCurrentItemPointsUnjoinAll}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)
        'barDesignerItemPointFloat.ItemLinks.AddRange({btnCurrentItemPointSequenceDivide, btnCurrentItemPointSequenceDivideAndJoin, btnCurrentItemPointRevertSequence, btnCurrentItemPointDeleteSequence}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionGlyph)

        dockBottomSegmentsAndTrigpoints.Manager = RibbonControl.Manager
        oBottomDataBar = New Bar(RibbonControl.Manager, "Data bar")
        oBottomDataBar.OptionsBar.AllowQuickCustomization = False
        oBottomDataBar.OptionsBar.DisableCustomization = False
        oBottomDataBar.OptionsBar.DrawSizeGrip = False
        oBottomDataBar.OptionsBar.UseWholeRow = True
        oBottomDataBar.OptionsBar.DisableClose = True
        oBottomDataBar.OptionsBar.DrawDragBorder = False
        oBottomDataBar.StandaloneBarDockControl = dockBottomSegmentsAndTrigpoints
        oBottomDataBar.DockStyle = BarDockStyle.Standalone
        'oBottomDataBar.ItemLinks.AddRange({btnSegments, btnTrigpoints, btnSegmentsAndTrigPoints}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oBottomDataBar.ItemLinks.AddRange({btnSegments, btnTrigpoints}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oBottomDataBar.ItemLinks.Add(btnSegmentGridColor, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oBottomDataBar.ItemLinks.Add(btnTrigpointGridColor, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)

        dockTopGlobalBar.Manager = RibbonControl.Manager
        oTopGlobalFilterBar = New Bar(RibbonControl.Manager, "Main filter bar")
        oTopGlobalFilterBar.OptionsBar.AllowQuickCustomization = False
        oTopGlobalFilterBar.OptionsBar.DisableCustomization = True
        oTopGlobalFilterBar.OptionsBar.DrawSizeGrip = False
        oTopGlobalFilterBar.OptionsBar.UseWholeRow = True
        oTopGlobalFilterBar.OptionsBar.DisableClose = True
        oTopGlobalFilterBar.OptionsBar.DrawDragBorder = False
        oTopGlobalFilterBar.StandaloneBarDockControl = dockTopGlobalBar
        oTopGlobalFilterBar.DockStyle = BarDockStyle.Standalone
        oTopGlobalFilterBar.ItemLinks.AddRange({btnMainSessionList}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopGlobalFilterBar.ItemLinks.AddRange({btnMainCaveList, btnMainCaveBranchList}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopGlobalFilterBar.ItemLinks.Add(btnGroupCaveFilters, False, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        'oTopGlobalFilterBar.ItemLinks.Add(btnGroupDesignFilters, True)
        oTopGlobalFilterBar.ItemLinks.Add(btnMainBindDesignType, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopGlobalFilterBar.ItemLinks.AddRange({btnMainBindCrossSections}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopGlobalFilterBar.ItemLinks.Add(btnObjectSetCaveBranch, True)
        oTopGlobalFilterBar.ItemLinks.Add(btnViewSplayShowMode, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)

        dockTopDesignerBar.Manager = RibbonControl.Manager
        oTopDesignLevelBar = New Bar(RibbonControl.Manager, "Designer level bar")
        oTopDesignLevelBar.OptionsBar.AllowQuickCustomization = False
        oTopDesignLevelBar.OptionsBar.DisableCustomization = False
        oTopDesignLevelBar.OptionsBar.DrawSizeGrip = False
        oTopDesignLevelBar.OptionsBar.UseWholeRow = True
        oTopDesignLevelBar.OptionsBar.DisableClose = True
        oTopDesignLevelBar.OptionsBar.DrawDragBorder = False
        oTopDesignLevelBar.StandaloneBarDockControl = dockTopDesignerBar
        oTopDesignLevelBar.DockStyle = BarDockStyle.Standalone
        oTopDesignLevelBar.ItemLinks.AddRange({btnLayer_Base, btnLayer_Soil, btnLayer_Water, btnLayer_Rocks, btnLayer_TerrainLevel, btnLayer_Borders, btnLayer_Signs}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.CaptionGlyph)
        oTopDesignLevelBar.ItemLinks.Add(btnLayerManageLevels, True)

        oTopDesignItemsBar = New Bar(RibbonControl.Manager, "Designer new items bar")
        oTopDesignItemsBar.OptionsBar.AllowQuickCustomization = False
        oTopDesignItemsBar.OptionsBar.DisableCustomization = False
        oTopDesignItemsBar.OptionsBar.DrawSizeGrip = False
        oTopDesignItemsBar.OptionsBar.UseWholeRow = True
        oTopDesignItemsBar.OptionsBar.DisableClose = True
        oTopDesignItemsBar.OptionsBar.DrawDragBorder = False
        oTopDesignItemsBar.StandaloneBarDockControl = dockTopDesignerBar
        oTopDesignItemsBar.DockStyle = BarDockStyle.Standalone
        oTopDesignItemsBar.ItemLinks.AddRange(grpDesignItemsAdd.ItemLinks.Select(Function(oitem) oitem.Item).ToList)

        'oTopDesignToolsBar = New Bar(RibbonControl.Manager, "Designer tools bar")
        'oTopDesignToolsBar.OptionsBar.AllowQuickCustomization = False
        'oTopDesignToolsBar.OptionsBar.DisableCustomization = False
        'oTopDesignToolsBar.OptionsBar.DrawSizeGrip = False
        'oTopDesignToolsBar.OptionsBar.UseWholeRow = True
        'oTopDesignToolsBar.OptionsBar.DisableClose = True
        'oTopDesignToolsBar.OptionsBar.DrawDragBorder = False
        'oTopDesignToolsBar.StandaloneBarDockControl = dockTopDesignerBar
        'oTopDesignToolsBar.DockStyle = BarDockStyle.Standalone
        'oTopDesignToolsBar.ItemLinks.Add(btnItemsEndEdit, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.Add(btnDesignSetCurrentCaveBranch, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.Add(btnCut, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.AddRange({btnCopy, btnPaste}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.Add(btnDelete, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.Add(btnItemsLayouts, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.Add(btnCurrentItemSegmentDirection, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.Add(btnCurrentItemLock, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)
        'oTopDesignToolsBar.ItemLinks.Add(btnCurrentItemGenericCombine, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.Standard)

        dockBottomDesignerBar.Manager = RibbonControl.Manager
        'Dim oBottomPenBar As Bar = New Bar(RibbonControl.Manager, "Pen tools bar")
        'oBottomPenBar.OptionsBar.AllowQuickCustomization = False
        'oBottomPenBar.OptionsBar.DisableCustomization = False
        'oBottomPenBar.OptionsBar.DrawSizeGrip = False
        'oBottomPenBar.OptionsBar.UseWholeRow = True
        'oBottomPenBar.OptionsBar.DisableClose = True
        'oBottomPenBar.OptionsBar.DrawDragBorder = False
        'oBottomPenBar.StandaloneBarDockControl = dockBottomDesignerBar
        'oBottomPenBar.DockStyle = BarDockStyle.Standalone
        'oBottomPenBar.ItemLinks.AddRange({btnPenLine, btnPenSpline, btnPenBezier})
        'oBottomPenBar.ItemLinks.Add(btnPenSmooting, True)
        'oBottomPenBar.ItemLinks.AddRange({btnPenSmootingFactor})


        oLastUsedBar = New Bar(RibbonControl.Manager, "Last used tools bar")
        oLastUsedBar.OptionsBar.AllowQuickCustomization = False
        oLastUsedBar.OptionsBar.DisableCustomization = False
        oLastUsedBar.OptionsBar.DrawSizeGrip = False
        oLastUsedBar.OptionsBar.UseWholeRow = True
        oLastUsedBar.OptionsBar.DisableClose = True
        oLastUsedBar.OptionsBar.DrawDragBorder = False
        oLastUsedBar.DockStyle = BarDockStyle.Standalone

        oLastUsedBar.StandaloneBarDockControl = dockBottomDesignerBar

        oBottomDesignBar = New Bar(RibbonControl.Manager, "Designer tools bar")
        oBottomDesignBar.OptionsBar.AllowQuickCustomization = False
        oBottomDesignBar.OptionsBar.DisableCustomization = False
        oBottomDesignBar.OptionsBar.DrawSizeGrip = False
        oBottomDesignBar.OptionsBar.UseWholeRow = True
        oBottomDesignBar.OptionsBar.DisableClose = True
        oBottomDesignBar.OptionsBar.DrawDragBorder = False
        oBottomDesignBar.StandaloneBarDockControl = dockBottomDesignerBar
        oBottomDesignBar.DockStyle = BarDockStyle.Standalone
        oBottomDesignBar.ItemLinks.AddRange({btnViewPlan, btnViewProfile, btnView3D}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithText, BarItemPaintStyle.Caption)
        'oBottomDesignBar.ItemLinks.Add(btnItemsEndEdit, True)
        oBottomDesignBar.ItemLinks.Add(btnDesignBarPlotCalculate, True)
        oBottomDesignBar.ItemLinks.Add(btnDesignBar3DRefresh, True)
        oBottomDesignBar.ItemLinks.Add(btnCursorMode, True)
        oBottomDesignBar.ItemLinks.AddRange({btnAltMode, btnMultiSelMode1, btnMultiSelMode2})
        oBottomDesignBar.ItemLinks.Add(btnSnapToPointNone, True)
        oBottomDesignBar.ItemLinks.AddRange({btnSnapToPoint0, btnSnapToPoint1, btnSnapToPoint2})
        oBottomDesignBar.ItemLinks.Add(btnViewRulers, True)
        oBottomDesignBar.ItemLinks.AddRange({btnViewMetricGrid}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btnEditDrawing, True)
        oBottomDesignBar.ItemLinks.AddRange({btnEditPointToPoint})
        oBottomDesignBar.ItemLinks.Add(btnViewShowCenterline, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btn3DViewTop, True)
        oBottomDesignBar.ItemLinks.AddRange({btn3DViewBottom, btn3dViewNS, btn3dViewSN, btn3dViewEW, btn3dViewWE})
        oBottomDesignBar.ItemLinks.Add(btn3DCameraType, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btn3DCameraMode, False, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btnDesignPlotShowBindings, True)
        oBottomDesignBar.ItemLinks.Add(btnGroupDesignFilters, True)
        oBottomDesignBar.ItemLinks.Add(btnGrpPensType, True)
        oBottomDesignBar.ItemLinks.Add(btnGrpPenSmooting, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)
        oBottomDesignBar.ItemLinks.Add(btnAlignToGridOptions, True, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)

        'oBottomDesignBar.ItemLinks.Add(btnPenLine, True)
        'oBottomDesignBar.ItemLinks.AddRange({btnPenSpline, btnPenBezier})
        'oBottomDesignBar.ItemLinks.Add(btnPenSmooting, True)
        'oBottomDesignBar.ItemLinks.AddRange({btnPenSmootingFactor}, DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText, BarItemPaintStyle.CaptionInMenu)

        'here update workspaces menu and toolbar
        'Using oReg As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser.CreateSubKey("Software\Cepelabs\cSurvey", Microsoft.Win32.RegistryKeyPermissionCheck.ReadWriteSubTree)
        '    Dim oShowInToolbar As List(Of String) = New List(Of String)
        '    Call oShowInToolbar.AddRange(oReg.GetValue("workspaces.showintoolbar", "").ToString.Split({";"}, StringSplitOptions.RemoveEmptyEntries))

        '    For iIndex As Integer = mnuViewWorkspaces.DropDownItems.Count - 1 To 0 Step -1
        '        If mnuViewWorkspaces.DropDownItems(iIndex).Name Like "mnuworkspacesitem_*" Then
        '            mnuViewWorkspaces.DropDownItems.RemoveAt(iIndex)
        '        End If
        '    Next
        '    For Each sShowInToolbar As String In oShowInToolbar
        '        Dim oNewItem As ToolStripMenuItem = New ToolStripMenuItem(sShowInToolbar, Nothing, AddressOf mnuViewWorkspacesItem_click, "mnuworkspacesitem_" & sShowInToolbar)
        '        mnuViewWorkspaces.DropDownItems.Insert(mnuViewWorkspaces.DropDownItems.IndexOf(mnuViewWorkspacesSep2), oNewItem)
        '    Next
        '    mnuViewWorkspacesSep2.Visible = oShowInToolbar.Count > 0

        '    For iIndex As Integer = tbWorkspaces.Items.Count - 1 To 0 Step -1
        '        If tbWorkspaces.Items(iIndex).Name Like "btnworkspacesitem_*" Then
        '            tbWorkspaces.Items.RemoveAt(iIndex)
        '        End If
        '    Next

        '    For Each sShowInToolbar As String In oShowInToolbar
        '        Dim oNewItem As ToolStripButton = New ToolStripButton(sShowInToolbar, Nothing, AddressOf mnuViewWorkspacesItem_click, "btnworkspacesitem_" & sShowInToolbar)
        '        tbWorkspaces.Items.Insert(tbWorkspaces.Items.IndexOf(btnWorkspaceSep2), oNewItem)
        '    Next
        'End Using

        RibbonControl.SelectedPage = pageHome
    End Sub

    Private oGalleryIndex As Dictionary(Of cIItemSign.SignEnum, String)

    Private Sub oSurvey_OnGetDefaultSignFromGallery(Sender As Object, Args As cSurvey.cSurvey.OnGetDefaultSignFromGalleryEventArgs) Handles oSurvey.OnGetDefaultSignFromGallery
        If oGalleryIndex Is Nothing Then
            Call oDockClipart.LoadGalleries()
            Dim oGallery As List(Of cGalleryItem) = oDockClipart.GetGalleryItems(oDockClipart.GalleryIndexByCategory(cIItem.cItemCategoryEnum.Sign))
            oGalleryIndex = cSingsImportHelper.CreateIndex(oGallery)
        End If
        If oGalleryIndex.ContainsKey(Args.Sign) Then
            sFilename = oGalleryIndex(Args.Sign)
            If sFilename.StartsWith("file://") Then
                Args.Filename = sFilename.Substring(7)
                Args.DataFormat = cIItemClipartBase.cClipartDataFormatEnum.SVGFile
            ElseIf sFilename.StartsWith("id://") Then
                Args.Filename = sFilename.Substring(5)
                Args.DataFormat = cIItemClipartBase.cClipartDataFormatEnum.SVGResource
            End If
        End If
    End Sub

    Private Sub oDockLS_OnFilenameRequest(sender As Object, e As cDockLinkedSurveys.cFilenameRequestEventArgs) Handles oDockLS.OnFilenameRequest
        e.Filename = sFilename
    End Sub

    Private Sub oDockLevels_OnGetLocalizedResource(Sender As Object, e As KeyValueChangeEventArgs(Of String, String)) Handles oDockLevels.OnGetLocalizedResource
        If e.Name.StartsWith("layer") Then
            e.Value = oTopDesignLevelBar.ItemLinks.Item(e.Name.Replace("layer", "")).Caption
        End If
    End Sub

    Private Sub oDockLevels_onItemSelected(Sender As Object, e As cDockLevels.cItemSelectedEventargs) Handles oDockLevels.OnItemSelected
        If Not pGetCurrentDesignTools.CurrentItem Is e.Item Then
            Call pGetCurrentDesignTools.SelectItem(e.Item)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    Private Sub oDockLevels_onLayerSelected(Sender As Object, e As cDockLevels.cLayerSelectedEventargs) Handles oDockLevels.OnLayerSelected
        If Not pGetCurrentDesignTools.CurrentLayer Is e.Layer Then
            Call pGetCurrentDesignTools.SelectLayer(e.Layer)
            Call pMapInvalidate()
            Call pMapCenterAndFitSelection()
        End If
    End Sub

    Private Sub oDockLevels_OnShowProperties(Sender As Object, e As EventArgs) Handles oDockLevels.OnShowProperties
        Call pObjectPropShow(True)
        'Call tabObjectProp.SelectTab(tabObjectPropMain)
    End Sub

    Private Sub oDockLevels_OnMapInvalidate(Sender As Object, e As EventArgs) Handles oDockLevels.OnMapInvalidate
        Call pMapInvalidate()
    End Sub

    Private Sub oDockLevels_OnFilterEdit(Sender As Object, e As EventArgs) Handles oDockLevels.OnFilterEdit
        Call pSurveyLayersFilterEdit()
    End Sub

    Private Sub btnNew_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnNew.ItemClick
        Call pSurveyNew()
    End Sub

    Private Sub btnLoad_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnLoad.ItemClick
        Call pSurveyLoad()
    End Sub

    Private Sub btnRollback_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnRollback.ItemClick
        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning6"), MsgBoxStyle.Exclamation Or MsgBoxStyle.YesNo, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Call pSurveyLoad(sFilename, False)
        End If
    End Sub

    Private Sub btnSave_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSave.ItemClick
        Call pSurveySave(sFilename)
    End Sub

    Private Sub btnSaveAs_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSaveAs.ItemClick
        Call pSurveySave()
    End Sub

    Private Sub btnSaveAsTemplate_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSaveAsTemplate.ItemClick
        Using frmT As frmTemplates = New frmTemplates(oTemplates, True)
            With frmT
                If .ShowDialog() = DialogResult.OK Then
                    Dim sTemplateFilename As String = IO.Path.Combine(oTemplates.TemplatePath, frmT.txtName.Text) & ".csz"
                    Call pSurveySave(sTemplateFilename, True, cSurvey.cSurvey.SaveOptionsEnum.NoHistory Or cSurvey.cSurvey.SaveOptionsEnum.Silent)
                End If
                'always enumerate cause default could be changed...
                Call oTemplates.Refresh()
                btnNew.ButtonStyle = If(oTemplates.Count > 0, BarButtonStyle.DropDown, BarButtonStyle.Default)
            End With
        End Using
    End Sub

    Private Sub btnPrint_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnPrint.ItemClick
        Call pSurveyPrint()
    End Sub

    Private Sub btnProperties_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnProperties.ItemClick
        Call pSurveyProperty()
    End Sub

    Private Sub btnSurface_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnSurface.ItemClick
        Call pSurveySurface()
    End Sub

    Private Sub btnCleanUp_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnCleanUp.ItemClick
        Call pSurveyCleanUp()
    End Sub

    Private Sub btnHistory_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnHistory.ItemClick
        Using frmH As frmHistory = New frmHistory(oSurvey, sFilename)
            AddHandler frmH.OnRestore, AddressOf oHistory_OnRestore
            AddHandler frmH.OnAdd, AddressOf oHistory_OnAdd
            Call frmH.ShowDialog(Me)
        End Using
    End Sub

    Private Sub btnResurvey_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnResurvey.ItemClick
        Call pResurvey()
    End Sub

    Private Sub btnLoch_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnLoch.ItemClick
        Call pSurveyLoch()
    End Sub

    'Private Sub btnTherionPad_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnTherionPad.ItemClick
    '    Call pSurveyTherionPad()
    'End Sub

    Private Sub btnHide_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnHide.ItemClick
        Call pTrayHideIn()
    End Sub

    Private Sub btnExit_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExit.ItemClick
        Call Close()
    End Sub

    Private Sub btnExport3D_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExport3D.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.threedD)
    End Sub

    Private Sub btnExportImage_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExportImage.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.Image)
    End Sub

    Private Sub btnExportData_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExportData.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.Survey)
    End Sub

    Private Sub btnExportTrack_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnExportTrack.ItemClick
        Call pSurveyExport(ImportExportFormatEnum.Track)
    End Sub

    Private Sub btnImportData_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnImportData.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Survey, "", True)
    End Sub

    Private Sub btnImportTrack_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnImportTrack.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Track, "", True)
    End Sub

    Private Sub btnImportDesign_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles btnImportDesign.ItemClick
        Call pSurveyImport(ImportExportFormatEnum.Design, "", True)
    End Sub

    Private Sub mnuRecents_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuRecents.BeforePopup
        Dim iRecentIndex As Integer = 1
        Call mnuRecents.ClearItems
        If oRecents.Count > 0 Then
            For Each sRecent As String In oRecents
                Dim oItem As BarButtonItem = New BarButtonItem(RibbonControl.Manager, iRecentIndex & " " & sRecent)
                oItem.Tag = sRecent
                AddHandler oItem.ItemClick, AddressOf oRecentItem_ItemClick
                mnuRecents.AddItem(oItem)

                iRecentIndex += 1
            Next
        End If
    End Sub

    Private Sub mnuTemplates_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuTemplates.BeforePopup
        Call mnuTemplates.ClearItems
        For Each oTemplate As UIHelpers.cTemplateEntry In oTemplates
            Dim oItem As BarButtonItem = New BarButtonItem(RibbonControl.Manager, oTemplate.Name)
            oItem.Tag = oTemplate
            AddHandler oItem.ItemClick, AddressOf oNewFromTemplate_ItemClick
            mnuTemplates.AddItem(oItem)
        Next
    End Sub

    Private Sub btnRemoveOrphans_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnRemoveOrphans.ItemClick
        Call pTrigpointRemoveOrphans()
    End Sub

    Private Sub btnPlotCalculate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotCalculate.ItemClick
        Call pSurveyCalculate(True)
    End Sub

    Private Sub btnPlotRebind_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotRebind.ItemClick
        Call pSurveyTrigpointsRefresh()
    End Sub

    Private Sub btnPlotInfoCave_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotInfoCave.ItemClick
        Call pSurveyInfoCave()
    End Sub

    Private Sub btnZoomIn_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomIn.ItemClick
        Call pMapZoomIn()
    End Sub

    Private Sub btnZoomOut_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomOut.ItemClick
        Call pMapZoomOut()
    End Sub

    Private Sub btnZoomToFit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomToFit.ItemClick
        Call pMapCenterAndFit()
    End Sub

    Private Sub btnLayerManageLevels_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnLayerManageLevels.ItemClick
        Call pObjectPropShow(True)
        Call pLevelsShow(True)
        Call pLevelsShow(True)
    End Sub

    Private Sub btnLayer_Base_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Base.CheckedChanged
        If btnLayer_Base.Checked Then
            'btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base))
            Call pLayerTools_EnabledByLevel(oCurrentDesign.Type, cLayers.LayerTypeEnum.Base)
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Soil_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Soil.CheckedChanged
        If btnLayer_Soil.Checked Then
            btnLayer_Base.Checked = False
            'btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Soil))
            Call pLayerTools_EnabledByLevel(oCurrentDesign.Type, cLayers.LayerTypeEnum.Soil)
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Water_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Water.CheckedChanged
        If btnLayer_Water.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            'btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.WaterAndFloorMorphologies))
            Call pLayerTools_EnabledByLevel(oCurrentDesign.Type, cLayers.LayerTypeEnum.WaterAndFloorMorphologies)
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Rocks_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Rocks.CheckedChanged
        If btnLayer_Rocks.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            'btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.RocksAndConcretion))
            Call pLayerTools_EnabledByLevel(oCurrentDesign.Type, cLayers.LayerTypeEnum.RocksAndConcretion)
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_TerrainLevel_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_TerrainLevel.CheckedChanged
        If btnLayer_TerrainLevel.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            'btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.CeilingMorphologies))
            Call pLayerTools_EnabledByLevel(oCurrentDesign.Type, cLayers.LayerTypeEnum.CeilingMorphologies)
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Borders_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Borders.CheckedChanged
        If btnLayer_Borders.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            'btnLayer_Borders.Checked = False
            btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Borders))
            Call pLayerTools_EnabledByLevel(oCurrentDesign.Type, cLayers.LayerTypeEnum.Borders)
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnLayer_Signs_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnLayer_Signs.CheckedChanged
        If btnLayer_Signs.Checked Then
            btnLayer_Base.Checked = False
            btnLayer_Soil.Checked = False
            btnLayer_Water.Checked = False
            btnLayer_TerrainLevel.Checked = False
            btnLayer_Rocks.Checked = False
            btnLayer_Borders.Checked = False
            'btnLayer_Signs.Checked = False
            Call pToolsEnd()
            Call pGetCurrentDesignTools.SelectLayer(oCurrentDesign.Layers(cLayers.LayerTypeEnum.Signs))
            Call pLayerTools_EnabledByLevel(oCurrentDesign.Type, cLayers.LayerTypeEnum.Signs)
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignEndEdit()
        If pGetCurrentDesignTools.IsInEdit Then
            Call pGetCurrentDesignTools.EndAndSelectItem()
            'frmMFT.btnPenEndEdit.Enabled = False
            btnItemsEndEdit.Enabled = False
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnItemsEndEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsEndEdit.ItemClick
        Call pDesignEndEdit()
    End Sub

    Private Sub btnSurveyInfoSession_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoSession.ItemClick
        Call pSurveyInfoSession()
    End Sub

    Private Sub btnSurveyInfoEntrance_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoEntrance.ItemClick
        Call pSurveyInfoEntrance()
    End Sub

    Private Sub btnSurveyInfoOrientation_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoOrientation.ItemClick
        Call pSurveyInfoBearing()
    End Sub

    Private Sub btnSurveyInfoRing_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoRing.ItemClick
        Call pSurveyInfoRing()
    End Sub

    Private Sub btnCopy_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCopy.ItemClick
        Call pClipboardCopy()
    End Sub

    Private Sub btnCut_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCut.ItemClick
        Call pClipboardCut()
    End Sub

    Private Sub btnDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDelete.ItemClick
        Call pClipboardDelete()
    End Sub

    Private Sub btnPasteService_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPasteService.ItemClick
        If Not btnPasteService.ActAsDropDown Then
            If picMap.Focused Then
                Call pClipboardPaste("", modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
            Else
                Call pClipboardPaste()
            End If
        End If
    End Sub

    Private Sub btnSettings_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSettings.ItemClick
        Call pSettings()
    End Sub

    Public Sub pSettings()
        Call pSettingsSave()
        Using frmS As frmSettings = New frmSettings()
            If frmS.ShowDialog(Me) = Windows.Forms.DialogResult.OK Then
                Call pSettingsLoad()
                Call pSettingsSave()
                Call pMapInvalidate()
            End If
        End Using
    End Sub

    Private Sub btnDesignDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignDeleteAll.ItemClick
        Call pDesignDeleteAll()
    End Sub

    Private Sub pDesignDeleteAll()
        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning12"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Call pGetCurrentDesignTools.SelectItem(Nothing)
            Call oCurrentDesign.Clear()
            'Call pGetCurrentTools.Undo.Clear()
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignLockAll()
        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning14"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            For Each oItem As cItem In oCurrentDesign.GetAllItems()
                Call oItem.LockSegments()
            Next
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pDesignUnlockAll()
        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning13"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            For Each oItem As cItem In oCurrentDesign.GetAllItems()
                Call oItem.UnlockSegments()
            Next
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnDesignPlotUnlockAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotUnlockAll.ItemClick
        Call pDesignUnlockAll()
    End Sub

    Private Sub btnDesignPlotLockAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotLockAll.ItemClick
        Call pDesignLockAll()
    End Sub

    Private Sub pDesignRemoveBindings()
        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning16"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oItems As List(Of cItem) = oCurrentDesign.GetAllItems()
            Dim iIndex As Integer = 0
            Dim iCount As Integer = oItems.Count
            Call oSurvey.RaiseOnProgressEvent("design.removebindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, GetLocalizedString("main.progressbegin4"), 0, cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageCalculate Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
            For Each oItem As cItem In oItems
                If iIndex Mod 20 = 0 Then Call oSurvey.RaiseOnProgressEvent("design.removebindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, GetLocalizedString("main.progress4"), iIndex / iCount)
                Call oItem.UnbindSegments()
                iIndex += 1
            Next
            Call oSurvey.RaiseOnProgressEvent("design.removebindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, GetLocalizedString("main.progressend4"), 0)
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
            Call oMousePointer.Pop()
        End If
    End Sub

    Private Sub btnDesignPlotRemoveBindings_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotRemoveBindings.ItemClick
        Call pDesignRemoveBindings()
    End Sub

    Private Sub pDesignRebindAll()
        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning15"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            Dim oItems As List(Of cItem) = oCurrentDesign.GetAllItems()
            Dim iIndex As Integer = 0
            Dim iCount As Integer = oItems.Count
            Call oSurvey.RaiseOnProgressEvent("design.bindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Begin, GetLocalizedString("main.progressbegin3"), 0, cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ImageCalculate Or cSurvey.cSurvey.OnProgressEventArgs.ProgressOptionsEnum.ShowProgressWindow)
            For Each oItem As cItem In oItems
                If iIndex Mod 20 = 0 Then Call oSurvey.RaiseOnProgressEvent("design.bindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.Progress, GetLocalizedString("main.progress3"), iIndex / iCount)
                Call oItem.BindSegments()
                iIndex += 1
            Next
            Call oSurvey.RaiseOnProgressEvent("design.bindings", cSurvey.cSurvey.OnProgressEventArgs.ProgressActionEnum.End, GetLocalizedString("main.progressend3"), 0)
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
            Call oMousePointer.Pop()
        End If
    End Sub

    Private Sub btnDesignPlotRebindAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotRebindAll.ItemClick
        Call pDesignRebindAll()
    End Sub

    Private Sub btnDesignPlotShowBindings_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignPlotShowBindings.CheckedChanged
        Call pDesignShowBindings(btnDesignPlotShowBindings.Checked)
    End Sub

    Private Sub btnDesignEditScaleRules_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignEditScaleRules.ItemClick
        Call pScaleRulesEdit()
    End Sub

    Private Sub btnViewFieldData_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewFieldData.ItemClick
        Call pFieldDataShow(True)
    End Sub

    Private Sub btnViewDesign_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewDesignArea.ItemClick
        Call pDesignAreaShow(True)
    End Sub

    Private Sub btnViewObjectProp_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewObjectProp.ItemClick
        Call pObjectPropShow(True)
    End Sub

    Private Sub btnViewViewer_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewViewer.ItemClick
        Call pSurveyViewer()
    End Sub

    Private Sub btnMainSessionList_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainSessionList.EditValueChanged
        'TODO: is usefull?
        Call pSegmentSetSessionColor()
    End Sub

    Private Sub btnMainBindDesignType_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainBindDesignType.EditValueChanged
        cboMainBindCrossSections.Enabled = btnMainBindDesignType.EditValue > 0
        If Not bDisabledCaveBranchChangeEvent Then
            Call pGetCurrentDesignTools.SelectBindDesignType(btnMainBindDesignType.EditValue)
            If cboMainBindCrossSections.Enabled Then
                Call pSurveyFillCrossSectionsList(pGetCurrentDesignTools.CurrentCave, pGetCurrentDesignTools.CurrentBranch, btnMainBindDesignType, btnMainBindCrossSections)
            End If
        End If
    End Sub

    Private Sub btnMainBindCrossSections_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainBindCrossSections.EditValueChanged
        If Not bDisabledCaveBranchChangeEvent Then
            If Not IsNothing(btnMainBindCrossSections.EditValue) Then Call pGetCurrentDesignTools.SelectCrossSection(btnMainBindCrossSections.EditValue.id)
        End If
    End Sub

    Private Sub btnMainCaveBranchList_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainCaveBranchList.EditValueChanged
        If Not bDisabledCaveBranchChangeEvent Then
            Dim sCurrentCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
            Dim sCurrentBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
            Call pGetCurrentDesignTools.SelectCave(sCurrentCave, sCurrentBranch)
        End If
    End Sub

    Private Sub btnMainCaveList_EditValueChanged(sender As Object, e As EventArgs) Handles btnMainCaveList.EditValueChanged
        Call pSurveyFillCaveBranchList(CType(btnMainCaveList.EditValue, cCaveInfo), btnMainCaveBranchList)
        If Not bDisabledCaveBranchChangeEvent Then
            Dim sCurrentCave As String = cCaveInfo.EditToString(btnMainCaveList.EditValue)
            Dim sCurrentBranch As String = cCaveInfoBranch.EditToString(btnMainCaveBranchList.EditValue)
            Call pGetCurrentDesignTools.SelectCave(sCurrentCave, sCurrentBranch)
        End If
    End Sub

    Private Sub btnViewScript_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewScript.ItemClick
        Call pScriptShow()
    End Sub

    Private Sub btnViewSharedTexts_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewSharedTexts.ItemClick
        Call pTextsShow()
    End Sub

    Private Sub btnViewConsole_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewConsole.ItemClick
        Call pConsoleShow(True)
    End Sub

    Private Sub btnViewLinkedSurveys_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewLinkedSurveys.ItemClick
        Call pLinkedSurveyShow()
    End Sub

    Private Sub btnViewSplayShowMode0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewSplayShowMode0.CheckedChanged
        If btnViewSplayShowMode0.Checked Then
            DirectCast(oCurrentOptions, cOptionsDesign).SplayEditMode = cOptionsDesign.SplayEditModeEnum.All
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub btnViewSplayShowMode1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewSplayShowMode1.CheckedChanged
        If btnViewSplayShowMode1.Checked Then
            DirectCast(oCurrentOptions, cOptionsDesign).SplayEditMode = cOptionsDesign.SplayEditModeEnum.OnlyCurrentSegment
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub btnViewSplayShowMode_Popup(sender As Object, e As EventArgs) Handles btnViewSplayShowMode.Popup
        Select Case DirectCast(oCurrentOptions, cOptionsDesign).SplayEditMode
            Case cOptionsDesign.SplayEditModeEnum.All
                btnViewSplayShowMode0.Checked = True
                btnViewSplayShowMode1.Checked = False
            Case cOptionsDesign.SplayEditModeEnum.OnlyCurrentSegment
                btnViewSplayShowMode0.Checked = False
                btnViewSplayShowMode1.Checked = True
        End Select
    End Sub

    Private Sub btnDesignHighlightMode_Popup(sender As Object, e As EventArgs) Handles btnDesignHighlightMode.Popup
        Select Case oCurrentOptions.HighlightMode
            Case cOptionsCenterline.HighlightModeEnum.Default
                btnDesignHighlightMode0.Checked = True
                btnDesignHighlightMode1.Checked = False
                btnDesignHighlightMode2.Checked = False
            Case cOptionsCenterline.HighlightModeEnum.Hierarchic
                btnDesignHighlightMode0.Checked = False
                btnDesignHighlightMode1.Checked = True
                btnDesignHighlightMode2.Checked = False
            Case cOptionsCenterline.HighlightModeEnum.ExactMatch
                btnDesignHighlightMode0.Checked = False
                btnDesignHighlightMode1.Checked = False
                btnDesignHighlightMode2.Checked = True
        End Select
    End Sub

    Private Sub btnDesignHighlightMode0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightMode0.CheckedChanged
        If btnDesignHighlightMode0.Checked Then
            If oCurrentOptions.HighlightMode <> cOptionsCenterline.HighlightModeEnum.Default Then
                oCurrentOptions.HighlightMode = cOptionsCenterline.HighlightModeEnum.Default
                Call pSurveyHighlightCurrentCave(False)
            End If
        End If
    End Sub

    Private Sub btnDesignHighlightMode1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightMode1.CheckedChanged
        If btnDesignHighlightMode1.Checked Then
            If oCurrentOptions.HighlightMode <> cOptionsCenterline.HighlightModeEnum.Hierarchic Then
                oCurrentOptions.HighlightMode = cOptionsCenterline.HighlightModeEnum.Hierarchic
                Call pSurveyHighlightCurrentCave(False)
            End If
        End If
    End Sub

    Private Sub btnDesignHighlightMode2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightMode2.CheckedChanged
        If btnDesignHighlightMode2.Checked Then
            If oCurrentOptions.HighlightMode <> cOptionsCenterline.HighlightModeEnum.ExactMatch Then
                oCurrentOptions.HighlightMode = cOptionsCenterline.HighlightModeEnum.ExactMatch
                Call pSurveyHighlightCurrentCave(False)
            End If
        End If
    End Sub

    Private Sub btnDesignHighlight0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlight0.CheckedChanged
        If btnDesignHighlight0.Checked Then
            oCurrentOptions.HighlightCurrentCave = False
        End If
    End Sub

    Private Sub btnDesignHighlight1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlight1.CheckedChanged
        If btnDesignHighlight1.Checked Then
            oCurrentOptions.HighlightCurrentCave = True
        End If
    End Sub

    Private Sub oCurrentOptions_OnPropertyChanged(sender As Object, e As PropertyChangeEventArgs) Handles oCurrentOptions.OnPropertyChanged
        Select Case e.Name
            Case "HighlightSegmentsAndTrigpoints"
                btnDesignHighlightSegmentsAndTrigpoints.Checked = oCurrentOptions.HighlightSegmentsAndTrigpoints
                Call pSurveySegmentsAndTrigpointVisibility()
            Case "HighlightCurrentCave"
                btnDesignHighlight0.Checked = Not oCurrentOptions.HighlightCurrentCave
                btnDesignHighlight1.Checked = oCurrentOptions.HighlightCurrentCave
                Call pSurveyHighlightCurrentCave(True)
            Case "DrawChunks"
                o3DDesignModel.chkShowChunks.Checked = DirectCast(oCurrentOptions, cOptions3D).DrawChunks
        End Select
    End Sub

    Private Sub oCurrentOptions_OnMapInvalidate(Sender As Object, e As EventArgs) Handles oCurrentOptions.OnMapInvalidate
        Call pMapInvalidate()
    End Sub

    Private Sub btnSegmentAdd_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentAdd.ItemClick
        Call pSegmentAdd()
    End Sub

    Private Sub btnSegmentDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentDelete.ItemClick
        Call pSegmentDelete()
    End Sub

    Private Sub btnPlotDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotDeleteAll.ItemClick
        Call pSurveyWipeData()
    End Sub

    Private Sub pSurveyGrades()
        Call pSurveyProperty(16)
        'Using frmG As frmGrades = New frmGrades(oSurvey)
        '    With frmG
        '        AddHandler frmG.OnApply, AddressOf frmGrades_OnApply
        '        If .ShowDialog(Me) = vbOK Then
        '            'nulla
        '        End If
        '    End With
        'End Using
    End Sub

    Private Sub btnPlotGrades_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotGrades.ItemClick
        Call pSurveyGrades()
    End Sub

    Private Sub btnPlotManageLRUD_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotManageLRUD.ItemClick
        Call pSegmentsLRUDManage()
    End Sub

    Private Sub btnPlotPrefixTrigpoints_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotPrefixTrigpoints.ItemClick
        Call pTrigpointsTrigpointPrefix()
    End Sub

    Private Sub btnPlotRenameTrigpoints_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotRenameTrigpoints.ItemClick
        Call pSegmentsTrigPointRename()
    End Sub

    Private Sub btnPlotReplicateData_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotReplicateData.ItemClick
        Call pSegmentsDataReplicate()
    End Sub

    Private Sub btnPlotSplayReplicate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotSplayReplicate.ItemClick
        Call pSplayReplicateData()
    End Sub

    Private Sub btnPlotManageVisibility_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPlotManageVisibility.ItemClick
        Call pSurveyManageVisibility()
    End Sub

    Private Sub btnEditFind_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnEditFind.ItemClick
        Call pFind()
    End Sub

    Private Sub btnZoomZoomCenter_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomZoomCenter.ItemClick
        Call pMapCenter()
    End Sub

    Private Sub btnZoomZoomToFitCaveBranch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomZoomToFitCaveBranch.ItemClick
        Call pMapCenterAndFitCaveBranch()
    End Sub

    Private Sub btnZoomZoomToSelection_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnZoomZoomToSelection.ItemClick
        Call pMapCenterAndFitSelection()
    End Sub

    Private Sub btnZoomAutoZoomToFit_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnZoomAutoZoomToFit.CheckedChanged
        bAutoZoomToFit = btnZoomAutoZoomToFit.Checked
    End Sub

    Private Sub btnHelpCheckUpdate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnHelpCheckUpdate.ItemClick
        Call pSurveyCheckNewVersion()
    End Sub

    Private Sub btnHelpInfo_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnHelpInfo.ItemClick
        Call pSurveyAbout()
    End Sub

    Private Sub pSurveyAbout()
        Using frmA As frmAbout = New frmAbout
            Call frmA.ShowDialog(Me)
        End Using
    End Sub

    Private Sub btnViewWorkspaceAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewWorkspaceAll.ItemClick
        Call pWorkspaceAll()
    End Sub

    Private Sub btnViewWorkspaceData_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewWorkspaceData.ItemClick
        Call pWorkspaceData()
    End Sub

    Private Sub btnViewWorkspaceDesign_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewWorkspaceDesign.ItemClick
        Call pWorkspaceDesign()
    End Sub

    Private Sub btnEditSelectAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnEditSelectAll.ItemClick
        Call pClipboardSelectAll()
    End Sub

    Private Sub pnlStatusCurrentRule_ItemClick(sender As Object, e As ItemClickEventArgs) Handles pnlStatusCurrentRule.ItemClick
        Call pScaleRulesEdit()
    End Sub

    Private Sub btnDesignGraphics_Popup(sender As Object, e As EventArgs) Handles btnDesignGraphicsQuality.Popup
        btnDesignGraphics0.Checked = iDesignQuality = DesignQualityLevelEnum.Base
        btnDesignGraphics1.Checked = iDesignQuality = DesignQualityLevelEnum.MediumQuality
        btnDesignGraphics2.Checked = iDesignQuality = DesignQualityLevelEnum.HighQuality
    End Sub

    Private Sub btnDesignGraphics0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignGraphics0.CheckedChanged
        Call pSettingsSetDesignQuality(DesignQualityLevelEnum.Base)
    End Sub

    Private Sub btnDesignGraphics1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignGraphics1.CheckedChanged
        Call pSettingsSetDesignQuality(DesignQualityLevelEnum.MediumQuality)
    End Sub

    Private Sub btnDesignGraphics2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignGraphics2.CheckedChanged
        Call pSettingsSetDesignQuality(DesignQualityLevelEnum.HighQuality)
    End Sub

    Private Sub btnObjectSetCaveBranch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnObjectSetCaveBranch.ItemClick
        Call pObjectSetCaveBranch()
    End Sub

    Private Sub btnCursorMode_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnCursorMode.DownChanged
        If btnCursorMode.Down Then
            btnScrollMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode1.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnSnapToPoint0_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPoint0.DownChanged
        If btnSnapToPoint0.Down Then
            btnSnapToPointNone.Down = False
            btnSnapToPoint1.Down = False
            btnSnapToPoint2.Down = False
            iSnapToPoint = 1
        End If
    End Sub

    Private Sub btnSnapToPoint1_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPoint1.DownChanged
        If btnSnapToPoint1.Down Then
            btnSnapToPointNone.Down = False
            btnSnapToPoint0.Down = False
            btnSnapToPoint2.Down = False
            iSnapToPoint = 2
        End If
    End Sub

    Private Sub btnSnapToPoint2_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPoint2.DownChanged
        If btnSnapToPoint2.Down Then
            btnSnapToPointNone.Down = False
            btnSnapToPoint0.Down = False
            btnSnapToPoint1.Down = False
            iSnapToPoint = 3
        End If
    End Sub

    Private Sub btnSnapToPointNone_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnSnapToPointNone.DownChanged
        If btnSnapToPointNone.Down Then
            btnSnapToPoint0.Down = False
            btnSnapToPoint1.Down = False
            btnSnapToPoint2.Down = False
            iSnapToPoint = 0
        End If
    End Sub

    Private Sub btnScrollMode_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnScrollMode.DownChanged
        If btnScrollMode.Down Then
            btnCursorMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode1.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnAltMode_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnAltMode.DownChanged
        If btnAltMode.Down Then
            btnCursorMode.Down = False
            btnScrollMode.Down = False
            btnMultiSelMode1.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnMultiSelMode1_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnMultiSelMode1.DownChanged
        If btnMultiSelMode1.Down Then
            btnCursorMode.Down = False
            btnScrollMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode2.Down = False
        End If
    End Sub

    Private Sub btnMultiSelMode2_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnMultiSelMode2.DownChanged
        If btnMultiSelMode2.Down Then
            btnCursorMode.Down = False
            btnScrollMode.Down = False
            btnAltMode.Down = False
            btnMultiSelMode1.Down = False
        End If
    End Sub

    Private Sub btnViewRulers_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewRulers.CheckedChanged
        Call pRulersSetVisible(btnViewRulers.Checked)
    End Sub

    Private Sub btnEditDrawing_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnEditDrawing.DownChanged
        If btnEditDrawing.Down Then
            bEditPointByPoint = False
            btnEditPointToPoint.Down = False
        End If
    End Sub

    Private Sub btnEditPointToPoint_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnEditPointToPoint.DownChanged
        bEditPointByPoint = True
        btnEditDrawing.Down = False
        btnEditPointToPoint.Down = True
    End Sub

    Private Sub btnFilterEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnFilterEdit.ItemClick
        Call pSurveyLayersFilterEdit()
    End Sub

    Private Sub btnPenSpliner_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenSpline.DownChanged
        Call oSurvey.Properties.DesignProperties.SetValue("LineType", cIItemLine.LineTypeEnum.Splines)
        Call pPropDefaultPenStyle()
    End Sub

    Private Sub btnPenBezier_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenBezier.DownChanged
        Call oSurvey.Properties.DesignProperties.SetValue("LineType", cIItemLine.LineTypeEnum.Beziers)
        Call pPropDefaultPenStyle()
    End Sub

    Private Sub btnPenLine_DownChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenLine.DownChanged
        Call oSurvey.Properties.DesignProperties.SetValue("LineType", cIItemLine.LineTypeEnum.Lines)
        Call pPropDefaultPenStyle()
    End Sub

    Private Sub btnViewMetricGrid2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewMetricGrid2.CheckedChanged
        If btnViewMetricGrid2.Checked Then
            If iDrawMetricGrid <> 2 Then
                iDrawMetricGrid = 2
                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub btnViewMetricGrid0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewMetricGrid0.CheckedChanged
        If btnViewMetricGrid0.Checked Then
            If iDrawMetricGrid <> 0 Then
                iDrawMetricGrid = 0
                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub btnViewMetricGrid1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewMetricGrid1.CheckedChanged
        If btnViewMetricGrid1.Checked Then
            If iDrawMetricGrid <> 1 Then
                iDrawMetricGrid = 1
                Call pMapInvalidate()
            End If
        End If
    End Sub

    Private Sub btnViewMetricGrid_Popup(sender As Object, e As EventArgs) Handles btnViewMetricGrid.Popup
        Select Case iDrawMetricGrid
            Case 0
                btnViewMetricGrid0.Checked = True
                btnViewMetricGrid1.Checked = False
                btnViewMetricGrid2.Checked = False
            Case 1
                btnViewMetricGrid0.Checked = False
                btnViewMetricGrid1.Checked = True
                btnViewMetricGrid2.Checked = False
            Case 2
                btnViewMetricGrid0.Checked = False
                btnViewMetricGrid1.Checked = False
                btnViewMetricGrid2.Checked = True
        End Select
    End Sub

    Private Sub btn3DCameraType_Popup(sender As Object, e As EventArgs) Handles btn3DCameraType.Popup
        If Not oHolos Is Nothing Then
            If oHolos.CameraType = cHolosViewer.CameraTypeEnum.Perspective Then
                btn3DCameraType0.Checked = True
                btn3DCameraType1.Checked = False
            Else
                btn3DCameraType0.Checked = False
                btn3DCameraType1.Checked = True
            End If
        Else
            btn3DCameraType0.Enabled = False
            btn3DCameraType1.Enabled = False
        End If
    End Sub

    Private Sub btn3DCameraType1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraType1.CheckedChanged
        If btn3DCameraType1.Checked Then
            If oHolos.CameraType <> cHolosViewer.CameraTypeEnum.Orthographic Then
                oHolos.CameraType = cHolosViewer.CameraTypeEnum.Orthographic
                Call pMapCenterAndFit()
            End If
        End If
    End Sub

    Private Sub btn3DCameraType0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraType0.CheckedChanged
        If btn3DCameraType0.Checked Then
            If oHolos.CameraType <> cHolosViewer.CameraTypeEnum.Perspective Then
                oHolos.CameraType = cHolosViewer.CameraTypeEnum.Perspective
                Call pMapCenterAndFit()
            End If
        End If
    End Sub

    Private Sub btn3DCameraMode_Popup(sender As Object, e As EventArgs) Handles btn3DCameraMode.Popup
        If Not oHolos Is Nothing Then
            If oHolos.CameraMode = cHolosViewer.cameraModeEnum.Inspect Then
                btn3DCameraMode0.Checked = True
                btn3DCameraMode1.Checked = False
            Else
                btn3DCameraMode0.Checked = False
                btn3DCameraMode1.Checked = True
            End If
        Else
            btn3DCameraMode0.Enabled = False
            btn3DCameraMode1.Enabled = False
        End If
    End Sub

    Private Sub btn3DCameraMode0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraMode0.CheckedChanged
        If btn3DCameraMode0.Checked Then
            If oHolos.CameraMode <> cHolosViewer.cameraModeEnum.Inspect Then
                oHolos.CameraMode = cHolosViewer.cameraModeEnum.Inspect
            End If
        End If
    End Sub

    Private Sub btn3DCameraMode1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btn3DCameraMode1.CheckedChanged
        If btn3DCameraMode1.Checked Then
            If oHolos.CameraMode <> cHolosViewer.cameraModeEnum.Walkaround Then
                oHolos.CameraMode = cHolosViewer.cameraModeEnum.Walkaround
            End If
        End If
    End Sub

    Private Sub btnFilterFiltered_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnFilterFiltered.CheckedChanged
        If Not bDisableFilterItemEvent Then
            Call pGetCurrentDesignTools.FilterToggle()
        End If
    End Sub

    Private Sub btnFilterWhiteboard_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnFilterWhiteboard.CheckedChanged
        If Not bDisableFilterItemEvent Then
            pGetCurrentDesignTools.FilterWhiteBoard = btnFilterWhiteboard.Checked
        End If
    End Sub

    Private Sub btnFilterInvertFilter_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnFilterInvertFilter.CheckedChanged
        If Not bDisableFilterItemEvent Then
            pGetCurrentDesignTools.FilterReversed = btnFilterInvertFilter.Checked
        End If
    End Sub

    Private Sub btnTrigpointGridColor_Popup(sender As Object, e As EventArgs) Handles btnTrigpointGridColor.Popup
        Select Case iGridTrigpointColorBy
            Case 0
                btnTrigpointGridColor0.Checked = True
                'btnSegmentGridColor1.Checked = False
            Case 1
                'btnSegmentGridColor0.Checked = False
                btnTrigpointGridColor1.Checked = True
        End Select
    End Sub

    Private Sub btnSegmentGridColor_Popup(sender As Object, e As EventArgs) Handles btnSegmentGridColor.Popup
        Select Case iGridSegmentColorBy
            Case 0
                btnSegmentGridColor0.Checked = True
                'btnSegmentGridColor1.Checked = False
                'btnSegmentGridColor2.Checked = False
                'btnSegmentGridColor3.Checked = False
            Case 1
                'btnSegmentGridColor0.Checked = False
                btnSegmentGridColor1.Checked = True
                'btnSegmentGridColor2.Checked = False
                'btnSegmentGridColor3.Checked = False
            Case 2
                'btnSegmentGridColor0.Checked = False
                'btnSegmentGridColor1.Checked = False
                btnSegmentGridColor2.Checked = True
                'btnSegmentGridColor3.Checked = False
            Case 3
                'btnSegmentGridColor0.Checked = False
                'btnSegmentGridColor1.Checked = False
                'btnSegmentGridColor2.Checked = False
                btnSegmentGridColor3.Checked = True
        End Select
    End Sub

    Private Sub btnTrigpointGridColor0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnTrigpointGridColor0.CheckedChanged
        If btnTrigpointGridColor0.Checked Then
            If iGridTrigpointColorBy <> 0 Then
                iGridTrigpointColorBy = 0
                Call pSurveyTrigpointsRefresh()
            End If
        End If
    End Sub

    Private Sub btnTrigpointGridColor1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnTrigpointGridColor1.CheckedChanged
        If btnTrigpointGridColor1.Checked Then
            If iGridTrigpointColorBy <> 1 Then
                iGridTrigpointColorBy = 1
                Call pSurveyTrigpointsRefresh()
            End If
        End If
    End Sub

    Private Sub btnSegmentGridColor0_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentGridColor0.CheckedChanged
        If btnSegmentGridColor0.Checked Then
            If iGridSegmentColorBy <> 0 Then
                iGridSegmentColorBy = 0
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub btnSegmentGridColor1_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentGridColor1.CheckedChanged
        If btnSegmentGridColor1.Checked Then
            If iGridSegmentColorBy <> 1 Then
                iGridSegmentColorBy = 1
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub btnSegmentGridColor2_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentGridColor2.CheckedChanged
        If btnSegmentGridColor2.Checked Then
            If iGridSegmentColorBy <> 2 Then
                iGridSegmentColorBy = 2
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub btnSegmentGridColor3_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnSegmentGridColor3.CheckedChanged
        If btnSegmentGridColor3.Checked Then
            If iGridSegmentColorBy <> 3 Then
                iGridSegmentColorBy = 3
                Call pSurveySegmentsRefresh()
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles grdViewTrigpoints.CustomUnboundColumnData
        If e.IsGetData Then
            Dim oTrigpoint As cTrigPoint = DirectCast(e.Row, cTrigPoint)
            If Not oTrigpoint Is Nothing Then
                Select Case e.Column.FieldName
                    Case "_X"
                        e.Value = Strings.Format(oTrigpoint.Data.X, "0.00")
                    Case "_Y"
                        e.Value = Strings.Format(oTrigpoint.Data.Y, "0.00")
                    Case "_Z"
                        e.Value = Strings.Format(oTrigpoint.Data.Z, "0.00")
                    Case "_Splay"
                        e.Value = Not oTrigpoint.Data.IsSplay
                    Case "_Special"
                        e.Value = oTrigpoint.IsSpecial
                    Case "_InExploration"
                        e.Value = oTrigpoint.IsInExploration
                    Case "_Entrance"
                        e.Value = If(oTrigpoint.Entrance = cTrigPoint.EntranceTypeEnum.None, 0, If(oTrigpoint.Entrance = cTrigPoint.EntranceTypeEnum.OutSide, 2, 1))
                    Case "_Coordinate"
                        e.Value = If(oTrigpoint.Coordinate.IsEmpty, 0, If(oTrigpoint.Coordinate.IsInError, 2, 1))
                    Case "_Note"
                        e.Value = oTrigpoint.Note <> ""
                    Case "_Latitude"
                        e.Value = oTrigpoint.Coordinate.Latitude
                    Case "_Longitude"
                        e.Value = oTrigpoint.Coordinate.Longitude
                    Case "_Altitude"
                        e.Value = oTrigpoint.Coordinate.Altitude
                    Case "_Connections"
                        If oTrigpoint.Data.IsSplay Then
                            e.Value = Nothing
                        Else
                            Select Case oTrigpoint.Connections.Count
                                Case 0
                                    e.Value = Nothing
                                Case 1
                                    e.Value = My.Resources.connections_1_01
                                Case 2
                                    e.Value = My.Resources.connections_1_11
                                Case 3
                                    e.Value = My.Resources.connections_1_21
                                Case Else
                                    e.Value = My.Resources.connections_1_3ormore1
                            End Select
                        End If
                    Case "_ConnectionsCount"
                        If oTrigpoint.Data.IsSplay Then
                            e.Value = Nothing
                        Else
                            e.Value = oTrigpoint.Connections.Count
                        End If
                    Case "_CustomConnections"
                        If oTrigpoint.Connections.Count > 0 Then
                            If oTrigpoint.Connections.IsCustomized Then
                                e.Value = My.Resources.connections_custom1
                            Else
                                e.Value = My.Resources.connections_default1
                            End If
                        End If
                End Select
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_RowStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowStyleEventArgs) Handles grdViewTrigpoints.RowStyle
        Dim oTrigpoint As cTrigPoint = grdViewTrigpoints.GetRow(e.RowHandle)
        If oTrigpoint IsNot Nothing Then
            If oTrigpoint.Data.IsSplay Then
                If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                    e.Appearance.ForeColor = modPaint.LightColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                Else
                    e.Appearance.ForeColor = modPaint.DarkColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                End If
            End If
            Select Case iGridTrigpointColorBy
                Case 1
                    If oTrigpoint.Data.IsSplay Then
                        If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                            e.Appearance.BackColor = modPaint.DarkColor(Color.Gray, 0.35)
                        Else
                            e.Appearance.BackColor = modPaint.LightColor(Color.DimGray, 0.85)
                        End If
                    Else
                        If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                            e.Appearance.BackColor = modPaint.DarkColor(Color.DarkRed, 0.35)
                        Else
                            e.Appearance.BackColor = modPaint.LightColor(Color.LightCoral, 0.85)
                        End If
                    End If
            End Select
        End If
    End Sub

    Private Sub grdViewTrigpoints_CustomRowFilter(sender As Object, e As RowFilterEventArgs) Handles grdViewTrigpoints.CustomRowFilter
        If oCurrentOptions IsNot Nothing Then
            If oCurrentOptions.HighlightCurrentCave AndAlso oCurrentOptions.HighlightSegmentsAndTrigpoints Then
                Dim oTrigpoint As cTrigPoint = DirectCast(grdViewTrigpoints.DataSource(e.ListSourceRow), cTrigPoint)
                If Not oTrigpoint Is Nothing Then
                    Dim oDataController As DevExpress.Data.BaseGridController = grdViewTrigpoints.DataController
                    Dim oEx As Exception
                    Dim oEval As DevExpress.Data.Filtering.Helpers.ExpressionEvaluator = oDataController.CreateExpressionEvaluator(oDataController.FilterCriteria, True, oEx)
                    If oEval Is Nothing Then
                        e.Visible = oVisibleStations.Contains(oTrigpoint.Name)
                    Else
                        e.Visible = oVisibleStations.Contains(oTrigpoint.Name) AndAlso oEval.Fit(e.ListSourceRow)
                    End If
                    e.Handled = True
                End If
            End If
        End If
    End Sub

    Private Sub btnDesignHighlightSegmentsAndTrigpoints_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnDesignHighlightSegmentsAndTrigpoints.CheckedChanged
        oCurrentOptions.HighlightSegmentsAndTrigpoints = btnDesignHighlightSegmentsAndTrigpoints.Checked
    End Sub

    Private Sub btn3DViewTop_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3DViewTop.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromTop)
    End Sub
    Private Sub btn3dViewSN_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewSN.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromSouth)
    End Sub

    Private Sub btn3dViewBottom_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3DViewBottom.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromBottom)
    End Sub

    Private Sub btn3dViewEW_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewEW.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromEast)
    End Sub

    Private Sub btn3dViewWE_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewWE.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromWest)
    End Sub

    Private Sub btn3dViewNS_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btn3dViewNS.ItemClick
        oHolos.SetView(cHolosViewer.ViewFromEnum.FromNord)
    End Sub

    Private Sub grdViewSegments_RowStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowStyleEventArgs) Handles grdViewSegments.RowStyle
        Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetRow(e.RowHandle)
        If oSegmentPlaceholder IsNot Nothing Then
            Dim oSegment As cSegment = oSegmentPlaceholder.Segment
            Select Case iGridSegmentColorBy
                Case 3
                    Dim oColor As Color = oSurvey.Properties.CaveInfos.GetOriginColor(oSegment, Color.Transparent)
                    If (oColor <> Color.Transparent) Then
                        If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                            e.Appearance.BackColor = modPaint.DarkColor(oColor, 0.35)
                        Else
                            e.Appearance.BackColor = modPaint.LightColor(oColor, 0.85)
                        End If
                    End If
                Case 2
                    Dim oColor As Color = oSurvey.Properties.CaveInfos.GetColor(oSegment, Color.Transparent)
                    If (oColor <> Color.Transparent) Then
                        If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                            e.Appearance.BackColor = modPaint.DarkColor(oColor, 0.35)
                        Else
                            e.Appearance.BackColor = modPaint.LightColor(oColor, 0.85)
                        End If
                    End If
                Case 1
                    Dim oColor As Color = oSurvey.Properties.Sessions.GetColor(oSegment, Color.Transparent)
                    If (oColor <> Color.Transparent) Then
                        If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                            e.Appearance.BackColor = modPaint.DarkColor(oColor, 0.35)
                        Else
                            e.Appearance.BackColor = modPaint.LightColor(oColor, 0.85)
                        End If
                    End If
            End Select
        End If
    End Sub

    Private Sub grdViewSegmentsList_RowCellStyle(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowCellStyleEventArgs) Handles grdViewSegments.RowCellStyle
        Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetRow(e.RowHandle)
        If oSegmentPlaceholder IsNot Nothing Then
            Dim oSegment As cSegment = oSegmentPlaceholder.Segment
            If e.Column Is colSegmentsListCaveBranch Then
                e.Appearance.BackColor = oSurvey.Properties.CaveInfos.GetColor(oSegment, System.Drawing.Color.LightGray)
            ElseIf e.Column Is colSegmentsListSession Then
                e.Appearance.BackColor = oSurvey.Properties.Sessions.GetColor(oSegment, System.Drawing.Color.LightGray)
            ElseIf e.Column Is colSegmentsListTo Then
                If oSegment.To Like "*(*)" Then
                    If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                        e.Appearance.ForeColor = modPaint.LightColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                    Else
                        e.Appearance.ForeColor = modPaint.DarkColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                    End If
                End If
            ElseIf e.Column Is colSegmentsListFrom Then
                If oSegment.From Like "*(*)" Then
                    If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                        e.Appearance.ForeColor = modPaint.LightColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                    Else
                        e.Appearance.ForeColor = modPaint.DarkColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub grdViewSegments_DoubleClick(sender As Object, e As EventArgs) Handles grdViewSegments.DoubleClick
        If grdViewSegments.FocusedColumn Is colSegmentsListNote Then
            tabSegmentsPropertyitem.SelectedTabPage = tabSegmentsNoteitem
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListAttachment Then
            tabSegmentsPropertyitem.SelectedTabPage = tabSegmentsAttachmentsitem
            If oTools.CurrentSegment.Attachments.Count = 1 Then
                'If IsNothing(tvSegmentAttachments.SelectedObject) Then tvSegmentAttachments.SelectedObject = DirectCast(tvSegmentAttachments.Objects, cAttachmentLinks).FirstOrDefault
                Call pSegmentAttachmentOpen()
            End If
        End If
    End Sub

    Private Sub grdViewSegments_FocusedRowChanged(sender As Object, e As FocusedRowChangedEventArgs) Handles grdViewSegments.FocusedRowChanged
        If oSurvey IsNot Nothing Then
            If e.FocusedRowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle Then
                Dim oSegment As cSegment = oSurvey.Segments.Append
                Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
                Call pSurveyCheckSession()
                Call oSegment.SetSession(DirectCast(btnMainSessionList.EditValue, cSession))
                Call oSegment.Save()
                grdViewSegments.RefreshData()
                Dim iRowHandle As Integer = grdViewSegments.FindRow(oSegment)
                Call grdViewSegments.FullFocusRow(iRowHandle)
                Call pSegmentLoad(oSegment)
            Else
                Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetFocusedRow
                If oSegmentPlaceholder Is Nothing Then
                    Call pSelectSegment(Nothing)
                Else
                    Call pSelectSegment(oSegmentPlaceholder.Segment)
                End If
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_FocusedRowChanged(sender As Object, e As FocusedRowChangedEventArgs) Handles grdViewTrigpoints.FocusedRowChanged
        If oSurvey IsNot Nothing Then
            If Not bDisableTrigpointsChangeEvent Then
                bDisableTrigpointsChangeEvent = True
                Call pSelectTrigpoint(grdViewTrigpoints.GetFocusedRow)
                bDisableTrigpointsChangeEvent = False
            End If
        End If
    End Sub

    Private Sub pSelectTrigpoint(Trigpoint As cTrigPoint)
        'If Not Trigpoint Is Nothing Then
        Call oTools.SelectTrigpoint(Trigpoint)
        Call pTrigpointsRefresh()
        'End If
    End Sub

    Private Sub pSelectSegment(Segment As cSegment)
        'If Not Segment Is Nothing Then
        Call oTools.SelectSegment(Segment)
        Call pSegmentsRefresh()
        'End If
    End Sub

    Private Sub grdViewSegments_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles grdViewSegments.CustomUnboundColumnData
        If e.IsGetData Then
            Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = e.Row
            If Not oSegmentPlaceholder Is Nothing Then
                Dim oSegment As cSegment = oSegmentPlaceholder.Segment
                Select Case e.Column.FieldName
                    Case "_Attachments"
                        e.Value = oSegment.Attachments.Count > 0
                    Case "_Note"
                        e.Value = oSegment.Note <> ""
                End Select
            End If
        End If
    End Sub

    Private Sub grdViewSegments_InitNewRow(sender As Object, e As DevExpress.XtraGrid.Views.Grid.InitNewRowEventArgs) Handles grdViewSegments.InitNewRow
        Dim oSegment As cSegment = oSurvey.Segments.Append
        Call oSegment.SetCave(btnMainCaveList.EditValue, btnMainCaveBranchList.EditValue)
        Call pSurveyCheckSession()
        Call oSegment.SetSession(DirectCast(btnMainSessionList.EditValue, cSession))
        grdViewSegments.RefreshData()
    End Sub

    Private Sub grdViewSegments_ValidateRow(sender As Object, e As ValidateRowEventArgs) Handles grdViewSegments.ValidateRow
        If e.Row IsNot Nothing Then
            Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = e.Row
            Call pSegmentValidate(oSegmentPlaceholder.Segment)
        End If
    End Sub

    Private Sub btnSegmentInsert_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentInsert.ItemClick
        Call pSegmentInsert(grdViewSegments.GetFocusedDataSourceRowIndex)
    End Sub

    Private Sub grdViewSegments_ShowingEditor(sender As Object, e As CancelEventArgs) Handles grdViewSegments.ShowingEditor
        Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetFocusedRow
        If oSegmentPlaceholder IsNot Nothing Then
            Dim oSegment As cSegment = oSegmentPlaceholder.Segment
            Dim oCaveInfo As cICaveInfoBranches = If(oTools.CurrentSegment Is Nothing, Nothing, oTools.CurrentSegment.GetCaveInfo)
            If Not IsNothing(oCaveInfo) AndAlso oCaveInfo.GetLocked Then
                e.Cancel = True
            Else
                If grdViewSegments.FocusedColumn Is colSegmentsListFrom OrElse grdViewSegments.FocusedColumn Is colSegmentsListTo Then
                    If Not oTools.CurrentSegment Is Nothing Then
                        With oTools.CurrentSegment
                            Dim bDisabledEdit As Boolean = (.IsBinded)
                            e.Cancel = bDisabledEdit
                        End With
                    End If
                ElseIf grdViewSegments.FocusedColumn Is colSegmentsListProfileDirection Then
                    e.Cancel = oSegment.Splay OrElse oSegment.IsProfileBinded
                End If
            End If
            bSegmentChanged = True
        End If
    End Sub

    Private Sub grdSegments_Enter(sender As Object, e As EventArgs) Handles grdSegments.Enter
        Call oClipboardViewer_ClipboardChanged(Nothing, Nothing)

        Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetRow(grdViewSegments.FocusedRowHandle)
        If oSegmentPlaceholder Is Nothing Then
            Call pSelectSegment(Nothing)
        Else
            Call pSelectSegment(oSegmentPlaceholder.Segment)
        End If
    End Sub

    Private Sub grdViewSegments_HiddenEditor(sender As Object, e As EventArgs) Handles grdViewSegments.HiddenEditor

    End Sub

    Private Sub grdViewSegments_ValidatingEditor(sender As Object, e As DevExpress.XtraEditors.Controls.BaseContainerValidateEditorEventArgs) Handles grdViewSegments.ValidatingEditor
        If grdViewSegments.FocusedColumn Is colSegmentsListFrom Then
            txtSegmentFrom.EditValue = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListTo Then
            txtSegmentTo.EditValue = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListDistance Then
            'If e.Value.ToString.StartsWith(Threading.Thread.CurrentThread.CurrentUICulture.NumberFormat.NumberDecimalSeparator) Then
            '    'grdViewSegments.EditingValue = "0" & e.Value
            '    'e.Value = grdViewSegments.EditingValue
            '    e.Value = "0" & e.Value
            'End If
            txtSegmentDistance.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListBearing Then
            txtSegmentBearing.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListInclination Then
            txtSegmentInclination.Text = e.Value

        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListL Then
            txtSegmentLeft.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListR Then
            txtSegmentRight.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListU Then
            txtSegmentUp.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListD Then
            txtSegmentDown.Text = e.Value

        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListExclude Then
            chkSegmentExclude.Text = e.Value
        ElseIf grdViewSegments.FocusedColumn Is colSegmentsListProfileDirection Then
            cboSegmentDirection.SelectedIndex = e.Value
        End If
    End Sub

    Private Sub grdViewSegments_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewSegments.PopupMenuShowing
        Call grdSegments.Focus()
        If e.HitInfo.InRowCell OrElse e.HitInfo.HitTest = DevExpress.XtraGrid.Views.Grid.ViewInfo.GridHitTest.EmptyRow Then
            e.Allow = False
            Call mnuSegments.ShowPopup(grdSegments.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnSegmentMoveUp_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentMoveUp.ItemClick
        Dim iNewIndex As Integer = oTools.CurrentSegment.Index - 1
        If iNewIndex >= 0 Then
            Dim oSegment As cSegment = oTools.CurrentSegment
            Call pSegmentMove(oSegment, iNewIndex)
            Call pSegmentSelect(oSegment, False, False)
        End If
    End Sub

    Private Sub btnSegmentMoveDown_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentMoveDown.ItemClick
        Dim iNewIndex As Integer = oTools.CurrentSegment.Index + 1
        If iNewIndex < oSurvey.Segments.Count Then
            Dim oSegment As cSegment = oTools.CurrentSegment
            Call pSegmentMove(oSegment, iNewIndex)
            Call pSegmentSelect(oSegment, False, False)
        End If
    End Sub

    'Private Sub btnSegmentsReverse_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSegmentsReverse.ItemClick
    '    Dim oRows As cSegmentCollection = pSegmentsFromGridSelection()
    '    If oRows.Count > 0 Then
    '        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning5"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = vbYes Then

    '            Dim oCurrentSegment As cSegment = oTools.CurrentSegment
    '            Call oTools.SelectSegment(Nothing)
    '            bDisableSegmentsChangeEvent = True

    '            For Each oSegment As cSegment In oRows
    '                Call oSegment.Reverse()
    '            Next
    '            bDisableSegmentsChangeEvent = False

    '            Call pSurveyCalculate(False)
    '            Call pSurveySegmentsRefresh()
    '            Call pMapInvalidate()

    '            Call oTools.SelectSegment(oCurrentSegment)
    '            Call pSegmentSelect(oCurrentSegment, False, False)
    '        End If
    '    End If
    'End Sub

    Private Sub grdViewTrigpoints_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewTrigpoints.PopupMenuShowing
        Call grdTrigPoints.Focus()
        If e.HitInfo.InRowCell Then
            e.Allow = False
            Call mnuTrigpoint.ShowPopup(grdTrigPoints.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnGridRefresh_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnGridRefresh.ItemClick
        If e.Link.LinkedObject Is mnuSegments Then
            Call grdSegments.RefreshDataSource()
        ElseIf e.Link.LinkedObject Is mnuTrigpoint Then
            Call grdTrigPoints.RefreshDataSource()
        End If
    End Sub

    Private Sub btnGridExport_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnGridExport.ItemClick
        If e.Link.LinkedObject Is mnuSegments Then
            Call GridExportTo(oSurvey, grdSegments, btnSegments.Caption, "", Me)
        ElseIf e.Link.LinkedObject Is mnuTrigpoint Then
            Call GridExportTo(oSurvey, grdTrigPoints, btnTrigpoints.Caption, "", Me)
        End If
    End Sub

    Private Sub mnuSegments1_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuSegments.BeforePopup
        'Dim oSegment As cSegment = pGetCurrentTools.CurrentSegment
        'If oSegment Is Nothing Then
        '    btnCut.Enabled = False
        '    btnCopy.Enabled = False
        '    btnDelete.Enabled = False
        '    'btnSegmentsReverse.Enabled = False
        'Else
        '    Dim oSegments As cSegmentCollection = pSegmentsFromGridSelection(True)
        '    Dim bEnabled As Boolean = oSegments.Count > 0
        '    'btnCut.Enabled = btnCut.Enabled
        '    'btnCopy.Enabled = btnCopy.Enabled
        '    'btnDelete.Enabled = btnDelete.Enabled
        '    'btnSegmentsReverse.Enabled = oSegment.IsValid
        'End If
    End Sub

    Private Sub btnDataPropertiesDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDataPropertiesDelete.ItemClick
        Dim oOwner As DevExpress.XtraVerticalGrid.PropertyGridControl = mnuDataProperties.Tag
        If Not oOwner.FocusedRow Is Nothing Then
            Dim oDescriptor As PropertyDescriptor = oOwner.GetPropertyDescriptor(oOwner.FocusedRow)
            If Not oDescriptor Is Nothing Then
                Call oDescriptor.ResetValue(oOwner.SelectedObject)
                Call oOwner.Refresh()
            End If
        End If
    End Sub

    Private Sub btnDataPropertiesEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDataPropertiesEdit.ItemClick
        Dim oOwner As DevExpress.XtraVerticalGrid.PropertyGridControl = mnuDataProperties.Tag
        Dim oTable As Data.cDataFields
        If oOwner Is prpSegmentDataProperties Then
            oTable = oSurvey.Properties.DataTables.Segments
        ElseIf oOwner Is prpTrigpointDataProperties Then
            oTable = oSurvey.Properties.DataTables.Trigpoints
        Else
            oTable = oSurvey.Properties.DataTables.DesignItems
        End If
        Using frmDFE As frmDataFieldsEditor = New frmDataFieldsEditor(oTable)
            If frmDFE.ShowDialog(Me) = vbOK Then
                If oOwner Is prpSegmentDataProperties Then
                    If oTools.CurrentSegment Is Nothing Then
                        oOwner.SelectedObject = Nothing
                    Else
                        oOwner.SelectedObject = oTools.CurrentSegment.DataProperties.GetClass
                    End If
                ElseIf oOwner Is prpTrigpointDataProperties Then
                    If oTools.CurrentTrigpoint Is Nothing Then
                        oOwner.SelectedObject = Nothing
                    Else
                        oOwner.SelectedObject = oTools.CurrentTrigpoint.DataProperties.GetClass
                    End If
                Else
                    If pGetCurrentDesignTools.CurrentItem Is Nothing Then
                        oOwner.SelectedObject = Nothing
                    Else
                        oOwner.SelectedObject = pGetCurrentDesignTools.CurrentItem.DataProperties.GetClass
                    End If
                End If
            End If
        End Using
    End Sub

    Private Sub mnuDataProperties_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuDataProperties.BeforePopup
        Dim oOwner As DevExpress.XtraVerticalGrid.PropertyGridControl = mnuDataProperties.Tag
        If oOwner.FocusedRow Is Nothing Then
            btnDataPropertiesDelete.Enabled = False
        Else
            Dim oDescriptor As PropertyDescriptor = oOwner.GetPropertyDescriptor(oOwner.FocusedRow)
            If oDescriptor Is Nothing Then
                btnDataPropertiesDelete.Enabled = False
            Else
                btnDataPropertiesDelete.Enabled = oDescriptor.CanResetValue(oOwner.SelectedObject)
            End If
        End If
    End Sub

    Private Sub prpSegmentDataProperties_MouseUp(sender As Object, e As MouseEventArgs) Handles prpSegmentDataProperties.MouseUp
        If (e.Button And MouseButtons.Right) = MouseButtons.Right Then
            mnuDataProperties.Tag = prpSegmentDataProperties
            Call mnuDataProperties.ShowPopup(prpSegmentDataProperties.PointToScreen(e.Location))
        End If
    End Sub

    Private Sub prpTrigpointDataProperties_MouseUp(sender As Object, e As MouseEventArgs) Handles prpTrigpointDataProperties.MouseUp
        If (e.Button And MouseButtons.Right) = MouseButtons.Right Then
            mnuDataProperties.Tag = prpTrigpointDataProperties
            Call mnuDataProperties.ShowPopup(prpTrigpointDataProperties.PointToScreen(e.Location))
        End If
    End Sub

    Private Sub grdViewTrigPointAliases_FocusedRowChanged(sender As Object, e As FocusedRowChangedEventArgs) Handles grdViewTrigPointAliases.FocusedRowChanged
        If e.FocusedRowHandle = DevExpress.XtraGrid.GridControl.NewItemRowHandle Then
            Dim oAliases As UIHelpers.cAliasBindingList = DirectCast(grdViewTrigPointAliases.DataSource, UIHelpers.cAliasBindingList)
            'If oAliases.Count = 0 OrElse oAliases.Last.Value <> "" Then
            Call oAliases.Add("")
            grdViewTrigPointAliases.FocusedRowHandle = grdViewTrigPointAliases.FindRow(oAliases.Last)
            'End If
        End If
    End Sub

    Private Sub grdViewTrigPointAliases_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewTrigPointAliases.PopupMenuShowing
        If e.HitInfo.InRowCell Then
            e.Allow = False
            btnAliasDelete.Enabled = Not grdViewTrigPointAliases.GetFocusedRow Is Nothing
            btnAliasDeleteAll.Enabled = grdViewTrigPointAliases.DataSource.count > 0
            Call mnuAliases.ShowPopup(grdTrigPointAliases.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnAliasDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAliasDelete.ItemClick
        Call grdViewTrigPointAliases.DeleteSelectedRows()
    End Sub

    Private Sub btnAliasDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAliasDeleteAll.ItemClick
        Call grdViewTrigPointAliases.DataSource.clear
    End Sub

    Private Sub grdViewTrigpointConnections_ShowingEditor(sender As Object, e As CancelEventArgs) Handles grdViewTrigpointConnections.ShowingEditor
        If grdViewTrigpointConnections.FocusedColumn Is colTrigpointConnectionsIgnore Then
            Dim sFrom As String = oTools.CurrentTrigpoint.Name
            Dim sTo As String = DirectCast(grdViewTrigpointConnections.GetFocusedRow, UIHelpers.cDescriptionValueItem(Of Boolean)).Description
            Dim oSegment As cSegment = oSurvey.Segments.Find(sFrom, sTo)
            If Not oSegment Is Nothing Then
                e.Cancel = oSegment.IsProfileBinded
            End If
        End If
    End Sub

    Private Sub grdViewSegmentAttachments_PopupMenuShowing(sender As Object, e As DevExpress.XtraGrid.Views.Grid.PopupMenuShowingEventArgs) Handles grdViewSegmentAttachments.PopupMenuShowing
        If e.HitInfo.InRowCell OrElse e.HitInfo.HitTest = DevExpress.XtraGrid.Views.Grid.ViewInfo.GridHitTest.EmptyRow Then
            e.Allow = False
            Call mnuAttachments.ShowPopup(grdSegmentAttachments.PointToScreen(e.Point))
        End If
    End Sub

    Private Sub btnAttachmentsAdd_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsAdd.ItemClick
        Using oOFD As OpenFileDialog = New OpenFileDialog
            oOFD.Filter = modMain.GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
            oOFD.FilterIndex = 1
            If oOFD.ShowDialog(Me) = DialogResult.OK Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                DirectCast(grdSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Add(oOFD.FileName)
                'Call oTools.CurrentSegment.Attachments.Add(oOFD.FileName)
                'grdSegmentAttachments.RefreshDataSource()
                Call oMousePointer.Pop()
            End If
        End Using
    End Sub

    Private Sub btnAttachmentsDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsDelete.ItemClick
        If UIHelpers.Dialogs.Msgbox(modMain.GetLocalizedString("main.warning30"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, modMain.GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
            If Not IsNothing(oAttachment) Then
                Dim oOwner As Object = oAttachment.Owner
                If TypeOf oOwner Is cSegment Then
                    DirectCast(grdSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Remove(oAttachment)
                    'DirectCast(oOwner, cSegment).Attachments.Remove(oAttachment)
                    'Call grdSegmentAttachments.RefreshDataSource()
                End If
            End If
        End If
    End Sub

    Private Sub btnAttachmentsDeleteAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsDeleteAll.ItemClick
        If UIHelpers.Dialogs.Msgbox(modMain.GetLocalizedString("main.warning31"), MsgBoxStyle.YesNo Or MsgBoxStyle.Question, modMain.GetLocalizedString("main.warningtitle")) = MsgBoxResult.Yes Then
            Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
            If Not IsNothing(oAttachment) Then
                Dim oOwner As Object = oAttachment.Owner
                If TypeOf oOwner Is cSegment Then
                    DirectCast(grdSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Clear()
                    'DirectCast(oOwner, cSegment).Attachments.Clear()
                    'Call grdSegmentAttachments.RefreshDataSource()
                End If
            End If
        End If
    End Sub

    Private Sub btnAttachmentsOpen_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAttachmentsOpen.ItemClick
        Call pSegmentAttachmentOpen()
    End Sub

    Private Sub mnuAttachments_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuAttachments.BeforePopup
        Dim bEnabled As Boolean = Not grdViewSegmentAttachments.GetFocusedRow Is Nothing
        btnAttachmentsOpen.Enabled = bEnabled
        btnAttachmentsDelete.Enabled = bEnabled
        btnAttachmentsDeleteAll.Enabled = bEnabled
    End Sub

    Private Sub grdViewSegmentAttachments_CustomUnboundColumnData(sender As Object, e As CustomColumnDataEventArgs) Handles grdViewSegmentAttachments.CustomUnboundColumnData
        If e.IsGetData Then
            If e.Column Is colSegmentAttachmentsImage Then
                With DirectCast(e.Row, cAttachmentsLink).Attachment
                    Select Case .GetCategory
                        Case FTTLib.FileCategory.Audio
                            e.Value = My.Resources.Electronics_Volume_colored
                        Case FTTLib.FileCategory.Image
                            e.Value = .GetThumbnail
                        Case Else
                            e.Value = My.Resources.attachments
                    End Select
                End With
            End If
        End If
    End Sub

    Private Sub btnItemsSendToBottom_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsSendToBottom.ItemClick
        Call pItemSendToBottom()
    End Sub

    Private Sub btnItemsSendBehind_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsSendBehind.ItemClick
        Call pItemSendBehind()
    End Sub

    Private Sub btnItemsBringOnTop_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsBringOnTop.ItemClick
        Call pItemBringToTop()
    End Sub

    Private Sub btnItemsBringAhead_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsBringAhead.ItemClick
        Call pItemBringAhead()
    End Sub

    Private Sub grdViewSegmentAttachments_DoubleClick(sender As Object, e As EventArgs) Handles grdViewSegmentAttachments.DoubleClick
        Call pSegmentAttachmentOpen()
    End Sub

    'Private Sub SegmentAttachmentsDragDrop_BeginDragDrop(sender As Object, e As DevExpress.Utils.DragDrop.BeginDragDropEventArgs)
    '    Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
    '    If oAttachment Is Nothing Then
    '        e.Cancel = True
    '    Else
    '        e.Data = grdViewSegmentAttachments.GetFocusedRow
    '    End If
    'End Sub

    Private Sub grdSegmentAttachments_DragOver(sender As Object, e As DragEventArgs) Handles grdSegmentAttachments.DragOver
        e.Effect = If(e.Data.GetDataPresent(DataFormats.FileDrop), DragDropEffects.Copy, DragDropEffects.None)
    End Sub

    Private Sub grdSegmentAttachments_DragDrop(sender As Object, e As DragEventArgs) Handles grdSegmentAttachments.DragDrop
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFiles As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            For Each sFile As String In sFiles
                DirectCast(grdViewSegmentAttachments.DataSource, UIHelpers.cAttachmentsBindingList).Add(sFile)
            Next
        End If
    End Sub

    Private Sub grdSegmentAttachments_MouseMove(sender As Object, e As MouseEventArgs) Handles grdSegmentAttachments.MouseMove
        If (e.Button And MouseButtons.Left) = MouseButtons.Left Then
            Dim oAttachment As cAttachmentsLink = grdViewSegmentAttachments.GetFocusedRow
            If Not oAttachment Is Nothing Then
                Call grdSegmentAttachments.DoDragDrop(oAttachment, DragDropEffects.Copy)
            End If
        End If
    End Sub

    Private Sub btnCurrentItemSignExport_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSignExport.ItemClick
        With oCurrentDesign
            Dim oItemSign As cItemSign = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    .Title = GetLocalizedString("main.saveclipartdialog")
                    .Filter = GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog = DialogResult.OK Then
                        Call oItemSign.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemSignSaveInGallery_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSignSaveInGallery.ItemClick
        With oCurrentDesign
            Dim oItemSign As cItemSign = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    Dim iGalleryIndex As Integer = oDockClipart.GalleryIndexByCategory(oItemSign.Category)
                    .InitialDirectory = oDockClipart.GetGalleryPath(iGalleryIndex)
                    If oSFD.ShowDialog = DialogResult.OK Then
                        Call oItemSign.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemGenericRevertAllSequences_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericRevertAllSequences.ItemClick
        Try
            With pGetCurrentDesignTools()
                Call .BeginUndoSnapshot("Revert sequences")
                Dim oItem As cItem = .CurrentItem
                Call oItem.Points.Revert()
                Call .CommitUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericReorderSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericReorderSequence.ItemClick
        Try
            With pGetCurrentDesignTools()
                Call .BeginUndoSnapshot("Reorder sequences")
                Dim oItem As cItem = .CurrentItem
                Call oItem.Points.ReorderSequences()
                Call .CommitUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericDivide_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericDivide.ItemClick
        Try
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                If oItem.CanBeDivided Then
                    Call .BeginUndoSnapshot("Item divide")
                    Dim oItems As List(Of cItem) = .CurrentLayer.Items.Divide(oItem)
                    Call .EndItem()
                    Dim oNewItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                    Call oNewItem.AddRange(oItems)
                    Call pGetCurrentDesignTools.SelectItem(oNewItem)
                    Call .CommitUndoSnapshot()
                End If
            End With
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericCombineAllSequences_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericCombineAllSequences.ItemClick
        Try
            With pGetCurrentDesignTools()
                Call .BeginUndoSnapshot("Combine sequences")
                Dim oItem As cItem = .CurrentItem
                Call oItem.Points.CombineSequences()
                Call .CommitUndoSnapshot()
            End With
            Call pObjectPropertyLoad()
            Call pMapInvalidate()
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericCombine_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericCombine.ItemClick
        Try
            Call pGetCurrentDesignTools.CombineItem(pGetCurrentDesignTools.CurrentItem)
            picMap.Cursor = Cursors.Help
        Catch
        End Try
    End Sub

    Private Sub btnCurrentItemGenericCloseAllSequences_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemGenericCloseAllSequences.ItemClick
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot("Close sequences")
            Dim oItem As cItem = .CurrentItem
            Call oItem.Points.CloseSequences()
            Call .CommitUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemItemsCombine_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombine.ItemClick
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot("Merge items")
            Dim oItemItems As cItemItems = .CurrentItem
            Dim oResultItem As cItem = oItemItems.SelfCombine()
            Call .Clear()
            Call .SelectItem(oResultItem)
            Call oResultItem.Points.ReorderSequences()
            Call .CommitUndoSnapshot()
        End With
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemItemsCombineConcretionClipart_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombineConcretionClipart.ItemClick
        With oCurrentDesign
            Dim oItemItems As cItemItems = pGetCurrentDesignTools.CurrentItem
            Call pGetCurrentDesignTools.SelectItem(oItemItems.ToConcretion)
        End With
    End Sub

    Private Sub btnCurrentItemItemsCombineRockClipart_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombineRockClipart.ItemClick
        With oCurrentDesign
            Dim oItemItems As cItemItems = pGetCurrentDesignTools.CurrentItem
            Call pGetCurrentDesignTools.SelectItem(oItemItems.ToRock)
        End With
    End Sub

    Private Sub btnCurrentItemItemsCombineSignClipart_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemItemsCombineSignClipart.ItemClick
        With oCurrentDesign
            Dim oItemItems As cItemItems = pGetCurrentDesignTools.CurrentItem
            Call pGetCurrentDesignTools.SelectItem(oItemItems.ToSign)
        End With
    End Sub

    Private Sub btnCurrentItemPointAdd_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointAdd.ItemClick
        Call pItemAddPoint()
    End Sub

    Private Sub btnCurrentItemPointDelete_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointDelete.ItemClick
        Call pItemDeletePoint()
    End Sub

    Private Sub btnCurrentItemPointSequenceDivide_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointSequenceDivide.ItemClick
        Call pSequenceDivide()
    End Sub

    Private Sub btnCurrentItemPointSequenceDivideAndJoin_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointSequenceDivideAndJoin.ItemClick
        Call pSequenceDivide(True)
    End Sub

    Private Sub btnCurrentItemPointSequenceCombine_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointSequenceCombine.ItemClick
        Call pSequenceCombine()
    End Sub

    Private Sub btnCurrentItemPointCloseSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointCloseSequence.ItemClick
        Call pSequenceClose()
    End Sub

    Private Sub btnCurrentItemPointDeleteSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointDeleteSequence.ItemClick
        Call pSequenceDelete()
    End Sub

    Private Sub btnCurrentItemPointRevertSequence_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointRevertSequence.ItemClick
        Call pSequenceRevert()
    End Sub

    Private Sub btnCurrentItemPointNewFromSequence0_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointNewFromSequence0.ItemClick
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot("New item from sequence")
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oNewItem As cItem = pGetCurrentDesignTools.CurrentLayer.Items.DivideOneSequence(oItem, oPoint, False)
            Call .SelectItem(oNewItem)
            Call .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemPointNewFromSequence1_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointNewFromSequence1.ItemClick
        With pGetCurrentDesignTools()
            Call .BeginUndoSnapshot("New item from sequence")
            Dim oItem As cItem = .CurrentItem
            Dim oPoint As cPoint = .CurrentItemPoint
            Dim oNewItem As cItem = pGetCurrentDesignTools.CurrentLayer.Items.DivideOneSequence(oItem, oPoint, True)
            Call .SelectItem(oNewItem)
            Call .CommitUndoSnapshot()
        End With
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemPlotUnlockSegment_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPlotUnlockSegment.ItemClick
        Call oPropSegmentBinding.DoSegmentsUnlock()
    End Sub

    Private Sub btnCurrentItemPlotLockSegment_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPlotLockSegment.ItemClick
        Call oPropSegmentBinding.DoSegmentsLock()
    End Sub

    Private Sub btnCurrentItemPlotBindSegment_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPlotBindSegment.ItemClick
        Call oPropSegmentBinding.DoSegmentsRebind()
    End Sub

    Private Sub btnCurrentItemClipartSaveInGallery_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemClipartSaveInGallery.ItemClick
        With oCurrentDesign
            Dim oItemClipart As cItemClipart = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    Dim iGalleryIndex As Integer = oDockClipart.GalleryIndexByCategory(oItemClipart.Category)
                    .InitialDirectory = oDockClipart.GetGalleryPath(iGalleryIndex)
                    If oSFD.ShowDialog = DialogResult.OK Then
                        Call oItemClipart.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemClipartExport_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemClipartExport.ItemClick
        With oCurrentDesign
            Dim oItemClipart As cItemClipart = pGetCurrentDesignTools.CurrentItem
            Using oSFD As SaveFileDialog = New SaveFileDialog
                With oSFD
                    .Title = GetLocalizedString("main.saveclipartdialog")
                    .Filter = GetLocalizedString("main.filetypeSVG") & " (*.SVG)|*.SVG|" & GetLocalizedString("main.filetypeALL") & " (*.*)|*.*"
                    .FilterIndex = 1
                    If .ShowDialog = DialogResult.OK Then
                        Call oItemClipart.ToSvg(oCurrentOptions, cItem.SVGOptionsEnum.ClipartBrushes).Save(.FileName)
                    End If
                End With
            End Using
        End With
    End Sub

    Private Sub btnCurrentItemLegendAddTo_Popup(sender As Object, e As EventArgs) Handles btnCurrentItemLegendAddTo.Popup
        Call btnCurrentItemLegendAddTo.ItemLinks.Clear()
        Dim iIndex As Integer = 1
        For Each oItem As cItemLegend In oCurrentDesign.Layers.Item(cLayers.LayerTypeEnum.Signs).Items.Where(Function(item) item.Type = cIItem.cItemTypeEnum.Legend)
            Dim oLegendItem As BarButtonItem = RibbonControl.CreateOrGetButton("btncurrentitemlegendaddto" & iIndex)
            oLegendItem.Caption = String.Format(modMain.GetLocalizedString("main.textpart105"), iIndex) & If(oItem.Name <> "", " [" & oItem.Name & "]", "") & If(oItem.ContainsItem(pGetCurrentDesignTools.CurrentItem), "*", "")
            oLegendItem.Tag = oItem
            oLegendItem.Enabled = oItem.ValidateItem(pGetCurrentDesignTools.CurrentItem)
            AddHandler oLegendItem.ItemClick, AddressOf btnCurrentItemLegendAddToItem_ItemClick
            Call btnCurrentItemLegendAddTo.AddItem(oLegendItem)
            iIndex += 1
        Next
    End Sub

    Private Sub btnCurrentItemSendCopyTo_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSendCopyTo.ItemClick
        If oCurrentDesign.Type = cIDesign.cDesignTypeEnum.Plan Then
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                Call .EndAndSelectItem()
                Call .BeginUndoSnapshot("Copy item to profile")
                Call .CloneItem(oSurvey.Profile)
                Call .SelectItem(oItem)
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        Else
            With pGetCurrentDesignTools()
                Dim oItem As cItem = .CurrentItem
                Call .EndAndSelectItem()
                Call .BeginUndoSnapshot("Copy item to profile")
                Call .CloneItem(oSurvey.Plan)
                Call .SelectItem(oItem)
                Call .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pItemSizeBy(Width As Single, Height As Single)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot("Resize item")
                If .CurrentItem Is Nothing Then
                    Dim oRect As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)
                    Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                    Call oItem.AddRange(oCurrentDesign.GetAllItems)
                    If oItem.Count > 0 Then
                        Call oItem.ResizeBy(Width / 100, Height / 100)
                    End If
                Else
                    .CurrentItem.ResizeBy(Width / 100, Height / 100)
                End If
                Call pPropertyItemBounds()
                .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pItemSizeTo(Width As Single, Height As Single)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot("Resize item")
                If .CurrentItem Is Nothing Then
                    Dim oRect As RectangleF = oCurrentDesign.GetVisibleBounds(oCurrentOptions)
                    Dim sDiffW As Single = Width / oRect.Width
                    Dim sDiffH As Single = Height / oRect.Height
                    Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                    Call oItem.AddRange(oCurrentDesign.GetAllItems)
                    If oItem.Count > 0 Then
                        Call oItem.ResizeBy(sDiffW, sDiffH)
                    End If
                Else
                    .CurrentItem.ResizeTo(Width, Height)
                End If
                Call pPropertyItemBounds()
                .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pItemMoveBy(X As Single, Y As Single)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot("Move item")
                If .IsInPointEdit AndAlso Not .CurrentItemPoint Is Nothing Then
                    Call .CurrentItemPoint.MoveBy(X, Y)
                    Call pPropertyItemPointBounds()
                Else
                    If .CurrentItem Is Nothing Then
                        Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                        Dim sDiffX As Single = X - oRect.Left
                        Dim sDiffY As Single = Y - oRect.Top
                        Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                        Call oItem.AddRange(oCurrentDesign.GetAllItems)
                        If oItem.Count > 0 Then
                            Call oItem.MoveBy(sDiffX, sDiffY)
                        End If
                    Else
                        Call .CurrentItem.MoveBy(X, Y)
                    End If
                    Call pPropertyItemBounds()
                End If
                .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub pItemMoveTo(X As Single, Y As Single)
        If Not bDisabledObjectPropertyEvent Then
            With pGetCurrentDesignTools()
                .BeginUndoSnapshot("Move item")
                If .IsInPointEdit AndAlso Not .CurrentItemPoint Is Nothing Then
                    Call .CurrentItemPoint.MoveTo(X, Y)
                    Call pPropertyItemPointBounds()
                Else
                    If .CurrentItem Is Nothing Then
                        Dim oRect As RectangleF = oCurrentDesign.GetBounds(oCurrentOptions)
                        Dim sDiffX As Single = X - oRect.Left
                        Dim sDiffY As Single = Y - oRect.Top
                        Dim oItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                        Call oItem.AddRange(oCurrentDesign.GetAllItems)
                        If oItem.Count > 0 Then
                            Call oItem.MoveBy(sDiffX, sDiffY)
                        End If
                    Else
                        Call .CurrentItem.MoveTo(X, Y)
                    End If
                    Call pPropertyItemBounds()
                End If
                .CommitUndoSnapshot()
            End With
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub btnCurrentItemFlipH_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemFlipH.ItemClick
        Call pObjectFlipH()
    End Sub

    Private Sub btnCurrentItemFlipV_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemFlipV.ItemClick
        Call pObjectFlipV()
    End Sub

    Private Sub txtCurrentItemX_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemX.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemMoveTo(sender.EditValue, -btnCurrentItemY.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemX_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemX.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemMoveTo(sender.EditValue + sDelta, -btnCurrentItemY.EditValue)
    End Sub

    Private Sub txtCurrentItemY_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemY.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemMoveTo(btnCurrentItemX.EditValue, -sender.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemY_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemY.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemMoveTo(btnCurrentItemX.EditValue, -sender.EditValue + sDelta)
    End Sub

    Private Sub txtCurrentItemW_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemW.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeTo(sender.EditValue, btnCurrentItemH.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemW_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemW.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemSizeTo(sender.EditValue + sDelta, btnCurrentItemH.EditValue)
    End Sub

    Private Sub txtCurrentItemH_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemH.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeTo(btnCurrentItemW.EditValue, sender.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemH_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemH.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        Call pItemSizeTo(btnCurrentItemW.EditValue, sender.EditValue + sDelta)
    End Sub

    Private Sub txtCurrentItemScaleH_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemScaleH.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeBy(100, sender.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemScaleW_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemScaleW.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemSizeBy(sender.EditValue, 100)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemRotateBy_KeyDown(sender As Object, e As KeyEventArgs) Handles txtCurrentItemRotateBy.KeyDown
        If e.KeyCode = Keys.Enter Then
            Call pItemRotateBy(sender.EditValue, btnCurrentItemRotateCenteredOnOrigin.EditValue)
            e.Handled = True
        End If
    End Sub

    Private Sub txtCurrentItemRotateBy_Spin(sender As Object, e As DevExpress.XtraEditors.Controls.SpinEventArgs) Handles txtCurrentItemRotateBy.Spin
        e.Handled = True
        Dim sDelta As Single
        If My.Computer.Keyboard.ShiftKeyDown Then
            sDelta = 1
        Else
            sDelta = 0.1
        End If
        If Not e.IsSpinUp Then
            sDelta = -sDelta
        End If
        sender.EditValue += sDelta
    End Sub

    Private Sub btnCurrentItemRotateRight_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemRotateRight.ItemClick
        Call pItemRotateBy(90.0, btnCurrentItemRotateCenteredOnOrigin.EditValue)
    End Sub

    Private Sub btnCurrentItemRotateLeft_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemRotateLeft.ItemClick
        Call pItemRotateBy(-90.0, btnCurrentItemRotateCenteredOnOrigin.EditValue)
    End Sub

    Private Sub btnCurrentItemHAlignLeft_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemHAlignLeft.ItemClick
        Call pItemHorizontalAlign(cItemItems.HorizontalAlignmentEnum.Left)
    End Sub

    Private Sub btnCurrentItemHAlignCenter_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemHAlignCenter.ItemClick
        Call pItemHorizontalAlign(cItemItems.HorizontalAlignmentEnum.Center)
    End Sub

    Private Sub btnCurrentItemHAlignRight_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemHAlignRight.ItemClick
        Call pItemHorizontalAlign(cItemItems.HorizontalAlignmentEnum.Right)
    End Sub

    Private Sub btnCurrenItemVAlignTop_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrenItemVAlignTop.ItemClick
        Call pItemVerticalAlign(cItemItems.VerticalAlignmentEnum.Top)
    End Sub

    Private Sub btnCurrenItemVAlignCenter_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrenItemVAlignCenter.ItemClick
        Call pItemVerticalAlign(cItemItems.VerticalAlignmentEnum.Middle)
    End Sub

    Private Sub btnCurrenItemVAlignBottom_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrenItemVAlignBottom.ItemClick
        Call pItemVerticalAlign(cItemItems.VerticalAlignmentEnum.Bottom)
    End Sub

    Private Sub cmdCurrentItemVSpace_ItemClick(sender As Object, e As ItemClickEventArgs) Handles cmdCurrentItemVSpace.ItemClick
        Call pItemSpaceV()
    End Sub

    Private Sub cmdCurrentItemHSpace_ItemClick(sender As Object, e As ItemClickEventArgs) Handles cmdCurrentItemHSpace.ItemClick
        Call pItemSpaceH()
    End Sub

    Private Sub btnCurrentItemLock_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemLock.CheckedChanged
        Try
            If Not bDisabledObjectPropertyEvent Then
                With pGetCurrentDesignTools()
                    .CurrentItem.Locked = btnCurrentItemLock.Checked
                    Call pObjectPropertyLoad()
                    Call pMapInvalidate()
                End With
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private Sub btnCurrentItemPointsJoin_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsJoin.ItemClick
        Call pDesignPointsJoin(False)
    End Sub

    Private Sub btnCurrentItemPointsJoinAndConnect_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsJoinAndConnect.ItemClick
        Call pDesignPointsJoin(True)
    End Sub

    Private Sub btnCurrentItemPointsUnjoin_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsUnjoin.ItemClick
        Call pDesignPointsUnjoin()
    End Sub

    Private Sub btnCurrentItemPointsUnjoinAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemPointsUnjoinAll.ItemClick
        Call pDesignPointsUnjoin(True)
    End Sub

    Private Sub btnPenSmooting_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnPenSmooting.CheckedChanged
        btnPenSmootingFactor.Enabled = btnPenSmooting.Checked
    End Sub

    Private Sub btnItemsObjectProperties_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnItemsObjectProperties.ItemClick
        Call pObjectPropShow(True)
    End Sub

    Private Sub DocumentManager_DocumentActivate(sender As Object, e As Docking2010.Views.DocumentEventArgs) Handles DocumentManager.DocumentActivate
        Call pContextChange()
        Call pClipboardAlign()
    End Sub

    Private Sub btnViewImageViewer_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewImageViewer.ItemClick
        Call pDockContentShow(dockIV, True)
    End Sub

    Private Sub pnlStatusZoomBar_EditValueChanged(sender As Object, e As EventArgs) Handles pnlStatusZoomBar.EditValueChanged
        If Not bDisableZoomEvent Then
            If Not oCurrentDesign.Type = cIDesign.cDesignTypeEnum.ThreeDModel Then
                'oHolos.Zoom(pnlStatusZoomBar.EditValue / sZoomRatio)
                'Else
                Dim sNewZoom As Single
                Dim sScale As Single = 10.0F ^ (pnlStatusZoomBar.EditValue / 10000)
                If Me.DeviceDpi = 96 Then
                    'sZoom = (3937.00781F * Me.DeviceDpi) / iScale
                    sNewZoom = (Me.DeviceDpi / (sScale * 0.0254F))
                Else
                    sNewZoom = (1.0F / (sScale * 0.000254F))
                End If
                Call pMapZoom(sNewZoom)

                'Call pFloatingToolbarUpdate()
                'Call pMapRepaint()
            End If
        End If
    End Sub

    Private Sub btnViewAudioListener_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewAudioListener.ItemClick
        Call pDockContentShow(dockAV, True)
    End Sub

    Private Sub btnPasteStylePen_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPasteStylePen.ItemClick
        Call pGetCurrentDesignTools.PasteItem("", Location, cEditDesignTools.PasteSpecialEnum.Pen)
    End Sub

    Private Sub btnPasteStyleBrush_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPasteStyleBrush.ItemClick
        Call pGetCurrentDesignTools.PasteItem("", Location, cEditDesignTools.PasteSpecialEnum.Brush)
    End Sub

    Private Sub btnPaste_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnPaste.ItemClick
        If picMap.Focused Then
            Call pClipboardPaste("", modPaint.FromPaintPoint(picMap.PointToClient(Cursor.Position), sPaintZoom, oPaintTranslation))
        Else
            Call pClipboardPaste()
        End If
    End Sub

    Private Sub btnCurrentItemSketchDisableMorphingForAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchDisableMorphingForAll.ItemClick
        Call pItemSketchEnableMorphingForAll(False)
    End Sub

    Private Sub btnCurrentItemSketchEnableMorphingForAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchEnableMorphingForAll.ItemClick
        Call pItemSketchEnableMorphingForAll(True)
    End Sub

    Private Sub pItemSketchEnableMorphingForAll(Enabled As Boolean)
        Try
            Dim oItems As IEnumerable(Of cItem) = oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items.Where(Function(oitem) TypeOf oitem Is cItemSketch)
            If oItems.Count > 0 Then
                Call oMousePointer.Push(Cursors.WaitCursor)
                Call pGetCurrentDesignTools.BeginUndoSnapshot("main.undo52", oItems)
                For Each oItem As cItem In oItems
                    If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
                        Dim oItemSketch As cIItemSketch = oItem
                        oItemSketch.MorphingDisabled = Enabled
                    End If
                Next
                Call pGetCurrentDesignTools.CommitUndoSnapshot()
                Call oMousePointer.Pop()
                Call pObjectPropertyLoad()
                Call pMapInvalidate()
            End If
        Catch ex As Exception
            Call pLogAdd(ex)
        End Try
    End Sub

    Private Sub btnCurrentItemSketchView_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchView.ItemClick
        Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    End Sub

    Private Sub btnCurrentItemSketchEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchEdit.ItemClick
        Call oPropSketch.Edit()
    End Sub

    Private Sub btnCurrentItemSketchHideAll_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSketchHideAll.ItemClick
        Call pItemSketchHideAll()
    End Sub

    Private Sub pItemSketchHideAll()
        Call oMousePointer.Push(Cursors.WaitCursor)
        For Each oItem As cItem In oCurrentDesign.Layers(cLayers.LayerTypeEnum.Base).Items
            If oItem.Type = cIItem.cItemTypeEnum.Sketch Then
                oItem.HiddenInDesign = True
            End If
        Next
        Call oDockLevels.RefreshData()
        Call oMousePointer.Pop()
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub btnCurrentItemImageEdit_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemImageEdit.ItemClick
        Call oPropImage.Edit()
    End Sub

    Private Sub btnCurrentItemImageView_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemImageView.ItemClick
        Call pImageViewerShow(pGetCurrentDesignTools.CurrentItem)
    End Sub

    Private Sub btnCurrentItemUnderItems_Popup(sender As Object, e As EventArgs) Handles btnCurrentItemUnderItems.Popup
        Call pMapInfoObjectsUnder(mnuDesignItem.Tag)
    End Sub

    Private Sub btnCurrentItemUnderItems_Subitem_ItemClick(sender As Object, e As ItemClickEventArgs)
        Call pItemBringToTop()
    End Sub

    Private Sub Ribboncontrol_ShortcutItemClick(sender As Object, e As ShortcutItemClickEventArgs)
        If e.Shortcut.Key = Keys.Delete OrElse e.Shortcut.Key = (Keys.C Or Keys.Control) OrElse e.Shortcut.Key = (Keys.V Or Keys.Control) OrElse e.Shortcut.Key = (Keys.X Or Keys.Control) OrElse e.Shortcut.Key = (Keys.Z Or Keys.Control) OrElse e.Shortcut.Key = (Keys.A Or Keys.Control) Then
            If Not (grdSegments.Focused OrElse picMap.Focused) Then
                e.Cancel = True
            End If
        End If
    End Sub

    Private Sub RibbonControl_HighlightedLinkChanged(Sender As Object, e As HighlightedLinkChangedEventArgs)
        If Not e.Link Is Nothing Then
            If e.Link.Item.Name.StartsWith("btnCurrentItemUnderlying_") Then
                Dim oItem As cItem = e.Link.Item.Tag
                Call pGetCurrentDesignTools.SelectItem(oItem)
            End If
        End If
    End Sub

    Private Sub pMapInfoObjectsUnder(Point As Point)
        Dim oPoint As PointF = modPaint.FromPaintPoint(picMap.PointToClient(Point), sPaintZoom, oPaintTranslation)
        Dim oItems As List(Of cItem) = oCurrentDesign.HitTest(oCurrentOptions, pGetCurrentDesignTools, oPoint, sWide / sPaintZoom, False)
        Call btnCurrentItemUnderItems.ClearItems
        If oItems.Count > 0 Then
            For Each oItem As cItem In oItems
                Dim oBarItem As BarButtonItem = New BarButtonItem
                oBarItem.Name = "btnCurrentItemUnderlying_" & oItem.GetHashCode
                oBarItem.Caption = oItem.Type.ToString & If(oItem.Name <> "", " - " & oItem.Name, "")
                oBarItem.ImageOptions.Image = oItem.GetThumbnailImage(oDefaultOptions, cItem.PaintOptionsEnum.None, False, 32, 32)
                oBarItem.RibbonStyle = DevExpress.XtraBars.Ribbon.RibbonItemStyles.SmallWithoutText
                oBarItem.Tag = oItem
                AddHandler oBarItem.ItemClick, AddressOf btnCurrentItemUnderItems_Subitem_ItemClick
                Call btnCurrentItemUnderItems.AddItem(oBarItem)
            Next
        Else
            Dim oBarItem As BarStaticItem = New BarStaticItem
            oBarItem.Caption = modMain.GetLocalizedString("main.textpart96")
            oBarItem.Enabled = False
            Call btnCurrentItemUnderItems.AddItem(oBarItem)
        End If
    End Sub

    Private Sub mnuDesignItem_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuDesignItem.BeforePopup
        If btnCurrentItemUnderItems.ItemLinks.Count = 0 Then
            Dim oBarItem As BarStaticItem = New BarStaticItem
            oBarItem.Caption = modMain.GetLocalizedString("main.textpart96")
            oBarItem.Enabled = False
            Call btnCurrentItemUnderItems.AddItem(oBarItem)
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection0_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection0.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        If Not oItemSegment.Segment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            With oItemSegment.Segment
                If .Direction = cSurvey.cSurvey.DirectionEnum.Right Then
                    Call pStatusSet(oItemSegment.Segment.ToString & " " & modMain.GetLocalizedString("main.textpart72"))
                    .Direction = cSurvey.cSurvey.DirectionEnum.Left
                    btnCurrentItemSegmentDirection0.ImageOptions.SvgImage = My.Resources.directionleft
                ElseIf .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                    Call pStatusSet(oItemSegment.Segment.ToString & " " & modMain.GetLocalizedString("main.textpart71"))
                    .Direction = cSurvey.cSurvey.DirectionEnum.Right
                    btnCurrentItemSegmentDirection0.ImageOptions.SvgImage = My.Resources.directionright
                End If
                Call .Save()
            End With
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(True)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            If oItemSegment.Segment Is oTools.CurrentSegment Then
                'Call oTools.SelectSegment(oItemSegment.Segment)
                Call grdViewSegments.RefreshFocusedRow
                Call pSegmentLoad(oTools.CurrentSegment)
            End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection1_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection1.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        If Not oItemSegment.Segment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            With oItemSegment.Segment
                If .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                    .Direction = cSurvey.cSurvey.DirectionEnum.Right
                Else
                    .Direction = cSurvey.cSurvey.DirectionEnum.Left
                End If
                Call .Save()
            End With
            Dim sFrom As String = oItemSegment.Segment.Data.Data.From
            Dim sTo As String = oItemSegment.Segment.Data.Data.To
            If oSurvey.Calculate.TrigPoints(sTo).GetPoints.Count = 1 Then
                Dim iCurrentDirection As cSurvey.cSurvey.DirectionEnum = oItemSegment.Segment.Direction
                Dim sNextTo As String = ""
                Do
                    Dim sNexts As String() = oSurvey.Calculate.TrigPoints(sTo).GetNextPoints(sFrom)
                    If sNexts.Count = 1 Then
                        sNextTo = sNexts(0)
                        Dim oNextSegmnent As cSegment = oSurvey.Segments.Find(sTo, sNextTo)
                        If oNextSegmnent.IsProfileBinded Then
                            Exit Do
                        Else
                            oNextSegmnent.Direction = iCurrentDirection
                            Call oNextSegmnent.Save()
                            If oSurvey.Calculate.TrigPoints(sNextTo).GetPoints.Count = 1 Then
                                sFrom = sTo
                                sTo = sNextTo
                            Else
                                Exit Do
                            End If
                        End If
                    Else
                        Exit Do
                    End If
                Loop
            End If
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(True)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            Call pSurveySegmentsRefresh()
            'If oItemSegment.Segment Is oTools.CurrentSegment Then
            '    'Call oTools.SelectSegment(oItemSegment.Segment)
            '    Call grdViewSegments.RefreshFocusedRow
            '    Call pSegmentLoad(oTools.CurrentSegment)
            'End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection3_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection3.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        Dim oSegment As cSegment = oItemSegment.Segment
        If Not oSegment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            Dim iNewDirection As cSurvey.cSurvey.DirectionEnum = oItemSegment.Segment.Direction
            For Each oSegment In oSurvey.Segments.GetCaveSegments(oSegment.Cave, oSegment.Branch)
                With oSegment
                    If .Direction <> iNewDirection Then
                        If Not .IsProfileBinded Then
                            .Direction = iNewDirection
                            .Save()
                        End If
                    End If
                End With
            Next
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(True)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            Call pSurveySegmentsRefresh()
            'If oItemSegment.Segment Is oTools.CurrentSegment Then
            '    'Call oTools.SelectSegment(oItemSegment.Segment)
            '    Call grdViewSegments.RefreshFocusedRow
            '    Call pSegmentLoad(oTools.CurrentSegment)
            'End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentDirection4_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection4.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        Dim oSegment As cSegment = oItemSegment.Segment
        If Not oSegment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            For Each oSegment In oSurvey.Segments.GetCaveSegments(oSegment.Cave, oSegment.Branch)
                With oSegment
                    If Not .IsProfileBinded Then
                        If .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                            .Direction = cSurvey.cSurvey.DirectionEnum.Right
                        Else
                            .Direction = cSurvey.cSurvey.DirectionEnum.Left
                        End If
                        .Save()
                    End If
                End With
            Next
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(False)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            Call pSurveySegmentsRefresh()
            'If oItemSegment.Segment Is oTools.CurrentSegment Then
            '    'Call oTools.SelectSegment(oItemSegment.Segment)
            '    Call grdViewSegments.RefreshFocusedRow
            '    Call pSegmentLoad(oTools.CurrentSegment)
            'End If
        End If
    End Sub

    Private Sub btnCurrentItemSegmentToProperty_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentToProperty.ItemClick
        Dim sTrigPoint As String = pGetCurrentTools.CurrentSegment.To
        Call pFieldDataShow(True)
        Call pTrigPointSelect(oSurvey.TrigPoints(sTrigPoint), True, True)
    End Sub

    Private Sub btnCurrentItemSegmentFromProperty_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentFromProperty.ItemClick
        Dim sTrigPoint As String = pGetCurrentTools.CurrentSegment.From
        Call pFieldDataShow(True)
        Call pTrigPointSelect(oSurvey.TrigPoints(sTrigPoint), True, True)
    End Sub

    Private Sub btnCurrentItemShot_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemShot.ItemClick
        btnSegments.Checked = True
        Call pFieldDataShow(True)
    End Sub

    Private Sub btnCurrentItemStationSetCoordinate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemStationSetCoordinate.ItemClick
        Call pTrigpointSetCoordinate(oTools.CurrentTrigpoint.Name)
    End Sub

    Private Sub btnCurrentItemStationSetCoordinateCP_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemStationSetCoordinateCP.ItemClick
        Call pTrigpointSetCoordinate(oTools.CurrentTrigpoint.Name, pGetCurrentDesignTools.CurrentMarkedDesktopPoint.Coordinate)
    End Sub

    Private Sub btnCurrentItemStation_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemStation.ItemClick
        btnTrigpoints.Checked = True
        Call pFieldDataShow(True)
    End Sub

    Private Sub mnuDesignNone_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuDesignNone.BeforePopup
        If btnCurrentItemUnderItems.ItemLinks.Count = 0 Then
            Dim oBarItem As BarStaticItem = New BarStaticItem
            oBarItem.Caption = modMain.GetLocalizedString("main.textpart96")
            oBarItem.Enabled = False
            Call btnCurrentItemUnderItems.AddItem(oBarItem)
        End If
    End Sub

    Private Sub mnuSegmentDirection_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuSegmentDirection.BeforePopup
        'Call oMousePointer.Push(Cursors.WaitCursor)
        'Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        'Dim oSegment As cSegment = oItemSegment.Segment
        'Dim iCurrentDirection As cSurvey.cSurvey.DirectionEnum = oSegment.Direction

        'Dim oSegments As cSegmentCollection = oSurvey.Segments.GetCaveSegments(oSegment.Cave, oSegment.Branch)
        'Dim bEnabled As Boolean = Not pSegmentsIsProfileBinded(oSegments)
        'btnCurrentItemSegmentDirection1.Enabled = bEnabled
        'btnCurrentItemSegmentDirection2.Enabled = bEnabled
        'btnCurrentItemSegmentDirection3.Enabled = bEnabled
        'btnCurrentItemSegmentDirection4.Enabled = bEnabled
        'Call oMousePointer.Pop()
    End Sub

    Private Sub btnCurrentItemSegmentDirection_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnCurrentItemSegmentDirection.ItemClick
        Dim oItemSegment As cItemSegment = pGetCurrentDesignTools.CurrentItem
        If Not oItemSegment.Segment.IsProfileBinded Then
            Call oMousePointer.Push(Cursors.WaitCursor)
            bDisableSegmentsChangeEvent = True
            With oItemSegment.Segment
                If .Direction = cSurvey.cSurvey.DirectionEnum.Right Then
                    Call pStatusSet(oItemSegment.Segment.ToString & " " & modMain.GetLocalizedString("main.textpart72"))
                    .Direction = cSurvey.cSurvey.DirectionEnum.Left
                    btnCurrentItemSegmentDirection.ImageOptions.SvgImage = My.Resources.directionleft
                ElseIf .Direction = cSurvey.cSurvey.DirectionEnum.Left Then
                    Call pStatusSet(oItemSegment.Segment.ToString & " " & modMain.GetLocalizedString("main.textpart158"))
                    .Direction = cSurvey.cSurvey.DirectionEnum.Vertical
                    btnCurrentItemSegmentDirection.ImageOptions.SvgImage = My.Resources.directionvertical
                Else
                    Call pStatusSet(oItemSegment.Segment.ToString & " " & modMain.GetLocalizedString("main.textpart71"))
                    .Direction = cSurvey.cSurvey.DirectionEnum.Right
                    btnCurrentItemSegmentDirection.ImageOptions.SvgImage = My.Resources.directionright
                End If
                Call .Save()
            End With
            bDisableSegmentsChangeEvent = False
            Call pSurveyCalculate(True)
            Call pPropertyItemSegment()
            Call oMousePointer.Pop()
            If oItemSegment.Segment Is oTools.CurrentSegment Then
                'Call oTools.SelectSegment(oItemSegment.Segment)
                Call grdViewSegments.RefreshFocusedRow
                Call pSegmentLoad(oTools.CurrentSegment)
            End If
        End If
    End Sub

    Private Sub btnShow_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnShow.ItemClick
        Call pTrayShowFrom()
    End Sub

    Private Sub ntiMain_MouseClick(sender As Object, e As MouseEventArgs) Handles ntiMain.MouseClick
        If (e.Button And MouseButtons.Right) = MouseButtons.Right Then
            Call mnuTray.ShowPopup(Cursor.Position)
        End If
    End Sub

    Private Sub btnDesignSetCurrentCaveBranch_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignSetCurrentCaveBranch.ItemClick
        Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
        If TypeOf oCurrentItem Is cItemSegment Then
            Dim oSegment As cSegment = DirectCast(oCurrentItem, cItemSegment).Segment
            Call pSurveySetCurrentCaveBranch(oSegment.Cave, oSegment.Branch)
            Call pSurveyRedraw()
        ElseIf TypeOf oCurrentItem Is cItem Then
            Call pSurveySetCurrentCaveBranch(oCurrentItem.Cave, oCurrentItem.Branch)
            btnMainBindDesignType.EditValue = oCurrentItem.BindDesignType
            btnMainBindCrossSections.EditValue = If(oCurrentItem.CrossSection = "", cboMainBindCrossSections.DataSource(0), oSurvey.CrossSections.GetBindItem(oCurrentItem.CrossSection))
            Call pSurveyRedraw()
        End If
    End Sub

    Private Sub btnAlignToGrid_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnAlignToGrid.CheckedChanged
        Call pDesignSnapToGrid(btnAlignToGrid.Checked)
    End Sub

    'Private Sub cboSegmentCaveListView_CustomRowFilter(sender As Object, e As RowFilterEventArgs)
    '    If Not pGetCurrentTools.CurrentSegment Is Nothing Then
    '        e.Visible = Not pGetCurrentTools.CurrentSegment.GetLocked
    '        e.Handled = True
    '    End If
    'End Sub

    Private Sub pCaveBranchFill(Cave As DevExpress.XtraEditors.GridLookUpEdit, Branch As DevExpress.XtraEditors.GridLookUpEdit)
        Dim sCave As String = cCaveInfo.EditToString(Cave.EditValue)
        If sCave = "" Then
            Branch.Properties.DataSource = New List(Of cCaveInfoBranch)({oSurvey.Properties.CaveInfos.GetEmptyCaveInfoBranch(sCave)})
            Branch.EditValue = Branch.Properties.DataSource(0)
            Branch.Enabled = False
        Else
            Dim oCurrentBranch As cCaveInfoBranch = Branch.EditValue
            Branch.Properties.DataSource = oSurvey.Properties.CaveInfos(sCave).Branches.GetAllBranchesWithEmpty.Select(Function(oitem) oitem.Value).ToList
            If Branch.Properties.DataSource.Count > 0 Then
                Try
                    If IsNothing(oCurrentBranch) Then
                        Branch.EditValue = Branch.Properties.DataSource(0)
                    Else
                        Branch.EditValue = oCurrentBranch
                    End If
                Catch
                    Branch.EditValue = Branch.Properties.DataSource(0)
                End Try
                Branch.Enabled = True
            Else
                Branch.Enabled = False
            End If
        End If
    End Sub

    Private Sub cboSegmentCaveBranchList_EditValueChanged(sender As Object, e As EventArgs) Handles cboSegmentCaveBranchList.EditValueChanged
        Call pSegmentSetCaveBranchesColor()
    End Sub

    Private Sub btnAutoSettings_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnAutoSettings.ItemClick
        Call pAutoSettings()
    End Sub

    Private Sub cPropMessageBar_OnCloseRequest(sender As Object, e As EventArgs)
        Call pPropPopupHide()
    End Sub

    Private Sub cDesignMessageCorner_CustomButtonClick(Sender As Object, e As EventArgs) Handles cDesignMessageCorner.CustomButtonClick
        If Not oCurrentDesign Is Nothing Then
            Select Case oCurrentDesign.Type
                Case cIDesign.cDesignTypeEnum.Plan, cIDesign.cDesignTypeEnum.Profile
                    Call pSurveyCalculate(True)
                Case cIDesign.cDesignTypeEnum.ThreeDModel
                    Call pSurvey3DForceRedraw()
            End Select
        End If
    End Sub

    Private Sub btnDesignBar3DRefresh_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignBar3DRefresh.ItemClick
        Call pSurvey3DForceRedraw()
    End Sub

    Private Sub btnDesignBarPlotCalculate_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnDesignBarPlotCalculate.ItemClick
        Call pSurveyCalculate(True)
    End Sub

    Private Sub grdViewSegments_CustomDrawRowIndicator(sender As Object, e As DevExpress.XtraGrid.Views.Grid.RowIndicatorCustomDrawEventArgs) Handles grdViewSegments.CustomDrawRowIndicator
        If e.Info.IsRowIndicator AndAlso e.RowHandle >= 0 Then
            If e.Info.ImageIndex = -1 Then
                Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetRow(e.RowHandle)
                If oSegmentPlaceholder IsNot Nothing Then
                    If (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.Invalid) > 0 Then
                        Call e.DefaultDraw()
                        e.Cache.DrawSvgImage(My.Resources.errorbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                        e.Handled = True
                    Else
                        If oSegmentPlaceholder.CalculateException Then
                            Call e.DefaultDraw()
                            e.Cache.DrawSvgImage(My.Resources.errorbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                            e.Handled = True
                        Else
                            If (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.Equate) > 0 Then
                                Call e.DefaultDraw()
                                e.Cache.DrawSvgImage(My.Resources.equatebullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                                e.Handled = True
                            Else
                                If (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.SessionMissing) > 0 Then
                                    If oSurvey.Properties.CalculateVersion > 2 Then
                                        Call e.DefaultDraw()
                                        e.Cache.DrawSvgImage(My.Resources.errorbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                                    Else
                                        Call e.DefaultDraw()
                                        e.Cache.DrawSvgImage(My.Resources.warningbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                                    End If
                                    e.Handled = True
                                ElseIf (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.CaveMissing) > 0 Then
                                    Call e.DefaultDraw()
                                    e.Cache.DrawSvgImage(My.Resources.warningbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                                    e.Handled = True
                                End If
                            End If
                        End If
                    End If
                    'Dim oSegment As cSegment = oSegmentPlaceholder.Segment
                    'If oSegment IsNot Nothing Then
                    '    If Not oSegment.IsValid Then
                    '        e.Cache.DrawSvgImage(My.Resources.errorbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                    '        e.Handled = True
                    '    ElseIf oSegment.IsEquate Then
                    '        e.Cache.DrawSvgImage(My.Resources.equatebullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                    '        e.Handled = True
                    '    ElseIf oSegment.Cave = "" Then
                    '        e.Cache.DrawSvgImage(My.Resources.warningbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                    '        e.Handled = True
                    '    ElseIf oSegment.Session = "" Then
                    '        If oSurvey.Properties.CalculateVersion > 2 Then
                    '            e.Cache.DrawSvgImage(My.Resources.errorbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                    '        Else
                    '            e.Cache.DrawSvgImage(My.Resources.warningbullet, e.Bounds, DevExpress.Utils.Svg.SvgPaletteHelper.GetSvgPalette(LookAndFeel, DevExpress.Utils.Drawing.ObjectState.Normal))
                    '        End If
                    '        e.Handled = True
                    '    End If
                    'End If
                End If
            End If
        End If
    End Sub

    Private Sub btnWorkspacesManage_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnWorkspacesManage.ItemClick
        Call pWorkspacesManage()
    End Sub

    Private Sub mnuWorkspaces_Popup(sender As Object, e As EventArgs) Handles mnuWorkspaces.Popup
        Call btnWorkspacesList.Strings.Clear()
        Call btnWorkspacesList.Strings.AddRange(WorkspaceManager.Workspaces.Select(Function(oitem) oitem.Name).Cast(Of Object).ToArray)
    End Sub

    Private Sub btnWorkspacesList_ListItemClick(sender As Object, e As ListItemClickEventArgs) Handles btnWorkspacesList.ListItemClick
        Dim sWorkspaceName As String = DirectCast(sender, DevExpress.XtraBars.BarListItem).Strings(e.Index)
        Call WorkspaceManager.ApplyWorkspace(sWorkspaceName)
    End Sub

    Private Sub btnWorkspacesCapture_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnWorkspacesCapture.ItemClick
        Dim oWorkspace As DevExpress.Utils.IWorkspace = frmManageWorkspaces.CaptureWorkspace(Me, WorkspaceManager)
        If oWorkspace IsNot Nothing Then
            Call pStatusSet(String.Format(modMain.GetLocalizedString("manageworkspace.textpart1"), oWorkspace.Name))
        End If
    End Sub

    Private Sub grdTrigPoints_Enter(sender As Object, e As EventArgs) Handles grdTrigPoints.Enter
        Call pSelectTrigpoint(grdViewTrigpoints.GetRow(grdViewTrigpoints.FocusedRowHandle))
    End Sub

    Private Sub cboSegmentCaveList_EditValueChanged(sender As Object, e As EventArgs) Handles cboSegmentCaveList.EditValueChanged
        Call cboSegmentCaveBranchList.Rebind(oSurvey, cboSegmentCaveList, True)
    End Sub

    Private Sub btnExport_Popup(sender As Object, e As EventArgs) Handles btnExport.Popup
        btnExport3D.Enabled = oHolos.RedrawCount > 0
        Dim oGPSBase As cTrigPoint = oSurvey.TrigPoints.GetGPSBaseReferencePoint
        btnExportTrack.Enabled = oSurvey.Properties.GPS.Enabled AndAlso Not oGPSBase Is Nothing AndAlso Not oGPSBase.Coordinate.IsEmpty
    End Sub

    Private Sub txtTrigPointName_Resize(sender As Object, e As EventArgs) Handles txtTrigPointName.Resize
        txtTrigPointName.Width = txtTrigPointName.Parent.Width - 100 * Me.CurrentAutoScaleDimensions.Height / 96.0F
    End Sub

    Private Sub cboSegmentSessionList_Resize(sender As Object, e As EventArgs) Handles cboSegmentSessionList.Resize
        cboSegmentSessionList.Width = cboSegmentSessionList.Parent.Width - 80 * Me.CurrentAutoScaleDimensions.Height / 96.0F
    End Sub

    Private Sub cboSegmentCaveList_Resize(sender As Object, e As EventArgs) Handles cboSegmentCaveList.Resize
        cboSegmentCaveList.Width = cboSegmentCaveList.Parent.Width - 80 * Me.CurrentAutoScaleDimensions.Height / 96.0F
    End Sub

    Private Sub cboSegmentCaveBranchList_Resize(sender As Object, e As EventArgs) Handles cboSegmentCaveBranchList.Resize
        cboSegmentCaveBranchList.Width = cboSegmentCaveBranchList.Parent.Width - 80 * Me.CurrentAutoScaleDimensions.Height / 96.0F
    End Sub

    Private Sub btnStatusDesignWarpingState_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnStatusDesignWarpingState.ItemClick
        If oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Active Then
            oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Paused
        Else
            oSurvey.Properties.DesignWarpingState = cSurvey.cSurvey.DesignWarpingStateEnum.Active
        End If
    End Sub

    Private Sub ToolTipController_GetActiveObjectInfo(sender As Object, e As DevExpress.Utils.ToolTipControllerGetActiveObjectInfoEventArgs) Handles ToolTipController.GetActiveObjectInfo
        If e.SelectedControl Is grdSegments Then
            Dim info As DevExpress.Utils.ToolTipControlInfo = Nothing
            Dim view As DevExpress.XtraGrid.Views.Grid.GridView = grdSegments.GetViewAt(e.ControlMousePosition)
            If view IsNot Nothing Then
                Dim hi As DevExpress.XtraGrid.Views.Grid.ViewInfo.GridHitInfo = view.CalcHitInfo(e.ControlMousePosition)
                If hi.HitTest = DevExpress.XtraGrid.Views.Grid.ViewInfo.GridHitTest.RowIndicator Then
                    Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetRow(hi.RowHandle)
                    If oSegmentPlaceholder IsNot Nothing Then
                        Dim oTexts As List(Of String) = New List(Of String)
                        If (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.Invalid) > 0 Then
                            Call oTexts.Add(GetLocalizedString("main.textpart52"))
                        Else
                            If (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.Equate) > 0 Then
                                Call oTexts.Add(GetLocalizedString("main.textpart160"))
                            Else
                                If (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.SessionMissing) > 0 Then
                                    If oSurvey.Properties.CalculateVersion > 2 Then
                                        Call oTexts.Add(GetLocalizedString("main.textpart159"))
                                    Else
                                        Call oTexts.Add(GetLocalizedString("main.textpart153"))
                                    End If
                                ElseIf (oSegmentPlaceholder.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.CaveMissing) > 0 Then
                                    Call oTexts.Add(GetLocalizedString("main.textpart53"))
                                End If
                            End If
                            If oSegmentPlaceholder.CalculateException Then
                                Call oTexts.Add(oSegmentPlaceholder.CalculateExceptionMessage)
                            End If
                        End If
                        Dim o As Object = hi.HitTest.ToString() + hi.RowHandle.ToString()
                        info = New DevExpress.Utils.ToolTipControlInfo(o, String.Join(vbCrLf, oTexts))

                    End If

                End If
                If Not info Is Nothing Then e.Info = info
            End If
        End If
    End Sub

    Private Sub grdViewSegments_CustomDrawCell(sender As Object, e As RowCellCustomDrawEventArgs) Handles grdViewSegments.CustomDrawCell
        If e.Column Is colSegmentsListTo Then
            Dim oSegmentPlaceholder As UIHelpers.cSegmentPlaceholder = grdViewSegments.GetRow(e.RowHandle)
            If oSegmentPlaceholder IsNot Nothing Then
                Dim oSegment As cSegment = oSegmentPlaceholder.Segment
                If oSegment.Splay Then
                    If My.Application.RuntimeSettings.GetSetting("isdarkskin") Then
                        e.Appearance.ForeColor = modPaint.LightColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                    Else
                        e.Appearance.ForeColor = modPaint.DarkColor(My.Application.RuntimeSettings.GetSetting("backcolor"), 0.25)
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub grdViewSegments_CustomScrollAnnotation(sender As Object, e As DevExpress.XtraGrid.Views.Grid.GridCustomScrollAnnotationsEventArgs) Handles grdViewSegments.CustomScrollAnnotation
        If oSurvey IsNot Nothing Then
            Dim oSegments As UIHelpers.cSegmentsBindingList = grdSegments.DataSource
            'this row is a workaround for a strange devexpress behaviour (annotations is nothing)
            e.SetAnnotations(DevExpress.LookAndFeel.DXSkinColors.IconColors.Black, grdViewSegments.FocusedRowHandle)
            If oSegments IsNot Nothing AndAlso e.Annotations IsNot Nothing Then
                Dim oInfos As List(Of DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo) = New List(Of DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo)
                Dim iIndex As Integer = 0
                For Each oSegment As UIHelpers.cSegmentPlaceholder In oSegments
                    If oSegment.CalculateException Then
                        Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                        oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Red
                        oInfo.RowHandle = grdViewSegments.GetRowHandle(iIndex)
                        oInfos.Add(oInfo)
                    Else
                        If oSegment.Validation <> UIHelpers.cSegmentPlaceholder.SegmentValidation.None Then
                            If (oSegment.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.Invalid) > 0 Then
                                Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                                oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Red
                                oInfo.RowHandle = grdViewSegments.GetRowHandle(iIndex)
                                oInfos.Add(oInfo)
                            Else
                                If (oSegment.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.Equate) > 0 Then
                                    Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                                    oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Blue
                                    oInfo.RowHandle = grdViewSegments.GetRowHandle(iIndex)
                                    oInfos.Add(oInfo)
                                Else
                                    If (oSegment.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.SessionMissing) > 0 Then
                                        If oSurvey.Properties.CalculateVersion > 2 Then
                                            Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                                            oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Red
                                            oInfo.RowHandle = grdViewSegments.GetRowHandle(iIndex)
                                            oInfos.Add(oInfo)
                                        Else
                                            Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                                            oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Yellow
                                            oInfo.RowHandle = grdViewSegments.GetRowHandle(iIndex)
                                            oInfos.Add(oInfo)
                                        End If
                                    ElseIf (oSegment.Validation And UIHelpers.cSegmentPlaceholder.SegmentValidation.CaveMissing) > 0 Then
                                        Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                                        oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Yellow
                                        oInfo.RowHandle = grdViewSegments.GetRowHandle(iIndex)
                                        oInfos.Add(oInfo)
                                    End If
                                End If
                            End If
                        Else
                            If (oSegment.Segment.Note <> "") Then
                                Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                                oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.ForeColors.Information  'Color.Orange
                                oInfo.RowHandle = grdViewSegments.GetRowHandle(iIndex)
                                oInfos.Add(oInfo)
                            End If
                        End If
                    End If
                    iIndex += 1
                Next
                e.Annotations.AddRange(oInfos)
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_CustomScrollAnnotation(sender As Object, e As DevExpress.XtraGrid.Views.Grid.GridCustomScrollAnnotationsEventArgs) Handles grdViewTrigpoints.CustomScrollAnnotation
        If oSurvey IsNot Nothing Then
            'this row is a workaround for a strange devexpress behaviour (annotations is nothing)
            e.SetAnnotations(DevExpress.LookAndFeel.DXSkinColors.IconColors.Black, grdViewTrigpoints.FocusedRowHandle)
            If oSurvey.TrigPoints IsNot Nothing AndAlso e.Annotations IsNot Nothing Then
                Dim oInfos As List(Of DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo) = New List(Of DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo)
                Dim iIndex As Integer = 0
                For Each oTrigpoint As cTrigPoint In oSurvey.TrigPoints
                    If Not oTrigpoint.Data.IsSplay Then
                        If Not oTrigpoint.Coordinate.IsEmpty Then
                            Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                            oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Black
                            oInfo.RowHandle = grdViewTrigpoints.GetRowHandle(iIndex)
                            oInfos.Add(oInfo)
                        ElseIf oTrigpoint.IsEntrance Then
                            Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                            oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Blue
                            oInfo.RowHandle = grdViewTrigpoints.GetRowHandle(iIndex)
                            oInfos.Add(oInfo)
                        ElseIf oTrigpoint.IsSpecial Then
                            Dim oInfo As DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo = New DevExpress.XtraGrid.Views.Grid.GridScrollAnnotationInfo
                            oInfo.Color = DevExpress.LookAndFeel.DXSkinColors.IconColors.Red
                            oInfo.RowHandle = grdViewTrigpoints.GetRowHandle(iIndex)
                            oInfos.Add(oInfo)
                        End If
                    End If
                    iIndex += 1
                Next
                e.Annotations.AddRange(oInfos)
            End If
        End If
    End Sub

    Private Sub grdViewTrigpoints_KeyDown(sender As Object, e As KeyEventArgs) Handles grdViewTrigpoints.KeyDown
        If e.KeyData = (Keys.Down Or Keys.Shift) Then
            e.Handled = grdViewTrigpoints.MoveToNextScrollAnnotation(DevExpress.XtraEditors.Annotations.ScrollAnnotationKind.Custom)
        End If
        If e.KeyData = (Keys.Up Or Keys.Shift) Then
            e.Handled = grdViewTrigpoints.MoveToPrevScrollAnnotation(DevExpress.XtraEditors.Annotations.ScrollAnnotationKind.Custom)
        End If
    End Sub

    Private Sub grdViewSegments_KeyDown(sender As Object, e As KeyEventArgs) Handles grdViewSegments.KeyDown
        If e.KeyData = (Keys.Down Or Keys.Shift) Then
            e.Handled = grdViewSegments.MoveToNextScrollAnnotation(DevExpress.XtraEditors.Annotations.ScrollAnnotationKind.Custom)
        End If
        If e.KeyData = (Keys.Up Or Keys.Shift) Then
            e.Handled = grdViewSegments.MoveToPrevScrollAnnotation(DevExpress.XtraEditors.Annotations.ScrollAnnotationKind.Custom)
        End If
    End Sub

    Private Sub DockManager_ActivePanelChanged(sender As Object, e As Docking.ActivePanelChangedEventArgs) Handles DockManager.ActivePanelChanged
        Call pContextChange()
    End Sub

    Private Sub btnViewDistances_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewDistances.ItemClick
        Call pDistancesShow()
    End Sub

    Private Sub DockManager_LayoutUpgrade(sender As Object, e As DevExpress.Utils.LayoutUpgradeEventArgs) Handles DockManager.LayoutUpgrade
        Call modDevExpress.RestoreDockPanel(DockManager, dockConsole, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockScript, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockClipart, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockBrushesAndPens, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockText, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockAV, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockIV, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockTexts, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockLevels, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockDistances, Docking.DockingStyle.Right)
        Call modDevExpress.RestoreDockPanel(DockManager, dockJoinPoints, Docking.DockingStyle.Right)
    End Sub

    Private Sub pProcessInternalHyperlink(URI As String)
        If URI.StartsWith("sg:") Then
            Call pSegmentSelect(oSurvey.Segments(URI.Substring(3)), True, True)
        ElseIf URI.StartsWith("tp:") Then
            Call pTrigPointSelect(oSurvey.TrigPoints(URI.Substring(3)), True, True)
        End If
    End Sub

    Private Sub cMainMessageBar_MessageLinkClick(Sender As Object, e As cInternalLinkEventArgs) Handles cMainMessageBar.MessageLinkClick
        Call pProcessInternalHyperlink(e.Link)
    End Sub

    Private Sub oDockConsole_ConsoleLinkClick(Sender As Object, e As cInternalLinkEventArgs) Handles oDockConsole.ConsoleLinkClick
        Call pProcessInternalHyperlink(e.Link)
    End Sub

    Private Sub DockManager_EndDocking(sender As Object, e As Docking.EndDockingEventArgs) Handles DockManager.EndDocking
        Call modDevExpress.UpdateFloatingForm(Me, e.Panel.FloatForm)
    End Sub

    Private Sub tabTrigpointsCoordinate_DragDrop(sender As Object, e As DragEventArgs)
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Dim iDropAction As DropActionEnum = pDropExtensionCheck(sFilePaths(0))
                If iDropAction = DropActionEnum.ImportKMLData OrElse iDropAction = DropActionEnum.ImportGPXData Then
                    Dim oCoordinate As cCoordinate = Nothing
                    Select Case iDropAction
                        Case DropActionEnum.ImportGPXData
                            oCoordinate = modImport.ImportWaypointGPX(sFilePaths(0))
                        Case DropActionEnum.ImportKMLData
                            oCoordinate = modImport.ImportWaypointKML(sFilePaths(0))
                    End Select
                    If Not IsNothing(oCoordinate) Then
                        cboTrigpointCoordinateFormat.SelectedIndex = 2
                        cboTrigpointCoordinateGeo.SelectedIndex = 0
                        txtTrigpointCoordinateLat.Text = oCoordinate.Latitude
                        txtTrigpointCoordinateLong.Text = oCoordinate.Longitude
                        txtTrigpointCoordinateAlt.Text = oCoordinate.Altitude
                        Call pTrigPointSave(oTools.CurrentTrigpoint)
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub tabTrigpointsCoordinate_DragOver(sender As Object, e As DragEventArgs)
        If e.Data.GetDataPresent(DataFormats.FileDrop) Then
            Dim sFilePaths As String() = CType(e.Data.GetData(DataFormats.FileDrop), String())
            If sFilePaths.Length = 1 Then
                Dim iDropAction As DropActionEnum = pDropExtensionCheck(sFilePaths(0))
                If iDropAction = DropActionEnum.ImportKMLData OrElse iDropAction = DropActionEnum.ImportGPXData Then
                    e.Effect = DragDropEffects.Copy
                Else
                    e.Effect = DragDropEffects.None
                End If
            Else
                e.Effect = DragDropEffects.None
            End If
        End If
    End Sub

    Private Sub grdViewSegments_CustomRowFilter(sender As Object, e As RowFilterEventArgs) Handles grdViewSegments.CustomRowFilter
        If oCurrentOptions IsNot Nothing Then
            If oCurrentOptions.HighlightSegmentsAndTrigpoints AndAlso oCurrentOptions.HighlightCurrentCave Then
                e.Visible = DirectCast(grdSegments.DataSource, UIHelpers.cSegmentsBindingList)(e.ListSourceRow).Visible
                e.Handled = Not e.Visible
            End If
        End If
    End Sub

    Private Sub btnSurveyInfoQuotas_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnSurveyInfoDepths.ItemClick
        Call pSurveyInfoQuotas()
    End Sub

    Private Sub mnuConvertTo_BeforePopup(sender As Object, e As CancelEventArgs) Handles mnuConvertTo.BeforePopup
        For Each oGroup As Ribbon.GalleryItemGroup In mnuConvertTo.Gallery.Groups
            For Each oItem As Ribbon.GalleryItem In oGroup.Items
                Dim oBag As cEditToolsBag = oItem.Tag
                'very ugly way to detect how to convert...to be rewritten in future
                If TypeOf pGetCurrentDesignTools.CurrentItem Is cItemImage Then
                    oItem.Visible = oBag.ConvertTo = cEditToolsBag.ConvertToEnum.Images
                Else
                    oItem.Visible = oBag.ConvertTo = cEditToolsBag.ConvertToEnum.AreaOrLines
                End If
            Next
            oGroup.Visible = oGroup.HasVisibleItems
        Next
    End Sub

    Private Sub dockData_Enter(sender As Object, e As EventArgs) Handles dockData.Enter
        'test: I want to see how is if going into data context a station/shot will be selected automatically
        Call pSelectDataItem()
    End Sub

    Private Sub pSelectDataItem()
        If btnSegments.Checked Then
            Call pSegmentItemSelect()
        Else
            Call pTrigpointItemSelect()
        End If
    End Sub

    Private Sub dockDesigner_Enter(sender As Object, e As EventArgs) Handles dockDesigner.Enter
        'test: for now here I do nothing
    End Sub

    Private Sub dockDesigner_ClosedPanel(sender As Object, e As Docking.DockPanelEventArgs) Handles dockDesigner.ClosedPanel
        Call pFloatingToolbarHide()
        Call pContextChange()
    End Sub

    Private Sub dockData_ClosedPanel(sender As Object, e As Docking.DockPanelEventArgs) Handles dockData.ClosedPanel
        Call pContextChange()
    End Sub

    Protected Overrides Function ProcessCmdKey(ByRef msg As Message, keyData As Keys) As Boolean
        If My.Application.CurrentLanguage = "it" Then
            If My.Application.ChangeDecimalKey AndAlso keyData = Keys.Decimal Then
                SendKeys.Send(",")
                Return True
            ElseIf My.Application.ChangePeriodKey AndAlso keyData = Keys.OemPeriod Then
                SendKeys.Send(",")
                Return True
            Else
                Return MyBase.ProcessCmdKey(msg, keyData)
            End If
        End If
    End Function

    Private Sub RibbonControl_CustomizeQatMenu(sender As Object, e As Ribbon.CustomizeQatMenuEventArgs) Handles RibbonControl.CustomizeQatMenu
        'remove options to hide some items (is not usefull)
        Do
            Call e.ItemLinks.RemoveAt(0)
        Loop Until e.ItemLinks.Count = 1
        Call e.ItemLinks.Insert(0, btnQATRestore)
    End Sub

    Private oQATBeginGroup As BarItemLink
    Private oQATMovePrev As BarItemLink
    Private oQATMoveNext As BarItemLink
    Private oQATRestoreToDefault As BarItemLink

    Private oQATLastItem As BarItemLink

    Private Sub pQATRestore()
        Call RibbonControl.Toolbar.ItemLinks.Clear()
        Call RibbonControl.Toolbar.ItemLinks.Add(btnNew)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnLoad)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnRollback, True)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnSave, True)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnSaveAs)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnImport, True)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnExport, True)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnPrint)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnProperties, True)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnSurface)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnPlotInfoCave, True)
        Call RibbonControl.Toolbar.ItemLinks.Add(btnPlotCalculate, True)
    End Sub

    Private Sub RibbonControl_ShowCustomizationMenu(sender As Object, e As Ribbon.RibbonCustomizationMenuEventArgs) Handles RibbonControl.ShowCustomizationMenu
        If oQATBeginGroup IsNot Nothing Then e.CustomizationMenu.ItemLinks.Remove(oQATBeginGroup)
        If oQATMovePrev IsNot Nothing Then e.CustomizationMenu.ItemLinks.Remove(oQATMovePrev)
        If oQATMoveNext IsNot Nothing Then e.CustomizationMenu.ItemLinks.Remove(oQATMoveNext)
        If oQATRestoreToDefault IsNot Nothing Then e.CustomizationMenu.ItemLinks.Remove(oQATRestoreToDefault)
        If e.HitInfo Is Nothing Then
            If e.Link IsNot Nothing Then
                If e.Link.Bar Is oTopDesignItemsBar OrElse e.Link.Bar Is oTopDesignLevelBar OrElse e.Link.Bar Is oLastUsedBar OrElse e.Link.Bar Is oFloatBar Then
                    e.ShowCustomizationMenu = False
                    mnuBar.ShowPopup(Cursor.Position)
                ElseIf e.Link.Bar Is oBottomDataBar OrElse e.Link.Bar Is oBottomDesignBar Then
                    e.ShowCustomizationMenu = False
                End If
            End If
        Else
            If e.HitInfo.InItem Then
                If e.HitInfo.InToolbar Then
                    Dim oLink As BarItemLink = e.Link
                    If Not TypeOf oLink Is DevExpress.XtraBars.Ribbon.Internal.RibbonQuickToolbarCustomizeItemLink Then
                        oQATBeginGroup = e.CustomizationMenu.ItemLinks.Add(btnQATBeginGroup, True)
                        btnQATBeginGroup.Checked = oLink.BeginGroup

                        oQATMovePrev = e.CustomizationMenu.ItemLinks.Add(btnQATMovePrev, True)
                        btnQATMovePrev.Enabled = RibbonControl.Toolbar.ItemLinks.IndexOf(oLink) > 0
                        oQATMoveNext = e.CustomizationMenu.ItemLinks.Add(btnQATMoveNext, False)
                        btnQATMoveNext.Enabled = RibbonControl.Toolbar.ItemLinks.IndexOf(oLink) < RibbonControl.Toolbar.ItemLinks.Count - 1

                        oQATRestoreToDefault = e.CustomizationMenu.ItemLinks.Add(btnQATRestore, True)

                        oQATLastItem = oLink
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub btnBeginGroup_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnQATBeginGroup.ItemClick
        If oQATLastItem IsNot Nothing Then
            oQATLastItem.BeginGroup = btnQATBeginGroup.Checked
        End If
    End Sub

    Private Sub btnQATMovePrev_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnQATMovePrev.ItemClick
        If oQATLastItem IsNot Nothing Then
            Dim oItem As BarItem = oQATLastItem.Item
            Dim iIndex As Integer = RibbonControl.Toolbar.ItemLinks.IndexOf(oQATLastItem)
            RibbonControl.Toolbar.ItemLinks.RemoveAt(iIndex)
            RibbonControl.Toolbar.ItemLinks.Insert(iIndex - 1, oItem)
        End If
    End Sub

    Private Sub btnQATRestore_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnQATRestore.ItemClick
        If UIHelpers.Dialogs.Msgbox(GetLocalizedString("main.warning34"), MsgBoxStyle.YesNo Or MsgBoxStyle.Exclamation, GetLocalizedString("main.warningtitle")) = vbYes Then
            Call pQATRestore()
        End If
    End Sub

    Private Sub btnQATMoveNext_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnQATMoveNext.ItemClick
        If oQATLastItem IsNot Nothing Then
            Dim oItem As BarItem = oQATLastItem.Item
            Dim iIndex As Integer = RibbonControl.Toolbar.ItemLinks.IndexOf(oQATLastItem)
            RibbonControl.Toolbar.ItemLinks.RemoveAt(iIndex)
            RibbonControl.Toolbar.ItemLinks.Insert(iIndex + 1, oitem)
        End If
    End Sub

    Private Sub chkViewShowSplay_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles chkViewShowSplay.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If oCurrentOptions.DrawSplay <> chkViewShowSplay.Checked Then
                oCurrentOptions.DrawSplay = chkViewShowSplay.Checked
                Call pObjectPropertyLoad()
                Call ObjectProperty_OnDrawInvalidate(sender, New cHolosViewer.cDrawInvalidateEventArgs(cHolosViewer.InvalidateType.Caves))
            End If
        End If
    End Sub

    Private Sub chkViewShowLRUD_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles chkViewShowLRUD.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If oCurrentOptions.DrawLRUD <> chkViewShowLRUD.Checked Then
                oCurrentOptions.DrawLRUD = chkViewShowLRUD.Checked
                Call pObjectPropertyLoad()
                Call ObjectProperty_OnDrawInvalidate(sender, New cHolosViewer.cDrawInvalidateEventArgs(cHolosViewer.InvalidateType.Caves))
            End If
        End If
    End Sub

    Private Sub chkViewShowShots_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles chkViewShowShots.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If oCurrentOptions.DrawSegments <> chkViewShowShots.Checked Then
                oCurrentOptions.DrawSegments = chkViewShowShots.Checked
                Call pObjectPropertyLoad()
                Call ObjectProperty_OnDrawInvalidate(sender, New cHolosViewer.cDrawInvalidateEventArgs(cHolosViewer.InvalidateType.Caves))
            End If
        End If
    End Sub

    Private Sub chkViewShowStation_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles chkViewShowStation.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If oCurrentOptions.DrawPoints <> chkViewShowStation.Checked Then
                oCurrentOptions.DrawPoints = chkViewShowStation.Checked
                Call pObjectPropertyLoad()
                Call ObjectProperty_OnDrawInvalidate(sender, New cHolosViewer.cDrawInvalidateEventArgs(cHolosViewer.InvalidateType.Caves))
            End If
        End If
    End Sub

    Private Sub chkViewShowStationLabel_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles chkViewShowStationLabel.CheckedChanged
        If Not bDisabledObjectPropertyEvent Then
            If oCurrentOptions.ShowPointText <> chkViewShowStationLabel.Checked Then
                oCurrentOptions.ShowPointText = chkViewShowStationLabel.Checked
                Call pObjectPropertyLoad()
                Call ObjectProperty_OnDrawInvalidate(sender, New cHolosViewer.cDrawInvalidateEventArgs(cHolosViewer.InvalidateType.Caves))
            End If
        End If
    End Sub

    Private Sub btnViewPlan_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewPlan.ItemClick
        If btnViewPlan.Checked Then Call pSurveyShowPlan()
    End Sub

    Private Sub btnViewProfile_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewProfile.ItemClick
        If btnViewProfile.Checked Then Call pSurveyShowProfile()
    End Sub

    Private Sub btnView3D_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnView3D.ItemClick
        If btnView3D.Checked Then Call pSurveyShow3D()
    End Sub

    Private Sub cboSegmentCaveList_ButtonPressed(sender As Object, e As ButtonPressedEventArgs) Handles cboMainSessionList.ButtonPressed
        If e.Button.Index = 1 Then
            Call pSurveyProperty(6, btnMainSessionList.EditValue)
        End If
    End Sub

    Private Sub cboSegmentSessionList_EditRequest(sender As Object, e As EventArgs) Handles cboSegmentSessionList.EditRequest
        Call pSurveyProperty(6, cboSegmentSessionList.EditValue)
    End Sub

    Private Sub cboSegmentCaveList_EditRequest(sender As Object, e As EventArgs) Handles cboSegmentCaveList.EditRequest, cboSegmentCaveBranchList.EditRequest
        Call pSurveyProperty(7, sender.editvalue)
    End Sub

    Private Sub cboMainCaveBranchList_ButtonPressed(sender As Object, e As ButtonPressedEventArgs) Handles cboMainCaveBranchList.ButtonPressed, cboMainCaveList.ButtonPressed
        If e.Button.Index = 1 Then
            Call pSurveyProperty(7, sender.editvalue)
        End If
    End Sub

    Private Sub btnContextMenu_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnContextMenu.ItemClick
        Dim oPoint As Point = New Point(dockFloatBar.Location.X, dockFloatBar.Location.Y + dockFloatBar.Height)
        Call pMapInfoMenu(oPoint)
        Call mnuDesignItem.ShowPopup(picMap.PointToScreen(oPoint))
    End Sub

    Private Sub btnToolsLastUsed_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnToolsLastUsed.CheckedChanged
        If btnToolsLastUsed.Checked Then
            Call pReloadUsedToolsBar()
        End If
    End Sub

    Private Sub btnToolsMostUsed_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnToolsMostUsed.CheckedChanged
        If btnToolsMostUsed.Checked Then
            Call pReloadUsedToolsBar()
        End If
    End Sub

    Private Sub btnViewToolbarItems_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewToolbarItems.CheckedChanged
        bDesignItemsBarVisible = btnViewToolbarItems.Checked
        oTopDesignItemsBar.Visible = bDesignItemsBarVisible
        My.Application.Settings.SetSetting("itemsbar", If(bDesignItemsBarVisible, "1", "0"))
    End Sub

    Private Sub btnViewToolbarLastUsedTools_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewToolbarLastUsedTools.CheckedChanged
        bLastUsedBarVisible = btnViewToolbarLastUsedTools.Checked
        oLastUsedBar.Visible = bLastUsedBarVisible
        My.Application.Settings.SetSetting("lastusedbar", If(bLastUsedBarVisible, "1", "0"))
    End Sub

    Private Sub btnViewToolbarFloatingBar_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewToolbarFloatingBar.CheckedChanged
        bFloatBarVisible = btnViewToolbarFloatingBar.Checked
        oFloatBar.Visible = bFloatBarVisible
        My.Application.Settings.SetSetting("floatbar", If(bFloatBarVisible, "1", "0"))
    End Sub

    Private Sub btnViewToolbarLevels_CheckedChanged(sender As Object, e As ItemClickEventArgs) Handles btnViewToolbarLevels.CheckedChanged
        bDesignLevelBarVisible = btnViewToolbarLevels.Checked
        oTopDesignLevelBar.Visible = bDesignLevelBarVisible
        My.Application.Settings.SetSetting("levelsbar", If(bDesignLevelBarVisible, "1", "0"))
    End Sub

    Private Sub btnUndo_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnUndo.ItemClick
        Call pSurveyUndo()
    End Sub

    Private Sub oTools_OnUndoChange(sender As Object, e As EventArgs) Handles oTools.OnUndoChanged
        Call pUndoRefresh()
    End Sub

    Private Sub o3DTools_OnItemDelete(Sender As Object, ToolEventArgs As cEditDesignToolsEventArgs) Handles o3DTools.OnItemDelete
        Call pGetCurrentDesignTools.BeginUndoSnapshot("Delete item", {ToolEventArgs.CurrentItem})
        If TypeOf ToolEventArgs.CurrentItem Is cItemChunk3D Then
            Call oHolos.DeleteChunk(DirectCast(ToolEventArgs.CurrentItem, cItemChunk3D))
        End If
    End Sub

    Private Sub oPlanTools_OnItemDeleted(Sender As Object, ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemDeleted, oProfileTools.OnItemDeleted, o3DTools.OnItemDeleted
        Call pGetCurrentDesignTools.CommitUndoSnapshot()
        Call pObjectPropertyLoad()
        Call pMapInvalidate()
    End Sub

    Private Sub oPlanTools_OnItemDelete(Sender As Object, ToolEventArgs As cEditDesignToolsEventArgs) Handles oPlanTools.OnItemDelete, oProfileTools.OnItemDelete
        Call pGetCurrentDesignTools.BeginUndoSnapshot("Delete item", {ToolEventArgs.CurrentItem})
    End Sub

    Private Sub pnlUndoPopup_BeforePopup(sender As Object, e As CancelEventArgs) Handles pnlUndoPopup.BeforePopup
        With pGetCurrentTools()
            If .Undo.IsUndoable Then
                Dim oUndoDropdown As cUndoDropDown
                If pnlUndoPopup.Controls.ContainsKey("_undopopup") Then
                    oUndoDropdown = pnlUndoPopup.Controls.Item("_undopopup")
                Else
                    pnlUndoPopup.Size = New Size(200.0F * Me.CurrentAutoScaleDimensions.Width / 96.0F, 240.0F * Me.CurrentAutoScaleDimensions.Height / 96.0F)
                    oUndoDropdown = New cUndoDropDown
                    oUndoDropdown.Name = "_undopopup"
                    AddHandler oUndoDropdown.OnUndo, AddressOf oUndoDropdown_Onundo
                    pnlUndoPopup.Controls.Add(oUndoDropDown)
                    oUndoDropDown.Dock = DockStyle.Fill
                End If
                Call oUndoDropdown.Rebind(.Undo)
            End If
        End With
    End Sub

    Private Sub oUndoDropdown_Onundo(sender As Object, e As cUndoDropDown.cUndoDropDownUndoEventArgs)
        Call pnlUndoPopup.HidePopup()
        For i As Integer = 0 To e.UndoActions
            Call pSurveyUndo()
        Next
    End Sub

    Private Sub cboMainBindCrossSections_QueryPopUp(sender As Object, e As CancelEventArgs) Handles cboMainBindCrossSections.QueryPopUp
        cboMainBindCrossSections.PopupView.RefreshData()
    End Sub

    Private Sub oHolos_OnKeyUp(sender As Object, e As KeyEventArgs) Handles oHolos.OnKeyUp
        If e.KeyCode = Keys.Delete Then
            Call pClipboardDelete()
        End If
    End Sub

    Private Sub h3D_GotFocus(sender As Object, e As EventArgs) Handles h3D.GotFocus
        Call oClipboardViewer_ClipboardChanged(Nothing, Nothing)
    End Sub

    Private Sub frmMain2_Move(sender As Object, e As EventArgs) Handles Me.Move
        Call picMap.Invalidate()
    End Sub

    Private Sub frmMain2_ResizeEnd(sender As Object, e As EventArgs) Handles Me.ResizeEnd
        Call picMap.Invalidate()
    End Sub

    Private Sub btnViewClipartGallery_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewClipartGallery.ItemClick
        Call pClipartShow()
    End Sub

    Private Sub btnViewBrushesAndPens_ItemClick(sender As Object, e As ItemClickEventArgs) Handles btnViewBrushesAndPens.ItemClick
        Call pBrushesAndPensShow()
    End Sub

    Private Sub oDockBrushesAndPens_OnItemApplyTo(Sender As Object, e As cDockBrushesAndPens.OnItemEventArgs) Handles oDockBrushesAndPens.OnItemApplyTo
        Dim oCurrentItem As cItem = pGetCurrentDesignTools.CurrentItem
        If oCurrentItem IsNot Nothing Then
            If TypeOf e.Item Is cCustomBrush Then
                If oCurrentItem.HaveBrush Then
                    Call pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo33"))
                    Dim oCustomBrush As cCustomBrush = e.Item
                    If oCustomBrush.Type = cBrush.BrushTypeEnum.User Then
                        If Not oSurvey.Brushes.Contains(oCustomBrush) Then
                            oSurvey.Brushes.Add(oCustomBrush)
                        End If
                    End If
                    oCurrentItem.Brush.ID = oCustomBrush.ID
                    Call pGetCurrentDesignTools.CommitUndoSnapshot()
                    Call pMapInvalidate()
                End If
            ElseIf TypeOf e.Item Is cCustomPen Then
                If oCurrentItem.HavePen Then
                    Call pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo33"))
                    Dim oCustomPen As cCustomPen = e.Item
                    If oCustomPen.Type = cPen.PenTypeEnum.User Then
                        If Not oSurvey.Pens.Contains(oCustomPen) Then
                            oSurvey.Pens.Add(oCustomPen)
                        End If
                    End If
                    oCurrentItem.Pen.ID = oCustomPen.ID
                    Call pGetCurrentDesignTools.CommitUndoSnapshot()
                    Call pMapInvalidate()
                End If
            End If
        End If
    End Sub

    Private Sub oDockBrushesAndPens_OnElementDelete(sender As Object, e As cDockBrushesAndPens.OnItemEventArgs) Handles oDockBrushesAndPens.OnElementDelete
        If TypeOf e.Item Is cCustomBrush Then
            Dim oCustomBrush As cCustomBrush = e.Item

            Dim oItemsToChange As List(Of cItem) = New List(Of cItem)
            For Each oItem As cItem In oSurvey.Plan.GetAllItems
                If oItem.Brush IsNot Nothing AndAlso oItem.Brush.ID = oCustomBrush.ID AndAlso oItem.Brush.Type = cBrush.BrushTypeEnum.User Then
                    oItemsToChange.Add(oItem)
                End If
            Next
            If oItemsToChange.Count > 0 Then
                Dim oNewItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oNewItem.AddRange(oItemsToChange)
                Call pGetCurrentDesignTools.SelectItem(oNewItem)
            End If

            'TODO: undo may be added BUT brush must be managed...without restore give a invalid object error cause deleted brush will not be restored
            'Call pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo33"))
            oSurvey.Brushes.Delete(oCustomBrush.ID)
            For Each oItem As cItem In oItemsToChange
                oItem.Brush.Type = cBrush.BrushTypeEnum.Custom
            Next
            'Call pGetCurrentDesignTools.CommitUndoSnapshot()
            Call pMapInvalidate()
        ElseIf TypeOf e.Item Is ccustompen Then
            Dim oCustomPen As cCustomPen = e.Item

            Dim oItemsToChange As List(Of cItem) = New List(Of cItem)
            For Each oItem As cItem In oSurvey.Plan.GetAllItems
                If oItem.Pen IsNot Nothing AndAlso oItem.Pen.ID = oCustomPen.ID AndAlso oItem.Pen.Type = cBrush.BrushTypeEnum.User Then
                    oItemsToChange.Add(oItem)
                End If
            Next
            If oItemsToChange.Count > 0 Then
                Dim oNewItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oNewItem.AddRange(oItemsToChange)
                Call pGetCurrentDesignTools.SelectItem(oNewItem)
            End If

            'TODO: undo may be added BUT brush must be managed...without restore give a invalid object error cause deleted brush will not be restored
            'Call pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo33"))
            oSurvey.Pens.Delete(oCustomPen.ID)
            For Each oItem As cItem In oItemsToChange
                oItem.Pen.Type = cPen.PenTypeEnum.Custom
            Next
            'Call pGetCurrentDesignTools.CommitUndoSnapshot()
            Call pMapInvalidate()
        End If
    End Sub

    Private Sub oDockBrushesAndPens_OnElementCustomToUser(sender As Object, e As cDockBrushesAndPens.OnItemEventArgs) Handles oDockBrushesAndPens.OnElementCustomToUser
        If TypeOf e.Item Is cCustomBrush Then
            Dim oCustomBrush As cCustomBrush = e.Item

            Dim oItemsToChange As List(Of cItem) = New List(Of cItem)
            For Each oItem As cItem In oSurvey.Plan.GetAllItems
                If oItem.Brush IsNot Nothing AndAlso oItem.Brush.Type = cBrush.BrushTypeEnum.Custom AndAlso oItem.Brush.GetID = oCustomBrush.ID Then
                    oItemsToChange.Add(oItem)
                End If
            Next
            If oItemsToChange.Count > 0 Then
                Dim oNewItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oNewItem.AddRange(oItemsToChange)
                Call pGetCurrentDesignTools.SelectItem(oNewItem)

                'TODO: undo may be added BUT brush must be managed...without restore give a invalid object error cause deleted brush will not be restored
                'Call pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo33"))
                If Not oSurvey.Brushes.Contains(oCustomBrush) Then
                    oSurvey.Brushes.Add(oCustomBrush)
                End If
                For Each oItem As cItem In oItemsToChange
                    oItem.Brush.ID = oCustomBrush.ID
                Next
                'Call pGetCurrentDesignTools.CommitUndoSnapshot()
            End If
        ElseIf TypeOf e.Item Is ccustompen Then
            Dim oCustompen As cCustomPen = e.Item

            Dim oItemsToChange As List(Of cItem) = New List(Of cItem)
            For Each oItem As cItem In oSurvey.Plan.GetAllItems
                If oItem.Pen IsNot Nothing AndAlso oItem.Pen.Type = cPen.PenTypeEnum.Custom AndAlso oItem.Pen.GetID = oCustompen.ID Then
                    oItemsToChange.Add(oItem)
                End If
            Next
            If oItemsToChange.Count > 0 Then
                Dim oNewItem As cItemItems = New cItemItems(oSurvey, oCurrentDesign, pGetCurrentDesignTools.CurrentLayer, cIItem.cItemCategoryEnum.None)
                Call oNewItem.AddRange(oItemsToChange)
                Call pGetCurrentDesignTools.SelectItem(oNewItem)

                'TODO: undo may be added BUT pen must be managed...without restore give a invalid object error cause deleted pen will not be restored
                'Call pGetCurrentDesignTools.BeginUndoSnapshot(modMain.GetLocalizedString("main.undo33"))
                If Not oSurvey.Pens.Contains(oCustompen) Then
                    oSurvey.Pens.Add(oCustompen)
                End If
                For Each oItem As cItem In oItemsToChange
                    oItem.Pen.ID = oCustompen.ID
                Next
                'Call pGetCurrentDesignTools.CommitUndoSnapshot()
            End If
        End If
    End Sub

    'Private Sub oHolos_OnContextMenuRequest(Sender As Object, e As Windows.Forms.MouseEventArgs) Handles oHolos.OnContextMenuRequest
    '    Call mnuDesignItem.ShowPopup(h3D.PointToScreen(New Point(e.X, e.Y)))
    'End Sub
End Class




