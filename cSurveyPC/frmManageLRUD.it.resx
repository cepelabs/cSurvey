<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="$this.Text" xml:space="preserve">
    <value>Gestisci dati LRUD:</value>
  </data>
  <data name="RadioButton1.Text" xml:space="preserve">
		<value>Imposta LRUD usando le lunghezze dei primi quattro splay</value>
	</data>
  <data name="RadioButton1b.Text" xml:space="preserve">
		<value>Usa le distanze come UDLR</value>
	</data>
  <data name="RadioButton1a.Text" xml:space="preserve">
		<value>Usa le distanze come LRUD</value>
	</data>
  <data name="frmMode1.Text" xml:space="preserve">
		<value>Modalità:</value>
	</data>
  <data name="RadioButton2.Text" xml:space="preserve">
		<value>Calcola LRUD dall'area definita dagli splay</value>
	</data>
  <data name="RadioButton3.Text" xml:space="preserve">
		<value>Calcola LRUD dall'area definita dai bordi disegnati</value>
	</data>
  <data name="cmdCancel.Text" xml:space="preserve">
		<value>Annulla</value>
	</data>
  <data name="cmdOk.Text" xml:space="preserve">
		<value>Elabora</value>
	</data>
  <data name="chkBackup.Properties.Caption" xml:space="preserve">
		<value>Salva dati attuali</value>
	</data>
  <data name="RadioButton4.Text" xml:space="preserve">
		<value>Recupera dati precedentemente salvati</value>
	</data>
  <data name="Label1.Text" xml:space="preserve">
		<value>Applica a:</value>
	</data>
  <data name="cboReplicateTo.Items" xml:space="preserve">
		<value>per i segmenti che hanno lo stesso ramo/grotta del segmento corrente</value>
	</data>
  <data name="cboReplicateTo.Items1" xml:space="preserve">
		<value>per i segmenti che hanno la stessa sessione del segmento corrente</value>
	</data>
  <data name="cboReplicateTo.Items2" xml:space="preserve">
		<value>per tutti i segmenti</value>
	</data>
  <data name="cboReplicateTo.Items3" xml:space="preserve">
		<value>per i segmenti selezionati</value>
	</data>
  <data name="Label2.Text" xml:space="preserve">
		<value>Salva dati in:</value>
	</data>
  <data name="frmBackup.Text" xml:space="preserve">
		<value>Salva:</value>
	</data>
  <data name="chkRestoreDeleteBackupAfterRestore.Properties.Caption" xml:space="preserve">
		<value>Elimina backup dopo il recupero</value>
	</data>
  <data name="Label5.Text" xml:space="preserve">
		<value>Recupera dati da:</value>
	</data>
  <data name="frmRestore.Text" xml:space="preserve">
		<value>Ripristina:</value>
	</data>
  <data name="Label35.Text" xml:space="preserve">
    <value>Int. angoli (o,v):</value>
  </data>
  <data name="frmMode2.Text" xml:space="preserve">
    <value>Opzioni:</value>
  </data>
  <data name="chkMode2OnlyCutSplay.Properties.Caption" xml:space="preserve">
    <value>Usa solo cut splay</value>
  </data>
  <data name="chkShotWithLRUD.Properties.Caption" xml:space="preserve">
    <value>con LRUD inseriti manualmente</value>
  </data>
  <data name="chkShotWithCalculatedLRUD.Properties.Caption" xml:space="preserve">
    <value>con LRUD precedentemente calcolati</value>
  </data>
  <data name="chkShotWithoutLRUD.Properties.Caption" xml:space="preserve">
    <value>senza LRUD</value>
  </data>
  <data name="chkMarkAsCalculated.Properties.Caption" xml:space="preserve">
    <value>Marca come calcolati</value>
  </data>
  <data name="lblSplayMode.Text" xml:space="preserve">
    <value>Modalità:</value>
  </data>
  <data name="cboMode2Mode.Items" xml:space="preserve">
    <value>Usa i dati degli splay come LRUD</value>
  </data>
  <data name="cboAction.Items" xml:space="preserve">
    <value>Imposta LRUD usando le lunghezze dei primi quattro splay</value>
  </data>
  <data name="cboAction.Items1" xml:space="preserve">
    <value>Calcola LRUD dall'area definita dagli splay</value>
  </data>
  <data name="cboAction.Items2" xml:space="preserve">
    <value>Calcola LRUD dall'area definita dai bordi disegnati</value>
  </data>
  <data name="cboAction.Items3" xml:space="preserve">
    <value>Recupera dati precedentemente salvati</value>
  </data>
  <data name="lblAction.Text" xml:space="preserve">
    <value>Azione:</value>
  </data>
</root>